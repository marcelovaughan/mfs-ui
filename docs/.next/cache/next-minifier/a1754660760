{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[270],{\"3MLj\":function(e,n,t){\"use strict\";t.r(n);var o=t(\"mXGw\"),s=t.n(o),a=t(\"mKyP\"),r=t(\"h7Hf\"),i=t(\"O8uh\"),l=s.a.createElement,u=Object(a.a)({props:{MuiButtonBase:{disableRipple:!0}}}),p=l(r.a,{theme:u},l(i.a,null,\"Change default props\"));n.default=function(){return p}},\"5wQA\":function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return p}));var o=t(\"mXGw\"),s=t.n(o),a=t(\"e+1t\"),r=t(\"kVtE\"),i=s.a.createElement,l=t(\"KUnY\"),u=t(\"f3Wg\");function p(e){var n=e.demos,t=e.docs;return i(a.a,{demos:n,docs:t,requireDemo:l})}p.getInitialProps=function(){var e=Object(r.a)({pageFilename:\"customization/globals\",requireRaw:u});return{demos:e.demos,docs:e.docs}}},\"7LeB\":function(e,n){e.exports=\"# crwdns93552:0crwdne93552:0\\n\\n<p class=\\\"description\\\">crwdns93554:0crwdne93554:0</p>\\n\\n## crwdns93556:0crwdne93556:0\\n\\ncrwdns93558:0crwdne93558:0 crwdns93560:0crwdne93560:0\\n\\n```js\\ncrwdns93562:0crwdne93562:0\\n```\\n\\ncrwdns93564:0crwdne93564:0\\n\\ncrwdns93566:0crwdne93566:0 crwdns93568:0crwdne93568:0 crwdns93570:0crwdne93570:0\\n\\n## crwdns132728:0crwdne132728:0\\n\\ncrwdns132730:0crwdne132730:0 crwdns132732:0crwdne132732:0\\n\\n```jsx\\ncrwdns132734:0{\\n          WebkitFontSmoothing: 'auto',\\n        }crwdne132734:0\\ncrwdns132736:0{theme}crwdnd132736:0{children}crwdne132736:0\\n```\\n\\n## crwdns132738:0crwdne132738:0\\n\\ncrwdns132740:0crwdne132740:0 crwdns132742:0crwdne132742:0\\n\\n```js\\ncrwdns132744:0crwdne132744:0\\n    crwdns132746:0crwdne132746:0\\n```\\n\\ncrwdns132748:0crwdne132748:0\"},\"910j\":function(e,n){e.exports='# \\u5168\\u5c40\\u6837\\u5f0f\\n\\n<p class=\"description\">Overrides\\u4f7f\\u4f60\\u53ef\\u4ee5\\u7edf\\u4e00\\u4fee\\u6539\\u67d0\\u4e2a\\u7ec4\\u4ef6\\u6240\\u6709\\u5bf9\\u8c61\\u7684\\u6837\\u5f0f\\uff0c\\u800cprops\\u5219\\u80fd\\u4fee\\u6539\\u67d0\\u4e2a\\u7ec4\\u4ef6\\u7684\\u9ed8\\u8ba4\\u5c5e\\u6027\\u503c\\u3002</p>\\n\\n## CSS\\n\\n\\u5f53\\u914d\\u7f6e\\u53d8\\u91cf\\u4e0d\\u591f\\u5f3a\\u5927\\u7684\\u65f6\\u5019\\uff0c\\u60a8\\u53ef\\u4ee5\\u4f7f\\u7528`theme`\\u7684`overrides`\\u6765\\u8ba9Material-UI\\u9690\\u5f0f\\u5730\\u4e3a\\u60a8\\u6ce8\\u5165**\\u6837\\u5f0f\\u89c4\\u5219**\\u3002 \\u8fd9\\u662f\\u4e00\\u4e2a\\u975e\\u5e38\\u5f3a\\u5927\\u7684\\u7279\\u6027\\u3002\\n\\n```js\\nconst theme = createMuiTheme({\\n  overrides: {\\n    // Style sheet name \\u269b\\ufe0f\\n    MuiButton: {\\n      // Name of the rule\\n      text: {\\n        // Some CSS\\n        color: \\'white\\',\\n      },\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/GlobalCss.js\"}}\\n\\n\\u6bcf\\u4e2a\\u7ec4\\u4ef6\\u53ef\\u81ea\\u5b9a\\u4e49\\u7684\\u90e8\\u5206\\u5217\\u5728\\u6587\\u6863\\u7684**Component API**\\u90e8\\u5206\\u3002 \\u4f8b\\u5982\\uff0c\\u4f60\\u53ef\\u4ee5\\u770b\\u4e00\\u4e0b[Button](/api/button/#css)\\uff0c \\u800c\\u4e14\\u4f60\\u603b\\u53ef\\u4ee5\\u67e5\\u9605 [implementation](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js)\\u3002\\n\\n## \\u5168\\u5c40 CSS\\n\\n\\u5982\\u679c\\u4f60\\u4f7f\\u7528 [CssBaseline](/components/css-baseline/) \\u7ec4\\u4ef6\\u6765\\u5e94\\u7528\\u5168\\u5c40\\u91cd\\u7f6e(global resets)\\uff0c\\u90a3\\u4e48\\u4e5f\\u53ef\\u4ee5\\u7528\\u5b83\\u6765\\u5e94\\u7528\\u5168\\u5c40\\u6837\\u5f0f\\u3002 \\u5c31\\u50cf\\u8fd9\\u6837\\uff1a\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  overrides: {\\n    MuiCssBaseline: {\\n      \\'@global\\': {\\n        html: {\\n          WebkitFontSmoothing: \\'auto\\',\\n        },\\n      },\\n    },\\n  },\\n});\\n\\n// ...\\nreturn (\\n  <ThemeProvider theme={theme}>\\n    <CssBaseline />\\n    {children}\\n  </ThemeProvider>\\n);\\n```\\n\\n## \\u9ed8\\u8ba4\\u5c5e\\u6027\\n\\n\\u60a8\\u53ef\\u4ee5\\u66f4\\u6539\\u6240\\u6709Material-UI\\u7ec4\\u4ef6\\u7684\\u9ed8\\u8ba4\\u5c5e\\u6027\\u3002 \\u8be5\\u7528\\u4f8b\\u5c55\\u793a\\u4e86\\u5728 `\\u4e3b\\u9898` \\u4e2d\\u7684\\u4e00\\u4e2a `props` \\u952e(key)\\u3002 \\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // \\u7ec4\\u4ef6\\u7684\\u540d\\u79f0 \\u269b\\ufe0f\\n    MuiButtonBase: {\\n      // \\u9700\\u8981\\u4fee\\u6539\\u7684\\u9ed8\\u8ba4\\u5c5e\\u6027\\n      disableRipple: true, // \\u5728\\u6574\\u4e2a\\u7a0b\\u5e8f\\u4e2d\\u6ca1\\u6709\\u66f4\\u591a\\u7684ripple \\ud83d\\udca3!\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/DefaultProps.js\"}}'},Bllg:function(e,n){e.exports='# \\u30b0\\u30ed\\u30fc\\u30d0\\u30eb\\n\\n<p class=\"description\">\\u30aa\\u30fc\\u30d0\\u30fc\\u30e9\\u30a4\\u30c9\\u30ad\\u30fc\\u3092\\u4f7f\\u7528\\u3059\\u308b\\u3068\\u3001\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u30bf\\u30a4\\u30d7\\u306e\\u3059\\u3079\\u3066\\u306e\\u30a4\\u30f3\\u30b9\\u30bf\\u30f3\\u30b9\\u306e\\u5916\\u89b3\\u3092\\u30ab\\u30b9\\u30bf\\u30de\\u30a4\\u30ba\\u3067\\u304d\\u3001\\u30d7\\u30ed\\u30c3\\u30d7\\u30ad\\u30fc\\u3092\\u4f7f\\u7528\\u3059\\u308b\\u3068\\u3001\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306e\\u30d7\\u30ed\\u30c3\\u30d7\\u306e\\u30c7\\u30d5\\u30a9\\u30eb\\u30c8\\u5024\\u3092\\u5909\\u66f4\\u3067\\u304d\\u307e\\u3059\\u3002</p>\\n\\n## CSS\\n\\n\\u8a2d\\u5b9a\\u5909\\u6570\\u304c\\u5341\\u5206\\u306b\\u5f37\\u529b\\u3067\\u306a\\u3044\\u5834\\u5408\\u306f\\u3001 `theme` \\u306e</code>\\u30ad\\u30fc\\u3092`overrides</0> \\u3057\\u3001Material-UI\\u306b\\u3088\\u3063\\u3066DOM\\u306b\\u6ce8\\u5165\\u3055\\u308c\\u308b<strong>every single style</strong>\\u3092\\u5909\\u66f4\\u3067\\u304d\\u308b\\u3088\\u3046\\u306b\\u3057\\u307e\\u3059\\u3002\\n\\u305d\\u308c\\u306f\\u672c\\u5f53\\u306b\\u5f37\\u529b\\u306a\\u6a5f\\u80fd\\u3067\\u3059\\u3002</p>\\n\\n<pre><code class=\"js\">const theme = createMuiTheme({\\n  overrides: {\\n    // Style sheet name \\u269b\\ufe0f\\n    MuiButton: {\\n      // Name of the rule\\n      text: {\\n        // Some CSS\\n        color: \\'white\\',\\n      },\\n    },\\n  },\\n});\\n`</pre> \\n\\n{{\"demo\": \"pages/customization/globals/GlobalCss.js\"}}\\n\\n\\u5404\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306e\\u30ab\\u30b9\\u30bf\\u30de\\u30a4\\u30ba\\u30dd\\u30a4\\u30f3\\u30c8\\u306e\\u4e00\\u89a7\\u306f\\u3001 **Component API**\\u306e\\u30bb\\u30af\\u30b7\\u30e7\\u30f3\\u306b\\u8a18\\u8f09\\u3055\\u308c\\u3066\\u3044\\u307e\\u3059\\u3002 \\u305f\\u3068\\u3048\\u3070\\u3001 [Button](/api/button/#css)\\u306f\\u3053\\u3061\\u3089\\u3067\\u3059\\u3002 \\u3042\\u308b\\u3044\\u306f\\u3001\\u3044\\u3064\\u3067\\u3082[\\u5b9f\\u88c5\\u3092\\u8abf\\u3079\\u308b\\u3053\\u3068\\u304c\\u3067\\u304d\\u307e\\u3059](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js)\\u3002\\n\\n## Global CSS\\n\\nIf you are using the [CssBaseline](/components/css-baseline/) component to apply global resets, it can also be used to apply global styles. \\u4f8b\\u3048\\u3070\\uff1a\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  overrides: {\\n    MuiCssBaseline: {\\n      \\'@global\\': {\\n        html: {\\n          WebkitFontSmoothing: \\'auto\\',\\n        },\\n      },\\n    },\\n  },\\n});\\n\\n// ...\\nreturn (\\n  <ThemeProvider theme={theme}>\\n    <CssBaseline />\\n    {children}\\n  </ThemeProvider>\\n);\\n```\\n\\n## Default props\\n\\n\\u3059\\u3079\\u3066\\u306e Material-UI \\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306edefault props\\u3092\\u5909\\u66f4\\u3067\\u304d\\u307e\\u3059\\u3002 A `props` key is exposed in the `theme` for this use case.\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // Name of the component \\u269b\\ufe0f\\n    MuiButtonBase: {\\n      // The default props to change\\n      disableRipple: true, // No more ripple, on the whole application \\ud83d\\udca3!\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/DefaultProps.js\"}}'},Hm0b:function(e,n){e.exports='# Globales\\n\\n<p class=\"description\">The overrides key enables you to customize the appearance of all instances of a component type, while the props key enables you to change the default value(s) of a component\\'s props.</p>\\n\\n## CSS\\n\\nWhen the configuration variables aren\\'t powerful enough, you can take advantage of the `overrides` key of the `theme` to potentially change **every single style** injected by Material-UI into the DOM. That\\'s a really powerful feature.\\n\\n```js\\nconst theme = createMuiTheme({\\n  overrides: {\\n    // Style sheet name \\u269b\\ufe0f\\n    MuiButton: {\\n      // Name of the rule\\n      text: {\\n        // Some CSS\\n        color: \\'white\\',\\n      },\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/GlobalCss.js\"}}\\n\\nThe list of these customization points for each component is documented under the **Component API** section. For instance, you can have a look at the [Button](/api/button/#css). Alternatively, you can always have a look at the [implementation](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js).\\n\\n## Global CSS\\n\\nIf you are using the [CssBaseline](/components/css-baseline/) component to apply global resets, it can also be used to apply global styles. Por ejemplo:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  overrides: {\\n    MuiCssBaseline: {\\n      \\'@global\\': {\\n        html: {\\n          WebkitFontSmoothing: \\'auto\\',\\n        },\\n      },\\n    },\\n  },\\n});\\n\\n// ...\\nreturn (\\n  <ThemeProvider theme={theme}>\\n    <CssBaseline />\\n    {children}\\n  </ThemeProvider>\\n);\\n```\\n\\n## Default props\\n\\nYou can change the default props of all the Material-UI components. A `props` key is exposed in the `theme` for this use case.\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // Name of the component \\u269b\\ufe0f\\n    MuiButtonBase: {\\n      // The default props to change\\n      disableRipple: true, // No more ripple, on the whole application \\ud83d\\udca3!\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/DefaultProps.js\"}}'},KUnY:function(e,n,t){var o={\"./DefaultProps.js\":\"3MLj\",\"./DefaultProps.tsx\":\"Xcp9\",\"./GlobalCss.js\":\"fJS8\",\"./GlobalCss.tsx\":\"NgfX\"};function s(e){var n=a(e);return t(n)}function a(e){if(!t.o(o,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return o[e]}s.keys=function(){return Object.keys(o)},s.resolve=a,e.exports=s,s.id=\"KUnY\"},KWTn:function(e,n){e.exports='# Globale Objekte\\n\\n<p class=\"description\">Mit dem \\xdcberschreibungsschl\\xfcssel k\\xf6nnen Sie das Erscheinungsbild aller Instanzen eines Komponententyps anpassen, w\\xe4hrend Sie mit dem Eigenschaften die Standardwerte der Requisiten einer Komponente \\xe4ndern k\\xf6nnen.</p>\\n\\n## CSS\\n\\nWenn die Konfigurationsvariablen nicht ausreichen, k\\xf6nnen Sie die Vorteile der `overrides` Schl\\xfcssel des `Theme` verwenden, um potenziell jeden einzelnen von Material-UI in den DOM eingef\\xfcgten **Stil** zu \\xe4ndern. Das ist eine sehr m\\xe4chtige Funktion.\\n\\n```js\\nconst theme = createMuiTheme({\\n  overrides: {\\n    // Style sheet name \\u269b\\ufe0f\\n    MuiButton: {\\n      // Name of the rule\\n      text: {\\n        // Some CSS\\n        color: \\'white\\',\\n      },\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/GlobalCss.js\"}}\\n\\nDie Liste dieser Anpassungspunkte f\\xfcr jede Komponente ist unter der **Komponenten-API** Sektion dokumentiert. Zum Beispiel k\\xf6nnen Sie sich den [Button](/api/button/#css) anschauen. Alternativ k\\xf6nnen Sie sich immer die [Implementierung](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js) ansehen.\\n\\n## Globales CSS\\n\\nIf you are using the [CssBaseline](/components/css-baseline/) component to apply global resets, it can also be used to apply global styles. Zum Beispiel:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  overrides: {\\n    MuiCssBaseline: {\\n      \\'@global\\': {\\n        html: {\\n          WebkitFontSmoothing: \\'auto\\',\\n        },\\n      },\\n    },\\n  },\\n});\\n\\n// ...\\nreturn (\\n  <ThemeProvider theme={theme}>\\n    <CssBaseline />\\n    {children}\\n  </ThemeProvider>\\n);\\n```\\n\\n## Standard-Eigenschaften\\n\\nSie k\\xf6nnen die Standard-Eigenschaften aller Komponenten der Material-UI \\xe4ndern. A `props` key is exposed in the `theme` for this use case.\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // Name der Komponente \\u269b\\ufe0f\\n    MuiButtonBase: {\\n      // Die Standardeigenschaften, die ver\\xe4ndert werden sollen\\n      disableRipple: true, // Keine Welleneffekte in der ganzen Applikation \\ud83d\\udca3!\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/DefaultProps.js\"}}'},NgfX:function(e,n,t){\"use strict\";t.r(n);var o=t(\"mXGw\"),s=t.n(o),a=t(\"mKyP\"),r=t(\"h7Hf\"),i=t(\"O8uh\"),l=s.a.createElement,u=Object(a.a)({overrides:{MuiButton:{text:{background:\"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",borderRadius:3,border:0,color:\"white\",height:48,padding:\"0 30px\",boxShadow:\"0 3px 5px 2px rgba(255, 105, 135, .3)\"}}}}),p=l(r.a,{theme:u},l(i.a,null,\"Overrides CSS\"));n.default=function(){return p}},Xcp9:function(e,n,t){\"use strict\";t.r(n);var o=t(\"mXGw\"),s=t.n(o),a=t(\"mKyP\"),r=t(\"h7Hf\"),i=t(\"O8uh\"),l=s.a.createElement,u=Object(a.a)({props:{MuiButtonBase:{disableRipple:!0}}}),p=l(r.a,{theme:u},l(i.a,null,\"Change default props\"));n.default=function(){return p}},aj7v:function(e,n){e.exports='# Globals\\n\\n<p class=\"description\">The overrides key enables you to customize the appearance of all instances of a component type, while the props key enables you to change the default value(s) of a component\\'s props.</p>\\n\\n## CSS\\n\\nWhen the configuration variables aren\\'t powerful enough, you can take advantage of the\\n`overrides` key of the `theme` to potentially change **every single style** injected by Material-UI into the DOM.\\nThat\\'s a really powerful feature.\\n\\n```js\\nconst theme = createMuiTheme({\\n  overrides: {\\n    // Style sheet name \\u269b\\ufe0f\\n    MuiButton: {\\n      // Name of the rule\\n      text: {\\n        // Some CSS\\n        color: \\'white\\',\\n      },\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/GlobalCss.js\"}}\\n\\nThe list of these customization points for each component is documented under the **Component API** section.\\nFor instance, you can have a look at the [Button](/api/button/#css).\\nAlternatively, you can always have a look at the [implementation](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js).\\n\\n## Global CSS\\n\\nIf you are using the [CssBaseline](/components/css-baseline/) component to apply global resets, it can also be used to apply global styles. For instance:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  overrides: {\\n    MuiCssBaseline: {\\n      \\'@global\\': {\\n        html: {\\n          WebkitFontSmoothing: \\'auto\\',\\n        },\\n      },\\n    },\\n  },\\n});\\n\\n// ...\\nreturn (\\n  <ThemeProvider theme={theme}>\\n    <CssBaseline />\\n    {children}\\n  </ThemeProvider>\\n);\\n```\\n\\n## Default props\\n\\nYou can change the default props of all the Material-UI components.\\nA `props` key is exposed in the `theme` for this use case.\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // Name of the component \\u269b\\ufe0f\\n    MuiButtonBase: {\\n      // The default props to change\\n      disableRipple: true, // No more ripple, on the whole application \\ud83d\\udca3!\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/DefaultProps.js\"}}\\n'},f3Wg:function(e,n,t){var o={\"./DefaultProps.js\":\"uGOX\",\"./DefaultProps.tsx\":\"g0kn\",\"./GlobalCss.js\":\"x7Rp\",\"./GlobalCss.tsx\":\"tNZq\",\"./globals-aa.md\":\"7LeB\",\"./globals-de.md\":\"KWTn\",\"./globals-es.md\":\"Hm0b\",\"./globals-fr.md\":\"yp82\",\"./globals-ja.md\":\"Bllg\",\"./globals-pt.md\":\"nbUd\",\"./globals-ru.md\":\"qw+T\",\"./globals-zh.md\":\"910j\",\"./globals.md\":\"aj7v\"};function s(e){var n=a(e);return t(n)}function a(e){if(!t.o(o,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return o[e]}s.keys=function(){return Object.keys(o)},s.resolve=a,e.exports=s,s.id=\"f3Wg\"},fJS8:function(e,n,t){\"use strict\";t.r(n);var o=t(\"mXGw\"),s=t.n(o),a=t(\"mKyP\"),r=t(\"h7Hf\"),i=t(\"O8uh\"),l=s.a.createElement,u=Object(a.a)({overrides:{MuiButton:{text:{background:\"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",borderRadius:3,border:0,color:\"white\",height:48,padding:\"0 30px\",boxShadow:\"0 3px 5px 2px rgba(255, 105, 135, .3)\"}}}}),p=l(r.a,{theme:u},l(i.a,null,\"Overrides CSS\"));n.default=function(){return p}},g0kn:function(e,n){e.exports=\"import React from 'react';\\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\\nimport Button from '@material-ui/core/Button';\\n\\nconst theme = createMuiTheme({\\n  props: {\\n    // Name of the component \\u269b\\ufe0f\\n    MuiButtonBase: {\\n      // The default props to change\\n      disableRipple: true, // No more ripple, on the whole application \\ud83d\\udca3!\\n    },\\n  },\\n});\\n\\nfunction DefaultProps() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <Button>Change default props</Button>\\n    </ThemeProvider>\\n  );\\n}\\n\\nexport default DefaultProps;\\n\"},nbUd:function(e,n){e.exports='# Globais\\n\\n<p class=\"description\">A chave <code>overrides</code> permite que voc\\xea customize a apar\\xeancia de todas as inst\\xe2ncias de um tipo de componente, enquanto a propriedade chave permite que voc\\xea altere os valores padr\\xe3o das propriedades de um componente.</p>\\n\\n## CSS\\n\\nQuando as vari\\xe1veis de configura\\xe7\\xe3o n\\xe3o s\\xe3o poderosas o suficiente, voc\\xea pode tirar vantagem com o `overrides`, chave do `theme` para potencialmente alterar **cada estilo \\xfanico** injetado por Material-UI no DOM. Esse \\xe9 um recurso realmente poderoso.\\n\\n```js\\nconst theme = createMuiTheme({\\n  overrides: {\\n    // Nome da folha de estilo \\u269b\\ufe0f\\n    MuiButton: {\\n      // Nome da regra\\n      text: {\\n        // Algum CSS\\n        color: \\'white\\',\\n      },\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/GlobalCss.js\"}}\\n\\nA lista desses pontos de customiza\\xe7\\xe3o de cada componente est\\xe1 documentada na se\\xe7\\xe3o **API do componente**. Por exemplo, voc\\xea pode dar uma olhada no [Bot\\xe3o](/api/button/#css). Alternativamente, voc\\xea pode sempre dar uma olhada na [implementa\\xe7\\xe3o](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js).\\n\\n## CSS global\\n\\nSe voc\\xea estiver usando o componente [CssBaseline](/components/css-baseline/) para aplicar o reset global, ele pode tamb\\xe9m ser usado para aplica\\xe7\\xe3o de estilos globais. Por exemplo:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  overrides: {\\n    MuiCssBaseline: {\\n      \\'@global\\': {\\n        html: {\\n          WebkitFontSmoothing: \\'auto\\',\\n        },\\n      },\\n    },\\n  },\\n});\\n\\n// ...\\nreturn (\\n  <ThemeProvider theme={theme}>\\n    <CssBaseline />\\n    {children}\\n  </ThemeProvider>\\n);\\n```\\n\\n## Propriedades padr\\xe3o\\n\\nVoc\\xea pode alterar as propriedades padr\\xe3o de todos os componentes de Material-UI. A chave `props` \\xe9 exposta no `theme` para este caso de uso.\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // Nome do componente \\u269b\\ufe0f\\n    MuiButtonBase: {\\n      // As propriedades padr\\xe3o para mudar\\n      disableRipple: true, // Sem efeito cascata, em toda a aplica\\xe7\\xe3o \\ud83d\\udca3!\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/DefaultProps.js\"}}'},\"qw+T\":function(e,n){e.exports='# \\u0413\\u043b\\u043e\\u0431\\u0430\\u043b\\u044c\\u043d\\u0430\\u044f \\u043d\\u0430\\u0441\\u0442\\u0440\\u043e\\u0439\\u043a\\u0430\\n\\n<p class=\"description\">The overrides key enables you to customize the appearance of all instances of a component type, while the props key enables you to change the default value(s) of a component\\'s props.</p>\\n\\n## CSS\\n\\n\\u0415\\u0441\\u043b\\u0438 \\u043d\\u0430\\u0441\\u0442\\u0440\\u043e\\u0435\\u043a \\u043a\\u043e\\u043d\\u0444\\u0438\\u0433\\u0443\\u0440\\u0430\\u0446\\u0438\\u0438 \\u043d\\u0435\\u0434\\u043e\\u0441\\u0442\\u0430\\u0442\\u043e\\u0447\\u043d\\u043e, \\u043c\\u043e\\u0436\\u043d\\u043e \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u044c \\u043a\\u043b\\u044e\\u0447 `overrides` \\u0443 \\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u0430 `theme`, \\u0447\\u0442\\u043e\\u0431\\u044b \\u0438\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c **\\u0430\\u0431\\u0441\\u043e\\u043b\\u044e\\u0442\\u043d\\u043e \\u043b\\u044e\\u0431\\u043e\\u0439 \\u0441\\u0442\\u0438\\u043b\\u044c**, \\u043a\\u043e\\u0442\\u043e\\u0440\\u044b\\u0439 Material-UI \\u0432\\u043d\\u043e\\u0441\\u0438\\u0442 \\u0432 DOM. \\u042d\\u0442\\u043e \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0442\\u0435\\u043b\\u044c\\u043d\\u043e \\u043c\\u043e\\u0449\\u043d\\u0430\\u044f \\u0448\\u0442\\u0443\\u043a\\u0430.\\n\\n```js\\nconst theme = createMuiTheme({\\n  overrides: {\\n    // Style sheet name \\u269b\\ufe0f\\n    MuiButton: {\\n      // Name of the rule\\n      text: {\\n        // Some CSS\\n        color: \\'white\\',\\n      },\\n    },\\n  },\\n});\\n```\\n\\n{{\"\\u0414\\u0435\\u043c\\u043e\": \"pages/customization/globals/GlobalCss.js\"}}\\n\\n\\u0421\\u043f\\u0438\\u0441\\u043e\\u043a \\u0432\\u0441\\u0435\\u0445 \\u0432\\u043e\\u0437\\u043c\\u043e\\u0436\\u043d\\u044b\\u0445 \\u043a\\u0430\\u0441\\u0442\\u043e\\u043c\\u0438\\u0437\\u0430\\u0446\\u0438\\u0439 \\u0434\\u043b\\u044f \\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442 \\u0437\\u0430\\u0434\\u043e\\u043a\\u0443\\u043c\\u0435\\u043d\\u0442\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d \\u0432 \\u0440\\u0430\\u0437\\u0434\\u0435\\u043b\\u0435 **Component API**. \\u041d\\u0430\\u043f\\u0440\\u0438\\u043c\\u0435\\u0440, \\u0432\\u044b \\u043c\\u043e\\u0436\\u0435\\u0442\\u0435 \\u0432\\u0437\\u0433\\u043b\\u044f\\u043d\\u0443\\u0442\\u044c \\u043d\\u0430 \\u043a\\u043d\\u043e\\u043f\\u043a\\u0443 [Button](/api/button/#css). \\u041a\\u0440\\u043e\\u043c\\u0435 \\u0442\\u043e\\u0433\\u043e, \\u0432\\u044b \\u0432\\u0441\\u0435\\u0433\\u0434\\u0430 \\u043c\\u043e\\u0436\\u0435\\u0442\\u0435 \\u0432\\u0437\\u0433\\u043b\\u044f\\u043d\\u0443\\u0442\\u044c \\u043d\\u0430 [\\u0440\\u0435\\u0430\\u043b\\u0438\\u0437\\u0430\\u0446\\u0438\\u044e](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js).\\n\\n## \\u0413\\u043b\\u043e\\u0431\\u0430\\u043b\\u044c\\u043d\\u044b\\u0439 CSS\\n\\nIf you are using the [CssBaseline](/components/css-baseline/) component to apply global resets, it can also be used to apply global styles. \\u041d\\u0430\\u043f\\u0440\\u0438\\u043c\\u0435\\u0440:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  overrides: {\\n    MuiCssBaseline: {\\n      \\'@global\\': {\\n        html: {\\n          WebkitFontSmoothing: \\'auto\\',\\n        },\\n      },\\n    },\\n  },\\n});\\n\\n// ...\\nreturn (\\n  <ThemeProvider theme={theme}>\\n    <CssBaseline />\\n    {children}\\n  </ThemeProvider>\\n);\\n```\\n\\n## \\u041d\\u0430\\u0441\\u0442\\u0440\\u043e\\u0439\\u043a\\u0430 props\\n\\n\\u0412\\u044b \\u043c\\u043e\\u0436\\u0435\\u0442\\u0435 \\u0438\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c \\u0441\\u0432\\u043e\\u0439\\u0441\\u0442\\u0432\\u043e props \\u043b\\u044e\\u0431\\u043e\\u0439 \\u0438\\u0437 \\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442 Material-UI. A `props` key is exposed in the `theme` for this use case.\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // \\u041d\\u0430\\u0437\\u0432\\u0430\\u043d\\u0438\\u0435 \\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442\\u044b\\n    MuiButtonBase: {\\n      // \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440 \\u043e\\u0434\\u043d\\u043e\\u0433\\u043e \\u0438\\u0437 \\u0441\\u0442\\u0430\\u043d\\u0434\\u0430\\u0440\\u0442\\u043d\\u044b\\u0445 \\u0441\\u0432\\u043e\\u0439\\u0441\\u0442\\u0432 props\\n      disableRipple: true, // \\u0421\\u043a\\u0430\\u0436\\u0438 \\u041d\\u0415\\u0422 \\u044d\\u0444\\u0444\\u0435\\u043a\\u0442\\u0443 \\u0440\\u0430\\u0441\\u0445\\u043e\\u0434\\u044f\\u0449\\u0438\\u0445\\u0441\\u044f \\u0432\\u043e\\u043b\\u043d \\ud83d\\udca3!\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/DefaultProps.js\"}}'},sxgg:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/customization/globals\",function(){return t(\"5wQA\")}])},tNZq:function(e,n){e.exports=\"import React from 'react';\\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\\nimport Button from '@material-ui/core/Button';\\n\\nconst theme = createMuiTheme({\\n  overrides: {\\n    // Style sheet name \\u269b\\ufe0f\\n    MuiButton: {\\n      // Name of the rule\\n      text: {\\n        // Some CSS\\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\\n        borderRadius: 3,\\n        border: 0,\\n        color: 'white',\\n        height: 48,\\n        padding: '0 30px',\\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\\n      },\\n    },\\n  },\\n});\\n\\nfunction OverridesCss() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <Button>Overrides CSS</Button>\\n    </ThemeProvider>\\n  );\\n}\\n\\nexport default OverridesCss;\\n\"},uGOX:function(e,n){e.exports=\"import React from 'react';\\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\\nimport Button from '@material-ui/core/Button';\\n\\nconst theme = createMuiTheme({\\n  props: {\\n    // Name of the component \\u269b\\ufe0f\\n    MuiButtonBase: {\\n      // The default props to change\\n      disableRipple: true, // No more ripple, on the whole application \\ud83d\\udca3!\\n    },\\n  },\\n});\\n\\nfunction DefaultProps() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <Button>Change default props</Button>\\n    </ThemeProvider>\\n  );\\n}\\n\\nexport default DefaultProps;\\n\"},x7Rp:function(e,n){e.exports=\"import React from 'react';\\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\\nimport Button from '@material-ui/core/Button';\\n\\nconst theme = createMuiTheme({\\n  overrides: {\\n    // Style sheet name \\u269b\\ufe0f\\n    MuiButton: {\\n      // Name of the rule\\n      text: {\\n        // Some CSS\\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\\n        borderRadius: 3,\\n        border: 0,\\n        color: 'white',\\n        height: 48,\\n        padding: '0 30px',\\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\\n      },\\n    },\\n  },\\n});\\n\\nfunction OverridesCss() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <Button>Overrides CSS</Button>\\n    </ThemeProvider>\\n  );\\n}\\n\\nexport default OverridesCss;\\n\"},yp82:function(e,n){e.exports='# Variables globales\\n\\n<p class=\"description\">The overrides key enables you to customize the appearance of all instances of a component type, while the props key enables you to change the default value(s) of a component\\'s props.</p>\\n\\n## CSS\\n\\nWhen the configuration variables aren\\'t powerful enough, you can take advantage of the `overrides` key of the `theme` to potentially change **every single style** injected by Material-UI into the DOM. That\\'s a really powerful feature.\\n\\n```js\\nconst theme = createMuiTheme({\\n  overrides: {\\n    // Style sheet name \\u269b\\ufe0f\\n    MuiButton: {\\n      // Name of the rule\\n      text: {\\n        // Some CSS\\n        color: \\'white\\',\\n      },\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/GlobalCss.js\"}}\\n\\nThe list of these customization points for each component is documented under the **Component API** section. For instance, you can have a look at the [Button](/api/button/#css). Alternatively, you can always have a look at the [implementation](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js).\\n\\n## CSS global\\n\\nIf you are using the [CssBaseline](/components/css-baseline/) component to apply global resets, it can also be used to apply global styles. Par exemple:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  overrides: {\\n    MuiCssBaseline: {\\n      \\'@global\\': {\\n        html: {\\n          WebkitFontSmoothing: \\'auto\\',\\n        },\\n      },\\n    },\\n  },\\n});\\n\\n// ...\\nreturn (\\n  <ThemeProvider theme={theme}>\\n    <CssBaseline />\\n    {children}\\n  </ThemeProvider>\\n);\\n```\\n\\n## Default props\\n\\nYou can change the default props of all the Material-UI components. A `props` key is exposed in the `theme` for this use case.\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // Name of the component \\u269b\\ufe0f\\n    MuiButtonBase: {\\n      // The default props to change\\n      disableRipple: true, // No more ripple, on the whole application \\ud83d\\udca3!\\n    },\\n  },\\n});\\n```\\n\\n{{\"demo\": \"pages/customization/globals/DefaultProps.js\"}}'}},[[\"sxgg\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}