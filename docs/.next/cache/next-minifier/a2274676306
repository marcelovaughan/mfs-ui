{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{\"1NDm\":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/api-docs/list-item-text\",function(){return t(\"ITB+\")}])},AqRX:function(e,n){e.exports='---\\nfilename: /packages/material-ui/src/ListItemText/ListItemText.js\\n---\\n\\n\\x3c!--- This documentation is automatically generated, do not try to edit it. --\\x3e\\n\\n# ListItemText API\\n\\n<p class=\"description\">The API documentation of the ListItemText React component. Learn more about the props and the CSS customization points.</p>\\n\\n## Import\\n\\n```js\\nimport ListItemText from \\'@material-ui/core/ListItemText\\';\\n// or\\nimport { ListItemText } from \\'@material-ui/core\\';\\n```\\n\\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\\n\\n\\n\\n## Component name\\n\\nThe `MuiListItemText` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\\n\\n## Props\\n\\n| Name | Type | Default | Description |\\n|:-----|:-----|:--------|:------------|\\n| <span class=\"prop-name\">children</span> | <span class=\"prop-type\">node</span> |  | Alias for the `primary` prop. |\\n| <span class=\"prop-name\">classes</span> | <span class=\"prop-type\">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\\n| <span class=\"prop-name\">disableTypography</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the children won\\'t be wrapped by a Typography component. This can be useful to render an alternative Typography variant by wrapping the `children` (or `primary`) text, and optional `secondary` text with the Typography component. |\\n| <span class=\"prop-name\">inset</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the children will be indented. This should be used if there is no left avatar or left icon. |\\n| <span class=\"prop-name\">primary</span> | <span class=\"prop-type\">node</span> |  | The main content element. |\\n| <span class=\"prop-name\">primaryTypographyProps</span> | <span class=\"prop-type\">object</span> |  | These props will be forwarded to the primary typography component (as long as disableTypography is not `true`). |\\n| <span class=\"prop-name\">secondary</span> | <span class=\"prop-type\">node</span> |  | The secondary content element. |\\n| <span class=\"prop-name\">secondaryTypographyProps</span> | <span class=\"prop-type\">object</span> |  | These props will be forwarded to the secondary typography component (as long as disableTypography is not `true`). |\\n\\nThe `ref` is forwarded to the root element.\\n\\nAny other props supplied will be provided to the root element (native element).\\n\\n## CSS\\n\\n| Rule name | Global class | Description |\\n|:-----|:-------------|:------------|\\n| <span class=\"prop-name\">root</span> | <span class=\"prop-name\">.MuiListItemText-root</span> | Styles applied to the root element.\\n| <span class=\"prop-name\">multiline</span> | <span class=\"prop-name\">.MuiListItemText-multiline</span> | Styles applied to the `Typography` components if primary and secondary are set.\\n| <span class=\"prop-name\">dense</span> | <span class=\"prop-name\">.MuiListItemText-dense</span> | Styles applied to the `Typography` components if dense.\\n| <span class=\"prop-name\">inset</span> | <span class=\"prop-name\">.MuiListItemText-inset</span> | Styles applied to the root element if `inset={true}`.\\n| <span class=\"prop-name\">primary</span> | <span class=\"prop-name\">.MuiListItemText-primary</span> | Styles applied to the primary `Typography` component.\\n| <span class=\"prop-name\">secondary</span> | <span class=\"prop-name\">.MuiListItemText-secondary</span> | Styles applied to the secondary `Typography` component.\\n\\nYou can override the style of the component thanks to one of these customization points:\\n\\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\\n- With a theme and an [`overrides` property](/customization/globals/#css).\\n\\nIf that\\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/ListItemText/ListItemText.js) for more detail.\\n\\n## Demos\\n\\n- [Lists](/components/lists/)\\n\\n'},\"ITB+\":function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return l}));var s=t(\"mXGw\"),a=t.n(s),o=t(\"e+1t\"),p=t(\"kVtE\"),r=a.a.createElement,i=t(\"iiN7\");function l(e){var n=e.docs;return r(o.a,{docs:n})}l.getInitialProps=function(){var e=Object(p.a)({pageFilename:\"api/list-item-text\",requireRaw:i});return{demos:e.demos,docs:e.docs}}},iiN7:function(e,n,t){var s={\"./list-item-text.md\":\"AqRX\"};function a(e){var n=o(e);return t(n)}function o(e){if(!t.o(s,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return s[e]}a.keys=function(){return Object.keys(s)},a.resolve=o,e.exports=a,a.id=\"iiN7\"}},[[\"1NDm\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}