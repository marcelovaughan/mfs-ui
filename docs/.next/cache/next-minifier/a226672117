{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{Pl0v:function(e,n,s){\"use strict\";s.r(n),s.d(n,\"default\",(function(){return i}));var o=s(\"mXGw\"),a=s.n(o),t=s(\"e+1t\"),p=s(\"kVtE\"),r=a.a.createElement,l=s(\"t2Vk\");function i(e){var n=e.docs;return r(t.a,{docs:n})}i.getInitialProps=function(){var e=Object(p.a)({pageFilename:\"api/form-helper-text\",requireRaw:l});return{demos:e.demos,docs:e.docs}}},XPCr:function(e,n){e.exports='---\\nfilename: /packages/material-ui/src/FormHelperText/FormHelperText.js\\n---\\n\\n\\x3c!--- This documentation is automatically generated, do not try to edit it. --\\x3e\\n\\n# FormHelperText API\\n\\n<p class=\"description\">The API documentation of the FormHelperText React component. Learn more about the props and the CSS customization points.</p>\\n\\n## Import\\n\\n```js\\nimport FormHelperText from \\'@material-ui/core/FormHelperText\\';\\n// or\\nimport { FormHelperText } from \\'@material-ui/core\\';\\n```\\n\\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\\n\\n\\n\\n## Component name\\n\\nThe `MuiFormHelperText` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\\n\\n## Props\\n\\n| Name | Type | Default | Description |\\n|:-----|:-----|:--------|:------------|\\n| <span class=\"prop-name\">children</span> | <span class=\"prop-type\">node</span> |  | The content of the component.<br>If `\\' \\'` is provided, the component reserves one line height for displaying a future message. |\\n| <span class=\"prop-name\">classes</span> | <span class=\"prop-type\">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\\n| <span class=\"prop-name\">component</span> | <span class=\"prop-type\">elementType</span> | <span class=\"prop-default\">\\'p\\'</span> | The component used for the root node. Either a string to use a HTML element or a component. |\\n| <span class=\"prop-name\">disabled</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the helper text should be displayed in a disabled state. |\\n| <span class=\"prop-name\">error</span> | <span class=\"prop-type\">bool</span> |  | If `true`, helper text should be displayed in an error state. |\\n| <span class=\"prop-name\">filled</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the helper text should use filled classes key. |\\n| <span class=\"prop-name\">focused</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the helper text should use focused classes key. |\\n| <span class=\"prop-name\">margin</span> | <span class=\"prop-type\">\\'dense\\'</span> |  | If `dense`, will adjust vertical spacing. This is normally obtained via context from FormControl. |\\n| <span class=\"prop-name\">required</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the helper text should use required classes key. |\\n| <span class=\"prop-name\">variant</span> | <span class=\"prop-type\">\\'filled\\'<br>&#124;&nbsp;\\'outlined\\'<br>&#124;&nbsp;\\'standard\\'</span> |  | The variant to use. |\\n\\nThe `ref` is forwarded to the root element.\\n\\nAny other props supplied will be provided to the root element (native element).\\n\\n## CSS\\n\\n| Rule name | Global class | Description |\\n|:-----|:-------------|:------------|\\n| <span class=\"prop-name\">root</span> | <span class=\"prop-name\">.MuiFormHelperText-root</span> | Styles applied to the root element.\\n| <span class=\"prop-name\">error</span> | <span class=\"prop-name\">.Mui-error</span> | Pseudo-class applied to the root element if `error={true}`.\\n| <span class=\"prop-name\">disabled</span> | <span class=\"prop-name\">.Mui-disabled</span> | Pseudo-class applied to the root element if `disabled={true}`.\\n| <span class=\"prop-name\">marginDense</span> | <span class=\"prop-name\">.MuiFormHelperText-marginDense</span> | Styles applied to the root element if `margin=\"dense\"`.\\n| <span class=\"prop-name\">contained</span> | <span class=\"prop-name\">.MuiFormHelperText-contained</span> | Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`.\\n| <span class=\"prop-name\">focused</span> | <span class=\"prop-name\">.Mui-focused</span> | Pseudo-class applied to the root element if `focused={true}`.\\n| <span class=\"prop-name\">filled</span> | <span class=\"prop-name\">.MuiFormHelperText-filled</span> | Pseudo-class applied to the root element if `filled={true}`.\\n| <span class=\"prop-name\">required</span> | <span class=\"prop-name\">.Mui-required</span> | Pseudo-class applied to the root element if `required={true}`.\\n\\nYou can override the style of the component thanks to one of these customization points:\\n\\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\\n- With a theme and an [`overrides` property](/customization/globals/#css).\\n\\nIf that\\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/FormHelperText/FormHelperText.js) for more detail.\\n\\n## Demos\\n\\n- [Text Fields](/components/text-fields/)\\n\\n'},t2Vk:function(e,n,s){var o={\"./form-helper-text.md\":\"XPCr\"};function a(e){var n=t(e);return s(n)}function t(e){if(!s.o(o,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return o[e]}a.keys=function(){return Object.keys(o)},a.resolve=t,e.exports=a,a.id=\"t2Vk\"},wm8K:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/api-docs/form-helper-text\",function(){return s(\"Pl0v\")}])}},[[\"wm8K\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}