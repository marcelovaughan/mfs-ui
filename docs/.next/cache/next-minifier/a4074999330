{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{\"0MpS\":function(e,n){e.exports='---\\nfilename: /packages/material-ui/src/Checkbox/Checkbox.js\\n---\\n\\n\\x3c!--- This documentation is automatically generated, do not try to edit it. --\\x3e\\n\\n# Checkbox API\\n\\n<p class=\"description\">The API documentation of the Checkbox React component. Learn more about the props and the CSS customization points.</p>\\n\\n## Import\\n\\n```js\\nimport Checkbox from \\'@material-ui/core/Checkbox\\';\\n// or\\nimport { Checkbox } from \\'@material-ui/core\\';\\n```\\n\\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\\n\\n\\n\\n## Component name\\n\\nThe `MuiCheckbox` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\\n\\n## Props\\n\\n| Name | Type | Default | Description |\\n|:-----|:-----|:--------|:------------|\\n| <span class=\"prop-name\">checked</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the component is checked. |\\n| <span class=\"prop-name\">checkedIcon</span> | <span class=\"prop-type\">node</span> | <span class=\"prop-default\">&lt;CheckBoxIcon /></span> | The icon to display when the component is checked. |\\n| <span class=\"prop-name\">classes</span> | <span class=\"prop-type\">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\\n| <span class=\"prop-name\">color</span> | <span class=\"prop-type\">\\'default\\'<br>&#124;&nbsp;\\'primary\\'<br>&#124;&nbsp;\\'secondary\\'</span> | <span class=\"prop-default\">\\'secondary\\'</span> | The color of the component. It supports those theme colors that make sense for this component. |\\n| <span class=\"prop-name\">disabled</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the checkbox will be disabled. |\\n| <span class=\"prop-name\">disableRipple</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the ripple effect will be disabled. |\\n| <span class=\"prop-name\">icon</span> | <span class=\"prop-type\">node</span> | <span class=\"prop-default\">&lt;CheckBoxOutlineBlankIcon /></span> | The icon to display when the component is unchecked. |\\n| <span class=\"prop-name\">id</span> | <span class=\"prop-type\">string</span> |  | The id of the `input` element. |\\n| <span class=\"prop-name\">indeterminate</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the component appears indeterminate. This does not set the native input element to indeterminate due to inconsistent behavior across browsers. However, we set a `data-indeterminate` attribute on the input. |\\n| <span class=\"prop-name\">indeterminateIcon</span> | <span class=\"prop-type\">node</span> | <span class=\"prop-default\">&lt;IndeterminateCheckBoxIcon /></span> | The icon to display when the component is indeterminate. |\\n| <span class=\"prop-name\">inputProps</span> | <span class=\"prop-type\">object</span> |  | [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element. |\\n| <span class=\"prop-name\">inputRef</span> | <span class=\"prop-type\">ref</span> |  | Pass a ref to the `input` element. |\\n| <span class=\"prop-name\">onChange</span> | <span class=\"prop-type\">func</span> |  | Callback fired when the state is changed.<br><br>**Signature:**<br>`function(event: object) => void`<br>*event:* The event source of the callback. You can pull out the new checked state by accessing `event.target.checked` (boolean). |\\n| <span class=\"prop-name\">required</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the `input` element will be required. |\\n| <span class=\"prop-name\">size</span> | <span class=\"prop-type\">\\'medium\\'<br>&#124;&nbsp;\\'small\\'</span> | <span class=\"prop-default\">\\'medium\\'</span> | The size of the checkbox. `small` is equivalent to the dense checkbox styling. |\\n| <span class=\"prop-name\">value</span> | <span class=\"prop-type\">any</span> |  | The value of the component. The DOM API casts this to a string. The browser uses \"on\" as the default value. |\\n\\nThe `ref` is forwarded to the root element.\\n\\nAny other props supplied will be provided to the root element ([IconButton](/api/icon-button/)).\\n\\n## CSS\\n\\n| Rule name | Global class | Description |\\n|:-----|:-------------|:------------|\\n| <span class=\"prop-name\">root</span> | <span class=\"prop-name\">.MuiCheckbox-root</span> | Styles applied to the root element.\\n| <span class=\"prop-name\">checked</span> | <span class=\"prop-name\">.Mui-checked</span> | Pseudo-class applied to the root element if `checked={true}`.\\n| <span class=\"prop-name\">disabled</span> | <span class=\"prop-name\">.Mui-disabled</span> | Pseudo-class applied to the root element if `disabled={true}`.\\n| <span class=\"prop-name\">indeterminate</span> | <span class=\"prop-name\">.MuiCheckbox-indeterminate</span> | Pseudo-class applied to the root element if `indeterminate={true}`.\\n| <span class=\"prop-name\">colorPrimary</span> | <span class=\"prop-name\">.MuiCheckbox-colorPrimary</span> | Styles applied to the root element if `color=\"primary\"`.\\n| <span class=\"prop-name\">colorSecondary</span> | <span class=\"prop-name\">.MuiCheckbox-colorSecondary</span> | Styles applied to the root element if `color=\"secondary\"`.\\n\\nYou can override the style of the component thanks to one of these customization points:\\n\\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\\n- With a theme and an [`overrides` property](/customization/globals/#css).\\n\\nIf that\\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Checkbox/Checkbox.js) for more detail.\\n\\n## Inheritance\\n\\nThe props of the [IconButton](/api/icon-button/) component are also available.\\nYou can take advantage of this behavior to [target nested components](/guides/api/#spread).\\n\\n## Demos\\n\\n- [Checkboxes](/components/checkboxes/)\\n- [Transfer List](/components/transfer-list/)\\n\\n'},dlWa:function(e,n,s){\"use strict\";s.r(n),s.d(n,\"default\",(function(){return i}));var a=s(\"mXGw\"),o=s.n(a),t=s(\"e+1t\"),p=s(\"kVtE\"),r=o.a.createElement,c=s(\"eWJt\");function i(e){var n=e.docs;return r(t.a,{docs:n})}i.getInitialProps=function(){var e=Object(p.a)({pageFilename:\"api/checkbox\",requireRaw:c});return{demos:e.demos,docs:e.docs}}},eWJt:function(e,n,s){var a={\"./checkbox.md\":\"0MpS\"};function o(e){var n=t(e);return s(n)}function t(e){if(!s.o(a,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=t,e.exports=o,o.id=\"eWJt\"},j8WM:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/api-docs/checkbox\",function(){return s(\"dlWa\")}])}},[[\"j8WM\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}