{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[271],{\"1c2i\":function(e,t,n){\"use strict\";n.r(t),n.d(t,\"default\",(function(){return m}));var a=n(\"mXGw\"),r=n.n(a),o=n(\"mKyP\"),i=n(\"h7Hf\"),s=n(\"PpYF\"),l=n(\"O8uh\"),c=r.a.createElement,d=Object(o.a)({palette:{primary:{main:s.a[500]},secondary:{main:\"#11cb5f\"}}}),p=c(i.a,{theme:d},c(l.a,{color:\"primary\"},\"Primary\"),c(l.a,{color:\"secondary\"},\"Secondary\"));function m(){return p}},\"57GL\":function(e,t,n){var a={\"./DarkTheme.js\":\"fXpW\",\"./Intentions.js\":\"ui6t\",\"./Palette.js\":\"1c2i\",\"./Palette.tsx\":\"zjsb\"};function r(e){var t=o(e);return n(t)}function o(e){if(!n.o(a,e)){var t=new Error(\"Cannot find module '\"+e+\"'\");throw t.code=\"MODULE_NOT_FOUND\",t}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=o,e.exports=r,r.id=\"57GL\"},\"9d77\":function(e,t){e.exports='# Palette \\u8c03\\u8272\\n\\n<p class=\"description\">The palette enables you to modify the color of the components to suit your brand.</p>\\n\\n## Palette colors\\n\\nA color intention is a mapping of a palette color to a given intention within your application. The theme exposes the following palette colors (accessible under `theme.palette.`):\\n\\n- *primary* - used to represent primary interface elements for a user. It\\'s the color displayed most frequently across your app\\'s screens and components.\\n- *secondary* - used to represent secondary interface elements for a user. It provides more ways to accent and distinguish your product. Having it is optional.\\n- *error* - used to represent interface elements that the user should be made aware of.\\n- *warning* - used to represent potentially dangerous actions or important messages.\\n- *info* - used to present information to the user that is neutral and not necessarily important.\\n- *success* - used to indicate the successful completion of an action that user triggered.\\n\\nIf you want to learn more about color, you can check out [the color section](/customization/color/).\\n\\n## \\u9ed8\\u8ba4\\u503c\\n\\nYou can explore the default values of the palette using [the theme explorer](/customization/default-theme/?expand-path=$.palette) or by opening the dev tools console on this page (`window.theme.palette`).\\n\\n{{\"demo\": \"pages/customization/palette/Intentions.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\nThe default palette uses the shades prefixed with `A` (`A200`, etc.) for the secondary intention, and the un-prefixed shades for the other intentions.\\n\\n## Customization \\u4e2a\\u6027\\u5316\\n\\nYou may override the default palette values by including a palette object as part of your theme. If any of the:\\n\\n- [`palette.primary`](/customization/default-theme/?expand-path=$.palette.primary)\\n- [`palette.secondary`](/customization/default-theme/?expand-path=$.palette.secondary)\\n- [`palette.error`](/customization/default-theme/?expand-path=$.palette.error)\\n- [`palette.warning`](/customization/default-theme/?expand-path=$.palette.warning)\\n- [`palette.info`](/customization/default-theme/?expand-path=$.palette.info)\\n- [`palette.success`](/customization/default-theme/?expand-path=$.palette.success)\\n\\npalette color objects are provided, they will replace the defaults.\\n\\nThe palette color value can either be a [color](/customization/color/#2014-material-design-color-palettes) object, or an object with one or more of the keys specified by the following TypeScript interface:\\n\\n```ts\\ninterface PaletteColor {\\n  light?: string;\\n  main: string;\\n  dark?: string;\\n  contrastText?: string;\\n}\\n```\\n\\n### \\u4f7f\\u7528\\u989c\\u8272\\u5bf9\\u8c61\\n\\nThe simplest way to customize an intention is to import one or more of the provided colors and apply them to a palette intention:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\nimport blue from \\'@material-ui/core/colors/blue\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: blue,\\n  },\\n});\\n```\\n\\n### Providing the colors directly\\n\\nIf you wish to provide more customized colors, you can either create your own color object, or directly supply colors to some or all of the intention\\'s keys:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      // light: will be calculated from palette.primary.main,\\n      main: \\'#ff4400\\',\\n      // dark: will be calculated from palette.primary.main,\\n      // contrastText: will be calculated to contrast with palette.primary.main\\n    },\\n    secondary: {\\n      light: \\'#0066ff\\',\\n      main: \\'#0044ff\\',\\n      // dark: will be calculated from palette.secondary.main,\\n      contrastText: \\'#ffcc00\\',\\n    },\\n    // Used by `getContrastText()` to maximize the contrast between\\n    // the background and the text.\\n    contrastThreshold: 3,\\n    // Used by the functions below to shift a color\\'s luminance by approximately\\n    // two indexes within its tonal palette.\\n    // E.g., shift from Red 500 to Red 300 or Red 700.\\n    tonalOffset: 0.2,\\n  },\\n});\\n```\\n\\nAs in the example above, if the intention object contains custom colors using any of the \"main\", \"light\", \"dark\" or \"contrastText\" keys, these map as follows:\\n\\n- If the \"dark\" and / or \"light\" keys are omitted, their value(s) will be calculated from \"main\", according to the \"tonalOffset\" value.\\n- If \"contrastText\" is omitted, its value will be calculated to contrast with \"main\", according to the \"contrastThreshold\" value.\\n\\nBoth the \"tonalOffset\" and \"contrastThreshold\" values may be customized as needed. The \"tonalOffset\" value can either be a number between 0 and 1, which will apply to both light and dark variants, or an object with light and dark variants specified by the following TypeScript type:\\n\\n```ts\\ntype PaletteTonalOffset = number | {\\n  light: number;\\n  dark: number;\\n};\\n```\\n\\nA higher value for \"tonalOffset\" will make calculated values for \"light\" lighter, and \"dark\" darker. A higher value for \"contrastThreshold\" increases the point at which a background color is considered light, and given a dark \"contrastText\".\\n\\nNote that \"contrastThreshold\" follows a non-linear curve.\\n\\n### \\u793a\\u4f8b\\n\\n{{\"demo\": \"pages/customization/palette/Palette.js\", \"defaultCodeOpen\": true}}\\n\\n### Adding new colors\\n\\nYou can add new colors inside and outside the palette of the theme as follow:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  status: {\\n    danger: \\'#e53e3e\\',\\n  },\\n  palette: {\\n    neutral: {\\n      main: \\'#5c6ac4\\',\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\'@material-ui/core/styles/createMuiTheme\\' {\\n  interface Theme {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\'],\\n    }\\n  }\\n  interface ThemeOptions {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\']\\n    }\\n  }\\n}\\n\\ndeclare module \"@material-ui/core/styles/createPalette\" {\\n  interface Palette {\\n    neutral: Palette[\\'primary\\'];\\n  }\\n  interface PaletteOptions {\\n    neutral: PaletteOptions[\\'primary\\'];\\n  }\\n}\\n```\\n\\n## Picking colors\\n\\nNeed inspiration? The Material Design team has built an [palette configuration tool](/customization/color/#picking-colors) to help you.\\n\\n## Dark mode\\n\\nMaterial-UI comes with two palette types, light (the default) and dark. You can make the theme dark by setting `type: \\'dark\\'`. While it\\'s only a single property value change, internally it modifies several palette values.\\n\\n```js\\nconst darkTheme = createMuiTheme({\\n  palette: {\\n    type: \\'dark\\',\\n  },\\n});\\n```\\n\\nThe colors modified by the palette type are the following:\\n\\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\n### User preference\\n\\nUsers might have specified a preference for a light or dark theme. The method by which the user expresses their preference can vary. It might be a system-wide setting exposed by the Operating System, or a setting controlled by the User Agent.\\n\\nYou can leverage this preference dynamically with the [useMediaQuery](/components/use-media-query/) hook and the [prefers-color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media query.\\n\\nFor instance, you can enable the dark mode automatically:\\n\\n```jsx\\nimport React from \\'react\\';\\nimport useMediaQuery from \\'@material-ui/core/useMediaQuery\\';\\nimport { createMuiTheme, ThemeProvider } from \\'@material-ui/core/styles\\';\\nimport CssBaseline from \\'@material-ui/core/CssBaseline\\';\\n\\nfunction App() {\\n  const prefersDarkMode = useMediaQuery(\\'(prefers-color-scheme: dark)\\');\\n\\n  const theme = React.useMemo(\\n    () =>\\n      createMuiTheme({\\n        palette: {\\n          type: prefersDarkMode ? \\'dark\\' : \\'light\\',\\n        },\\n      }),\\n    [prefersDarkMode],\\n  );\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <CssBaseline/>\\n      <Routes />\\n    </ThemeProvider>\\n  );\\n}\\n```'},BGFs:function(e,t){e.exports='# Paleta de Cores\\n\\n<p class=\"description\">A paleta permite modificar a cor dos componentes para se adequarem \\xe0 sua marca.</p>\\n\\n## Palette colors\\n\\nA color intention is a mapping of a palette color to a given intention within your application. The theme exposes the following palette colors (accessible under `theme.palette.`):\\n\\n- *primary* - used to represent primary interface elements for a user. It\\'s the color displayed most frequently across your app\\'s screens and components.\\n- *secondary* - used to represent secondary interface elements for a user. It provides more ways to accent and distinguish your product. Having it is optional.\\n- *error* - used to represent interface elements that the user should be made aware of.\\n- *warning* - used to represent potentially dangerous actions or important messages.\\n- *info* - used to present information to the user that is neutral and not necessarily important.\\n- *success* - used to indicate the successful completion of an action that user triggered.\\n\\nSe voc\\xea quiser aprender mais sobre cor, voc\\xea pode conferir [a se\\xe7\\xe3o de cores](/customization/color/).\\n\\n## Valores padr\\xe3o\\n\\nVoc\\xea pode explorar os valores padr\\xe3o da paleta usando [o explorador de tema](/customization/default-theme/?expand-path=$.palette) ou abrindo o console das ferramentas de desenvolvimento nesta p\\xe1gina (`window.theme.palette`).\\n\\n{{\"demo\": \"pages/customization/palette/Intentions.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\nA paleta padr\\xe3o usa as sombras prefixadas com `A` (`A200`, etc.) para a inten\\xe7\\xe3o secund\\xe1ria, e as cores n\\xe3o pr\\xe9-fixadas para as outras inten\\xe7\\xf5es.\\n\\n## Customiza\\xe7\\xe3o\\n\\nYou may override the default palette values by including a palette object as part of your theme. If any of the:\\n\\n- [`palette.primary`](/customization/default-theme/?expand-path=$.palette.primary)\\n- [`palette.secondary`](/customization/default-theme/?expand-path=$.palette.secondary)\\n- [`palette.error`](/customization/default-theme/?expand-path=$.palette.error)\\n- [`palette.warning`](/customization/default-theme/?expand-path=$.palette.warning)\\n- [`palette.info`](/customization/default-theme/?expand-path=$.palette.info)\\n- [`palette.success`](/customization/default-theme/?expand-path=$.palette.success)\\n\\npalette color objects are provided, they will replace the defaults.\\n\\nThe palette color value can either be a [color](/customization/color/#2014-material-design-color-palettes) object, or an object with one or more of the keys specified by the following TypeScript interface:\\n\\n```ts\\ninterface PaletteColor {\\n  light?: string;\\n  main: string;\\n  dark?: string;\\n  contrastText?: string;\\n}\\n```\\n\\n### Usando um objeto de cor\\n\\nA maneira mais simples de customizar uma inten\\xe7\\xe3o \\xe9 importar uma ou mais das cores fornecidas e aplic\\xe1-las a uma inten\\xe7\\xe3o da paleta:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\nimport blue from \\'@material-ui/core/colors/blue\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: blue,\\n  },\\n});\\n```\\n\\n### Fornecendo as cores diretamente\\n\\nSe voc\\xea deseja fornecer cores mais personalizadas, voc\\xea pode criar seu pr\\xf3prio objeto de cor, ou fornecer cores diretamente para algumas ou todas as chaves da inten\\xe7\\xe3o:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      // light: ser\\xe1 calculada com base em palette.primary.main,\\n      main: \\'#ff4400\\',\\n      // dark: ser\\xe1 calculada com base em palette.primary.main,\\n      // contrastText: ser\\xe1 calculada para contrastar com palette.primary.main\\n    },\\n    secondary: {\\n      light: \\'#0066ff\\',\\n      main: \\'#0044ff\\',\\n      // dark: ser\\xe1 calculada com base palette.secondary.main,\\n      contrastText: \\'#ffcc00\\',\\n    },\\n    // Usado por `getContrastText()` para maximizar o contraste entre\\n    // o plano de fundo e o texto.\\n    contrastThreshold: 3,\\n    // Usado pelas fun\\xe7\\xf5es abaixo para mudan\\xe7a de uma cor de lumin\\xe2ncia por aproximadamente\\n    // dois \\xedndices dentro de sua paleta tonal.\\n    // Por exemplo, mude de Red 500 para Red 300 ou Red 700.\\n    tonalOffset: 0.2,\\n  },\\n});\\n```\\n\\nComo no exemplo acima, se o objeto de inten\\xe7\\xe3o cont\\xe9m cores customizadas usando qualquer uma das chaves \"main\", \"light\", \"dark\" ou \"contrastText\", esses mapas s\\xe3o os seguintes:\\n\\n- Se as chaves \"dark\" e / ou \"light\" s\\xe3o omitidas, seus valores ser\\xe3o calculados de \"main\", de acordo com o valor \"tonalOffset\".\\n- Se \"contrastText\" \\xe9 omitido, seu valor ser\\xe1 calculado para contrastar com \"main\", de acordo com o valor de \"contrastThreshold\".\\n\\nTanto os valores de \"tonalOffset\" e \"contrastThreshold\" poder\\xe3o ser customizados conforme o necess\\xe1rio. O \"tonalOffset\" pode ser um valor num\\xe9rico entre 0 e 1, que ser\\xe1 aplicada a ambos variantes claros e escuros, ou um objeto com as variantes clara e escuras especificado a seguir pelo tipo TypeScript:\\n\\n```ts\\ntype PaletteTonalOffset = number | {\\n  light: number;\\n  dark: number;\\n};\\n```\\n\\nUm valor mais alto para \"tonalOffset\" far\\xe1 valores calculados para \"light\" mais claro e \"dark\" mais escuro. Um valor mais alto para \"contrastThreshold\" aumenta o ponto no qual uma cor de fundo \\xe9 considerada clara, e recebe um \"contrastText\" escuro.\\n\\nObserve que \"contrastThreshold\" segue uma curva n\\xe3o linear.\\n\\n### Exemplo\\n\\n{{\"demo\": \"pages/customization/palette/Palette.js\", \"defaultCodeOpen\": true}}\\n\\n### Adding new colors\\n\\nYou can add new colors inside and outside the palette of the theme as follow:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  status: {\\n    danger: \\'#e53e3e\\',\\n  },\\n  palette: {\\n    neutral: {\\n      main: \\'#5c6ac4\\',\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\'@material-ui/core/styles/createMuiTheme\\' {\\n  interface Theme {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\'],\\n    }\\n  }\\n  interface ThemeOptions {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\']\\n    }\\n  }\\n}\\n\\ndeclare module \"@material-ui/core/styles/createPalette\" {\\n  interface Palette {\\n    neutral: Palette[\\'primary\\'];\\n  }\\n  interface PaletteOptions {\\n    neutral: PaletteOptions[\\'primary\\'];\\n  }\\n}\\n```\\n\\n## Picking colors\\n\\nPrecisa de inspira\\xe7\\xe3o? The Material Design team has built an [palette configuration tool](/customization/color/#picking-colors) to help you.\\n\\n## Modo escuro\\n\\nO Material-UI vem com dois tipos de paletas, luz (o padr\\xe3o) e escuro. Voc\\xea pode deixar o tema escuro definindo `type: \\'dark\\'`. Embora seja apenas uma altera\\xe7\\xe3o no valor de uma propriedade \\xfanica, internamente ela modifica v\\xe1rios valores da paleta.\\n\\n```js\\nconst darkTheme = createMuiTheme({\\n  palette: {\\n    type: \\'dark\\',\\n  },\\n});\\n```\\n\\nAs cores modificadas pelo tipo da paleta s\\xe3o as seguintes:\\n\\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\n### Prefer\\xeancia do usu\\xe1rio\\n\\nUsu\\xe1rios podem especificar uma prefer\\xeancia por um tema claro ou escuro. O m\\xe9todo pelo qual o usu\\xe1rio expressa a sua prefer\\xeancia pode variar. Pode ser uma configura\\xe7\\xe3o de sistema exposta pelo Sistema Operacional, ou uma configura\\xe7\\xe3o controlada pelo Agente de Usu\\xe1rio.\\n\\nVoc\\xea pode utilizar essa prefer\\xeancia dinamicamente com o hook [useMediaQuery](/components/use-media-query/) e a consulta de m\\xeddia [prefers-color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme).\\n\\nPor exemplo, voc\\xea pode ativar o modo escuro automaticamente:\\n\\n```jsx\\nimport React from \\'react\\';\\nimport useMediaQuery from \\'@material-ui/core/useMediaQuery\\';\\nimport { createMuiTheme, ThemeProvider } from \\'@material-ui/core/styles\\';\\nimport CssBaseline from \\'@material-ui/core/CssBaseline\\';\\n\\nfunction App() {\\n  const prefersDarkMode = useMediaQuery(\\'(prefers-color-scheme: dark)\\');\\n\\n  const theme = React.useMemo(\\n    () =>\\n      createMuiTheme({\\n        palette: {\\n          type: prefersDarkMode ? \\'dark\\' : \\'light\\',\\n        },\\n      }),\\n    [prefersDarkMode],\\n  );\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <CssBaseline/>\\n      <Routes />\\n    </ThemeProvider>\\n  );\\n}\\n```'},\"HO+e\":function(e,t){e.exports='# \\u30d1\\u30ec\\u30c3\\u30c8\\n\\n<p class=\"description\">\\u30d1\\u30ec\\u30c3\\u30c8\\u3092\\u4f7f\\u7528\\u3059\\u308b\\u3068\\u3001\\u30d6\\u30e9\\u30f3\\u30c9\\u306b\\u5408\\u308f\\u305b\\u3066\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306e\\u8272\\u3092\\u5909\\u66f4\\u3067\\u304d\\u307e\\u3059\\u3002</p>\\n\\n## Palette colors\\n\\nA color intention is a mapping of a palette color to a given intention within your application. The theme exposes the following palette colors (accessible under `theme.palette.`):\\n\\n- *primary* - used to represent primary interface elements for a user. It\\'s the color displayed most frequently across your app\\'s screens and components.\\n- *secondary* - used to represent secondary interface elements for a user. It provides more ways to accent and distinguish your product. Having it is optional.\\n- *error* - used to represent interface elements that the user should be made aware of.\\n- *warning* - used to represent potentially dangerous actions or important messages.\\n- *info* - used to present information to the user that is neutral and not necessarily important.\\n- *success* - used to indicate the successful completion of an action that user triggered.\\n\\n\\u8272\\u306e\\u8a73\\u7d30\\u306b\\u3064\\u3044\\u3066\\u306f\\u3001[\\u8272\\u30bb\\u30af\\u30b7\\u30e7\\u30f3](/customization/color/)\\u3092\\u3054\\u89a7\\u304f\\u3060\\u3055\\u3044\\u3002\\n\\n## \\u30c7\\u30d5\\u30a9\\u30eb\\u30c8\\u5024\\n\\nYou can explore the default values of the palette using [the theme explorer](/customization/default-theme/?expand-path=$.palette) or by opening the dev tools console on this page (`window.theme.palette`).\\n\\n{{\"demo\": \"pages/customization/palette/Intentions.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\n\\u65e2\\u5b9a\\u306e\\u30d1\\u30ec\\u30c3\\u30c8\\u3067\\u306f\\u3001\\u526f\\u6b21\\u7684\\u306a\\u610f\\u56f3\\u3092\\u8868\\u3059\\u305f\\u3081\\u306b\\u3001\\u5148\\u982d\\u306b`A`(`A200`\\u306a\\u3069\\u3002) \\u304c\\u4ed8\\u3044\\u305f\\u30b7\\u30a7\\u30fc\\u30c7\\u30a3\\u30f3\\u30b0\\u304c\\u4f7f\\u7528\\u3055\\u308c\\u307e\\u3059\\u3002 \\u4ed6\\u306e\\u76ee\\u7684\\u306e\\u305f\\u3081\\u306b\\u7701\\u7565\\u3055\\u308c\\u305f\\u30b7\\u30a7\\u30fc\\u30c9\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002\\n\\n## \\u30ab\\u30b9\\u30bf\\u30de\\u30a4\\u30ba\\n\\nYou may override the default palette values by including a palette object as part of your theme. If any of the:\\n\\n- [`palette.primary`](/customization/default-theme/?expand-path=$.palette.primary)\\n- [`palette.secondary`](/customization/default-theme/?expand-path=$.palette.secondary)\\n- [`palette.error`](/customization/default-theme/?expand-path=$.palette.error)\\n- [`palette.warning`](/customization/default-theme/?expand-path=$.palette.warning)\\n- [`palette.info`](/customization/default-theme/?expand-path=$.palette.info)\\n- [`palette.success`](/customization/default-theme/?expand-path=$.palette.success)\\n\\npalette color objects are provided, they will replace the defaults.\\n\\nThe palette color value can either be a [color](/customization/color/#2014-material-design-color-palettes) object, or an object with one or more of the keys specified by the following TypeScript interface:\\n\\n```ts\\ninterface PaletteColor {\\n  light?: string;\\n  main: string;\\n  dark?: string;\\n  contrastText?: string;\\n}\\n```\\n\\n### \\u30ab\\u30e9\\u30fc\\u30aa\\u30d6\\u30b8\\u30a7\\u30af\\u30c8\\u3092\\u4f7f\\u7528\\u3059\\u308b\\n\\n\\u610f\\u56f3\\u3092\\u30ab\\u30b9\\u30bf\\u30de\\u30a4\\u30ba\\u3059\\u308b\\u6700\\u3082\\u7c21\\u5358\\u306a\\u65b9\\u6cd5\\u306f\\u3001\\u63d0\\u4f9b\\u3055\\u308c\\u3066\\u3044\\u308b1\\u3064\\u307e\\u305f\\u306f\\u8907\\u6570\\u306e\\u30ab\\u30e9\\u30fc\\u3092\\u30a4\\u30f3\\u30dd\\u30fc\\u30c8\\u3059\\u308b\\u3053\\u3068\\u3067\\u3059\\u3002 \\u6b21\\u306e\\u3088\\u3046\\u306b\\u30d1\\u30ec\\u30c3\\u30c8\\u610f\\u56f3\\u306b\\u9069\\u7528\\u3057\\u307e\\u3059\\u3002\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\nimport blue from \\'@material-ui/core/colors/blue\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: blue,\\n  },\\n});\\n```\\n\\n### \\u8272\\u3092\\u76f4\\u63a5\\u63d0\\u4f9b\\u3059\\u308b\\n\\n\\u3088\\u308a\\u30ab\\u30b9\\u30bf\\u30de\\u30a4\\u30ba\\u3055\\u308c\\u305f\\u8272\\u3092\\u63d0\\u4f9b\\u3059\\u308b\\u5834\\u5408\\u306f\\u3001\\u72ec\\u81ea\\u306e\\u8272\\u30aa\\u30d6\\u30b8\\u30a7\\u30af\\u30c8 \\u4f5c\\u6210\\u3059\\u308b\\u304b\\u3001\\u610f\\u56f3\\u306e\\u30ad\\u30fc\\u306e\\u4e00\\u90e8\\u307e\\u305f\\u306f\\u3059\\u3079\\u3066\\u306b\\u76f4\\u63a5\\u8272\\u3092\\u6307\\u5b9a\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      // light: will be calculated from palette.primary.main,\\n      main: \\'#ff4400\\',\\n      // dark: will be calculated from palette.primary.main,\\n      // contrastText: will be calculated to contrast with palette.primary.main\\n    },\\n    secondary: {\\n      light: \\'#0066ff\\',\\n      main: \\'#0044ff\\',\\n      // dark: will be calculated from palette.secondary.main,\\n      contrastText: \\'#ffcc00\\',\\n    },\\n    // Used by `getContrastText()` to maximize the contrast between\\n    // the background and the text.\\n    contrastThreshold: 3,\\n    // Used by the functions below to shift a color\\'s luminance by approximately\\n    // two indexes within its tonal palette.\\n    // E.g., shift from Red 500 to Red 300 or Red 700.\\n    tonalOffset: 0.2,\\n  },\\n});\\n```\\n\\nAs in the example above, if the intention object contains custom colors using any of the \"main\", \"light\", \"dark\" or \"contrastText\" keys, these map as follows:\\n\\n- If the \"dark\" and / or \"light\" keys are omitted, their value(s) will be calculated from \"main\", according to the \"tonalOffset\" value.\\n- If \"contrastText\" is omitted, its value will be calculated to contrast with \"main\", according to the \"contrastThreshold\" value.\\n\\nBoth the \"tonalOffset\" and \"contrastThreshold\" values may be customized as needed. The \"tonalOffset\" value can either be a number between 0 and 1, which will apply to both light and dark variants, or an object with light and dark variants specified by the following TypeScript type:\\n\\n```ts\\ntype PaletteTonalOffset = number | {\\n  light: number;\\n  dark: number;\\n};\\n```\\n\\nA higher value for \"tonalOffset\" will make calculated values for \"light\" lighter, and \"dark\" darker. A higher value for \"contrastThreshold\" increases the point at which a background color is considered light, and given a dark \"contrastText\".\\n\\nNote that \"contrastThreshold\" follows a non-linear curve.\\n\\n### \\u4f8b\\n\\n{{\"demo\": \"pages/customization/palette/Palette.js\", \"defaultCodeOpen\": true}}\\n\\n### Adding new colors\\n\\nYou can add new colors inside and outside the palette of the theme as follow:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  status: {\\n    danger: \\'#e53e3e\\',\\n  },\\n  palette: {\\n    neutral: {\\n      main: \\'#5c6ac4\\',\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\'@material-ui/core/styles/createMuiTheme\\' {\\n  interface Theme {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\'],\\n    }\\n  }\\n  interface ThemeOptions {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\']\\n    }\\n  }\\n}\\n\\ndeclare module \"@material-ui/core/styles/createPalette\" {\\n  interface Palette {\\n    neutral: Palette[\\'primary\\'];\\n  }\\n  interface PaletteOptions {\\n    neutral: PaletteOptions[\\'primary\\'];\\n  }\\n}\\n```\\n\\n## Picking colors\\n\\n\\u30a4\\u30f3\\u30b9\\u30d4\\u30ec\\u30fc\\u30b7\\u30e7\\u30f3\\u304c\\u5fc5\\u8981\\u3067\\u3059\\u304b\\uff1f The Material Design team has built an [palette configuration tool](/customization/color/#picking-colors) to help you.\\n\\n## Dark mode\\n\\nMaterial-UI comes with two palette types, light (the default) and dark. You can make the theme dark by setting `type: \\'dark\\'`. While it\\'s only a single property value change, internally it modifies several palette values.\\n\\n```js\\nconst darkTheme = createMuiTheme({\\n  palette: {\\n    type: \\'dark\\',\\n  },\\n});\\n```\\n\\nThe colors modified by the palette type are the following:\\n\\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\n### User preference\\n\\nUsers might have specified a preference for a light or dark theme. The method by which the user expresses their preference can vary. It might be a system-wide setting exposed by the Operating System, or a setting controlled by the User Agent.\\n\\nYou can leverage this preference dynamically with the [useMediaQuery](/components/use-media-query/) hook and the [prefers-color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media query.\\n\\nFor instance, you can enable the dark mode automatically:\\n\\n```jsx\\nimport React from \\'react\\';\\nimport useMediaQuery from \\'@material-ui/core/useMediaQuery\\';\\nimport { createMuiTheme, ThemeProvider } from \\'@material-ui/core/styles\\';\\nimport CssBaseline from \\'@material-ui/core/CssBaseline\\';\\n\\nfunction App() {\\n  const prefersDarkMode = useMediaQuery(\\'(prefers-color-scheme: dark)\\');\\n\\n  const theme = React.useMemo(\\n    () =>\\n      createMuiTheme({\\n        palette: {\\n          type: prefersDarkMode ? \\'dark\\' : \\'light\\',\\n        },\\n      }),\\n    [prefersDarkMode],\\n  );\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <CssBaseline/>\\n      <Routes />\\n    </ThemeProvider>\\n  );\\n}\\n```'},I6Gs:function(e,t){e.exports=\"import React from 'react';\\nimport Grid from '@material-ui/core/Grid';\\nimport Typography from '@material-ui/core/Typography';\\nimport { makeStyles, useTheme, rgbToHex } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles((theme) => ({\\n  root: {\\n    width: '100%',\\n  },\\n  group: {\\n    marginTop: theme.spacing(3),\\n  },\\n  color: {\\n    display: 'flex',\\n    alignItems: 'center',\\n    '& div:first-of-type': {\\n      width: theme.spacing(6),\\n      height: theme.spacing(6),\\n      marginRight: theme.spacing(1),\\n      borderRadius: theme.shape.borderRadius,\\n    },\\n  },\\n}));\\n\\nexport default function Intentions() {\\n  const classes = useStyles();\\n  const theme = useTheme();\\n\\n  const item = (color, name) => (\\n    <Grid item xs={12} sm={6} md={4} className={classes.color}>\\n      <div style={{ backgroundColor: color }} />\\n      <div>\\n        <Typography variant=\\\"body2\\\">{name}</Typography>\\n        <Typography variant=\\\"body2\\\" color=\\\"textSecondary\\\">\\n          {rgbToHex(color)}\\n        </Typography>\\n      </div>\\n    </Grid>\\n  );\\n\\n  return (\\n    <div className={classes.root}>\\n      <Typography gutterBottom className={classes.group}>\\n        Primary\\n      </Typography>\\n      <Grid container spacing={2}>\\n        {item(theme.palette.primary.light, 'palette.primary.light')}\\n        {item(theme.palette.primary.main, 'palette.primary.main')}\\n        {item(theme.palette.primary.dark, 'palette.primary.dark')}\\n      </Grid>\\n      <Typography gutterBottom className={classes.group}>\\n        Secondary\\n      </Typography>\\n      <Grid container spacing={2}>\\n        {item(theme.palette.secondary.light, 'palette.secondary.light')}\\n        {item(theme.palette.secondary.main, 'palette.secondary.main')}\\n        {item(theme.palette.secondary.dark, 'palette.secondary.dark')}\\n      </Grid>\\n      <Typography gutterBottom className={classes.group}>\\n        Error\\n      </Typography>\\n      <Grid container spacing={2}>\\n        {item(theme.palette.error.light, 'palette.error.light')}\\n        {item(theme.palette.error.main, 'palette.error.main')}\\n        {item(theme.palette.error.dark, 'palette.error.dark')}\\n      </Grid>\\n      <Typography gutterBottom className={classes.group}>\\n        Warning\\n      </Typography>\\n      <Grid container spacing={2}>\\n        {item(theme.palette.warning.light, 'palette.warning.light')}\\n        {item(theme.palette.warning.main, 'palette.warning.main')}\\n        {item(theme.palette.warning.dark, 'palette.warning.dark')}\\n      </Grid>\\n      <Typography gutterBottom className={classes.group}>\\n        Info\\n      </Typography>\\n      <Grid container spacing={2}>\\n        {item(theme.palette.info.light, 'palette.info.light')}\\n        {item(theme.palette.info.main, 'palette.info.main')}\\n        {item(theme.palette.info.dark, 'palette.info.dark')}\\n      </Grid>\\n      <Typography gutterBottom className={classes.group}>\\n        Success\\n      </Typography>\\n      <Grid container spacing={2}>\\n        {item(theme.palette.success.light, 'palette.success.light')}\\n        {item(theme.palette.success.main, 'palette.success.main')}\\n        {item(theme.palette.success.dark, 'palette.success.dark')}\\n      </Grid>\\n    </div>\\n  );\\n}\\n\"},IIvE:function(e,t){e.exports=\"import React from 'react';\\nimport Typography from '@material-ui/core/Typography';\\nimport Grid from '@material-ui/core/Grid';\\nimport {\\n  makeStyles,\\n  ThemeProvider,\\n  useTheme,\\n  createMuiTheme,\\n} from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles((theme) => ({\\n  root: {\\n    backgroundColor: theme.palette.background.default,\\n    color: theme.palette.text.primary,\\n    padding: theme.spacing(2),\\n    [theme.breakpoints.up('md')]: {\\n      padding: theme.spacing(3),\\n    },\\n  },\\n  group: {\\n    marginTop: theme.spacing(3),\\n  },\\n  color: {\\n    display: 'flex',\\n    alignItems: 'center',\\n    '& div:first-of-type': {\\n      width: theme.spacing(6),\\n      height: theme.spacing(6),\\n      flexShrink: 0,\\n      marginRight: theme.spacing(1),\\n      borderRadius: theme.shape.borderRadius,\\n    },\\n  },\\n}));\\n\\nfunction Demo() {\\n  const classes = useStyles();\\n  const theme = useTheme();\\n\\n  const item = (color, name, expanded = false, border = false) => (\\n    <Grid item xs={12} sm={6} md={expanded ? 8 : 4} className={classes.color}>\\n      <div\\n        style={{\\n          backgroundColor: color,\\n          border: border ? `1px solid ${theme.palette.divider}` : undefined,\\n        }}\\n      />\\n      <div>\\n        <Typography variant=\\\"body2\\\">{name}</Typography>\\n        <Typography variant=\\\"body2\\\" color=\\\"textSecondary\\\">\\n          {color}\\n        </Typography>\\n      </div>\\n    </Grid>\\n  );\\n\\n  return (\\n    <div className={classes.root}>\\n      <Typography gutterBottom>Typography</Typography>\\n      <Grid container spacing={1}>\\n        {item(theme.palette.text.primary, 'palette.text.primary')}\\n        {item(theme.palette.text.secondary, 'palette.text.secondary')}\\n        {item(theme.palette.text.disabled, 'palette.text.disabled')}\\n      </Grid>\\n      <Typography gutterBottom className={classes.group}>\\n        Buttons\\n      </Typography>\\n      <Grid container spacing={1}>\\n        {item(theme.palette.action.active, 'palette.action.active')}\\n        {item(theme.palette.action.hover, 'palette.action.hover')}\\n        {item(theme.palette.action.selected, 'palette.action.selected')}\\n        {item(theme.palette.action.disabled, 'palette.action.disabled')}\\n        {item(\\n          theme.palette.action.disabledBackground,\\n          'palette.action.disabledBackground',\\n          true,\\n        )}\\n      </Grid>\\n      <Typography gutterBottom className={classes.group}>\\n        Background\\n      </Typography>\\n      <Grid container spacing={1}>\\n        {item(\\n          theme.palette.background.default,\\n          'palette.background.default',\\n          false,\\n          true,\\n        )}\\n        {item(theme.palette.background.paper, 'palette.background.paper')}\\n      </Grid>\\n      <Typography gutterBottom className={classes.group}>\\n        Divider\\n      </Typography>\\n      <Grid container spacing={1}>\\n        {item(theme.palette.divider, 'palette.divider')}\\n      </Grid>\\n    </div>\\n  );\\n}\\n\\nconst lightTheme = createMuiTheme();\\nconst darkTheme = createMuiTheme({\\n  palette: {\\n    // Switching the dark mode on is a single property value change.\\n    type: 'dark',\\n  },\\n});\\n\\nexport default function DarkTheme() {\\n  // Note that if you intend to use two or more themes at the same time on your site,\\n  // you need to wrap them with a single ThemeProvider at the root (not like in this example).\\n  return (\\n    <div style={{ width: '100%' }}>\\n      <ThemeProvider theme={darkTheme}>\\n        <Demo />\\n      </ThemeProvider>\\n      <ThemeProvider theme={lightTheme}>\\n        <Demo />\\n      </ThemeProvider>\\n    </div>\\n  );\\n}\\n\"},PpYF:function(e,t,n){\"use strict\";t.a={50:\"#f3e5f5\",100:\"#e1bee7\",200:\"#ce93d8\",300:\"#ba68c8\",400:\"#ab47bc\",500:\"#9c27b0\",600:\"#8e24aa\",700:\"#7b1fa2\",800:\"#6a1b9a\",900:\"#4a148c\",A100:\"#ea80fc\",A200:\"#e040fb\",A400:\"#d500f9\",A700:\"#aa00ff\"}},SHTp:function(e,t){e.exports=\"import React from 'react';\\nimport { createMuiTheme } from '@material-ui/core/styles';\\nimport { ThemeProvider } from '@material-ui/styles';\\nimport { purple } from '@material-ui/core/colors';\\nimport Button from '@material-ui/core/Button';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      // Purple and green play nicely together.\\n      main: purple[500],\\n    },\\n    secondary: {\\n      // This is green.A700 as hex.\\n      main: '#11cb5f',\\n    },\\n  },\\n});\\n\\nexport default function Palette() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <Button color=\\\"primary\\\">Primary</Button>\\n      <Button color=\\\"secondary\\\">Secondary</Button>\\n    </ThemeProvider>\\n  );\\n}\\n\"},UPrG:function(e,t){e.exports=\"import React from 'react';\\nimport { createMuiTheme } from '@material-ui/core/styles';\\nimport { ThemeProvider } from '@material-ui/styles';\\nimport { purple } from '@material-ui/core/colors';\\nimport Button from '@material-ui/core/Button';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      // Purple and green play nicely together.\\n      main: purple[500],\\n    },\\n    secondary: {\\n      // This is green.A700 as hex.\\n      main: '#11cb5f',\\n    },\\n  },\\n});\\n\\nexport default function Palette() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <Button color=\\\"primary\\\">Primary</Button>\\n      <Button color=\\\"secondary\\\">Secondary</Button>\\n    </ThemeProvider>\\n  );\\n}\\n\"},UWgT:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/customization/palette\",function(){return n(\"wLPO\")}])},W4Mb:function(e,t){e.exports=\"# crwdns93584:0crwdne93584:0\\n\\n<p class=\\\"description\\\">crwdns93586:0crwdne93586:0</p>\\n\\n## crwdns133380:0crwdne133380:0\\n\\ncrwdns133382:0crwdne133382:0 crwdns133384:0crwdne133384:0\\n\\n- crwdns133386:0crwdne133386:0 crwdns133388:0crwdne133388:0\\n- crwdns133390:0crwdne133390:0 crwdns133392:0crwdne133392:0 crwdns133394:0crwdne133394:0\\n- crwdns133396:0crwdne133396:0\\n- crwdns133398:0crwdne133398:0\\n- crwdns133400:0crwdne133400:0\\n- crwdns133402:0crwdne133402:0\\n\\ncrwdns133404:0crwdne133404:0\\n\\n## crwdns133406:0crwdne133406:0\\n\\ncrwdns133408:0crwdne133408:0\\n\\ncrwdns130896:0crwdne130896:0\\n\\ncrwdns133410:0crwdne133410:0\\n\\n## crwdns133412:0crwdne133412:0\\n\\ncrwdns133414:0crwdne133414:0 crwdns133416:0crwdne133416:0\\n\\n- [`crwdns133420:0crwdne133420:0`](crwdns133418:0crwdne133418:0)\\n- [`crwdns133424:0crwdne133424:0`](crwdns133422:0crwdne133422:0)\\n- [`crwdns133428:0crwdne133428:0`](crwdns133426:0crwdne133426:0)\\n- [`crwdns133432:0crwdne133432:0`](crwdns133430:0crwdne133430:0)\\n- [`crwdns133436:0crwdne133436:0`](crwdns133434:0crwdne133434:0)\\n- [`crwdns133440:0crwdne133440:0`](crwdns133438:0crwdne133438:0)\\n\\ncrwdns133442:0crwdne133442:0\\n\\ncrwdns133444:0crwdne133444:0\\n\\n```ts\\ncrwdns133446:0crwdne133446:0\\n```\\n\\n### crwdns133448:0crwdne133448:0\\n\\ncrwdns93616:0crwdne93616:0\\n\\n```js\\ncrwdns93618:0{ createMuiTheme }crwdnd93618:0{\\n    primary: blue,\\n  }crwdne93618:0\\n```\\n\\n### crwdns133450:0crwdne133450:0\\n\\ncrwdns133452:0crwdne133452:0\\n\\n```js\\ncrwdns107065:0{ createMuiTheme }crwdne107065:0\\n    crwdns107219:0crwdne107219:0\\n    crwdns107069:0crwdne107069:0\\n    crwdns107071:0crwdne107071:0\\n```\\n\\ncrwdns133454:0crwdne133454:0\\n\\n- crwdns133456:0crwdne133456:0\\n- crwdns133458:0crwdne133458:0\\n\\ncrwdns133460:0crwdne133460:0 crwdns133462:0crwdne133462:0\\n\\n```ts\\ncrwdns131646:0crwdne131646:0\\n```\\n\\ncrwdns133464:0crwdne133464:0 crwdns133466:0crwdne133466:0\\n\\ncrwdns133468:0crwdne133468:0\\n\\n### crwdns133470:0crwdne133470:0\\n\\ncrwdns133472:0crwdne133472:0\\n\\n### crwdns133474:0crwdne133474:0\\n\\ncrwdns133476:0crwdne133476:0\\n\\n```js\\ncrwdns133478:0{ createMuiTheme }crwdnd133478:0{\\n    danger: '#e53e3e',\\n  }crwdnd133478:0{\\n      main: '#5c6ac4',\\n    }crwdne133478:0\\n```\\n\\ncrwdns133480:0crwdne133480:0\\n\\n```ts\\ncrwdns133482:0crwdne133482:0\\n```\\n\\n## crwdns133484:0crwdne133484:0\\n\\ncrwdns133486:0crwdne133486:0 crwdns133488:0crwdne133488:0\\n\\n## crwdns133490:0crwdne133490:0\\n\\ncrwdns133492:0crwdne133492:0 crwdns133494:0crwdne133494:0 crwdns133496:0crwdne133496:0\\n\\n```js\\ncrwdns133498:0{\\n    type: 'dark',\\n  }crwdne133498:0\\n```\\n\\ncrwdns133500:0crwdne133500:0\\n\\ncrwdns133502:0crwdne133502:0\\n\\n### crwdns133504:0crwdne133504:0\\n\\ncrwdns133506:0crwdne133506:0 crwdns133508:0crwdne133508:0 crwdns133510:0crwdne133510:0\\n\\ncrwdns133512:0crwdne133512:0\\n\\ncrwdns133514:0crwdne133514:0\\n\\n```jsx\\ncrwdns133516:0{ createMuiTheme, ThemeProvider }crwdne133516:0 crwdns133518:0[prefersDarkMode]crwdnd133518:0{theme}crwdne133518:0\\n```\"},XOHp:function(e,t){e.exports='# Palette\\n\\n<p class=\"description\">In der Palette k\\xf6nnen Sie die Farbe der Komponenten an Ihre Marke anpassen.</p>\\n\\n## Palette colors\\n\\nA color intention is a mapping of a palette color to a given intention within your application. The theme exposes the following palette colors (accessible under `theme.palette.`):\\n\\n- *primary* - used to represent primary interface elements for a user. It\\'s the color displayed most frequently across your app\\'s screens and components.\\n- *secondary* - used to represent secondary interface elements for a user. It provides more ways to accent and distinguish your product. Having it is optional.\\n- *error* - used to represent interface elements that the user should be made aware of.\\n- *warning* - used to represent potentially dangerous actions or important messages.\\n- *info* - used to present information to the user that is neutral and not necessarily important.\\n- *success* - used to indicate the successful completion of an action that user triggered.\\n\\nIf you want to learn more about color, you can check out [the color section](/customization/color/).\\n\\n## Default values\\n\\nYou can explore the default values of the palette using [the theme explorer](/customization/default-theme/?expand-path=$.palette) or by opening the dev tools console on this page (`window.theme.palette`).\\n\\n{{\"demo\": \"pages/customization/palette/Intentions.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\nDie Standardpalette verwendet die mit `A` (`A200` usw.) gekennzeichneten Schattierungen f\\xfcr die sekund\\xe4re Intention, und die nicht vorangestellten Farben f\\xfcr die anderen Intentionen.\\n\\n## Individuelle Anpassung\\n\\nYou may override the default palette values by including a palette object as part of your theme. If any of the:\\n\\n- [`palette.primary`](/customization/default-theme/?expand-path=$.palette.primary)\\n- [`palette.secondary`](/customization/default-theme/?expand-path=$.palette.secondary)\\n- [`palette.error`](/customization/default-theme/?expand-path=$.palette.error)\\n- [`palette.warning`](/customization/default-theme/?expand-path=$.palette.warning)\\n- [`palette.info`](/customization/default-theme/?expand-path=$.palette.info)\\n- [`palette.success`](/customization/default-theme/?expand-path=$.palette.success)\\n\\npalette color objects are provided, they will replace the defaults.\\n\\nThe palette color value can either be a [color](/customization/color/#2014-material-design-color-palettes) object, or an object with one or more of the keys specified by the following TypeScript interface:\\n\\n```ts\\ninterface PaletteColor {\\n  light?: string;\\n  main: string;\\n  dark?: string;\\n  contrastText?: string;\\n}\\n```\\n\\n### Verwenden eines Farbobjekts\\n\\nDie einfachste M\\xf6glichkeit, eine Absicht anzupassen, besteht darin, eine oder mehrere der angegebenen Farben zu importieren und auf eine Palettenabsicht anzuwenden:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\nimport blue from \\'@material-ui/core/colors/blue\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: blue,\\n  },\\n});\\n```\\n\\n### Die Farben direkt zur Verf\\xfcgung stellen\\n\\nWenn Sie mehr benutzerdefinierte Farben bereitstellen m\\xf6chten, k\\xf6nnen Sie entweder ein eigenes Farbobjekt erstellen oder Farben f\\xfcr einige oder alle Schl\\xfcssel der Absichten direkt angeben:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      // light: will be calculated from palette.primary.main,\\n      main: \\'#ff4400\\',\\n      // dark: will be calculated from palette.primary.main,\\n      // contrastText: will be calculated to contrast with palette.primary.main\\n    },\\n    secondary: {\\n      light: \\'#0066ff\\',\\n      main: \\'#0044ff\\',\\n      // dark: will be calculated from palette.secondary.main,\\n      contrastText: \\'#ffcc00\\',\\n    },\\n    // Used by `getContrastText()` to maximize the contrast between\\n    // the background and the text.\\n    contrastThreshold: 3,\\n    // Used by the functions below to shift a color\\'s luminance by approximately\\n    // two indexes within its tonal palette.\\n    // Zum Beispiel von Red 500 zu Red 300 oder Red 700 zu wechseln.\\n    tonalOffset: 0.2,\\n  },\\n});\\n```\\n\\nAs in the example above, if the intention object contains custom colors using any of the \"main\", \"light\", \"dark\" or \"contrastText\" keys, these map as follows:\\n\\n- If the \"dark\" and / or \"light\" keys are omitted, their value(s) will be calculated from \"main\", according to the \"tonalOffset\" value.\\n- If \"contrastText\" is omitted, its value will be calculated to contrast with \"main\", according to the \"contrastThreshold\" value.\\n\\nBoth the \"tonalOffset\" and \"contrastThreshold\" values may be customized as needed. The \"tonalOffset\" value can either be a number between 0 and 1, which will apply to both light and dark variants, or an object with light and dark variants specified by the following TypeScript type:\\n\\n```ts\\ntype PaletteTonalOffset = number | {\\n  light: number;\\n  dark: number;\\n};\\n```\\n\\nA higher value for \"tonalOffset\" will make calculated values for \"light\" lighter, and \"dark\" darker. A higher value for \"contrastThreshold\" increases the point at which a background color is considered light, and given a dark \"contrastText\".\\n\\nNote that \"contrastThreshold\" follows a non-linear curve.\\n\\n### Beispiel\\n\\n{{\"demo\": \"pages/customization/palette/Palette.js\", \"defaultCodeOpen\": true}}\\n\\n### Adding new colors\\n\\nYou can add new colors inside and outside the palette of the theme as follow:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  status: {\\n    danger: \\'#e53e3e\\',\\n  },\\n  palette: {\\n    neutral: {\\n      main: \\'#5c6ac4\\',\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\'@material-ui/core/styles/createMuiTheme\\' {\\n  interface Theme {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\'],\\n    }\\n  }\\n  interface ThemeOptions {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\']\\n    }\\n  }\\n}\\n\\ndeclare module \"@material-ui/core/styles/createPalette\" {\\n  interface Palette {\\n    neutral: Palette[\\'primary\\'];\\n  }\\n  interface PaletteOptions {\\n    neutral: PaletteOptions[\\'primary\\'];\\n  }\\n}\\n```\\n\\n## Picking colors\\n\\nEtwas Inspiration gef\\xe4llig? The Material Design team has built an [palette configuration tool](/customization/color/#picking-colors) to help you.\\n\\n## Dark mode\\n\\nMaterial-UI comes with two palette types, light (the default) and dark. You can make the theme dark by setting `type: \\'dark\\'`. While it\\'s only a single property value change, internally it modifies several palette values.\\n\\n```js\\nconst darkTheme = createMuiTheme({\\n  palette: {\\n    type: \\'dark\\',\\n  },\\n});\\n```\\n\\nThe colors modified by the palette type are the following:\\n\\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\n### User preference\\n\\nUsers might have specified a preference for a light or dark theme. The method by which the user expresses their preference can vary. It might be a system-wide setting exposed by the Operating System, or a setting controlled by the User Agent.\\n\\nYou can leverage this preference dynamically with the [useMediaQuery](/components/use-media-query/) hook and the [prefers-color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media query.\\n\\nFor instance, you can enable the dark mode automatically:\\n\\n```jsx\\nimport React from \\'react\\';\\nimport useMediaQuery from \\'@material-ui/core/useMediaQuery\\';\\nimport { createMuiTheme, ThemeProvider } from \\'@material-ui/core/styles\\';\\nimport CssBaseline from \\'@material-ui/core/CssBaseline\\';\\n\\nfunction App() {\\n  const prefersDarkMode = useMediaQuery(\\'(prefers-color-scheme: dark)\\');\\n\\n  const theme = React.useMemo(\\n    () =>\\n      createMuiTheme({\\n        palette: {\\n          type: prefersDarkMode ? \\'dark\\' : \\'light\\',\\n        },\\n      }),\\n    [prefersDarkMode],\\n  );\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <CssBaseline/>\\n      <Routes />\\n    </ThemeProvider>\\n  );\\n}\\n```'},\"Xem/\":function(e,t,n){var a={\"./DarkTheme.js\":\"IIvE\",\"./Intentions.js\":\"I6Gs\",\"./Palette.js\":\"SHTp\",\"./Palette.tsx\":\"UPrG\",\"./palette-aa.md\":\"W4Mb\",\"./palette-de.md\":\"XOHp\",\"./palette-es.md\":\"h3Ka\",\"./palette-fr.md\":\"YxgZ\",\"./palette-ja.md\":\"HO+e\",\"./palette-pt.md\":\"BGFs\",\"./palette-ru.md\":\"xZAq\",\"./palette-zh.md\":\"9d77\",\"./palette.md\":\"nptn\"};function r(e){var t=o(e);return n(t)}function o(e){if(!n.o(a,e)){var t=new Error(\"Cannot find module '\"+e+\"'\");throw t.code=\"MODULE_NOT_FOUND\",t}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=o,e.exports=r,r.id=\"Xem/\"},YxgZ:function(e,t){e.exports='# Palette\\n\\n<p class=\"description\">The palette enables you to modify the color of the components to suit your brand.</p>\\n\\n## Palette colors\\n\\nA color intention is a mapping of a palette color to a given intention within your application. The theme exposes the following palette colors (accessible under `theme.palette.`):\\n\\n- *primary* - used to represent primary interface elements for a user. It\\'s the color displayed most frequently across your app\\'s screens and components.\\n- *secondary* - used to represent secondary interface elements for a user. It provides more ways to accent and distinguish your product. Having it is optional.\\n- *error* - used to represent interface elements that the user should be made aware of.\\n- *warning* - used to represent potentially dangerous actions or important messages.\\n- *info* - used to present information to the user that is neutral and not necessarily important.\\n- *success* - used to indicate the successful completion of an action that user triggered.\\n\\nIf you want to learn more about color, you can check out [the color section](/customization/color/).\\n\\n## Default values\\n\\nYou can explore the default values of the palette using [the theme explorer](/customization/default-theme/?expand-path=$.palette) or by opening the dev tools console on this page (`window.theme.palette`).\\n\\n{{\"demo\": \"pages/customization/palette/Intentions.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\nThe default palette uses the shades prefixed with `A` (`A200`, etc.) for the secondary intention, and the un-prefixed shades for the other intentions.\\n\\n## Personnalisation\\n\\nYou may override the default palette values by including a palette object as part of your theme. If any of the:\\n\\n- [`palette.primary`](/customization/default-theme/?expand-path=$.palette.primary)\\n- [`palette.secondary`](/customization/default-theme/?expand-path=$.palette.secondary)\\n- [`palette.error`](/customization/default-theme/?expand-path=$.palette.error)\\n- [`palette.warning`](/customization/default-theme/?expand-path=$.palette.warning)\\n- [`palette.info`](/customization/default-theme/?expand-path=$.palette.info)\\n- [`palette.success`](/customization/default-theme/?expand-path=$.palette.success)\\n\\npalette color objects are provided, they will replace the defaults.\\n\\nThe palette color value can either be a [color](/customization/color/#2014-material-design-color-palettes) object, or an object with one or more of the keys specified by the following TypeScript interface:\\n\\n```ts\\ninterface PaletteColor {\\n  light?: string;\\n  main: string;\\n  dark?: string;\\n  contrastText?: string;\\n}\\n```\\n\\n### Using a color object\\n\\nThe simplest way to customize an intention is to import one or more of the provided colors and apply them to a palette intention:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\nimport blue from \\'@material-ui/core/colors/blue\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: blue,\\n  },\\n});\\n```\\n\\n### Providing the colors directly\\n\\nIf you wish to provide more customized colors, you can either create your own color object, or directly supply colors to some or all of the intention\\'s keys:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      // light: will be calculated from palette.primary.main,\\n      main: \\'#ff4400\\',\\n      // dark: will be calculated from palette.primary.main,\\n      // contrastText: will be calculated to contrast with palette.primary.main\\n    },\\n    secondary: {\\n      light: \\'#0066ff\\',\\n      main: \\'#0044ff\\',\\n      // dark: will be calculated from palette.secondary.main,\\n      contrastText: \\'#ffcc00\\',\\n    },\\n    // Used by `getContrastText()` to maximize the contrast between\\n    // the background and the text.\\n    contrastThreshold: 3,\\n    // Used by the functions below to shift a color\\'s luminance by approximately\\n    // two indexes within its tonal palette.\\n    // E.g., shift from Red 500 to Red 300 or Red 700.\\n    tonalOffset: 0.2,\\n  },\\n});\\n```\\n\\nAs in the example above, if the intention object contains custom colors using any of the \"main\", \"light\", \"dark\" or \"contrastText\" keys, these map as follows:\\n\\n- If the \"dark\" and / or \"light\" keys are omitted, their value(s) will be calculated from \"main\", according to the \"tonalOffset\" value.\\n- If \"contrastText\" is omitted, its value will be calculated to contrast with \"main\", according to the \"contrastThreshold\" value.\\n\\nBoth the \"tonalOffset\" and \"contrastThreshold\" values may be customized as needed. The \"tonalOffset\" value can either be a number between 0 and 1, which will apply to both light and dark variants, or an object with light and dark variants specified by the following TypeScript type:\\n\\n```ts\\ntype PaletteTonalOffset = number | {\\n  light: number;\\n  dark: number;\\n};\\n```\\n\\nA higher value for \"tonalOffset\" will make calculated values for \"light\" lighter, and \"dark\" darker. A higher value for \"contrastThreshold\" increases the point at which a background color is considered light, and given a dark \"contrastText\".\\n\\nNote that \"contrastThreshold\" follows a non-linear curve.\\n\\n### Exemple\\n\\n{{\"demo\": \"pages/customization/palette/Palette.js\", \"defaultCodeOpen\": true}}\\n\\n### Adding new colors\\n\\nYou can add new colors inside and outside the palette of the theme as follow:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  status: {\\n    danger: \\'#e53e3e\\',\\n  },\\n  palette: {\\n    neutral: {\\n      main: \\'#5c6ac4\\',\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\'@material-ui/core/styles/createMuiTheme\\' {\\n  interface Theme {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\'],\\n    }\\n  }\\n  interface ThemeOptions {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\']\\n    }\\n  }\\n}\\n\\ndeclare module \"@material-ui/core/styles/createPalette\" {\\n  interface Palette {\\n    neutral: Palette[\\'primary\\'];\\n  }\\n  interface PaletteOptions {\\n    neutral: PaletteOptions[\\'primary\\'];\\n  }\\n}\\n```\\n\\n## Picking colors\\n\\nNeed inspiration? The Material Design team has built an [palette configuration tool](/customization/color/#picking-colors) to help you.\\n\\n## Dark mode\\n\\nMaterial-UI comes with two palette types, light (the default) and dark. You can make the theme dark by setting `type: \\'dark\\'`. While it\\'s only a single property value change, internally it modifies several palette values.\\n\\n```js\\nconst darkTheme = createMuiTheme({\\n  palette: {\\n    type: \\'dark\\',\\n  },\\n});\\n```\\n\\nThe colors modified by the palette type are the following:\\n\\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\n### User preference\\n\\nUsers might have specified a preference for a light or dark theme. The method by which the user expresses their preference can vary. It might be a system-wide setting exposed by the Operating System, or a setting controlled by the User Agent.\\n\\nYou can leverage this preference dynamically with the [useMediaQuery](/components/use-media-query/) hook and the [prefers-color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media query.\\n\\nFor instance, you can enable the dark mode automatically:\\n\\n```jsx\\nimport React from \\'react\\';\\nimport useMediaQuery from \\'@material-ui/core/useMediaQuery\\';\\nimport { createMuiTheme, ThemeProvider } from \\'@material-ui/core/styles\\';\\nimport CssBaseline from \\'@material-ui/core/CssBaseline\\';\\n\\nfunction App() {\\n  const prefersDarkMode = useMediaQuery(\\'(prefers-color-scheme: dark)\\');\\n\\n  const theme = React.useMemo(\\n    () =>\\n      createMuiTheme({\\n        palette: {\\n          type: prefersDarkMode ? \\'dark\\' : \\'light\\',\\n        },\\n      }),\\n    [prefersDarkMode],\\n  );\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <CssBaseline/>\\n      <Routes />\\n    </ThemeProvider>\\n  );\\n}\\n```'},fXpW:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"default\",(function(){return v}));var a=n(\"azxR\"),r=n(\"mXGw\"),o=n.n(r),i=n(\"Oy88\"),s=n(\"pQ8Y\"),l=n(\"yZEQ\"),c=n(\"LMpM\"),d=n(\"mKyP\"),p=n(\"h7Hf\"),m=o.a.createElement,u=Object(l.a)((function(e){return{root:Object(a.a)({backgroundColor:e.palette.background.default,color:e.palette.text.primary,padding:e.spacing(2)},e.breakpoints.up(\"md\"),{padding:e.spacing(3)}),group:{marginTop:e.spacing(3)},color:{display:\"flex\",alignItems:\"center\",\"& div:first-of-type\":{width:e.spacing(6),height:e.spacing(6),flexShrink:0,marginRight:e.spacing(1),borderRadius:e.shape.borderRadius}}}})),h=m(i.a,{gutterBottom:!0},\"Typography\");function f(){var e=u(),t=Object(c.a)(),n=function(n,a){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return m(s.a,{item:!0,xs:12,sm:6,md:r?8:4,className:e.color},m(\"div\",{style:{backgroundColor:n,border:o?\"1px solid \".concat(t.palette.divider):void 0}}),m(\"div\",null,m(i.a,{variant:\"body2\"},a),m(i.a,{variant:\"body2\",color:\"textSecondary\"},n)))};return m(\"div\",{className:e.root},h,m(s.a,{container:!0,spacing:1},n(t.palette.text.primary,\"palette.text.primary\"),n(t.palette.text.secondary,\"palette.text.secondary\"),n(t.palette.text.disabled,\"palette.text.disabled\")),m(i.a,{gutterBottom:!0,className:e.group},\"Buttons\"),m(s.a,{container:!0,spacing:1},n(t.palette.action.active,\"palette.action.active\"),n(t.palette.action.hover,\"palette.action.hover\"),n(t.palette.action.selected,\"palette.action.selected\"),n(t.palette.action.disabled,\"palette.action.disabled\"),n(t.palette.action.disabledBackground,\"palette.action.disabledBackground\",!0)),m(i.a,{gutterBottom:!0,className:e.group},\"Background\"),m(s.a,{container:!0,spacing:1},n(t.palette.background.default,\"palette.background.default\",!1,!0),n(t.palette.background.paper,\"palette.background.paper\")),m(i.a,{gutterBottom:!0,className:e.group},\"Divider\"),m(s.a,{container:!0,spacing:1},n(t.palette.divider,\"palette.divider\")))}var y=Object(d.a)(),g=Object(d.a)({palette:{type:\"dark\"}}),w=m(p.a,{theme:g},m(f,null)),b=m(p.a,{theme:y},m(f,null));function v(){return m(\"div\",{style:{width:\"100%\"}},w,b)}},h3Ka:function(e,t){e.exports='# Paleta\\n\\n<p class=\"description\">La paleta le permite modificar el color de los componentes para adaptarse a su marca.</p>\\n\\n## Palette colors\\n\\nA color intention is a mapping of a palette color to a given intention within your application. The theme exposes the following palette colors (accessible under `theme.palette.`):\\n\\n- *primary* - used to represent primary interface elements for a user. It\\'s the color displayed most frequently across your app\\'s screens and components.\\n- *secondary* - used to represent secondary interface elements for a user. It provides more ways to accent and distinguish your product. Having it is optional.\\n- *error* - used to represent interface elements that the user should be made aware of.\\n- *warning* - used to represent potentially dangerous actions or important messages.\\n- *info* - used to present information to the user that is neutral and not necessarily important.\\n- *success* - used to indicate the successful completion of an action that user triggered.\\n\\nSi quieres aprender m\\xe1s sobre el color, puedes echar un vistazo a [la secci\\xf3n de color](/customization/color/).\\n\\n## Default values\\n\\nYou can explore the default values of the palette using [the theme explorer](/customization/default-theme/?expand-path=$.palette) or by opening the dev tools console on this page (`window.theme.palette`).\\n\\n{{\"demo\": \"pages/customization/palette/Intentions.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\nLa paleta predeterminada utiliza los tonos con prefijo `A` (`A200`, etc.) para los prop\\xf3sitos secundarios, y los tonos sin prefijo para las otras intenciones.\\n\\n## Personalizaci\\xf3n\\n\\nPuede anular los valores de la paleta por defecto incluyendo un objeto de paleta como parte de su tema. If any of the:\\n\\n- [`palette.primary`](/customization/default-theme/?expand-path=$.palette.primary)\\n- [`palette.secondary`](/customization/default-theme/?expand-path=$.palette.secondary)\\n- [`palette.error`](/customization/default-theme/?expand-path=$.palette.error)\\n- [`palette.warning`](/customization/default-theme/?expand-path=$.palette.warning)\\n- [`palette.info`](/customization/default-theme/?expand-path=$.palette.info)\\n- [`palette.success`](/customization/default-theme/?expand-path=$.palette.success)\\n\\npalette color objects are provided, they will replace the defaults.\\n\\nThe palette color value can either be a [color](/customization/color/#2014-material-design-color-palettes) object, or an object with one or more of the keys specified by the following TypeScript interface:\\n\\n```ts\\ninterface PaletteColor {\\n  light?: string;\\n  main: string;\\n  dark?: string;\\n  contrastText?: string;\\n}\\n```\\n\\n### Utilizando un objeto de color\\n\\nLa forma m\\xe1s sencilla de personalizar un prop\\xf3sito de color es importar uno o m\\xe1s de los colores proporcionados y aplicarlos a una intenci\\xf3n de paleta:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\nimport blue from \\'@material-ui/core/colors/blue\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: blue,\\n  },\\n});\\n```\\n\\n### Proporcionando los colores directamente\\n\\nSi desea proporcionar colores m\\xe1s personalizados, puede crear su propio objeto de color, o directamente proporciona colores a algunas o todas las claves del prop\\xf3sito de color:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      // light: will be calculated from palette.primary.main,\\n      main: \\'#ff4400\\',\\n      // dark: will be calculated from palette.primary.main,\\n      // contrastText: will be calculated to contrast with palette.primary.main\\n    },\\n    secondary: {\\n      light: \\'#0066ff\\',\\n      main: \\'#0044ff\\',\\n      // dark: will be calculated from palette.secondary.main,\\n      contrastText: \\'#ffcc00\\',\\n    },\\n    // Used by `getContrastText()` to maximize the contrast between\\n    // the background and the text.\\n    contrastThreshold: 3,\\n    // Used by the functions below to shift a color\\'s luminance by approximately\\n    // two indexes within its tonal palette.\\n    // E.g., shift from Red 500 to Red 300 or Red 700.\\n    tonalOffset: 0.2,\\n  },\\n});\\n```\\n\\nComo en el ejemplo anterior, si el objeto de prop\\xf3sito de color contiene colores personalizados usando cualquiera de las claves \"main\", \"light\", \"dark\" o \"contrastText\", se mapean de la siguiente manera:\\n\\n- Si las claves \"dark\" y / o \"light\" son omitidas, su valor/es ser\\xe1n calculados desde \"main\", de acuerdo al valor de \"tonalOffset\".\\n- Si \"contrastText\" es omitido, su valor ser\\xe1 calculado para contrastar con \"main\", de acuerdo al valor de \"contrastThreshold\".\\n\\nTanto el valor de \"tonalOffset\" como el de \"contrastThreshold\" pueden ser personalizados seg\\xfan sea necesario. The \"tonalOffset\" value can either be a number between 0 and 1, which will apply to both light and dark variants, or an object with light and dark variants specified by the following TypeScript type:\\n\\n```ts\\ntype PaletteTonalOffset = number | {\\n  light: number;\\n  dark: number;\\n};\\n```\\n\\nA higher value for \"tonalOffset\" will make calculated values for \"light\" lighter, and \"dark\" darker. A higher value for \"contrastThreshold\" increases the point at which a background color is considered light, and given a dark \"contrastText\".\\n\\nNote that \"contrastThreshold\" follows a non-linear curve.\\n\\n### Ejemplo\\n\\n{{\"demo\": \"pages/customization/palette/Palette.js\", \"defaultCodeOpen\": true}}\\n\\n### Adding new colors\\n\\nYou can add new colors inside and outside the palette of the theme as follow:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  status: {\\n    danger: \\'#e53e3e\\',\\n  },\\n  palette: {\\n    neutral: {\\n      main: \\'#5c6ac4\\',\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\'@material-ui/core/styles/createMuiTheme\\' {\\n  interface Theme {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\'],\\n    }\\n  }\\n  interface ThemeOptions {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\']\\n    }\\n  }\\n}\\n\\ndeclare module \"@material-ui/core/styles/createPalette\" {\\n  interface Palette {\\n    neutral: Palette[\\'primary\\'];\\n  }\\n  interface PaletteOptions {\\n    neutral: PaletteOptions[\\'primary\\'];\\n  }\\n}\\n```\\n\\n## Picking colors\\n\\nNeed inspiration? The Material Design team has built an [palette configuration tool](/customization/color/#picking-colors) to help you.\\n\\n## Dark mode\\n\\nMaterial-UI comes with two palette types, light (the default) and dark. You can make the theme dark by setting `type: \\'dark\\'`. While it\\'s only a single property value change, internally it modifies several palette values.\\n\\n```js\\nconst darkTheme = createMuiTheme({\\n  palette: {\\n    type: \\'dark\\',\\n  },\\n});\\n```\\n\\nThe colors modified by the palette type are the following:\\n\\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\n### User preference\\n\\nUsers might have specified a preference for a light or dark theme. The method by which the user expresses their preference can vary. It might be a system-wide setting exposed by the Operating System, or a setting controlled by the User Agent.\\n\\nYou can leverage this preference dynamically with the [useMediaQuery](/components/use-media-query/) hook and the [prefers-color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media query.\\n\\nFor instance, you can enable the dark mode automatically:\\n\\n```jsx\\nimport React from \\'react\\';\\nimport useMediaQuery from \\'@material-ui/core/useMediaQuery\\';\\nimport { createMuiTheme, ThemeProvider } from \\'@material-ui/core/styles\\';\\nimport CssBaseline from \\'@material-ui/core/CssBaseline\\';\\n\\nfunction App() {\\n  const prefersDarkMode = useMediaQuery(\\'(prefers-color-scheme: dark)\\');\\n\\n  const theme = React.useMemo(\\n    () =>\\n      createMuiTheme({\\n        palette: {\\n          type: prefersDarkMode ? \\'dark\\' : \\'light\\',\\n        },\\n      }),\\n    [prefersDarkMode],\\n  );\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <CssBaseline/>\\n      <Routes />\\n    </ThemeProvider>\\n  );\\n}\\n```'},nptn:function(e,t){e.exports='# Palette\\n\\n<p class=\"description\">The palette enables you to modify the color of the components to suit your brand.</p>\\n\\n## Palette colors\\n\\nThe theme exposes the following palette colors (accessible under `theme.palette.`):\\n\\n- _primary_ - used to represent primary interface elements for a user. It\\'s the color displayed most frequently across your app\\'s screens and components.\\n- _secondary_ - used to represent secondary interface elements for a user. It provides more ways to accent and distinguish your product. Having it is optional.\\n- _error_ - used to represent interface elements that the user should be made aware of.\\n- _warning_ - used to represent potentially dangerous actions or important messages.\\n- _info_ - used to present information to the user that is neutral and not necessarily important.\\n- _success_ - used to indicate the successful completion of an action that user triggered.\\n\\nIf you want to learn more about color, you can check out [the color section](/customization/color/).\\n\\n## Default values\\n\\nYou can explore the default values of the palette using [the theme explorer](/customization/default-theme/?expand-path=$.palette) or by opening the dev tools console on this page (`window.theme.palette`).\\n\\n{{\"demo\": \"pages/customization/palette/Intentions.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\nThe default palette uses the shades prefixed with `A` (`A200`, etc.) for the secondary palette color,\\nand the un-prefixed shades for the other palette colors.\\n\\n## Customization\\n\\nYou may override the default palette values by including a palette object as part of your theme.\\nIf any of the:\\n\\n- [`palette.primary`](/customization/default-theme/?expand-path=$.palette.primary)\\n- [`palette.secondary`](/customization/default-theme/?expand-path=$.palette.secondary)\\n- [`palette.error`](/customization/default-theme/?expand-path=$.palette.error)\\n- [`palette.warning`](/customization/default-theme/?expand-path=$.palette.warning)\\n- [`palette.info`](/customization/default-theme/?expand-path=$.palette.info)\\n- [`palette.success`](/customization/default-theme/?expand-path=$.palette.success)\\n\\npalette color objects are provided, they will replace the default ones.\\n\\nThe palette color value can either be a [color](/customization/color/#2014-material-design-color-palettes) object, or an object with one or more of the keys specified by the following TypeScript interface:\\n\\n```ts\\ninterface PaletteColor {\\n  light?: string;\\n  main: string;\\n  dark?: string;\\n  contrastText?: string;\\n}\\n```\\n\\n### Using a color object\\n\\nThe simplest way to customize a palette color is to import one or more of the provided colors\\nand apply them:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\nimport blue from \\'@material-ui/core/colors/blue\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: blue,\\n  },\\n});\\n```\\n\\n### Providing the colors directly\\n\\nIf you wish to provide more customized colors, you can either create your own palette color,\\nor directly supply colors to some or all of the `theme.palette` keys:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      // light: will be calculated from palette.primary.main,\\n      main: \\'#ff4400\\',\\n      // dark: will be calculated from palette.primary.main,\\n      // contrastText: will be calculated to contrast with palette.primary.main\\n    },\\n    secondary: {\\n      light: \\'#0066ff\\',\\n      main: \\'#0044ff\\',\\n      // dark: will be calculated from palette.secondary.main,\\n      contrastText: \\'#ffcc00\\',\\n    },\\n    // Used by `getContrastText()` to maximize the contrast between\\n    // the background and the text.\\n    contrastThreshold: 3,\\n    // Used by the functions below to shift a color\\'s luminance by approximately\\n    // two indexes within its tonal palette.\\n    // E.g., shift from Red 500 to Red 300 or Red 700.\\n    tonalOffset: 0.2,\\n  },\\n});\\n```\\n\\nAs in the example above, if the palette color contains custom colors using any of the\\n\"main\", \"light\", \"dark\" or \"contrastText\" keys, these map as follows:\\n\\n- If the \"dark\" and / or \"light\" keys are omitted, their value(s) will be calculated from \"main\",\\n  according to the \"tonalOffset\" value.\\n- If \"contrastText\" is omitted, its value will be calculated to contrast with \"main\",\\n  according to the \"contrastThreshold\" value.\\n\\nBoth the \"tonalOffset\" and \"contrastThreshold\" values may be customized as needed.\\nThe \"tonalOffset\" value can either be a number between 0 and 1, which will apply to both light and dark variants, or an object with light and dark variants specified by the following TypeScript type:\\n\\n```ts\\ntype PaletteTonalOffset =\\n  | number\\n  | {\\n      light: number;\\n      dark: number;\\n    };\\n```\\n\\nA higher value for \"tonalOffset\" will make calculated values for \"light\" lighter, and \"dark\" darker.\\nA higher value for \"contrastThreshold\" increases the point at which a background color is considered\\nlight, and given a dark \"contrastText\".\\n\\nNote that \"contrastThreshold\" follows a non-linear curve.\\n\\n### Example\\n\\n{{\"demo\": \"pages/customization/palette/Palette.js\", \"defaultCodeOpen\": true}}\\n\\n### Adding new colors\\n\\nYou can add new colors inside and outside the palette of the theme as follow:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  status: {\\n    danger: \\'#e53e3e\\',\\n  },\\n  palette: {\\n    primary: {\\n      main: \\'#0971f1\\',\\n      darker: \\'#053e85\\',\\n    },\\n    neutral: {\\n      main: \\'#5c6ac4\\',\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\'@material-ui/core/styles/createMuiTheme\\' {\\n  interface Theme {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\'];\\n    };\\n  }\\n  interface PaletteColor {\\n    darker?: string;\\n  }\\n  interface SimplePaletteColorOptions {\\n    darker?: string;\\n  }\\n  interface ThemeOptions {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\'];\\n    };\\n  }\\n}\\n\\ndeclare module \\'@material-ui/core/styles/createPalette\\' {\\n  interface Palette {\\n    neutral: Palette[\\'primary\\'];\\n  }\\n  interface PaletteOptions {\\n    neutral: PaletteOptions[\\'primary\\'];\\n  }\\n}\\n```\\n\\n## Picking colors\\n\\nNeed inspiration? The Material Design team has built an [palette configuration tool](/customization/color/#picking-colors) to help you.\\n\\n## Dark mode\\n\\nMaterial-UI comes with two palette types, light (the default) and dark.\\nYou can make the theme dark by setting `type: \\'dark\\'`.\\nWhile it\\'s only a single property value change, internally it modifies several palette values.\\n\\n```js\\nconst darkTheme = createMuiTheme({\\n  palette: {\\n    type: \\'dark\\',\\n  },\\n});\\n```\\n\\nThe colors modified by the palette type are the following:\\n\\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\n### User preference\\n\\nUsers might have specified a preference for a light or dark theme.\\nThe method by which the user expresses their preference can vary. It might be a system-wide setting exposed by the Operating System, or a setting controlled by the User Agent.\\n\\nYou can leverage this preference dynamically with the [useMediaQuery](/components/use-media-query/) hook and the [prefers-color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media query.\\n\\nFor instance, you can enable the dark mode automatically:\\n\\n```jsx\\nimport React from \\'react\\';\\nimport useMediaQuery from \\'@material-ui/core/useMediaQuery\\';\\nimport { createMuiTheme, ThemeProvider } from \\'@material-ui/core/styles\\';\\nimport CssBaseline from \\'@material-ui/core/CssBaseline\\';\\n\\nfunction App() {\\n  const prefersDarkMode = useMediaQuery(\\'(prefers-color-scheme: dark)\\');\\n\\n  const theme = React.useMemo(\\n    () =>\\n      createMuiTheme({\\n        palette: {\\n          type: prefersDarkMode ? \\'dark\\' : \\'light\\',\\n        },\\n      }),\\n    [prefersDarkMode],\\n  );\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <CssBaseline />\\n      <Routes />\\n    </ThemeProvider>\\n  );\\n}\\n```\\n'},pQ8Y:function(e,t,n){\"use strict\";var a=n(\"2Fjn\"),r=n(\"bZJ2\"),o=n(\"yLsn\"),i=n.n(o),s=n(\"z3IF\"),l=n(\"mXGw\"),c=n(\"PDtE\"),d=n(\"XpU0\"),p=l.createElement,m=[0,1,2,3,4,5,6,7,8,9,10],u=[\"auto\",!0,1,2,3,4,5,6,7,8,9,10,11,12];function h(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=i()(e);return\"\".concat(n/t).concat(String(e).replace(String(n),\"\")||\"px\")}var f=l.forwardRef((function(e,t){var n=e.alignContent,r=void 0===n?\"stretch\":n,o=e.alignItems,i=void 0===o?\"stretch\":o,l=e.classes,d=e.className,m=e.component,u=void 0===m?\"div\":m,h=e.container,f=void 0!==h&&h,y=e.direction,g=void 0===y?\"row\":y,w=e.item,b=void 0!==w&&w,v=e.justify,T=void 0===v?\"flex-start\":v,k=e.lg,x=void 0!==k&&k,M=e.md,P=void 0!==M&&M,z=e.sm,j=void 0!==z&&z,S=e.spacing,O=void 0===S?0:S,I=e.wrap,C=void 0===I?\"wrap\":I,A=e.xl,R=void 0!==A&&A,B=e.xs,D=void 0!==B&&B,U=e.zeroMinWidth,$=void 0!==U&&U,G=Object(a.a)(e,[\"alignContent\",\"alignItems\",\"classes\",\"className\",\"component\",\"container\",\"direction\",\"item\",\"justify\",\"lg\",\"md\",\"sm\",\"spacing\",\"wrap\",\"xl\",\"xs\",\"zeroMinWidth\"]),N=Object(c.a)(l.root,d,f&&[l.container,0!==O&&l[\"spacing-xs-\".concat(String(O))]],b&&l.item,$&&l.zeroMinWidth,\"row\"!==g&&l[\"direction-xs-\".concat(String(g))],\"wrap\"!==C&&l[\"wrap-xs-\".concat(String(C))],\"stretch\"!==i&&l[\"align-items-xs-\".concat(String(i))],\"stretch\"!==r&&l[\"align-content-xs-\".concat(String(r))],\"flex-start\"!==T&&l[\"justify-xs-\".concat(String(T))],!1!==D&&l[\"grid-xs-\".concat(String(D))],!1!==j&&l[\"grid-sm-\".concat(String(j))],!1!==P&&l[\"grid-md-\".concat(String(P))],!1!==x&&l[\"grid-lg-\".concat(String(x))],!1!==R&&l[\"grid-xl-\".concat(String(R))]);return p(u,Object(s.a)({className:N,ref:t},G))})),y=Object(d.default)((function(e){return Object(r.a)(Object(r.a)({root:{},container:{boxSizing:\"border-box\",display:\"flex\",flexWrap:\"wrap\",width:\"100%\"},item:{boxSizing:\"border-box\",margin:\"0\"},zeroMinWidth:{minWidth:0},\"direction-xs-column\":{flexDirection:\"column\"},\"direction-xs-column-reverse\":{flexDirection:\"column-reverse\"},\"direction-xs-row-reverse\":{flexDirection:\"row-reverse\"},\"wrap-xs-nowrap\":{flexWrap:\"nowrap\"},\"wrap-xs-wrap-reverse\":{flexWrap:\"wrap-reverse\"},\"align-items-xs-center\":{alignItems:\"center\"},\"align-items-xs-flex-start\":{alignItems:\"flex-start\"},\"align-items-xs-flex-end\":{alignItems:\"flex-end\"},\"align-items-xs-baseline\":{alignItems:\"baseline\"},\"align-content-xs-center\":{alignContent:\"center\"},\"align-content-xs-flex-start\":{alignContent:\"flex-start\"},\"align-content-xs-flex-end\":{alignContent:\"flex-end\"},\"align-content-xs-space-between\":{alignContent:\"space-between\"},\"align-content-xs-space-around\":{alignContent:\"space-around\"},\"justify-xs-center\":{justifyContent:\"center\"},\"justify-xs-flex-end\":{justifyContent:\"flex-end\"},\"justify-xs-space-between\":{justifyContent:\"space-between\"},\"justify-xs-space-around\":{justifyContent:\"space-around\"},\"justify-xs-space-evenly\":{justifyContent:\"space-evenly\"}},function(e,t){var n={};return m.forEach((function(a){var r=e.spacing(a);0!==r&&(n[\"spacing-\".concat(t,\"-\").concat(a)]={margin:\"-\".concat(h(r,2)),width:\"calc(100% + \".concat(h(r),\")\"),\"& > $item\":{padding:h(r,2)}})})),n}(e,\"xs\")),e.breakpoints.keys.reduce((function(t,n){return function(e,t,n){var a={};u.forEach((function(e){var t=\"grid-\".concat(n,\"-\").concat(e);if(!0!==e)if(\"auto\"!==e){var r=\"\".concat(Math.round(e/12*1e8)/1e6,\"%\");a[t]={flexBasis:r,flexGrow:0,maxWidth:r}}else a[t]={flexBasis:\"auto\",flexGrow:0,maxWidth:\"none\"};else a[t]={flexBasis:0,flexGrow:1,maxWidth:\"100%\"}})),\"xs\"===n?Object(s.a)(e,a):e[t.breakpoints.up(n)]=a}(t,e,n),t}),{}))}),{name:\"MuiGrid\"})(f);t.a=y},ui6t:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"default\",(function(){return m}));var a=n(\"mXGw\"),r=n.n(a),o=n(\"pQ8Y\"),i=n(\"Oy88\"),s=n(\"yZEQ\"),l=n(\"LMpM\"),c=n(\"cYeA\"),d=r.a.createElement,p=Object(s.a)((function(e){return{root:{width:\"100%\"},group:{marginTop:e.spacing(3)},color:{display:\"flex\",alignItems:\"center\",\"& div:first-of-type\":{width:e.spacing(6),height:e.spacing(6),marginRight:e.spacing(1),borderRadius:e.shape.borderRadius}}}}));function m(){var e=p(),t=Object(l.a)(),n=function(t,n){return d(o.a,{item:!0,xs:12,sm:6,md:4,className:e.color},d(\"div\",{style:{backgroundColor:t}}),d(\"div\",null,d(i.a,{variant:\"body2\"},n),d(i.a,{variant:\"body2\",color:\"textSecondary\"},Object(c.rgbToHex)(t))))};return d(\"div\",{className:e.root},d(i.a,{gutterBottom:!0,className:e.group},\"Primary\"),d(o.a,{container:!0,spacing:2},n(t.palette.primary.light,\"palette.primary.light\"),n(t.palette.primary.main,\"palette.primary.main\"),n(t.palette.primary.dark,\"palette.primary.dark\")),d(i.a,{gutterBottom:!0,className:e.group},\"Secondary\"),d(o.a,{container:!0,spacing:2},n(t.palette.secondary.light,\"palette.secondary.light\"),n(t.palette.secondary.main,\"palette.secondary.main\"),n(t.palette.secondary.dark,\"palette.secondary.dark\")),d(i.a,{gutterBottom:!0,className:e.group},\"Error\"),d(o.a,{container:!0,spacing:2},n(t.palette.error.light,\"palette.error.light\"),n(t.palette.error.main,\"palette.error.main\"),n(t.palette.error.dark,\"palette.error.dark\")),d(i.a,{gutterBottom:!0,className:e.group},\"Warning\"),d(o.a,{container:!0,spacing:2},n(t.palette.warning.light,\"palette.warning.light\"),n(t.palette.warning.main,\"palette.warning.main\"),n(t.palette.warning.dark,\"palette.warning.dark\")),d(i.a,{gutterBottom:!0,className:e.group},\"Info\"),d(o.a,{container:!0,spacing:2},n(t.palette.info.light,\"palette.info.light\"),n(t.palette.info.main,\"palette.info.main\"),n(t.palette.info.dark,\"palette.info.dark\")),d(i.a,{gutterBottom:!0,className:e.group},\"Success\"),d(o.a,{container:!0,spacing:2},n(t.palette.success.light,\"palette.success.light\"),n(t.palette.success.main,\"palette.success.main\"),n(t.palette.success.dark,\"palette.success.dark\")))}},wLPO:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"default\",(function(){return d}));var a=n(\"mXGw\"),r=n.n(a),o=n(\"e+1t\"),i=n(\"kVtE\"),s=r.a.createElement,l=n(\"57GL\"),c=n(\"Xem/\");function d(e){var t=e.demos,n=e.docs;return s(o.a,{demos:t,docs:n,requireDemo:l})}d.getInitialProps=function(){var e=Object(i.a)({pageFilename:\"customization/palette\",requireRaw:c});return{demos:e.demos,docs:e.docs}}},xZAq:function(e,t){e.exports='# \\u041f\\u0430\\u043b\\u0438\\u0442\\u0440\\u0430\\n\\n<p class=\"description\">The palette enables you to modify the color of the components to suit your brand.</p>\\n\\n## Palette colors\\n\\nA color intention is a mapping of a palette color to a given intention within your application. The theme exposes the following palette colors (accessible under `theme.palette.`):\\n\\n- *primary* - used to represent primary interface elements for a user. It\\'s the color displayed most frequently across your app\\'s screens and components.\\n- *secondary* - used to represent secondary interface elements for a user. It provides more ways to accent and distinguish your product. Having it is optional.\\n- *error* - used to represent interface elements that the user should be made aware of.\\n- *warning* - used to represent potentially dangerous actions or important messages.\\n- *info* - used to present information to the user that is neutral and not necessarily important.\\n- *success* - used to indicate the successful completion of an action that user triggered.\\n\\n\\u0414\\u043b\\u044f \\u0431\\u043e\\u043b\\u0435\\u0435 \\u043f\\u043e\\u0434\\u0440\\u043e\\u0431\\u043d\\u043e\\u0433\\u043e \\u0438\\u0437\\u0443\\u0447\\u0435\\u043d\\u0438\\u044f \\u0446\\u0432\\u0435\\u0442\\u043e\\u0432\\u044b\\u0445 \\u043d\\u0430\\u0441\\u0442\\u0440\\u043e\\u0435\\u043a \\u043c\\u043e\\u0436\\u043d\\u043e \\u043f\\u043e\\u0441\\u0435\\u0442\\u0438\\u0442\\u044c [\\u0441\\u0435\\u043a\\u0446\\u0438\\u044e \\u043f\\u0440\\u043e \\u0446\\u0432\\u0435\\u0442\\u0430](/customization/color/).\\n\\n## Default values\\n\\nYou can explore the default values of the palette using [the theme explorer](/customization/default-theme/?expand-path=$.palette) or by opening the dev tools console on this page (`window.theme.palette`).\\n\\n{{\"demo\": \"pages/customization/palette/Intentions.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\n\\u0421\\u0442\\u0430\\u043d\\u0434\\u0430\\u0440\\u0442\\u043d\\u0430\\u044f \\u043f\\u0430\\u043b\\u0438\\u0442\\u0440\\u0430 \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u0443\\u0435\\u0442 \\u043e\\u0442\\u0442\\u0435\\u043d\\u043a\\u0438 \\u0441 \\u043f\\u0440\\u0435\\u0444\\u0438\\u043a\\u0441\\u043e\\u043c `A` (`A200`, \\u0438 \\u0442. \\u0434.) \\u0434\\u043b\\u044f \\u0432\\u0442\\u043e\\u0440\\u0438\\u0447\\u043d\\u043e\\u0433\\u043e \\u043e\\u0442\\u0442\\u0435\\u043d\\u043a\\u0430, \\u0438 \\u0431\\u0435\\u0437 \\u043f\\u0440\\u0435\\u0444\\u0438\\u043a\\u0441\\u0430 \\u0434\\u043b\\u044f \\u043e\\u0441\\u0442\\u0430\\u043b\\u044c\\u043d\\u044b\\u0445.\\n\\n## \\u041a\\u0430\\u0441\\u0442\\u043e\\u043c\\u0438\\u0437\\u0430\\u0446\\u0438\\u044f\\n\\nYou may override the default palette values by including a palette object as part of your theme. If any of the:\\n\\n- [`palette.primary`](/customization/default-theme/?expand-path=$.palette.primary)\\n- [`palette.secondary`](/customization/default-theme/?expand-path=$.palette.secondary)\\n- [`palette.error`](/customization/default-theme/?expand-path=$.palette.error)\\n- [`palette.warning`](/customization/default-theme/?expand-path=$.palette.warning)\\n- [`palette.info`](/customization/default-theme/?expand-path=$.palette.info)\\n- [`palette.success`](/customization/default-theme/?expand-path=$.palette.success)\\n\\npalette color objects are provided, they will replace the defaults.\\n\\nThe palette color value can either be a [color](/customization/color/#2014-material-design-color-palettes) object, or an object with one or more of the keys specified by the following TypeScript interface:\\n\\n```ts\\ninterface PaletteColor {\\n  light?: string;\\n  main: string;\\n  dark?: string;\\n  contrastText?: string;\\n}\\n```\\n\\n### Using a color object\\n\\nThe simplest way to customize an intention is to import one or more of the provided colors and apply them to a palette intention:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\nimport blue from \\'@material-ui/core/colors/blue\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: blue,\\n  },\\n});\\n```\\n\\n### Providing the colors directly\\n\\nIf you wish to provide more customized colors, you can either create your own color object, or directly supply colors to some or all of the intention\\'s keys:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      // light: will be calculated from palette.primary.main,\\n      main: \\'#ff4400\\',\\n      // dark: will be calculated from palette.primary.main,\\n      // contrastText: will be calculated to contrast with palette.primary.main\\n    },\\n    secondary: {\\n      light: \\'#0066ff\\',\\n      main: \\'#0044ff\\',\\n      // dark: will be calculated from palette.secondary.main,\\n      contrastText: \\'#ffcc00\\',\\n    },\\n    // Used by `getContrastText()` to maximize the contrast between\\n    // the background and the text.\\n    contrastThreshold: 3,\\n    // Used by the functions below to shift a color\\'s luminance by approximately\\n    // two indexes within its tonal palette.\\n    // E.g., shift from Red 500 to Red 300 or Red 700.\\n    tonalOffset: 0.2,\\n  },\\n});\\n```\\n\\nAs in the example above, if the intention object contains custom colors using any of the \"main\", \"light\", \"dark\" or \"contrastText\" keys, these map as follows:\\n\\n- If the \"dark\" and / or \"light\" keys are omitted, their value(s) will be calculated from \"main\", according to the \"tonalOffset\" value.\\n- If \"contrastText\" is omitted, its value will be calculated to contrast with \"main\", according to the \"contrastThreshold\" value.\\n\\nBoth the \"tonalOffset\" and \"contrastThreshold\" values may be customized as needed. The \"tonalOffset\" value can either be a number between 0 and 1, which will apply to both light and dark variants, or an object with light and dark variants specified by the following TypeScript type:\\n\\n```ts\\ntype PaletteTonalOffset = number | {\\n  light: number;\\n  dark: number;\\n};\\n```\\n\\nA higher value for \"tonalOffset\" will make calculated values for \"light\" lighter, and \"dark\" darker. A higher value for \"contrastThreshold\" increases the point at which a background color is considered light, and given a dark \"contrastText\".\\n\\nNote that \"contrastThreshold\" follows a non-linear curve.\\n\\n### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\n\\n{{\"demo\": \"pages/customization/palette/Palette.js\", \"defaultCodeOpen\": true}}\\n\\n### Adding new colors\\n\\nYou can add new colors inside and outside the palette of the theme as follow:\\n\\n```js\\nimport { createMuiTheme } from \\'@material-ui/core/styles\\';\\n\\nconst theme = createMuiTheme({\\n  status: {\\n    danger: \\'#e53e3e\\',\\n  },\\n  palette: {\\n    neutral: {\\n      main: \\'#5c6ac4\\',\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\'@material-ui/core/styles/createMuiTheme\\' {\\n  interface Theme {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\'],\\n    }\\n  }\\n  interface ThemeOptions {\\n    status: {\\n      danger: React.CSSProperties[\\'color\\']\\n    }\\n  }\\n}\\n\\ndeclare module \"@material-ui/core/styles/createPalette\" {\\n  interface Palette {\\n    neutral: Palette[\\'primary\\'];\\n  }\\n  interface PaletteOptions {\\n    neutral: PaletteOptions[\\'primary\\'];\\n  }\\n}\\n```\\n\\n## Picking colors\\n\\n\\u0418\\u0449\\u0438\\u0442\\u0435 \\u0432\\u0434\\u043e\\u0445\\u043d\\u043e\\u0432\\u0435\\u043d\\u0438\\u0435? The Material Design team has built an [palette configuration tool](/customization/color/#picking-colors) to help you.\\n\\n## \\u0422\\u0435\\u043c\\u043d\\u044b\\u0439 \\u0440\\u0435\\u0436\\u0438\\u043c\\n\\nMaterial-UI comes with two palette types, light (the default) and dark. You can make the theme dark by setting `type: \\'dark\\'`. While it\\'s only a single property value change, internally it modifies several palette values.\\n\\n```js\\nconst darkTheme = createMuiTheme({\\n  palette: {\\n    type: \\'dark\\',\\n  },\\n});\\n```\\n\\nThe colors modified by the palette type are the following:\\n\\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\", \"bg\": \"inline\", \"hideToolbar\": true}}\\n\\n### User preference\\n\\n\\u041f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u0438 \\u043c\\u043e\\u0433\\u043b\\u0438 \\u0443\\u043a\\u0430\\u0437\\u0430\\u0442\\u044c \\u043f\\u0440\\u0435\\u0434\\u043f\\u043e\\u0447\\u0442\\u0435\\u043d\\u0438\\u0435 \\u0441\\u0432\\u0435\\u0442\\u043b\\u043e\\u0439 \\u0438\\u043b\\u0438 \\u0442\\u0435\\u043c\\u043d\\u043e\\u0439 \\u0442\\u0435\\u043c\\u0435. The method by which the user expresses their preference can vary. It might be a system-wide setting exposed by the Operating System, or a setting controlled by the User Agent.\\n\\nYou can leverage this preference dynamically with the [useMediaQuery](/components/use-media-query/) hook and the [prefers-color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media query.\\n\\n\\u041d\\u0430\\u043f\\u0440\\u0438\\u043c\\u0435\\u0440, \\u043c\\u043e\\u0436\\u043d\\u043e \\u0432\\u043a\\u043b\\u044e\\u0447\\u0438\\u0442\\u044c \\u0442\\u0435\\u043c\\u043d\\u044b\\u0439 \\u0440\\u0435\\u0436\\u0438\\u043c \\u0430\\u0432\\u0442\\u043e\\u043c\\u0430\\u0442\\u0438\\u0447\\u0435\\u0441\\u043a\\u0438:\\n\\n```jsx\\nimport React from \\'react\\';\\nimport useMediaQuery from \\'@material-ui/core/useMediaQuery\\';\\nimport { createMuiTheme, ThemeProvider } from \\'@material-ui/core/styles\\';\\nimport CssBaseline from \\'@material-ui/core/CssBaseline\\';\\n\\nfunction App() {\\n  const prefersDarkMode = useMediaQuery(\\'(prefers-color-scheme: dark)\\');\\n\\n  const theme = React.useMemo(\\n    () =>\\n      createMuiTheme({\\n        palette: {\\n          type: prefersDarkMode ? \\'dark\\' : \\'light\\',\\n        },\\n      }),\\n    [prefersDarkMode],\\n  );\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <CssBaseline/>\\n      <Routes />\\n    </ThemeProvider>\\n  );\\n}\\n```'},zjsb:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"default\",(function(){return m}));var a=n(\"mXGw\"),r=n.n(a),o=n(\"mKyP\"),i=n(\"h7Hf\"),s=n(\"PpYF\"),l=n(\"O8uh\"),c=r.a.createElement,d=Object(o.a)({palette:{primary:{main:s.a[500]},secondary:{main:\"#11cb5f\"}}}),p=c(i.a,{theme:d},c(l.a,{color:\"primary\"},\"Primary\"),c(l.a,{color:\"secondary\"},\"Secondary\"));function m(){return p}}},[[\"UWgT\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}