{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[314],{H9qu:function(e,n){e.exports=\"# crwdns96470:0crwdne96470:0\\n\\n<p class=\\\"description\\\">crwdns96472:0crwdne96472:0</p>\\n\\ncrwdns96474:0crwdne96474:0 crwdns96476:0crwdne96476:0\\n\\n## crwdns96478:0crwdne96478:0\\n\\ncrwdns96480:0crwdne96480:0 crwdns96482:0crwdne96482:0 crwdns96484:0crwdne96484:0\\n\\n1. crwdns96486:0crwdne96486:0\\n2. crwdns96488:0crwdne96488:0\\n3. crwdns96490:0crwdne96490:0\\n4. crwdns96492:0crwdne96492:0\\n\\ncrwdns96494:0crwdne96494:0\\n\\n## crwdns96496:0crwdne96496:0\\n\\ncrwdns96498:0crwdne96498:0\\n\\n### crwdns96500:0crwdne96500:0\\n\\ncrwdns101320:0crwdne101320:0\\n\\n`crwdns96504:0crwdne96504:0`\\n\\n```js\\ncrwdns96506:0{ createMuiTheme }crwdne96506:0\\ncrwdns96508:0{\\n      main: '#556cd6',\\n    }crwdnd96508:0{\\n      main: '#19857b',\\n    }crwdnd96508:0{\\n      main: red.A400,\\n    }crwdnd96508:0{\\n      default: '#fff',\\n    }crwdne96508:0\\n```\\n\\n### crwdns96510:0crwdne96510:0\\n\\ncrwdns101322:0crwdne101322:0 crwdns101324:0crwdne101324:0 crwdns101326:0crwdne101326:0\\n\\n`crwdns96518:0crwdne96518:0`\\n\\n```js\\ncrwdns96520:0crwdne96520:0\\ncrwdns96522:0crwdne96522:0 crwdns96524:0crwdne96524:0 crwdns96526:0crwdne96526:0\\ncrwdns96528:0crwdne96528:0\\n```\\n\\n### crwdns96530:0crwdne96530:0\\n\\ncrwdns96532:0crwdne96532:0\\n\\ncrwdns101328:0crwdne101328:0\\n\\ncrwdns101330:0crwdne101330:0 crwdns96538:0crwdne96538:0\\n\\ncrwdns101332:0crwdne101332:0 crwdns101334:0crwdne101334:0\\n\\n```jsx\\ncrwdns103442:0{ ServerStyleSheets, ThemeProvider }crwdne103442:0\\n  crwdns101336:0{theme}crwdne101336:0\\n  crwdns96548:0crwdne96548:0\\n  crwdns96550:0crwdne96550:0\\ncrwdns96552:0crwdne96552:0\\n```\\n\\n### crwdns96554:0crwdne96554:0\\n\\ncrwdns101338:0crwdne101338:0\\n\\n```js\\ncrwdns96558:0${css}crwdnd96558:0${html}crwdne96558:0\\n```\\n\\n### crwdns96560:0crwdne96560:0\\n\\ncrwdns96562:0crwdne96562:0 crwdns96564:0crwdne96564:0 crwdns101340:0crwdne101340:0\\n\\n`crwdns96568:0crwdne96568:0`\\n\\n```jsx\\ncrwdns104942:0{ ThemeProvider }crwdnd104942:0{theme}crwdne104942:0\\n```\\n\\n## crwdns96572:0crwdne96572:0\\n\\ncrwdns96574:0crwdne96574:0\\n\\n- [crwdns96578:0crwdne96578:0](crwdns96576:0crwdne96576:0)\\n- [crwdns96582:0crwdne96582:0](crwdns96580:0crwdne96580:0)\\n- [crwdns96586:0crwdne96586:0](crwdns96584:0crwdne96584:0)\\n\\n## crwdns96588:0crwdne96588:0\\n\\ncrwdns101342:0crwdne101342:0\"},IF01:function(e,n){e.exports=\"# Renderizado en el servidor\\n\\n<p class=\\\"description\\\">The most common use case for server-side rendering is to handle the initial render when a user (or search engine crawler) first requests your app.</p>\\n\\nWhen the server receives the request, it renders the required component(s) into an HTML string, and then sends it as a response to the client. From that point on, the client takes over rendering duties.\\n\\n## Material-UI on the server\\n\\nMaterial-UI was designed from the ground-up with the constraint of rendering on the server, but it's up to you to make sure it's correctly integrated. It's important to provide the page with the required CSS, otherwise the page will render with just the HTML then wait for the CSS to be injected by the client, causing it to flicker (FOUC). To inject the style down to the client, we need to:\\n\\n1. Create a fresh, new [`ServerStyleSheets`](/styles/api/#serverstylesheets) instance on every request.\\n2. Render the React tree with the server-side collector.\\n3. Pull the CSS out.\\n4. Pass the CSS along to the client.\\n\\nOn the client side, the CSS will be injected a second time before removing the server-side injected CSS.\\n\\n## Setting Up\\n\\nIn the following recipe, we are going to look at how to set up server-side rendering.\\n\\n### The theme\\n\\nCreate a theme that will be shared between the client and the server:\\n\\n`theme.js`\\n\\n```js\\nimport { createMuiTheme } from '@material-ui/core/styles';\\nimport red from '@material-ui/core/colors/red';\\n\\n// Create a theme instance.\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      main: '#556cd6',\\n    },\\n    secondary: {\\n      main: '#19857b',\\n    },\\n    error: {\\n      main: red.A400,\\n    },\\n    background: {\\n      default: '#fff',\\n    },\\n  },\\n});\\n\\nexport default theme;\\n```\\n\\n### The server-side\\n\\nThe following is the outline for what the server-side is going to look like. We are going to set up an [Express middleware](https://expressjs.com/en/guide/using-middleware.html) using [app.use](https://expressjs.com/en/api.html) to handle all requests that come in to the server. If you're unfamiliar with Express or middleware, just know that the handleRender function will be called every time the server receives a request.\\n\\n`server.js`\\n\\n```js\\nimport express from 'express';\\n\\n// We are going to fill these out in the sections to follow.\\nfunction renderFullPage(html, css) {\\n  /* ... */\\n}\\n\\nfunction handleRender(req, res) {\\n  /* ... */\\n}\\n\\nconst app = express();\\n\\n// Isso \\xe9 acionado toda vez que o servidor recebe uma solicita\\xe7\\xe3o.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Handling the Request\\n\\nThe first thing that we need to do on every request is create a new `ServerStyleSheets`.\\n\\nWhen rendering, we will wrap `App`, the root component, inside a [`StylesProvider`](/styles/api/#stylesprovider) and [`ThemeProvider`](/styles/api/#themeprovider) to make the style configuration and the `theme` available to all components in the component tree.\\n\\nThe key step in server-side rendering is to render the initial HTML of the component **before** we send it to the client side. To do this, we use [ReactDOMServer.renderToString()](https://reactjs.org/docs/react-dom-server.html).\\n\\nWe then get the CSS from the `sheets` using `sheets.toString()`. We will see how this is passed along in the `renderFullPage` function.\\n\\n```jsx\\nimport express from 'express';\\nimport React from 'react';\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets, ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction handleRender(req, res) {\\n  const sheets = new ServerStyleSheets();\\n\\n  // Render the component to a string.\\n  const html = ReactDOMServer.renderToString(\\n    sheets.collect(\\n      <ThemeProvider theme={theme}>\\n        <App />\\n      </ThemeProvider>,\\n    ),\\n  );\\n\\n  // Grab the CSS from the sheets.\\n  const css = sheets.toString();\\n\\n  // Send the rendered page back to the client.\\n  res.send(renderFullPage(html, css));\\n}\\n\\nconst app = express();\\n\\napp.use('/build', express.static('build'));\\n\\n// This is fired every time the server-side receives a request.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Inject Initial Component HTML and CSS\\n\\nThe final step on the server-side is to inject the initial component HTML and CSS into a template to be rendered on the client side.\\n\\n```js\\nfunction renderFullPage(html, css) {\\n  return `\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        <title>My page</title>\\n        <style id=\\\"jss-server-side\\\">${css}</style>\\n      </head>\\n      <body>\\n        <div id=\\\"root\\\">${html}</div>\\n      </body>\\n    </html>\\n  `;\\n}\\n```\\n\\n### The Client Side\\n\\nThe client side is straightforward. All we need to do is remove the server-side generated CSS. Let's take a look at the client file:\\n\\n`client.js`\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction Main() {\\n  React.useEffect(() => {\\n    const jssStyles = document.querySelector('#jss-server-side');\\n    if (jssStyles) {\\n      jssStyles.parentElement.removeChild(jssStyles);\\n    }\\n  }, []);\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <App />\\n    </ThemeProvider>\\n  );\\n}\\n\\nReactDOM.hydrate(<Main />, document.querySelector('#root'));\\n```\\n\\n## Reference implementations\\n\\nWe host different reference implementations which you can find in the [GitHub repository](https://github.com/mui-org/material-ui) under the [`/examples`](https://github.com/mui-org/material-ui/tree/master/examples) folder:\\n\\n- [The reference implementation of this tutorial](https://github.com/mui-org/material-ui/tree/master/examples/ssr)\\n- [Gatsby](https://github.com/mui-org/material-ui/tree/master/examples/gatsby)\\n- [Next.js](https://github.com/mui-org/material-ui/tree/master/examples/nextjs)\\n\\n## Troubleshooting\\n\\nCheck out the FAQ answer: [My App doesn't render correctly on the server](/getting-started/faq/#my-app-doesnt-render-correctly-on-the-server).\"},Ikec:function(e,n,t){var r={\"./server-rendering-aa.md\":\"H9qu\",\"./server-rendering-de.md\":\"r+PO\",\"./server-rendering-es.md\":\"IF01\",\"./server-rendering-fr.md\":\"idHT\",\"./server-rendering-ja.md\":\"UfZ/\",\"./server-rendering-pt.md\":\"n5mE\",\"./server-rendering-ru.md\":\"vGDQ\",\"./server-rendering-zh.md\":\"TiBL\",\"./server-rendering.md\":\"e5Mk\"};function s(e){var n=i(e);return t(n)}function i(e){if(!t.o(r,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return r[e]}s.keys=function(){return Object.keys(r)},s.resolve=i,e.exports=s,s.id=\"Ikec\"},TiBL:function(e,n){e.exports=\"# \\u670d\\u52a1\\u7aef\\u6e32\\u67d3\\n\\n<p class=\\\"description\\\">\\u670d\\u52a1\\u5668\\u7aef\\u5448\\u73b0\\u7684\\u6700\\u5e38\\u89c1\\u7528\\u4f8b\\u662f\\u5728\\u7528\\u6237\\uff08\\u6216\\u641c\\u7d22\\u5f15\\u64ce\\u722c\\u866b\\uff09\\u9996\\u6b21\\u8bf7\\u6c42\\u60a8\\u7684\\u5e94\\u7528\\u65f6\\u5904\\u7406\\u521d\\u6b21\\u6e32\\u67d3\\u3002</p>\\n\\n\\u5f53\\u670d\\u52a1\\u5668\\u6536\\u5230\\u8bf7\\u6c42\\u65f6\\uff0c\\u5b83\\u4f1a\\u5c06\\u6240\\u9700\\u7684\\u7ec4\\u4ef6\\u5448\\u73b0\\u4e3a HTML \\u5b57\\u7b26\\u4e32\\uff0c\\u7136\\u540e\\u5c06\\u5176\\u4f5c\\u4e3a\\u54cd\\u5e94\\u53d1\\u9001\\u7ed9\\u5ba2\\u6237\\u7aef\\u3002 \\u4ece\\u90a3\\u65f6\\u8d77\\uff0c\\u5ba2\\u6237\\u5c06\\u63a5\\u7ba1\\u6e32\\u67d3\\u7684\\u804c\\u8d23\\u3002\\n\\n## \\u5728\\u670d\\u52a1\\u5668\\u7aef\\u7684 Material-UI\\n\\nMaterial-UI \\u6700\\u521d\\u8bbe\\u8ba1\\u53d7\\u5230\\u4e86\\u5728\\u670d\\u52a1\\u5668\\u7aef\\u6e32\\u67d3\\u7684\\u7ea6\\u675f\\uff0c\\u4f46\\u662f\\u60a8\\u53ef\\u4ee5\\u5b8c\\u5168\\u8d1f\\u8d23\\u5b83\\u7684\\u6b63\\u786e\\u6574\\u5408\\u3002 \\u4e3a\\u9875\\u9762\\u63d0\\u4f9b\\u6240\\u9700\\u7684 CSS \\u662f\\u81f3\\u5173\\u91cd\\u8981\\u7684\\uff0c\\u5426\\u5219\\u9875\\u9762\\u53ea\\u4f1a\\u6e32\\u67d3 HTML \\u800c\\u7b49\\u5f85\\u5ba2\\u6237\\u7aef\\u6ce8\\u5165 CSS, \\u4ece\\u800c\\u5bfc\\u81f4\\u6d4f\\u89c8\\u5668\\u6837\\u5f0f\\u95ea\\u70c1\\uff08FOUC\\uff09\\u3002 \\u82e5\\u60f3\\u5c06\\u6837\\u5f0f\\u6ce8\\u5165\\u5ba2\\u6237\\u7aef\\uff0c\\u6211\\u4eec\\u9700\\u8981\\uff1a\\n\\n1. \\u5728\\u6bcf\\u4e2a\\u8bf7\\u6c42\\u4e0a\\u521b\\u5efa\\u4e00\\u4e2a\\u5168\\u65b0\\u7684 [`ServerStyleSheets`](/styles/api/#serverstylesheets) \\u5b9e\\u4f8b\\u3002\\n2. \\u7528\\u670d\\u52a1\\u7aef\\u6536\\u96c6\\u5668\\u6e32\\u67d3 React \\u6811\\u7ec4\\u4ef6\\u3002\\n3. \\u62c9\\u51fa CSS\\u3002\\n4. \\u5c06CSS\\u4f20\\u9012\\u7ed9\\u5ba2\\u6237\\u7aef\\u3002\\n\\n\\u5728\\u5220\\u9664\\u670d\\u52a1\\u5668\\u7aef\\u6ce8\\u5165\\u7684 CSS \\u4e4b\\u524d\\uff0c\\u5ba2\\u6237\\u7aef\\u5c06\\u7b2c\\u4e8c\\u6b21\\u6ce8\\u5165 CSS\\u3002\\n\\n## \\u914d\\u7f6e\\n\\n\\u5728\\u4e0b\\u9762\\u7684\\u914d\\u7f6e\\u4e2d\\uff0c\\u6211\\u4eec\\u5c06\\u4e86\\u89e3\\u5982\\u4f55\\u8bbe\\u7f6e\\u670d\\u52a1\\u5668\\u7aef\\u7684\\u6e32\\u67d3\\u3002\\n\\n### \\u4e3b\\u9898\\n\\nCreate a theme that will be shared between the client and the server:\\n\\n`theme.js`\\n\\n```js\\nimport { createMuiTheme } from '@material-ui/core/styles';\\nimport red from '@material-ui/core/colors/red';\\n\\n// \\u521b\\u5efa\\u4e00\\u4e2a\\u4e3b\\u9898\\u7684\\u5b9e\\u4f8b\\u3002\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      main: '#556cd6',\\n    },\\n    secondary: {\\n      main: '#19857b',\\n    },\\n    error: {\\n      main: red.A400,\\n    },\\n    background: {\\n      default: '#fff',\\n    },\\n  },\\n});\\n```\\n\\n### \\u670d\\u52a1\\u5668\\u7aef\\n\\nThe following is the outline for what the server-side is going to look like. We are going to set up an [Express middleware](https://expressjs.com/en/guide/using-middleware.html) using [app.use](https://expressjs.com/en/api.html) to handle all requests that come in to the server. If you're unfamiliar with Express or middleware, just know that the handleRender function will be called every time the server receives a request.\\n\\n`server.js`\\n\\n```js\\nimport express from 'express';\\n\\n// \\u6211\\u4eec\\u5c06\\u5728\\u7ae0\\u8282\\u4e2d\\u586b\\u5199\\u8fd9\\u4e9b\\u5185\\u5bb9\\u6765\\u9075\\u5b88\\u3002\\nfunction renderFullPage(html, css) {\\n  /* ... */\\n}\\n\\nfunction handleRender(req, res) {\\n  /* ... */\\n}\\n\\nconst app = express();\\n\\n// \\u6bcf\\u6b21\\u670d\\u52a1\\u5668\\u7aef\\u6536\\u5230\\u8bf7\\u6c42\\u65f6\\u90fd\\u4f1a\\u89e6\\u53d1\\u6b64\\u64cd\\u4f5c\\u3002\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### \\u5904\\u7406\\u8bf7\\u6c42\\n\\n\\u5bf9\\u4e8e\\u6bcf\\u6b21\\u8bf7\\u6c42\\uff0c\\u6211\\u4eec\\u9996\\u5148\\u9700\\u8981\\u505a\\u7684\\u662f\\u521b\\u5efa\\u4e00\\u4e2a `ServerStyleSheets`\\u3002\\n\\nWhen rendering, we will wrap `App`, the root component, inside a [`StylesProvider`](/styles/api/#stylesprovider) and [`ThemeProvider`](/styles/api/#themeprovider) to make the style configuration and the `theme` available to all components in the component tree.\\n\\nThe key step in server-side rendering is to render the initial HTML of the component **before** we send it to the client side. \\u6211\\u4eec\\u7528 [ReactDOMServer.renderToString()](https://reactjs.org/docs/react-dom-server.html) \\u6765\\u5b9e\\u73b0\\u6b64\\u64cd\\u4f5c\\u3002\\n\\nWe then get the CSS from the `sheets` using `sheets.toString()`. We will see how this is passed along in the `renderFullPage` function.\\n\\n```jsx\\nimport express from 'express';\\nimport React from 'react';\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets, ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction handleRender(req, res) {\\n  const sheets = new ServerStyleSheets();\\n\\n  // Render the component to a string.\\n  const html = ReactDOMServer.renderToString(\\n    sheets.collect(\\n      <ThemeProvider theme={theme}>\\n        <App />\\n      </ThemeProvider>,\\n    ),\\n  );\\n\\n  // Grab the CSS from the sheets.\\n  const css = sheets.toString();\\n\\n  // \\u5c06\\u6e32\\u67d3\\u7684\\u9875\\u9762\\u9001\\u56de\\u5230\\u5ba2\\u6237\\u7aef\\u3002\\n  res.send(renderFullPage(html, css));\\n}\\n\\nconst app = express();\\n\\napp.use('/build', express.static('build'));\\n\\n// \\u6bcf\\u6b21\\u670d\\u52a1\\u5668\\u7aef\\u6536\\u5230\\u8bf7\\u6c42\\u65f6\\u90fd\\u4f1a\\u89e6\\u53d1\\u6b64\\u64cd\\u4f5c\\u3002\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### \\u6ce8\\u5165\\u7ec4\\u4ef6\\u7684\\u521d\\u59cb HTML \\u548c CSS\\n\\nThe final step on the server-side is to inject the initial component HTML and CSS into a template to be rendered on the client side.\\n\\n```js\\nfunction renderFullPage(html, css) {\\n  return `\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        <title>My page</title>\\n        <style id=\\\"jss-server-side\\\">${css}</style>\\n      </head>\\n      <body>\\n        <div id=\\\"root\\\">${html}</div>\\n      </body>\\n    </html>\\n  `;\\n}\\n```\\n\\n### \\u5ba2\\u6237\\u7aef\\n\\n\\u5ba2\\u6237\\u7aef\\u5219\\u662f\\u7b80\\u5355\\u660e\\u4e86\\u7684\\u3002 \\u6211\\u4eec\\u53ea\\u9700\\u8981\\u79fb\\u9664\\u670d\\u52a1\\u5668\\u7aef\\u751f\\u6210\\u7684 CSS\\u3002 Let's take a look at the client file:\\n\\n`client.js`\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction Main() {\\n  React.useEffect(() => {\\n    const jssStyles = document.querySelector('#jss-server-side');\\n    if (jssStyles) {\\n      jssStyles.parentElement.removeChild(jssStyles);\\n    }\\n  }, []);\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <App />\\n    </ThemeProvider>\\n  );\\n}\\n\\nReactDOM.hydrate(<Main />, document.querySelector('#root'));\\n```\\n\\n## \\u53c2\\u8003\\u5b9e\\u73b0\\n\\n\\u60a8\\u53ef\\u4ee5\\u5728 [GitHub \\u5b58\\u50a8\\u5e93\\u4e2d](https://github.com/mui-org/material-ui)\\u7684 [`/examples`](https://github.com/mui-org/material-ui/tree/master/examples) \\u7684\\u6587\\u4ef6\\u5939\\u4e0b\\u9762\\uff0c\\u627e\\u5230\\u6211\\u4eec\\u6258\\u7ba1\\u7684\\u4e0d\\u540c\\u7684\\u8303\\u4f8b\\u9879\\u76ee\\uff1a\\n\\n- [\\u672c\\u6559\\u7a0b\\u7684\\u53c2\\u8003\\u5b9e\\u73b0](https://github.com/mui-org/material-ui/tree/master/examples/ssr)\\n- [Gatsby](https://github.com/mui-org/material-ui/tree/master/examples/gatsby)\\n- [Next.js](https://github.com/mui-org/material-ui/tree/master/examples/nextjs)\\n\\n## \\u6545\\u969c\\u6392\\u9664\\uff08Troubleshooting\\uff09\\n\\nCheck out the FAQ answer: [My App doesn't render correctly on the server](/getting-started/faq/#my-app-doesnt-render-correctly-on-the-server).\"},\"UfZ/\":function(e,n){e.exports=\"# \\u30b5\\u30fc\\u30d0\\u30fc\\u30b5\\u30a4\\u30c9\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\n\\n<p class=\\\"description\\\">\\u30b5\\u30fc\\u30d0\\u30fc\\u5074\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u306e\\u6700\\u3082\\u4e00\\u822c\\u7684\\u306a\\u4f7f\\u7528\\u4f8b\\u306f\\u3001\\u30e6\\u30fc\\u30b6\\u30fc\\uff08\\u307e\\u305f\\u306f\\u691c\\u7d22\\u30a8\\u30f3\\u30b8\\u30f3\\u306e\\u30af\\u30ed\\u30fc\\u30e9\\u30fc\\uff09\\u304c\\u6700\\u521d\\u306b\\u30a2\\u30d7\\u30ea\\u3092\\u8981\\u6c42\\u3057\\u305f\\u3068\\u304d\\u306b\\u6700\\u521d\\u306e\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3092\\u51e6\\u7406\\u3059\\u308b\\u3053\\u3068\\u3067\\u3059\\u3002</p>\\n\\n\\u30b5\\u30fc\\u30d0\\u30fc\\u306f\\u8981\\u6c42\\u3092\\u53d7\\u4fe1\\u3059\\u308b\\u3068\\u3001\\u5fc5\\u8981\\u306a\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3092HTML\\u30b9\\u30c8\\u30ea\\u30f3\\u30b0\\u306b\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3057\\u3001\\u305d\\u308c\\u3092\\u5fdc\\u7b54\\u3068\\u3057\\u3066\\u30af\\u30e9\\u30a4\\u30a2\\u30f3\\u30c8\\u306b\\u9001\\u4fe1\\u3057\\u307e\\u3059\\u3002 \\u305d\\u308c\\u4ee5\\u964d\\u306f\\u3001\\u30af\\u30e9\\u30a4\\u30a2\\u30f3\\u30c8\\u304c\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u4f5c\\u696d\\u3092\\u5f15\\u304d\\u7d99\\u304e\\u307e\\u3059\\u3002\\n\\n## \\u30b5\\u30fc\\u30d0\\u30fc\\u4e0a\\u306eMaterial-UI\\n\\nMaterial-UI\\u306f\\u3001\\u30b5\\u30fc\\u30d0\\u30fc\\u3067\\u306e\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u306e\\u5236\\u7d04\\u3092\\u8003\\u616e\\u3057\\u3066\\u30bc\\u30ed\\u304b\\u3089\\u8a2d\\u8a08\\u3055\\u308c\\u307e\\u3057\\u305f\\u304c\\u3001\\u6b63\\u3057\\u304f\\u7d71\\u5408\\u3055\\u308c\\u308b\\u304b\\u3069\\u3046\\u304b\\u306f\\u30e6\\u30fc\\u30b6\\u30fc\\u6b21\\u7b2c\\u3067\\u3059\\u3002 \\u5fc5\\u8981\\u306aCSS\\u3092\\u30da\\u30fc\\u30b8\\u306b\\u63d0\\u4f9b\\u3059\\u308b\\u3053\\u3068\\u304c\\u91cd\\u8981\\u3067\\u3059\\u3002\\u305d\\u3046\\u3057\\u306a\\u3044\\u3068\\u3001\\u30da\\u30fc\\u30b8\\u306fHTML\\u3060\\u3051\\u3067\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3055\\u308c\\u3001\\u30af\\u30e9\\u30a4\\u30a2\\u30f3\\u30c8\\u306b\\u3088\\u3063\\u3066CSS\\u304c\\u6ce8\\u5165\\u3055\\u308c\\u308b\\u306e\\u3092\\u5f85\\u3063\\u3066\\u3001\\u3061\\u3089\\u3064\\u304d\\u304c\\u767a\\u751f\\u3057\\u307e\\u3059 (FOUC)\\u3002 \\u30af\\u30e9\\u30a4\\u30a2\\u30f3\\u30c8\\u306b\\u30b9\\u30bf\\u30a4\\u30eb\\u3092\\u6ce8\\u5165\\u3059\\u308b\\u306b\\u306f\\u3001\\u6b21\\u306e\\u3053\\u3068\\u304c\\u5fc5\\u8981\\u3067\\u3059\\u3002\\n\\n1. Create a fresh, new [`ServerStyleSheets`](/styles/api/#serverstylesheets) instance on every request.\\n2. Render the React tree with the server-side collector.\\n3. Pull the CSS out.\\n4. Pass the CSS along to the client.\\n\\nOn the client side, the CSS will be injected a second time before removing the server-side injected CSS.\\n\\n## \\u8a2d\\u5b9a\\u3059\\u308b\\n\\nIn the following recipe, we are going to look at how to set up server-side rendering.\\n\\n### \\u30c6\\u30fc\\u30de\\n\\nCreate a theme that will be shared between the client and the server:\\n\\n`theme.js`\\n\\n```js\\nimport { createMuiTheme } from '@material-ui/core/styles';\\nimport red from '@material-ui/core/colors/red';\\n\\n// Create a theme instance.\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      main: '#556cd6',\\n    },\\n    secondary: {\\n      main: '#19857b',\\n    },\\n    error: {\\n      main: red.A400,\\n    },\\n    background: {\\n      default: '#fff',\\n    },\\n  },\\n});\\n\\nexport default theme;\\n```\\n\\n### The server-side\\n\\nThe following is the outline for what the server-side is going to look like. We are going to set up an [Express middleware](https://expressjs.com/en/guide/using-middleware.html) using [app.use](https://expressjs.com/en/api.html) to handle all requests that come in to the server. If you're unfamiliar with Express or middleware, just know that the handleRender function will be called every time the server receives a request.\\n\\n`server.js`\\n\\n```js\\nimport express from 'express';\\n\\n// We are going to fill these out in the sections to follow.\\nfunction renderFullPage(html, css) {\\n  /* ... */\\n}\\n\\nfunction handleRender(req, res) {\\n  /* ... */\\n}\\n\\nconst app = express();\\n\\n// Isso \\xe9 acionado toda vez que o servidor recebe uma solicita\\xe7\\xe3o.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Handling the Request\\n\\nThe first thing that we need to do on every request is create a new `ServerStyleSheets`.\\n\\nWhen rendering, we will wrap `App`, the root component, inside a [`StylesProvider`](/styles/api/#stylesprovider) and [`ThemeProvider`](/styles/api/#themeprovider) to make the style configuration and the `theme` available to all components in the component tree.\\n\\nThe key step in server-side rendering is to render the initial HTML of the component **before** we send it to the client side. To do this, we use [ReactDOMServer.renderToString()](https://reactjs.org/docs/react-dom-server.html).\\n\\nWe then get the CSS from the `sheets` using `sheets.toString()`. We will see how this is passed along in the `renderFullPage` function.\\n\\n```jsx\\nimport express from 'express';\\nimport React from 'react';\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets, ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction handleRender(req, res) {\\n  const sheets = new ServerStyleSheets();\\n\\n  // Render the component to a string.\\n  const html = ReactDOMServer.renderToString(\\n    sheets.collect(\\n      <ThemeProvider theme={theme}>\\n        <App />\\n      </ThemeProvider>,\\n    ),\\n  );\\n\\n  // Grab the CSS from the sheets.\\n  const css = sheets.toString();\\n\\n  // Send the rendered page back to the client.\\n  res.send(renderFullPage(html, css));\\n}\\n\\nconst app = express();\\n\\napp.use('/build', express.static('build'));\\n\\n// This is fired every time the server-side receives a request.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Inject Initial Component HTML and CSS\\n\\nThe final step on the server-side is to inject the initial component HTML and CSS into a template to be rendered on the client side.\\n\\n```js\\nfunction renderFullPage(html, css) {\\n  return `\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        <title>My page</title>\\n        <style id=\\\"jss-server-side\\\">${css}</style>\\n      </head>\\n      <body>\\n        <div id=\\\"root\\\">${html}</div>\\n      </body>\\n    </html>\\n  `;\\n}\\n```\\n\\n### The Client Side\\n\\nThe client side is straightforward. All we need to do is remove the server-side generated CSS. Let's take a look at the client file:\\n\\n`client.js`\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction Main() {\\n  React.useEffect(() => {\\n    const jssStyles = document.querySelector('#jss-server-side');\\n    if (jssStyles) {\\n      jssStyles.parentElement.removeChild(jssStyles);\\n    }\\n  }, []);\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <App />\\n    </ThemeProvider>\\n  );\\n}\\n\\nReactDOM.hydrate(<Main />, document.querySelector('#root'));\\n```\\n\\n## Reference implementations\\n\\nWe host different reference implementations which you can find in the [GitHub repository](https://github.com/mui-org/material-ui) under the [`/examples`](https://github.com/mui-org/material-ui/tree/master/examples) folder:\\n\\n- [The reference implementation of this tutorial](https://github.com/mui-org/material-ui/tree/master/examples/ssr)\\n- [Gatsby](https://github.com/mui-org/material-ui/tree/master/examples/gatsby)\\n- [Next.js](https://github.com/mui-org/material-ui/tree/master/examples/nextjs)\\n\\n## Troubleshooting\\n\\nCheck out the FAQ answer: [My App doesn't render correctly on the server](/getting-started/faq/#my-app-doesnt-render-correctly-on-the-server).\"},aOOu:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return m}));var r=t(\"mXGw\"),s=t.n(r),i=t(\"e+1t\"),o=t(\"kVtE\"),a=s.a.createElement,d=t(\"x0yi\"),l=t(\"Ikec\");function m(e){var n=e.demos,t=e.docs;return a(i.a,{demos:n,docs:t,requireDemo:d})}m.getInitialProps=function(){var e=Object(o.a)({pageFilename:\"guides/server-rendering\",requireRaw:l});return{demos:e.demos,docs:e.docs}}},e5Mk:function(e,n){e.exports=\"# Server Rendering\\n\\n<p class=\\\"description\\\">The most common use case for server-side rendering is to handle the initial render when a user (or search engine crawler) first requests your app.</p>\\n\\nWhen the server receives the request, it renders the required component(s) into an HTML string, and then sends it as a response to the client.\\nFrom that point on, the client takes over rendering duties.\\n\\n## Material-UI on the server\\n\\nMaterial-UI was designed from the ground-up with the constraint of rendering on the server, but it's up to you to make sure it's correctly integrated.\\nIt's important to provide the page with the required CSS, otherwise the page will render with just the HTML then wait for the CSS to be injected by the client, causing it to flicker (FOUC).\\nTo inject the style down to the client, we need to:\\n\\n1. Create a fresh, new [`ServerStyleSheets`](/styles/api/#serverstylesheets) instance on every request.\\n2. Render the React tree with the server-side collector.\\n3. Pull the CSS out.\\n4. Pass the CSS along to the client.\\n\\nOn the client side, the CSS will be injected a second time before removing the server-side injected CSS.\\n\\n## Setting Up\\n\\nIn the following recipe, we are going to look at how to set up server-side rendering.\\n\\n### The theme\\n\\nCreate a theme that will be shared between the client and the server:\\n\\n`theme.js`\\n\\n```js\\nimport { createMuiTheme } from '@material-ui/core/styles';\\nimport red from '@material-ui/core/colors/red';\\n\\n// Create a theme instance.\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      main: '#556cd6',\\n    },\\n    secondary: {\\n      main: '#19857b',\\n    },\\n    error: {\\n      main: red.A400,\\n    },\\n    background: {\\n      default: '#fff',\\n    },\\n  },\\n});\\n\\nexport default theme;\\n```\\n\\n### The server-side\\n\\nThe following is the outline for what the server-side is going to look like.\\nWe are going to set up an [Express middleware](https://expressjs.com/en/guide/using-middleware.html) using [app.use](https://expressjs.com/en/api.html) to handle all requests that come in to the server.\\nIf you're unfamiliar with Express or middleware, just know that the handleRender function will be called every time the server receives a request.\\n\\n`server.js`\\n\\n```js\\nimport express from 'express';\\n\\n// We are going to fill these out in the sections to follow.\\nfunction renderFullPage(html, css) {\\n  /* ... */\\n}\\n\\nfunction handleRender(req, res) {\\n  /* ... */\\n}\\n\\nconst app = express();\\n\\n// This is fired every time the server-side receives a request.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Handling the Request\\n\\nThe first thing that we need to do on every request is create a new `ServerStyleSheets`.\\n\\nWhen rendering, we will wrap `App`, the root component,\\ninside a [`StylesProvider`](/styles/api/#stylesprovider) and [`ThemeProvider`](/styles/api/#themeprovider) to make the style configuration and the `theme` available to all components in the component tree.\\n\\nThe key step in server-side rendering is to render the initial HTML of the component **before** we send it to the client side. To do this, we use [ReactDOMServer.renderToString()](https://reactjs.org/docs/react-dom-server.html).\\n\\nWe then get the CSS from the `sheets` using `sheets.toString()`.\\nWe will see how this is passed along in the `renderFullPage` function.\\n\\n```jsx\\nimport express from 'express';\\nimport React from 'react';\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets, ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction handleRender(req, res) {\\n  const sheets = new ServerStyleSheets();\\n\\n  // Render the component to a string.\\n  const html = ReactDOMServer.renderToString(\\n    sheets.collect(\\n      <ThemeProvider theme={theme}>\\n        <App />\\n      </ThemeProvider>,\\n    ),\\n  );\\n\\n  // Grab the CSS from the sheets.\\n  const css = sheets.toString();\\n\\n  // Send the rendered page back to the client.\\n  res.send(renderFullPage(html, css));\\n}\\n\\nconst app = express();\\n\\napp.use('/build', express.static('build'));\\n\\n// This is fired every time the server-side receives a request.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Inject Initial Component HTML and CSS\\n\\nThe final step on the server-side is to inject the initial component HTML and CSS into a template to be rendered on the client side.\\n\\n```js\\nfunction renderFullPage(html, css) {\\n  return `\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        <title>My page</title>\\n        <style id=\\\"jss-server-side\\\">${css}</style>\\n      </head>\\n      <body>\\n        <div id=\\\"root\\\">${html}</div>\\n      </body>\\n    </html>\\n  `;\\n}\\n```\\n\\n### The Client Side\\n\\nThe client side is straightforward. All we need to do is remove the server-side generated CSS.\\nLet's take a look at the client file:\\n\\n`client.js`\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction Main() {\\n  React.useEffect(() => {\\n    const jssStyles = document.querySelector('#jss-server-side');\\n    if (jssStyles) {\\n      jssStyles.parentElement.removeChild(jssStyles);\\n    }\\n  }, []);\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <App />\\n    </ThemeProvider>\\n  );\\n}\\n\\nReactDOM.hydrate(<Main />, document.querySelector('#root'));\\n```\\n\\n## Reference implementations\\n\\nWe host different reference implementations which you can find in the [GitHub repository](https://github.com/mui-org/material-ui) under the [`/examples`](https://github.com/mui-org/material-ui/tree/master/examples) folder:\\n\\n- [The reference implementation of this tutorial](https://github.com/mui-org/material-ui/tree/master/examples/ssr)\\n- [Gatsby](https://github.com/mui-org/material-ui/tree/master/examples/gatsby)\\n- [Next.js](https://github.com/mui-org/material-ui/tree/master/examples/nextjs)\\n\\n## Troubleshooting\\n\\nCheck out the FAQ answer: [My App doesn't render correctly on the server](/getting-started/faq/#my-app-doesnt-render-correctly-on-the-server).\\n\"},idHT:function(e,n){e.exports=\"# Rendu serveur\\n\\n<p class=\\\"description\\\">The most common use case for server-side rendering is to handle the initial render when a user (or search engine crawler) first requests your app.</p>\\n\\nWhen the server receives the request, it renders the required component(s) into an HTML string, and then sends it as a response to the client. From that point on, the client takes over rendering duties.\\n\\n## Material-UI on the server\\n\\nMaterial-UI was designed from the ground-up with the constraint of rendering on the server, but it's up to you to make sure it's correctly integrated. It's important to provide the page with the required CSS, otherwise the page will render with just the HTML then wait for the CSS to be injected by the client, causing it to flicker (FOUC). To inject the style down to the client, we need to:\\n\\n1. Create a fresh, new [`ServerStyleSheets`](/styles/api/#serverstylesheets) instance on every request.\\n2. Render the React tree with the server-side collector.\\n3. Pull the CSS out.\\n4. Pass the CSS along to the client.\\n\\nOn the client side, the CSS will be injected a second time before removing the server-side injected CSS.\\n\\n## Mise en place\\n\\nIn the following recipe, we are going to look at how to set up server-side rendering.\\n\\n### The theme\\n\\nCreate a theme that will be shared between the client and the server:\\n\\n`theme.js`\\n\\n```js\\nimport { createMuiTheme } from '@material-ui/core/styles';\\nimport red from '@material-ui/core/colors/red';\\n\\n// Create a theme instance.\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      main: '#556cd6',\\n    },\\n    secondary: {\\n      main: '#19857b',\\n    },\\n    error: {\\n      main: red.A400,\\n    },\\n    background: {\\n      default: '#fff',\\n    },\\n  },\\n});\\n\\nexport default theme;\\n```\\n\\n### The server-side\\n\\nThe following is the outline for what the server-side is going to look like. We are going to set up an [Express middleware](https://expressjs.com/en/guide/using-middleware.html) using [app.use](https://expressjs.com/en/api.html) to handle all requests that come in to the server. If you're unfamiliar with Express or middleware, just know that the handleRender function will be called every time the server receives a request.\\n\\n`server.js`\\n\\n```js\\nimport express from 'express';\\n\\n// We are going to fill these out in the sections to follow.\\nfunction renderFullPage(html, css) {\\n  /* ... */\\n}\\n\\nfunction handleRender(req, res) {\\n  /* ... */\\n}\\n\\nconst app = express();\\n\\n// Isso \\xe9 acionado toda vez que o servidor recebe uma solicita\\xe7\\xe3o.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Handling the Request\\n\\nThe first thing that we need to do on every request is create a new `ServerStyleSheets`.\\n\\nWhen rendering, we will wrap `App`, the root component, inside a [`StylesProvider`](/styles/api/#stylesprovider) and [`ThemeProvider`](/styles/api/#themeprovider) to make the style configuration and the `theme` available to all components in the component tree.\\n\\nThe key step in server-side rendering is to render the initial HTML of the component **before** we send it to the client side. To do this, we use [ReactDOMServer.renderToString()](https://reactjs.org/docs/react-dom-server.html).\\n\\nWe then get the CSS from the `sheets` using `sheets.toString()`. We will see how this is passed along in the `renderFullPage` function.\\n\\n```jsx\\nimport express from 'express';\\nimport React from 'react';\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets, ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction handleRender(req, res) {\\n  const sheets = new ServerStyleSheets();\\n\\n  // Render the component to a string.\\n  const html = ReactDOMServer.renderToString(\\n    sheets.collect(\\n      <ThemeProvider theme={theme}>\\n        <App />\\n      </ThemeProvider>,\\n    ),\\n  );\\n\\n  // Grab the CSS from the sheets.\\n  const css = sheets.toString();\\n\\n  // Send the rendered page back to the client.\\n  res.send(renderFullPage(html, css));\\n}\\n\\nconst app = express();\\n\\napp.use('/build', express.static('build'));\\n\\n// This is fired every time the server-side receives a request.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Inject Initial Component HTML and CSS\\n\\nThe final step on the server-side is to inject the initial component HTML and CSS into a template to be rendered on the client side.\\n\\n```js\\nfunction renderFullPage(html, css) {\\n  return `\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        <title>My page</title>\\n        <style id=\\\"jss-server-side\\\">${css}</style>\\n      </head>\\n      <body>\\n        <div id=\\\"root\\\">${html}</div>\\n      </body>\\n    </html>\\n  `;\\n}\\n```\\n\\n### Le c\\xf4t\\xe9 client\\n\\nThe client side is straightforward. All we need to do is remove the server-side generated CSS. Let's take a look at the client file:\\n\\n`client.js`\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction Main() {\\n  React.useEffect(() => {\\n    const jssStyles = document.querySelector('#jss-server-side');\\n    if (jssStyles) {\\n      jssStyles.parentElement.removeChild(jssStyles);\\n    }\\n  }, []);\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <App />\\n    </ThemeProvider>\\n  );\\n}\\n\\nReactDOM.hydrate(<Main />, document.querySelector('#root'));\\n```\\n\\n## Impl\\xe9mentations de r\\xe9f\\xe9rence\\n\\nWe host different reference implementations which you can find in the [GitHub repository](https://github.com/mui-org/material-ui) under the [`/examples`](https://github.com/mui-org/material-ui/tree/master/examples) folder:\\n\\n- [The reference implementation of this tutorial](https://github.com/mui-org/material-ui/tree/master/examples/ssr)\\n- [Gatsby](https://github.com/mui-org/material-ui/tree/master/examples/gatsby)\\n- [Next.js](https://github.com/mui-org/material-ui/tree/master/examples/nextjs)\\n\\n## R\\xe9solution de probl\\xe8mes\\n\\nCheck out the FAQ answer: [My App doesn't render correctly on the server](/getting-started/faq/#my-app-doesnt-render-correctly-on-the-server).\"},n5mE:function(e,n){e.exports=\"# Renderiza\\xe7\\xe3o no servidor\\n\\n<p class=\\\"description\\\">O caso de uso mais comum para a renderiza\\xe7\\xe3o do lado do servidor, \\xe9 manipular a renderiza\\xe7\\xe3o inicial quando um usu\\xe1rio (ou rastreador do mecanismo de pesquisa) solicita sua aplica\\xe7\\xe3o.</p>\\n\\nQuando o servidor recebe a solicita\\xe7\\xe3o, ele renderiza o componente(s) requerido em uma cadeia HTML e o envia como uma resposta ao cliente. A partir desse momento, o cliente assume as fun\\xe7\\xf5es de renderiza\\xe7\\xe3o.\\n\\n## Material-UI no servidor\\n\\nO Material-UI foi desenhado da base com as limita\\xe7\\xf5es de renderizar no servidor, mas voc\\xea pode se certificar que ser\\xe1 integrado corretamente. \\xc9 importante fornecer a p\\xe1gina com o CSS necess\\xe1rio, caso contr\\xe1rio a p\\xe1gina ir\\xe1 renderizar somente o HTML at\\xe9 o CSS ser injetado pelo cliente, causando uma tremula\\xe7\\xe3o (FOUC). Para injetar o estilo no cliente, precisamos:\\n\\n1. Cria uma inst\\xe2ncia nova e fresca do [`ServerStyleSheets`](/styles/api/#serverstylesheets) em cada requisi\\xe7\\xe3o.\\n2. Renderize a \\xe1rvore React com o coletor do lado do servidor.\\n3. Puxe o CSS para fora.\\n4. Passe o CSS junto ao cliente.\\n\\nNo lado do cliente, o CSS ser\\xe1 injetado uma segunda vez antes de remover o CSS injetado no lado do servidor.\\n\\n## Configurando\\n\\nNa receita a seguir, vamos ver como configurar a renderiza\\xe7\\xe3o do lado do servidor.\\n\\n### O tema\\n\\nCrie um tema que ser\\xe1 compartilhado entre o cliente e o servidor:\\n\\n`theme.js`\\n\\n```js\\nimport { createMuiTheme } from '@material-ui/core/styles';\\nimport red from '@material-ui/core/colors/red';\\n\\n// Cria a inst\\xe2ncia do tema.\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      main: '#556cd6',\\n    },\\n    secondary: {\\n      main: '#19857b',\\n    },\\n    error: {\\n      main: red.A400,\\n    },\\n    background: {\\n      default: '#fff',\\n    },\\n  },\\n});\\n\\nexport default theme;\\n```\\n\\n### O lado do servidor\\n\\nA seguir um esbo\\xe7o para o aspecto que o servidor deve olhar. Vamos montar um [middleware Express](https://expressjs.com/en/guide/using-middleware.html) usando [app.use](https://expressjs.com/en/api.html) para lidar com todas as requisi\\xe7\\xf5es que chegam ao servidor. Se voc\\xea n\\xe3o estiver familiarizado com o Express ou o middleware, saiba apenas, que a fun\\xe7\\xe3o handleRender ser\\xe1 chamada toda vez que o servidor receber uma requisi\\xe7\\xe3o.\\n\\n`server.js`\\n\\n```js\\nimport express from 'express';\\n\\n// Vamos preench\\xea-las nas se\\xe7\\xf5es a seguir.\\nfunction renderFullPage(html, css) {\\n  /* ... */\\n}\\n\\nfunction handleRender(req, res) {\\n  /* ... */\\n}\\n\\nconst app = express();\\n\\n// Isso \\xe9 acionado toda vez que o servidor recebe uma solicita\\xe7\\xe3o.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Manipulando a requisi\\xe7\\xe3o\\n\\nA primeira coisa que precisamos fazer em cada solicita\\xe7\\xe3o \\xe9 criar um novo `ServerStyleSheets`.\\n\\nQuando renderizando, vamos encapsular `App`, o componente raiz, dentro de um [`StylesProvider`](/styles/api/#stylesprovider) e [` ThemeProvider`](/styles/api/#themeprovider) para tornar a configura\\xe7\\xe3o de estilo e o ` theme` dispon\\xedveis para todos os componentes na \\xe1rvore de componentes.\\n\\nA etapa principal na renderiza\\xe7\\xe3o do lado do servidor, \\xe9 renderizar o HTML inicial do componente **antes** de enviarmos para o lado do cliente. Para fazer isso, usamos [ReactDOMServer.renderToString()](https://reactjs.org/docs/react-dom-server.html).\\n\\nEm seguida, obtemos o CSS `sheets` usando `sheets.toString()`. Vamos ver como isso \\xe9 passado na fun\\xe7\\xe3o `renderFullPage`.\\n\\n```jsx\\nimport express from 'express';\\nimport React from 'react';\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets, ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction handleRender(req, res) {\\n  const sheets = new ServerStyleSheets();\\n\\n  // Renderiza o componente para string.\\n  const html = ReactDOMServer.renderToString(\\n    sheets.collect(\\n      <ThemeProvider theme={theme}>\\n        <App />\\n      </ThemeProvider>,\\n    ),\\n  );\\n\\n  // Pega o CSS das folhas de estilo.\\n  const css = sheets.toString();\\n\\n  // Envia a p\\xe1gina renderizada de volta ao cliente.\\n  res.send(renderFullPage(html, css));\\n}\\n\\nconst app = express();\\n\\napp.use('/build', express.static('build'));\\n\\n// Isso \\xe9 acionado toda vez que o servidor recebe uma solicita\\xe7\\xe3o.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Injetar Componente Inicial HTML e CSS\\n\\nA etapa final no lado do servidor \\xe9 injetar o componente HTML e CSS inicial em um modelo a ser renderizado no lado do cliente.\\n\\n```js\\nfunction renderFullPage(html, css) {\\n  return `\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        <title>Minha p\\xe1gina</title>\\n        <style id=\\\"jss-server-side\\\">${css}</style>\\n      </head>\\n      <body>\\n        <div id=\\\"root\\\">${html}</div>\\n      </body>\\n    </html>\\n  `;\\n}\\n```\\n\\n### O lado do cliente\\n\\nO lado do cliente \\xe9 direto. Tudo o que precisamos fazer \\xe9 remover o CSS gerado no lado do servidor. Vamos dar uma olhada no arquivo do cliente:\\n\\n`client.js`\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction Main() {\\n  React.useEffect(() => {\\n    const jssStyles = document.querySelector('#jss-server-side');\\n    if (jssStyles) {\\n      jssStyles.parentElement.removeChild(jssStyles);\\n    }\\n  }, []);\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <App />\\n    </ThemeProvider>\\n  );\\n}\\n\\nReactDOM.hydrate(<Main />, document.querySelector('#root'));\\n```\\n\\n## Implementa\\xe7\\xf5es de refer\\xeancia\\n\\nN\\xf3s hospedamos diferentes implementa\\xe7\\xf5es de refer\\xeancia que voc\\xea pode encontrar no [reposit\\xf3rio GitHub](https://github.com/mui-org/material-ui) sob a pasta o [`/examples`](https://github.com/mui-org/material-ui/tree/master/examples):\\n\\n- [A implementa\\xe7\\xe3o de refer\\xeancia deste tutorial](https://github.com/mui-org/material-ui/tree/master/examples/ssr)\\n- [Gatsby](https://github.com/mui-org/material-ui/tree/master/examples/gatsby)\\n- [Next.js](https://github.com/mui-org/material-ui/tree/master/examples/nextjs)\\n\\n## Resolu\\xe7\\xe3o de problemas\\n\\nConfira a resposta no FAQ: [Minha aplica\\xe7\\xe3o n\\xe3o \\xe9 renderizada corretamente no servidor](/getting-started/faq/#my-app-doesnt-render-correctly-on-the-server).\"},\"r+PO\":function(e,n){e.exports=\"# Server-Rendering\\n\\n<p class=\\\"description\\\">Der gebr\\xe4uchlichste Anwendungsfall f\\xfcr das serverseitige Rendern ist das anf\\xe4ngliche Rendern, wenn ein Benutzer (oder Suchmaschinen-Crawler) Ihre App zum ersten Mal anfordert.</p>\\n\\nWenn der Server die Anforderung empf\\xe4ngt, stellt er die erforderlichen Komponenten in einem HTML-String dar und sendet sie als Antwort an den Client. Ab diesem Zeitpunkt \\xfcbernimmt der Client die Rendering-Aufgaben.\\n\\n## Material-UI auf dem Server\\n\\nDie Material-UI wurde von Grund auf mit der M\\xf6glichkeit des Renderns auf dem Server entwickelt. Sie m\\xfcssen jedoch sicherstellen, dass sie korrekt integriert ist. Es ist wichtig, die Seite mit dem erforderlichen CSS zu versehen, andernfalls wird die Seite nur mit HTM-Code gerendert und dann darauf gewartet, dass der Client das CSS einf\\xfcgt was zu flackern f\\xfchrt (FOUC). Um den Stil in den Client zu injizieren, m\\xfcssen wir:\\n\\n1. Eine neue [`ServerStyleSheets`](/styles/api/#serverstylesheets) Instanz bei jede Anfrage erstellen.\\n2. Den React-Baum mit dem serverseitigen Collector rendern.\\n3. Das CSS herausziehen.\\n4. Das CSS zum Client weiterleiten.\\n\\nAuf der Clientseite wird das CSS ein zweites Mal eingef\\xfcgt, bevor das serverseitige injizierte CSS entfernt wird.\\n\\n## Installation\\n\\nIm folgenden Rezept wird beschrieben, wie das serverseitige Rendering eingerichtet wird.\\n\\n### Das Theme\\n\\nCreate a theme that will be shared between the client and the server:\\n\\n`theme.js`\\n\\n```js\\nimport { createMuiTheme } from '@material-ui/core/styles';\\nimport red from '@material-ui/core/colors/red';\\n\\n// Erstellen Sie eine Theme-Instanz.\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      main: '#556cd6',\\n    },\\n    secondary: {\\n      main: '#19857b',\\n    },\\n    error: {\\n      main: red.A400,\\n    },\\n    background: {\\n      default: '#fff',\\n    },\\n  },\\n});\\n\\nexport default theme;\\n```\\n\\n### Die Server-Seite\\n\\nThe following is the outline for what the server-side is going to look like. We are going to set up an [Express middleware](https://expressjs.com/en/guide/using-middleware.html) using [app.use](https://expressjs.com/en/api.html) to handle all requests that come in to the server. If you're unfamiliar with Express or middleware, just know that the handleRender function will be called every time the server receives a request.\\n\\n`server.js`\\n\\n```js\\nimport express from 'express';\\n\\n// Diese werden wir in den folgenden Abschnitten ausf\\xfcllen.\\nfunction renderFullPage(html, css) {\\n  /* ... */\\n}\\n\\nfunction handleRender(req, res) {\\n  /* ... */\\n}\\n\\nconst app = express();\\n\\n// Isso \\xe9 acionado toda vez que o servidor recebe uma solicita\\xe7\\xe3o.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Verarbeiten der Anfrage\\n\\nAls Erstes m\\xfcssen wir bei jeder Anfrage ein neues `ServerStyleSheets` erstellen.\\n\\nWhen rendering, we will wrap `App`, the root component, inside a [`StylesProvider`](/styles/api/#stylesprovider) and [`ThemeProvider`](/styles/api/#themeprovider) to make the style configuration and the `theme` available to all components in the component tree.\\n\\nThe key step in server-side rendering is to render the initial HTML of the component **before** we send it to the client side. Dazu verwenden wir [ReactDOMServer.renderToString()](https://reactjs.org/docs/react-dom-server.html).\\n\\nWe then get the CSS from the `sheets` using `sheets.toString()`. We will see how this is passed along in the `renderFullPage` function.\\n\\n```jsx\\nimport express from 'express';\\nimport React from 'react';\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets, ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction handleRender(req, res) {\\n  const sheets = new ServerStyleSheets();\\n\\n  // Render the component to a string.\\n  const html = ReactDOMServer.renderToString(\\n    sheets.collect(\\n      <ThemeProvider theme={theme}>\\n        <App />\\n      </ThemeProvider>,\\n    ),\\n  );\\n\\n  // Grab the CSS from the sheets.\\n  const css = sheets.toString();\\n\\n  // Zur\\xfccksenden der gerenderten Seite an den Client.\\n  res.send(renderFullPage(html, css));\\n}\\n\\nconst app = express();\\n\\napp.use('/build', express.static('build'));\\n\\n// Dies wird jedes Mal ausgel\\xf6st, wenn der Server eine Anfrage erh\\xe4lt.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Injizieren der urspr\\xfcngliche HTML Komponente und CSS\\n\\nThe final step on the server-side is to inject the initial component HTML and CSS into a template to be rendered on the client side.\\n\\n```js\\nfunction renderFullPage(html, css) {\\n  return `\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        <title>My page</title>\\n        <style id=\\\"jss-server-side\\\">${css}</style>\\n      </head>\\n      <body>\\n        <div id=\\\"root\\\">${html}</div>\\n      </body>\\n    </html>\\n  `;\\n}\\n```\\n\\n### Die Client-Seite\\n\\nDie Client-Seite ist unkompliziert. Wir m\\xfcssen nur das serverseitig erzeugte CSS entfernen. Let's take a look at the client file:\\n\\n`client.js`\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction Main() {\\n  React.useEffect(() => {\\n    const jssStyles = document.querySelector('#jss-server-side');\\n    if (jssStyles) {\\n      jssStyles.parentElement.removeChild(jssStyles);\\n    }\\n  }, []);\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <App />\\n    </ThemeProvider>\\n  );\\n}\\n\\nReactDOM.hydrate(<Main />, document.querySelector('#root'));\\n```\\n\\n## Referenzimplementierungen\\n\\nWir bieten verschiedene Referenzimplementierungen an, die Sie im [GitHub-Repository](https://github.com/mui-org/material-ui) finden k\\xf6nnen unter dem [`/examples`](https://github.com/mui-org/material-ui/tree/master/examples) Ordner:\\n\\n- [Die Referenzimplementierung dieses Tutorials](https://github.com/mui-org/material-ui/tree/master/examples/ssr)\\n- [Gatsby](https://github.com/mui-org/material-ui/tree/master/examples/gatsby)\\n- [Next.js](https://github.com/mui-org/material-ui/tree/master/examples/nextjs)\\n\\n## Probleml\\xf6sungen\\n\\nCheck out the FAQ answer: [My App doesn't render correctly on the server](/getting-started/faq/#my-app-doesnt-render-correctly-on-the-server).\"},tEUy:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/guides/server-rendering\",function(){return t(\"aOOu\")}])},vGDQ:function(e,n){e.exports=\"# \\u0421\\u0435\\u0440\\u0432\\u0435\\u0440\\u043d\\u0430\\u044f \\u043e\\u0442\\u0440\\u0438\\u0441\\u043e\\u0432\\u043a\\u0430\\n\\n<p class=\\\"description\\\">\\u041d\\u0430\\u0438\\u0431\\u043e\\u043b\\u0435\\u0435 \\u0440\\u0430\\u0441\\u043f\\u0440\\u043e\\u0441\\u0442\\u0440\\u0430\\u043d\\u0435\\u043d\\u043d\\u044b\\u0439 \\u0432\\u0430\\u0440\\u0438\\u0430\\u043d\\u0442 \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f \\u0434\\u043b\\u044f \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u043d\\u043e\\u0439 \\u043e\\u0442\\u0440\\u0438\\u0441\\u043e\\u0432\\u043a\\u0438 - \\u044d\\u0442\\u043e \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u044c \\u043d\\u0430\\u0447\\u0430\\u043b\\u044c\\u043d\\u0443\\u044e \\u043e\\u0442\\u0440\\u0438\\u0441\\u043e\\u0432\\u043a\\u0443, \\u043a\\u043e\\u0433\\u0434\\u0430 \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044c (\\u0438\\u043b\\u0438 \\u043f\\u043e\\u0438\\u0441\\u043a\\u043e\\u0432\\u043e\\u0439 \\u0434\\u0432\\u0438\\u0436\\u043e\\u043a) \\u0432\\u043f\\u0435\\u0440\\u0432\\u044b\\u0435 \\u0437\\u0430\\u043f\\u0440\\u0430\\u0448\\u0438\\u0432\\u0430\\u0435\\u0442 \\u0432\\u0430\\u0448\\u0435 \\u043f\\u0440\\u0438\\u043b\\u043e\\u0436\\u0435\\u043d\\u0438\\u0435.</p>\\n\\n\\u041a\\u043e\\u0433\\u0434\\u0430 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440 \\u043f\\u043e\\u043b\\u0443\\u0447\\u0430\\u0435\\u0442 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441, \\u043e\\u043d \\u043e\\u0442\\u0440\\u0438\\u0441\\u043e\\u0432\\u044b\\u0432\\u0430\\u0435\\u0442 \\u043d\\u0435\\u043e\\u0431\\u0445\\u043e\\u0434\\u0438\\u043c\\u044b\\u0435 \\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442\\u044b \\u0432 HTML \\u0441\\u0442\\u0440\\u043e\\u043a, \\u0430 \\u0437\\u0430\\u0442\\u0435\\u043c \\u043e\\u0442\\u043f\\u0440\\u0430\\u0432\\u043b\\u044f\\u0435\\u0442 \\u0435\\u0435 \\u043a\\u0430\\u043a \\u043e\\u0442\\u0432\\u0435\\u0442 \\u043a\\u043b\\u0438\\u0435\\u043d\\u0442\\u0443. \\u0421 \\u044d\\u0442\\u043e\\u0433\\u043e \\u043c\\u043e\\u043c\\u0435\\u043d\\u0442\\u0430 \\u043a\\u043b\\u0438\\u0435\\u043d\\u0442 \\u0431\\u0435\\u0440\\u0435\\u0442 \\u043d\\u0430 \\u0441\\u0435\\u0431\\u044f \\u043e\\u0431\\u044f\\u0437\\u0430\\u043d\\u043d\\u043e\\u0441\\u0442\\u0438 \\u043f\\u043e \\u043e\\u0442\\u0440\\u0438\\u0441\\u043e\\u0432\\u043a\\u0435.\\n\\n## Material-UI on the server\\n\\nMaterial-UI was designed from the ground-up with the constraint of rendering on the server, but it's up to you to make sure it's correctly integrated. It's important to provide the page with the required CSS, otherwise the page will render with just the HTML then wait for the CSS to be injected by the client, causing it to flicker (FOUC). \\u0427\\u0442\\u043e\\u0431\\u044b \\u0434\\u043e\\u0431\\u0430\\u0432\\u0438\\u0442\\u044c \\u0441\\u0442\\u0438\\u043b\\u0438 \\u043d\\u0430 \\u043a\\u043b\\u0438\\u0435\\u043d\\u0442, \\u0432\\u0430\\u043c \\u043d\\u0435\\u043e\\u0431\\u0445\\u043e\\u0434\\u0438\\u043c\\u043e:\\n\\n1. Create a fresh, new [`ServerStyleSheets`](/styles/api/#serverstylesheets) instance on every request.\\n2. Render the React tree with the server-side collector.\\n3. Pull the CSS out.\\n4. \\u041f\\u0435\\u0440\\u0435\\u0434\\u0430\\u0442\\u044c CSS \\u043a\\u043b\\u0438\\u0435\\u043d\\u0442\\u0443.\\n\\n\\u041d\\u0430 \\u0441\\u0442\\u043e\\u0440\\u043e\\u043d\\u0435 \\u043a\\u043b\\u0438\\u0435\\u043d\\u0442\\u0430 CSS \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0434\\u043e\\u0431\\u0430\\u0432\\u043b\\u0435\\u043d \\u0432\\u0442\\u043e\\u0440\\u043e\\u0439 \\u0440\\u0430\\u0437 \\u043f\\u0435\\u0440\\u0435\\u0434 \\u0443\\u0434\\u0430\\u043b\\u0435\\u043d\\u0438\\u0435\\u043c \\u0434\\u043e\\u0431\\u0430\\u0432\\u043b\\u0435\\u043d\\u043d\\u043e\\u0433\\u043e \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u043e\\u043c CSS.\\n\\n## \\u041d\\u0430\\u0441\\u0442\\u0440\\u043e\\u0439\\u043a\\u0430\\n\\n\\u0412 \\u0441\\u043b\\u0435\\u0434\\u0443\\u044e\\u0449\\u0435\\u043c \\u0440\\u0435\\u0446\\u0435\\u043f\\u0442\\u0435 \\u043c\\u044b \\u0440\\u0430\\u0441\\u0441\\u043c\\u043e\\u0442\\u0440\\u0438\\u043c, \\u043a\\u0430\\u043a \\u043d\\u0430\\u0441\\u0442\\u0440\\u043e\\u0438\\u0442\\u044c \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u043d\\u0443\\u044e \\u043e\\u0442\\u0440\\u0438\\u0441\\u043e\\u0432\\u043a\\u0443.\\n\\n### The theme\\n\\nCreate a theme that will be shared between the client and the server:\\n\\n`theme.js`\\n\\n```js\\nimport { createMuiTheme } from '@material-ui/core/styles';\\nimport red from '@material-ui/core/colors/red';\\n\\n// Create a theme instance.\\nconst theme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      main: '#556cd6',\\n    },\\n    secondary: {\\n      main: '#19857b',\\n    },\\n    error: {\\n      main: red.A400,\\n    },\\n    background: {\\n      default: '#fff',\\n    },\\n  },\\n});\\n\\nexport default theme;\\n```\\n\\n### The server-side\\n\\nThe following is the outline for what the server-side is going to look like. We are going to set up an [Express middleware](https://expressjs.com/en/guide/using-middleware.html) using [app.use](https://expressjs.com/en/api.html) to handle all requests that come in to the server. If you're unfamiliar with Express or middleware, just know that the handleRender function will be called every time the server receives a request.\\n\\n`server.js`\\n\\n```js\\nimport express from 'express';\\n\\n// We are going to fill these out in the sections to follow.\\nfunction renderFullPage(html, css) {\\n  /* ... */\\n}\\n\\nfunction handleRender(req, res) {\\n  /* ... */\\n}\\n\\nconst app = express();\\n\\n// Isso \\xe9 acionado toda vez que o servidor recebe uma solicita\\xe7\\xe3o.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### \\u041e\\u0431\\u0440\\u0430\\u0431\\u043e\\u0442\\u043a\\u0430 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0430\\n\\nThe first thing that we need to do on every request is create a new `ServerStyleSheets`.\\n\\nWhen rendering, we will wrap `App`, the root component, inside a [`StylesProvider`](/styles/api/#stylesprovider) and [`ThemeProvider`](/styles/api/#themeprovider) to make the style configuration and the `theme` available to all components in the component tree.\\n\\nThe key step in server-side rendering is to render the initial HTML of the component **before** we send it to the client side. To do this, we use [ReactDOMServer.renderToString()](https://reactjs.org/docs/react-dom-server.html).\\n\\nWe then get the CSS from the `sheets` using `sheets.toString()`. We will see how this is passed along in the `renderFullPage` function.\\n\\n```jsx\\nimport express from 'express';\\nimport React from 'react';\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets, ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction handleRender(req, res) {\\n  const sheets = new ServerStyleSheets();\\n\\n  // Render the component to a string.\\n  const html = ReactDOMServer.renderToString(\\n    sheets.collect(\\n      <ThemeProvider theme={theme}>\\n        <App />\\n      </ThemeProvider>,\\n    ),\\n  );\\n\\n  // Grab the CSS from the sheets.\\n  const css = sheets.toString();\\n\\n  // Send the rendered page back to the client.\\n  res.send(renderFullPage(html, css));\\n}\\n\\nconst app = express();\\n\\napp.use('/build', express.static('build'));\\n\\n// This is fired every time the server-side receives a request.\\napp.use(handleRender);\\n\\nconst port = 3000;\\napp.listen(port);\\n```\\n\\n### Inject Initial Component HTML and CSS\\n\\nThe final step on the server-side is to inject the initial component HTML and CSS into a template to be rendered on the client side.\\n\\n```js\\nfunction renderFullPage(html, css) {\\n  return `\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        <title>My page</title>\\n        <style id=\\\"jss-server-side\\\">${css}</style>\\n      </head>\\n      <body>\\n        <div id=\\\"root\\\">${html}</div>\\n      </body>\\n    </html>\\n  `;\\n}\\n```\\n\\n### The Client Side\\n\\nThe client side is straightforward. All we need to do is remove the server-side generated CSS. Let's take a look at the client file:\\n\\n`client.js`\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\nimport App from './App';\\nimport theme from './theme';\\n\\nfunction Main() {\\n  React.useEffect(() => {\\n    const jssStyles = document.querySelector('#jss-server-side');\\n    if (jssStyles) {\\n      jssStyles.parentElement.removeChild(jssStyles);\\n    }\\n  }, []);\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <App />\\n    </ThemeProvider>\\n  );\\n}\\n\\nReactDOM.hydrate(<Main />, document.querySelector('#root'));\\n```\\n\\n## Reference implementations\\n\\nWe host different reference implementations which you can find in the [GitHub repository](https://github.com/mui-org/material-ui) under the [`/examples`](https://github.com/mui-org/material-ui/tree/master/examples) folder:\\n\\n- [The reference implementation of this tutorial](https://github.com/mui-org/material-ui/tree/master/examples/ssr)\\n- [Gatsby](https://github.com/mui-org/material-ui/tree/master/examples/gatsby)\\n- [Next.js](https://github.com/mui-org/material-ui/tree/master/examples/nextjs)\\n\\n## Troubleshooting\\n\\nCheck out the FAQ answer: [My App doesn't render correctly on the server](/getting-started/faq/#my-app-doesnt-render-correctly-on-the-server).\"},x0yi:function(e,n){function t(e){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id=\"x0yi\"}},[[\"tEUy\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}