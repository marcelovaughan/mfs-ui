{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[315],{\"8ERC\":function(e,n){e.exports=\"# Testing\\n\\n<p class=\\\"description\\\">Write tests to prevent regressions and write better code.</p>\\n\\nExamples in this guide use [global methods from Mocha](https://mochajs.org/api/global.html), not [Jest](https://jestjs.io/docs/en/api).\\n\\n## Internal\\n\\nMaterial-UI has **a wide range** of tests so we can\\niterate with confidence on the components, for instance, the visual regression tests provided by [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) have proven to be really helpful.\\nTo learn more about the internal tests, you can have a look at the [README](https://github.com/mui-org/material-ui/blob/master/test/README.md).\\n\\n## Userspace\\n\\nWhat about writing tests in userspace? The Material-UI styling infrastructure uses some helper functions built on top of [enzyme](https://github.com/airbnb/enzyme) to make the process easier, which we are exposing. You can take advantage of them if you so choose.\\nWe use almost exclusively full DOM rendering APIs. We encourage you to do the same especially\\nif your components rely on custom themes. Tests using shallow rendering APIs become more brittle\\nwith the amount of provider components they require.\\n\\n### Full DOM rendering\\n\\nFull DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or may require the full lifecycle in order to fully test the component (e.g., `componentDidMount` etc.).\\n\\nThe `createMount()` function is provided for this situation.\\nAside from wrapping the enzyme API, it provides a `cleanUp` function.\\n\\n### Shallow rendering\\n\\nShallow rendering is useful to constrain your testing to a component as a unit. This also ensures that your tests aren't indirectly asserting behavior of child components.\\nShallow rendering was created to test components in isolation. This means without leaking child implementation details such as the context.\\n\\nThe `createShallow()` function can be used for this situation. Aside from wrapping the enzyme API, it provides a `dive` and `untilSelector` option.\\n\\n### Render to string\\n\\nRendering to a string is useful to test the behavior of the components that are used on the server.\\nYou can take advantage of this to assert the generated HTML string.\\n\\nThe `createRender()` function is ideal for this. This is just an alias for the enzyme API, which is only exposed for consistency.\\n\\n## API\\n\\n### `createMount([options]) => mount`\\n\\nGenerate an enhanced mount function with the needed context.\\nPlease refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/mount.html) for further details on the `mount` function.\\n\\n#### Arguments\\n\\n1. `options` (_Object_ [optional])\\n\\n- `options.mount` (_Function_ [optional]): The mount function to enhance, it uses **enzyme by default**.\\n- The other keys are forwarded to the options argument of `enzyme.mount()`.\\n\\n#### Returns\\n\\n`mount` (_mount_): A mount function.\\n\\n#### Examples\\n\\n```jsx\\nimport { createMount } from '@material-ui/core/test-utils';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\ndescribe('<MyComponent />', () => {\\n  let mount;\\n\\n  function MySuccessButton({ children }) {\\n    return (\\n      <ThemeProvider\\n        theme={{\\n          success: { main: '#fff' },\\n        }}\\n      >\\n        {children}\\n      </ThemeProvider>\\n    );\\n  }\\n\\n  before(() => {\\n    mount = createMount();\\n  });\\n\\n  after(() => {\\n    mount.cleanUp();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = mount(\\n      <MockedTheme>\\n        <MySuccessButton />\\n      </MockedTheme>,\\n    );\\n  });\\n});\\n```\\n\\n### `createShallow([options]) => shallow`\\n\\nGenerate an enhanced shallow function with the needed context.\\nPlease refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/shallow.html) for further details on the `shallow` function.\\n\\n#### Arguments\\n\\n1. `options` (_Object_ [optional])\\n\\n- `options.shallow` (_Function_ [optional]): The shallow function to enhance, it uses **enzyme by default**.\\n- `options.untilSelector` (_String_ [optional]): Recursively shallow renders the children until it can find the provided selector. It's useful to drill down higher-order components.\\n- `options.dive` (_Boolean_ [optional]): Shallow function renders the one non-DOM child of the current wrapper, and returns a wrapper around the result.\\n- The other keys are forwarded to the options argument of `enzyme.shallow()`.\\n\\n#### Returns\\n\\n`shallow` (_shallow_): A shallow function.\\n\\n#### Examples\\n\\n```jsx\\nimport { createShallow } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let shallow;\\n\\n  before(() => {\\n    // This is Mocha; in Jest, use beforeAll\\n    shallow = createShallow();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = shallow(<MyComponent />);\\n  });\\n});\\n```\\n\\n### `createRender([options]) => render`\\n\\nGenerate a render to string function with the needed context.\\nPlease refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/render.html) for further details on the `render` function.\\n\\n#### Arguments\\n\\n1. `options` (_Object_ [optional])\\n\\n- `options.render` (_Function_ [optional]): The render function to enhance, it uses **enzyme by default**.\\n- The other keys are forwarded to the options argument of `enzyme.render()`.\\n\\n#### Returns\\n\\n`render` (_Function_): A render to string function.\\n\\n#### Examples\\n\\n```jsx\\nimport { createRender } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let render;\\n\\n  before(() => {\\n    render = createRender();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = render(<MyComponent />);\\n  });\\n});\\n```\\n\"},LEMW:function(e,n){e.exports=\"# Test\\n\\n<p class=\\\"description\\\">Write tests to prevent regressions and write better code.</p>\\n\\nExamples in this guide use [global methods from Mocha](https://mochajs.org/api/global.html), not [Jest](https://jestjs.io/docs/en/api).\\n\\n## Internal\\n\\nMaterial-UI has **a wide range** of tests so we can iterate with confidence on the components, for instance, the visual regression tests provided by [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) have proven to be really helpful. To learn more about the internal tests, you can have a look at the [README](https://github.com/mui-org/material-ui/blob/master/test/README.md).\\n\\n## Userspace\\n\\nWhat about writing tests in userspace? The Material-UI styling infrastructure uses some helper functions built on top of [enzyme](https://github.com/airbnb/enzyme) to make the process easier, which we are exposing. You can take advantage of them if you so choose. We use almost exclusively full DOM rendering APIs. We encourage you to do the same especially if your components rely on custom themes. Tests using shallow rendering APIs become more brittle with the amount of provider components they require.\\n\\n### Full DOM rendering\\n\\nFull DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or may require the full lifecycle in order to fully test the component (e.g., `componentDidMount` etc.).\\n\\nThe `createMount()` function is provided for this situation. Aside from wrapping the enzyme API, it provides a `cleanUp` function.\\n\\n### Shallow rendering\\n\\nShallow rendering is useful to constrain your testing to a component as a unit. This also ensures that your tests aren't indirectly asserting behavior of child components. Shallow rendering was created to test components in isolation. This means without leaking child implementation details such as the context.\\n\\nThe `createShallow()` function can be used for this situation. Aside from wrapping the enzyme API, it provides a `dive` and `untilSelector` option.\\n\\n### Render to string\\n\\nRendering to a string is useful to test the behavior of the components that are used on the server. You can take advantage of this to assert the generated HTML string.\\n\\nThe `createRender()` function is ideal for this. This is just an alias for the enzyme API, which is only exposed for consistency.\\n\\n## API\\n\\n### `createMount([options]) => mount`\\n\\nGenerate an enhanced mount function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/mount.html) for further details on the `mount` function.\\n\\n#### Param\\xe8tres\\n\\n1. `options` (*Object* [optional]) \\n  - `options.mount` (*Function* [optional]): The mount function to enhance, it uses **enzyme by default**.\\n  - The other keys are forwarded to the options argument of `enzyme.mount()`.\\n\\n#### Valeur de retour\\n\\n`mount` (*mount*): A mount function.\\n\\n#### Exemples\\n\\n```jsx\\nimport { createMount } from '@material-ui/core/test-utils';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\ndescribe('<MyComponent />', () => {\\n  let mount;\\n\\n  function MySuccessButton({ children }) {\\n    return (\\n      <ThemeProvider theme={{ success: { main: '#fff' } }}>\\n        {children}\\n      </ThemeProvider>\\n    );\\n  }\\n\\n  before(() => {\\n    mount = createMount();\\n  });\\n\\n  after(() => {\\n    mount.cleanUp();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\\n  });\\n});\\n```\\n\\n### `createShallow([options]) => shallow`\\n\\nGenerate an enhanced shallow function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/shallow.html) for further details on the `shallow` function.\\n\\n#### Param\\xe8tres\\n\\n1. `options` (*Object* [optional]) \\n  - `options.shallow` (*Function* [optional]): The shallow function to enhance, it uses **enzyme by default**.\\n  - `options.untilSelector` (*String* [optional]): Recursively shallow renders the children until it can find the provided selector. It's useful to drill down higher-order components.\\n  - `options.dive` (*Boolean* [optional]): Shallow function renders the one non-DOM child of the current wrapper, and returns a wrapper around the result.\\n  - The other keys are forwarded to the options argument of `enzyme.shallow()`.\\n\\n#### Valeur de retour\\n\\n`shallow` (*shallow*): A shallow function.\\n\\n#### Exemples\\n\\n```jsx\\nimport { createShallow } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let shallow;\\n\\n  before(() => {  // This is Mocha; in Jest, use beforeAll\\n    shallow = createShallow();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = shallow(<MyComponent />);\\n  });\\n});\\n```\\n\\n### `createRender([options]) => render`\\n\\nGenerate a render to string function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/render.html) for further details on the `render` function.\\n\\n#### Param\\xe8tres\\n\\n1. `options` (*Object* [optional]) \\n  - `options.render` (*Function* [optional]): The render function to enhance, it uses **enzyme by default**.\\n  - The other keys are forwarded to the options argument of `enzyme.render()`.\\n\\n#### Valeur de retour\\n\\n`render` (*Function*): A render to string function.\\n\\n#### Exemples\\n\\n```jsx\\nimport { createRender } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let render;\\n\\n  before(() => {\\n    render = createRender();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = render(<MyComponent />);\\n  });\\n});\\n```\"},OgoS:function(e,n){e.exports=\"# \\u0422\\u0435\\u0441\\u0442\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d\\u0438\\u0435\\n\\n<p class=\\\"description\\\">\\u041f\\u0438\\u0448\\u0438\\u0442\\u0435 \\u0442\\u0435\\u0441\\u0442\\u044b, \\u0447\\u0442\\u043e\\u0431\\u044b \\u043f\\u0440\\u0435\\u0434\\u043e\\u0442\\u0432\\u0440\\u0430\\u0442\\u0438\\u0442\\u044c \\u0440\\u0435\\u0433\\u0440\\u0435\\u0441\\u0441\\u0438\\u0438 \\u0438 \\u043f\\u043e\\u043b\\u0443\\u0447\\u0438\\u0442\\u044c \\u043b\\u0443\\u0447\\u0448\\u0438\\u0439 \\u043a\\u043e\\u0434.</p>\\n\\nExamples in this guide use [global methods from Mocha](https://mochajs.org/api/global.html), not [Jest](https://jestjs.io/docs/en/api).\\n\\n## Internal\\n\\nMaterial-UI has **a wide range** of tests so we can iterate with confidence on the components, for instance, the visual regression tests provided by [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) have proven to be really helpful. To learn more about the internal tests, you can have a look at the [README](https://github.com/mui-org/material-ui/blob/master/test/README.md).\\n\\n## Userspace\\n\\nWhat about writing tests in userspace? The Material-UI styling infrastructure uses some helper functions built on top of [enzyme](https://github.com/airbnb/enzyme) to make the process easier, which we are exposing. You can take advantage of them if you so choose. We use almost exclusively full DOM rendering APIs. We encourage you to do the same especially if your components rely on custom themes. Tests using shallow rendering APIs become more brittle with the amount of provider components they require.\\n\\n### Full DOM rendering\\n\\nFull DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or may require the full lifecycle in order to fully test the component (e.g., `componentDidMount` etc.).\\n\\nThe `createMount()` function is provided for this situation. Aside from wrapping the enzyme API, it provides a `cleanUp` function.\\n\\n### Shallow rendering\\n\\nShallow rendering is useful to constrain your testing to a component as a unit. This also ensures that your tests aren't indirectly asserting behavior of child components. Shallow rendering was created to test components in isolation. This means without leaking child implementation details such as the context.\\n\\nThe `createShallow()` function can be used for this situation. Aside from wrapping the enzyme API, it provides a `dive` and `untilSelector` option.\\n\\n### Render to string\\n\\nRendering to a string is useful to test the behavior of the components that are used on the server. You can take advantage of this to assert the generated HTML string.\\n\\nThe `createRender()` function is ideal for this. This is just an alias for the enzyme API, which is only exposed for consistency.\\n\\n## API\\n\\n### `createMount([options]) => mount`\\n\\nGenerate an enhanced mount function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/mount.html) for further details on the `mount` function.\\n\\n#### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `\\u0432\\u0430\\u0440\\u0438\\u0430\\u043d\\u0442\\u044b` (*\\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u0430* [optional]) \\n  - `options.mount` (*Function* [optional]): The mount function to enhance, it uses **enzyme by default**.\\n  - The other keys are forwarded to the options argument of `enzyme.mount()`.\\n\\n#### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`mount` (*mount*): A mount function.\\n\\n#### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport { createMount } from '@material-ui/core/test-utils';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\ndescribe('<MyComponent />', () => {\\n  let mount;\\n\\n  function MySuccessButton({ children }) {\\n    return (\\n      <ThemeProvider theme={{ success: { main: '#fff' } }}>\\n        {children}\\n      </ThemeProvider>\\n    );\\n  }\\n\\n  before(() => {\\n    mount = createMount();\\n  });\\n\\n  after(() => {\\n    mount.cleanUp();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\\n  });\\n});\\n```\\n\\n### `createShallow([options]) => shallow`\\n\\nGenerate an enhanced shallow function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/shallow.html) for further details on the `shallow` function.\\n\\n#### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `\\u0432\\u0430\\u0440\\u0438\\u0430\\u043d\\u0442\\u044b` (*\\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u0430* [optional]) \\n  - `options.shallow` (*Function* [optional]): The shallow function to enhance, it uses **enzyme by default**.\\n  - `options.untilSelector` (*String* [optional]): Recursively shallow renders the children until it can find the provided selector. It's useful to drill down higher-order components.\\n  - `options.dive` (*Boolean* [optional]): Shallow function renders the one non-DOM child of the current wrapper, and returns a wrapper around the result.\\n  - The other keys are forwarded to the options argument of `enzyme.shallow()`.\\n\\n#### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`shallow` (*shallow*): A shallow function.\\n\\n#### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport { createShallow } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let shallow;\\n\\n  before(() => {  // This is Mocha; in Jest, use beforeAll\\n    shallow = createShallow();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = shallow(<MyComponent />);\\n  });\\n});\\n```\\n\\n### `createRender([options]) => render`\\n\\nGenerate a render to string function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/render.html) for further details on the `render` function.\\n\\n#### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `\\u0432\\u0430\\u0440\\u0438\\u0430\\u043d\\u0442\\u044b` (*\\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u0430* [optional]) \\n  - `options.render` (*Function* [optional]): The render function to enhance, it uses **enzyme by default**.\\n  - The other keys are forwarded to the options argument of `enzyme.render()`.\\n\\n#### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`render` (*Function*): A render to string function.\\n\\n#### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport { createRender } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let render;\\n\\n  before(() => {\\n    render = createRender();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = render(<MyComponent />);\\n  });\\n});\\n```\"},QfAY:function(e,n){e.exports=\"# Testen\\n\\n<p class=\\\"description\\\">Schreiben Sie Tests, um Regressionen zu verhindern und besseren Code zu schreiben.</p>\\n\\nDie Beispiele in diesem Abschnitt verwenden [globale Methoden von Mocha](https://mochajs.org/api/global.html), nicht [Jest](https://jestjs.io/docs/en/api).\\n\\n## Intern\\n\\nMaterial-UI has **a wide range** of tests so we can iterate with confidence on the components, for instance, the visual regression tests provided by [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) have proven to be really helpful. To learn more about the internal tests, you can have a look at the [README](https://github.com/mui-org/material-ui/blob/master/test/README.md).\\n\\n## Benutzerraum\\n\\nWas ist mit Tests im Benutzerraum? Die Material-UI-Styling-Infrastruktur verwendet einige Hilfsfunktionen, die auf dem [enzym ](https://github.com/airbnb/enzyme) basieren, um den Prozess zu erleichtern, den wir offenlegen. Sie k\\xf6nnen sie nutzen, wenn Sie dies w\\xfcnschen. We use almost exclusively full DOM rendering APIs. We encourage you to do the same especially if your components rely on custom themes. Tests using shallow rendering APIs become more brittle with the amount of provider components they require.\\n\\n### Volles DOM-Rendering\\n\\nDas vollst\\xe4ndige DOM-Rendering ist ideal f\\xfcr Anwendungsf\\xe4lle, in denen Komponenten vorhanden sind, die mit DOM-APIs interagieren oder den gesamten Lebenszyklus erfordern, um die Komponente vollst\\xe4ndig zu testen (z. B. `componentDidMount` usw.).\\n\\nDie `createMount()` Funktion kann f\\xfcr diese Situation verwendet werden. Neben dem Einwickeln der Enzym-API bietet es eine `cleanUp` M\\xf6glichkeit.\\n\\n### Flaches Rendering (Shallow)\\n\\nFlaches Rendering ist n\\xfctzlich, um Ihre Tests auf eine Komponente als Einheit zu beschr\\xe4nken. Dadurch wird auch sichergestellt, dass Ihre Tests das Verhalten untergeordneter Komponenten nicht indirekt durchsetzen. Es wurde ein flaches Rendering erstellt, um Komponenten isoliert zu testen. Dies bedeutet, dass untergeordnete Implementierungsdetails wie der Kontext nicht verloren gehen.\\n\\nDie `createShallow()` Funktion kann f\\xfcr diese Situation verwendet werden. Neben dem Einwickeln der Enzym-API bietet es eine `dive` und `untilSelector` M\\xf6glichkeit.\\n\\n### Als string rendern\\n\\nDas Rendern in einen String ist hilfreich, um das Verhalten der auf dem Server verwendeten Komponenten zu testen. Sie k\\xf6nnen dies nutzen, um die generierte HTML-Zeichenfolge zu best\\xe4tigen.\\n\\nDie `createRender()` Funktion ist daf\\xfcr ideal. Dies ist nur ein Alias f\\xfcr die Enzym-API, die nur wegen der Konsistenz sichtbar ist.\\n\\n## API\\n\\n### `createMount([options]) => mount`\\n\\nGenerieren Sie eine erweiterte Mount-Funktion mit dem erforderlichen Kontext. Bitte beachten Sie die [Enzyme API-Dokumentation](https://airbnb.io/enzyme/docs/api/mount.html) f\\xfcr weitere Informationen zur `mount` Funktion.\\n\\n#### Argumente\\n\\n1. `options` (*Object* [optional]) \\n  - `options.mount` (*Function* [optional]): Die Mount-Funktion, die verbessert werden soll, verwendet **standardm\\xe4\\xdfig Enzym**.\\n  - Die anderen Schl\\xfcssel werden an das Optionsargument von `enzyme.mount()` weitergeleitet.\\n\\n#### R\\xfcckgabewerte\\n\\n`mount` (*mount*): Die mount-Funktion.\\n\\n#### Beispiele\\n\\n```jsx\\nimport { createMount } from '@material-ui/core/test-utils';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\ndescribe('<MyComponent />', () => {\\n  let mount;\\n\\n  function MySuccessButton({ children }) {\\n    return (\\n      <ThemeProvider theme={{ success: { main: '#fff' } }}>\\n        {children}\\n      </ThemeProvider>\\n    );\\n  }\\n\\n  before(() => {\\n    mount = createMount();\\n  });\\n\\n  after(() => {\\n    mount.cleanUp();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\\n  });\\n});\\n```\\n\\n### `createShallow([options]) => shallow`\\n\\nGenerieren Sie eine erweiterte Shallow-Funktion mit dem erforderlichen Kontext. Bitte beachten Sie die [Enzyme API-Dokumentation](https://airbnb.io/enzyme/docs/api/shallow.html) f\\xfcr weitere Informationen zur `shallow` Funktion.\\n\\n#### Argumente\\n\\n1. `options` (*Object* [optional]) \\n  - `options.shallow` (*Function* [optional]): Die Shallow-Funktion, die verbessert werden soll, verwendet **standardm\\xe4\\xdfig Enzym**.\\n  - `options.untilSelector` (*String* [optional]): Rendert rekursiv die Kinder flach, so lange, bis sie den bereitgestellten Selektor finden k\\xf6nnen. Es ist hilfreich, Komponenten h\\xf6herer Ordnung aufzuschl\\xfcsseln.\\n  - `options.dive` (*Boolean* [optional]): Rendert funktional flach das erste nicht-DOM-Child des aktuellen Wrappers und gibt einen Wrapper zur\\xfcck.\\n  - Die anderen Schl\\xfcssel werden an das Optionsargument von `enzyme.shallow()` weitergeleitet.\\n\\n#### R\\xfcckgabewerte\\n\\n`shallow` (*shallow*): Eine shallow-Funktion.\\n\\n#### Beispiele\\n\\n```jsx\\nimportiere { createShallow } aus '@ material-ui / core / test-utils';\\n\\nbeschreiben ('<0 />', () => {\\n  sei flach;\\n\\n  vor (()) => {// Dies ist Mocha; in Jest verwende beforeAll\\n    shallow = createShallow ();\\n  });\\n\\n  es ('sollte funktionieren', () => {\\n    const wrapper = shallow (<0 />);\\n  });\\n});\\n```\\n\\n### `createRender([options]) => render`\\n\\nGenerieren Sie eine Render-zu-String-Funktion mit dem erforderlichen Kontext. Bitte beachten Sie die [Enzyme API-Dokumentation](https://airbnb.io/enzyme/docs/api/render.html) f\\xfcr weitere Informationen zur `render` Funktion.\\n\\n#### Argumente\\n\\n1. `options` (*Object* [optional]) \\n  - `options.render` (*Function* [optional]): Die Renderfunktion, die verbessert werden soll, verwendet **standardm\\xe4\\xdfig Enzym**.\\n  - Die anderen Schl\\xfcssel werden an das Optionsargument von `enzyme.render()` weitergeleitet.\\n\\n#### R\\xfcckgabewerte\\n\\n`render` (*Funktion*): Eine Render-zu-String-Funktion.\\n\\n#### Beispiele\\n\\n```jsx\\nimport { createRender } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let render;\\n\\n  before(() => {\\n    render = createRender();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = render(<MyComponent />);\\n  });\\n});\\n```\"},RrWY:function(e,n){e.exports=\"# \\u30c6\\u30b9\\u30c8\\n\\n<p class=\\\"description\\\">\\u30c6\\u30b9\\u30c8\\u66f8\\u3044\\u3066\\u3001\\u30ea\\u30b0\\u30ec\\u30c3\\u30b7\\u30e7\\u30f3\\u3092\\u9632\\u304e\\u3001\\u3088\\u308a\\u826f\\u3044\\u30b3\\u30fc\\u30c9\\u3092\\u4f5c\\u6210\\u3057\\u307e\\u3059\\u3002</p>\\n\\n\\u3053\\u306e\\u30ac\\u30a4\\u30c9\\u306e\\u4f8b\\u3067\\u306f\\u3001Mocha\\u306e[\\u30b0\\u30ed\\u30fc\\u30d0\\u30eb\\u30e1\\u30bd\\u30c3\\u30c9\\u3092\\u4f7f\\u7528\\u3057\\u3066\\u3044\\u307e\\u3059](https://mochajs.org/api/global.html) \\u3001[ Jest\\u3067\\u306f\\u3042\\u308a\\u307e\\u305b\\u3093](https://jestjs.io/docs/en/api) \\u3002\\n\\n## Internal\\n\\nMaterial-UI has **a wide range** of tests so we can iterate with confidence on the components, for instance, the visual regression tests provided by [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) have proven to be really helpful. To learn more about the internal tests, you can have a look at the [README](https://github.com/mui-org/material-ui/blob/master/test/README.md).\\n\\n## Userspace\\n\\nWhat about writing tests in userspace? The Material-UI styling infrastructure uses some helper functions built on top of [enzyme](https://github.com/airbnb/enzyme) to make the process easier, which we are exposing. You can take advantage of them if you so choose. We use almost exclusively full DOM rendering APIs. We encourage you to do the same especially if your components rely on custom themes. Tests using shallow rendering APIs become more brittle with the amount of provider components they require.\\n\\n### Full DOM rendering\\n\\nFull DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or may require the full lifecycle in order to fully test the component (e.g., `componentDidMount` etc.).\\n\\nThe `createMount()` function is provided for this situation. Aside from wrapping the enzyme API, it provides a `cleanUp` function.\\n\\n### Shallow rendering\\n\\nShallow rendering is useful to constrain your testing to a component as a unit. This also ensures that your tests aren't indirectly asserting behavior of child components. Shallow rendering was created to test components in isolation. This means without leaking child implementation details such as the context.\\n\\nThe `createShallow()` function can be used for this situation. Aside from wrapping the enzyme API, it provides a `dive` and `untilSelector` option.\\n\\n### Render to string\\n\\nRendering to a string is useful to test the behavior of the components that are used on the server. You can take advantage of this to assert the generated HTML string.\\n\\nThe `createRender()` function is ideal for this. This is just an alias for the enzyme API, which is only exposed for consistency.\\n\\n## API\\n\\n### `createMount([options]) => mount`\\n\\nGenerate an enhanced mount function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/mount.html) for further details on the `mount` function.\\n\\n#### \\u5f15\\u6570\\n\\n1. `\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3` (*\\u30aa\\u30d7\\u30b8\\u30a7\\u30af\\u30c8* [\\u4efb\\u610f]) \\n  - `options.mount` (*Function* [optional]): The mount function to enhance, it uses **enzyme by default**.\\n  - The other keys are forwarded to the options argument of `enzyme.mount()`.\\n\\n#### \\u623b\\u308a\\u5024\\n\\n`mount` (*mount*): A mount function.\\n\\n#### \\u4f8b\\n\\n```jsx\\nimport { createMount } from '@material-ui/core/test-utils';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\ndescribe('<MyComponent />', () => {\\n  let mount;\\n\\n  function MySuccessButton({ children }) {\\n    return (\\n      <ThemeProvider theme={{ success: { main: '#fff' } }}>\\n        {children}\\n      </ThemeProvider>\\n    );\\n  }\\n\\n  before(() => {\\n    mount = createMount();\\n  });\\n\\n  after(() => {\\n    mount.cleanUp();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\\n  });\\n});\\n```\\n\\n### `createShallow([options]) => shallow`\\n\\nGenerate an enhanced shallow function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/shallow.html) for further details on the `shallow` function.\\n\\n#### \\u5f15\\u6570\\n\\n1. `\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3` (*\\u30aa\\u30d7\\u30b8\\u30a7\\u30af\\u30c8* [\\u4efb\\u610f]) \\n  - `options.shallow` (*Function* [optional]): The shallow function to enhance, it uses **enzyme by default**.\\n  - `options.untilSelector` (*String* [optional]): Recursively shallow renders the children until it can find the provided selector. It's useful to drill down higher-order components.\\n  - `options.dive` (*Boolean* [optional]): Shallow function renders the one non-DOM child of the current wrapper, and returns a wrapper around the result.\\n  - The other keys are forwarded to the options argument of `enzyme.shallow()`.\\n\\n#### \\u623b\\u308a\\u5024\\n\\n`shallow` (*shallow*): A shallow function.\\n\\n#### \\u4f8b\\n\\n```jsx\\nimport { createShallow } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let shallow;\\n\\n  before(() => {  // This is Mocha; in Jest, use beforeAll\\n    shallow = createShallow();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = shallow(<MyComponent />);\\n  });\\n});\\n```\\n\\n### `createRender([options]) => render`\\n\\nGenerate a render to string function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/render.html) for further details on the `render` function.\\n\\n#### \\u5f15\\u6570\\n\\n1. `\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3` (*\\u30aa\\u30d7\\u30b8\\u30a7\\u30af\\u30c8* [\\u4efb\\u610f]) \\n  - `options.render` (*Function* [optional]): The render function to enhance, it uses **enzyme by default**.\\n  - The other keys are forwarded to the options argument of `enzyme.render()`.\\n\\n#### \\u623b\\u308a\\u5024\\n\\n`render` (*Function*): A render to string function.\\n\\n#### \\u4f8b\\n\\n```jsx\\nimport { createRender } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let render;\\n\\n  before(() => {\\n    render = createRender();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = render(<MyComponent />);\\n  });\\n});\\n```\"},YdRb:function(e,n){e.exports=\"# Pruebas\\n\\n<p class=\\\"description\\\">Write tests to prevent regressions and write better code.</p>\\n\\nExamples in this guide use [global methods from Mocha](https://mochajs.org/api/global.html), not [Jest](https://jestjs.io/docs/en/api).\\n\\n## Internal\\n\\nMaterial-UI has **a wide range** of tests so we can iterate with confidence on the components, for instance, the visual regression tests provided by [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) have proven to be really helpful. To learn more about the internal tests, you can have a look at the [README](https://github.com/mui-org/material-ui/blob/master/test/README.md).\\n\\n## Userspace\\n\\nWhat about writing tests in userspace? The Material-UI styling infrastructure uses some helper functions built on top of [enzyme](https://github.com/airbnb/enzyme) to make the process easier, which we are exposing. You can take advantage of them if you so choose. We use almost exclusively full DOM rendering APIs. We encourage you to do the same especially if your components rely on custom themes. Tests using shallow rendering APIs become more brittle with the amount of provider components they require.\\n\\n### Full DOM rendering\\n\\nFull DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or may require the full lifecycle in order to fully test the component (e.g., `componentDidMount` etc.).\\n\\nThe `createMount()` function is provided for this situation. Aside from wrapping the enzyme API, it provides a `cleanUp` function.\\n\\n### Shallow rendering\\n\\nShallow rendering is useful to constrain your testing to a component as a unit. This also ensures that your tests aren't indirectly asserting behavior of child components. Shallow rendering was created to test components in isolation. This means without leaking child implementation details such as the context.\\n\\nThe `createShallow()` function can be used for this situation. Aside from wrapping the enzyme API, it provides a `dive` and `untilSelector` option.\\n\\n### Render to string\\n\\nRendering to a string is useful to test the behavior of the components that are used on the server. You can take advantage of this to assert the generated HTML string.\\n\\nThe `createRender()` function is ideal for this. This is just an alias for the enzyme API, which is only exposed for consistency.\\n\\n## API\\n\\n### `createMount([options]) => mount`\\n\\nGenerate an enhanced mount function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/mount.html) for further details on the `mount` function.\\n\\n#### Argumentos\\n\\n1. `options` (*Object* [optional]) \\n  - `options.mount` (*Function* [optional]): The mount function to enhance, it uses **enzyme by default**.\\n  - The other keys are forwarded to the options argument of `enzyme.mount()`.\\n\\n#### Devuelve\\n\\n`mount` (*mount*): A mount function.\\n\\n#### Ejemplos\\n\\n```jsx\\nimport { createMount } from '@material-ui/core/test-utils';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\ndescribe('<MyComponent />', () => {\\n  let mount;\\n\\n  function MySuccessButton({ children }) {\\n    return (\\n      <ThemeProvider theme={{ success: { main: '#fff' } }}>\\n        {children}\\n      </ThemeProvider>\\n    );\\n  }\\n\\n  before(() => {\\n    mount = createMount();\\n  });\\n\\n  after(() => {\\n    mount.cleanUp();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\\n  });\\n});\\n```\\n\\n### `createShallow([options]) => shallow`\\n\\nGenerate an enhanced shallow function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/shallow.html) for further details on the `shallow` function.\\n\\n#### Argumentos\\n\\n1. `options` (*Object* [optional]) \\n  - `options.shallow` (*Function* [optional]): The shallow function to enhance, it uses **enzyme by default**.\\n  - `options.untilSelector` (*String* [optional]): Recursively shallow renders the children until it can find the provided selector. It's useful to drill down higher-order components.\\n  - `options.dive` (*Boolean* [optional]): Shallow function renders the one non-DOM child of the current wrapper, and returns a wrapper around the result.\\n  - The other keys are forwarded to the options argument of `enzyme.shallow()`.\\n\\n#### Devuelve\\n\\n`shallow` (*shallow*): A shallow function.\\n\\n#### Ejemplos\\n\\n```jsx\\nimport { createShallow } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let shallow;\\n\\n  before(() => {  // This is Mocha; in Jest, use beforeAll\\n    shallow = createShallow();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = shallow(<MyComponent />);\\n  });\\n});\\n```\\n\\n### `createRender([options]) => render`\\n\\nGenerate a render to string function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/render.html) for further details on the `render` function.\\n\\n#### Argumentos\\n\\n1. `options` (*Object* [optional]) \\n  - `options.render` (*Function* [optional]): The render function to enhance, it uses **enzyme by default**.\\n  - The other keys are forwarded to the options argument of `enzyme.render()`.\\n\\n#### Devuelve\\n\\n`render` (*Function*): A render to string function.\\n\\n#### Ejemplos\\n\\n```jsx\\nimport { createRender } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let render;\\n\\n  before(() => {\\n    render = createRender();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = render(<MyComponent />);\\n  });\\n});\\n```\"},YhnN:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return d}));var o=t(\"mXGw\"),r=t.n(o),s=t(\"e+1t\"),i=t(\"kVtE\"),a=r.a.createElement,l=t(\"k81A\"),c=t(\"wejF\");function d(e){var n=e.demos,t=e.docs;return a(s.a,{demos:n,docs:t,requireDemo:l})}d.getInitialProps=function(){var e=Object(i.a)({pageFilename:\"guides/testing\",requireRaw:c});return{demos:e.demos,docs:e.docs}}},Zuzt:function(e,n){e.exports=\"# \\u6d4b\\u8bd5\\n\\n<p class=\\\"description\\\">\\u7f16\\u5199\\u6d4b\\u8bd5\\u80fd\\u591f\\u9884\\u9632\\u56de\\u5f52\\u95ee\\u9898\\uff0c\\u5e76\\u80fd\\u591f\\u5e26\\u6765\\u66f4\\u597d\\u7684\\u4ee3\\u7801\\u3002</p>\\n\\n\\u672c\\u6307\\u5357\\u4f7f\\u7528[\\u6765\\u81ea Mocha \\u7684\\u5168\\u5c40\\u65b9\\u6cd5](https://mochajs.org/api/global.html)\\uff0c\\u800c\\u4e0d\\u662f\\u4f7f\\u7528 [Jest](https://jestjs.io/docs/en/api)\\u3002\\n\\n## \\u5185\\u90e8\\n\\nMaterial-UI \\u7684 \\u6d4b\\u8bd5\\u8303\\u56f4 **\\u5f88\\u5e7f**\\uff0c\\u56e0\\u6b64\\u6211\\u4eec\\u6709\\u4fe1\\u5fc3 \\u5bf9\\u7ec4\\u4ef6\\u8fdb\\u884c\\u8fed\\u4ee3\\uff0c\\u4f8b\\u5982\\uff0c[Argos-CI](https://www.argos-ci.com/mui-org/material-ui) \\u63d0\\u4f9b\\u7684\\u53ef\\u89c6\\u5316\\u56de\\u5f52\\u6d4b\\u8bd5\\u5df2\\u88ab\\u8bc1\\u660e\\u975e\\u5e38\\u6709\\u7528\\u3002 \\u82e5\\u60a8\\u60f3\\u8981\\u8fdb\\u4e00\\u6b65\\u4e86\\u89e3\\u5185\\u90e8\\u6d4b\\u8bd5\\uff0c\\u60a8\\u53ef\\u4ee5\\u67e5\\u770b [README](https://github.com/mui-org/material-ui/blob/master/test/README.md)\\u3002\\n\\n## \\u7528\\u6237\\u7a7a\\u95f4\\n\\n\\u5728\\u7528\\u6237\\u7a7a\\u95f4\\u7f16\\u5199\\u6d4b\\u8bd5\\u4f1a\\u5982\\u4f55\\u5462\\uff1f Material-UI\\u6837\\u5f0f\\u57fa\\u7840\\u67b6\\u6784\\u4f7f\\u7528\\u6784\\u5efa\\u5728 [enzyme](https://github.com/airbnb/enzyme) \\u4e4b\\u4e0a\\u7684\\u4e00\\u4e9b\\u8f85\\u52a9\\u51fd\\u6570\\u6765\\u4f7f\\u8fc7\\u7a0b\\u66f4\\u5bb9\\u6613\\uff0c\\u6211\\u4eec\\u6b63\\u5728\\u66b4\\u9732\\u3002 \\u82e5\\u4f60\\u613f\\u610f\\uff0c\\u4f60\\u53ef\\u4ee5\\u5bf9\\u5b83\\u4eec\\u52a0\\u4e4b\\u5229\\u7528\\u3002 \\u6211\\u4eec\\u51e0\\u4e4e\\u53ea\\u4f7f\\u7528\\u5b8c\\u6574\\u7684 DOM \\u6e32\\u67d3 API\\u3002 \\u5c24\\u5176\\u82e5\\u60a8\\u7684\\u7ec4\\u4ef6\\u4f9d\\u8d56\\u4e8e\\u81ea\\u5b9a\\u4e49\\u4e3b\\u9898\\uff0c\\u6211\\u4eec\\u5efa\\u8bae\\u60a8\\u6267\\u884c\\u76f8\\u540c\\u7684\\u64cd\\u4f5c\\u3002 \\u90a3\\u4e9b\\u4f7f\\u7528\\u6d45\\u5c42\\u6e32\\u67d3 API \\u7684\\u6d4b\\u8bd5\\u4f1a\\u53d8\\u5f97\\u66f4\\u8106\\u5f31\\uff0c\\u56e0\\u4e3a\\u4ed6\\u4eec\\u9700\\u8981\\u4e00\\u5b9a\\u91cf\\u7684 provider \\u7ec4\\u4ef6\\u3002\\n\\n### \\u5b8c\\u6574\\u7684 DOM \\u6e32\\u67d3\\n\\n\\u5f53\\u4f60\\u6709\\u7ec4\\u4ef6\\u53ef\\u80fd\\u4f1a\\u4e0e DOM API \\u4ea7\\u751f\\u4ea4\\u4e92\\uff0c\\u6216\\u8005\\u5f53\\u4e3a\\u4e86\\u5b8c\\u6574\\u6d4b\\u8bd5\\u7ec4\\u4ef6\\u800c\\u8981\\u6c42\\u5b8c\\u6574\\u7684\\u751f\\u547d\\u5468\\u671f\\u65f6\\uff0c\\u7528\\u4f8b\\u4f1a\\u66f4\\u8d8b\\u5411\\u4f7f\\u7528\\u5b8c\\u6574\\u7684 DOM \\u6e32\\u67d3\\uff08\\u4f8b\\u5982\\uff0c`componentDidMount` \\u7b49\\u7b49\\u3002\\uff09\\u3002\\n\\n\\u4e3a\\u8fd9\\u79cd\\u60c5\\u51b5\\u63d0\\u4f9b\\u4e86 `createMount()` \\u51fd\\u6570\\u3002 \\u9664\\u4e86\\u5c01\\u88c5 enzyme \\u7684 API\\uff0c\\u5b83\\u8fd8\\u63d0\\u4f9b\\u4e86\\u4e00\\u4e2a `cleanUp` \\u51fd\\u6570\\u3002\\n\\n### Shallow rendering\\uff08\\u6d45\\u5c42\\u6e32\\u67d3\\uff09\\n\\n\\u5f53\\u628a\\u6d4b\\u8bd5\\u7684\\u7ec4\\u4ef6\\u5f53\\u505a\\u4e00\\u4e2a\\u5c0f\\u7684\\u5355\\u5143\\u65f6\\uff0c\\u6d45\\u5c42\\u6e32\\u67d3\\u8d77\\u5230\\u4e86\\u5f88\\u597d\\u7684\\u7ea6\\u675f\\u4f5c\\u7528\\u3002 \\u8fd9\\u6837\\u4e5f\\u786e\\u4fdd\\u4e86\\u4f60\\u7684\\u6d4b\\u8bd5\\u4e0d\\u4f1a\\u95f4\\u63a5\\u5730\\u65ad\\u8a00\\u5b50\\u7ec4\\u4ef6\\u7684\\u884c\\u4e3a\\u3002 \\u6d45\\u5c42\\u6e32\\u67d3\\u7684\\u76ee\\u7684\\u662f\\u5355\\u72ec\\u6d4b\\u8bd5\\u7ec4\\u4ef6\\u3002 \\u4e5f\\u5c31\\u662f\\u8bf4\\u5b50\\u5143\\u7d20\\u7684\\u5177\\u4f53\\u5b9e\\u73b0\\uff0c\\u5982\\u4e0a\\u4e0b\\u6587\\u4fe1\\u606f\\uff0c\\u4e0d\\u4f1a\\u88ab\\u6cc4\\u6f0f\\u3002\\n\\n`createShallow()` \\u51fd\\u6570\\u53ef\\u7528\\u4e8e\\u6b64\\u60c5\\u51b5\\u3002 \\u9664\\u4e86\\u5305\\u88c5\\u9176API\\uff0c\\u5b83\\u63d0\\u4f9b `dive`untilSelector`\\u76f4\\u5230\\u9009\\u62e9` \\u9009\\u9879\\u3002\\n\\n### \\u6e32\\u67d3\\u4e3a\\u5b57\\u7b26\\u4e32\\n\\n\\u5f53\\u5728\\u6d4b\\u8bd5\\u670d\\u52a1\\u5668\\u7ec4\\u4ef6\\u884c\\u4e3a\\u65f6\\uff0c\\u6e32\\u67d3\\u4e3a\\u5b57\\u7b26\\u4e32\\u4f1a\\u6709\\u5e2e\\u52a9\\u3002 \\u4f60\\u53ef\\u4ee5\\u4f9d\\u6b64\\u6765\\u65ad\\u8a00\\u6240\\u751f\\u6210\\u7684 HTML \\u5b57\\u7b26\\u4e32\\u3002\\n\\n`createRender()` \\u51fd\\u6570\\u975e\\u5e38\\u9002\\u5408\\u8fd9\\u79cd\\u60c5\\u51b5\\u3002 \\u8fd9\\u53ea\\u662fenzyme API\\u7684\\u522b\\u540d\\uff0c\\u53ea\\u662f\\u4e3a\\u4e86\\u4fdd\\u6301\\u4e00\\u81f4\\u6027\\u800c\\u66b4\\u9732\\u3002\\n\\n## API\\n\\n### `createMount([options]) => mount`\\n\\n\\u5728\\u7279\\u5b9a\\u7684\\u60c5\\u51b5\\u4e0b\\uff0c\\u60a8\\u80fd\\u591f\\u751f\\u6210\\u4e00\\u4e2a\\u52a0\\u5f3a\\u7248\\u7684 mount \\u51fd\\u6570\\u3002 \\u6709\\u5173 `mount` \\u529f\\u80fd\\u7684\\u66f4\\u591a\\u8be6\\u7ec6\\u4fe1\\u606f\\uff0c\\u8bf7\\u53c2\\u9605 [enzyme API\\u6587\\u6863](https://airbnb.io/enzyme/docs/api/mount.html)\\u3002\\n\\n#### \\u53c2\\u6570\\n\\n1. `options` (*Object* [optional]) \\n  - `options.mount` (*Function* [optional])\\uff1a\\u7528 mount \\u51fd\\u6570\\u6765\\u589e\\u5f3a\\uff0c\\u5b83**\\u9ed8\\u8ba4\\u4f7f\\u7528 enzyme **\\u3002\\n  - \\u5176\\u4ed6\\u7684\\u952e\\u5219\\u88ab\\u8f6c\\u53d1\\u5230 `enzyme.mount()` \\u7684 options \\u53c2\\u6570\\u5f53\\u4e2d\\u3002\\n\\n#### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`mount` (*mount*)\\uff1a\\u5b89\\u88c5\\u529f\\u80fd\\u3002\\n\\n#### \\u793a\\u4f8b\\n\\n```jsx\\nimport { createMount } from '@material-ui/core/test-utils';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\ndescribe('<MyComponent />', () => {\\n  let mount;\\n\\n  function MySuccessButton({ children }) {\\n    return (\\n      <ThemeProvider theme={{ success: { main: '#fff' } }}>\\n        {children}\\n      </ThemeProvider>\\n    );\\n  }\\n\\n  before(() => {\\n    mount = createMount();\\n  });\\n\\n  after(() => {\\n    mount.cleanUp();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\\n  });\\n});\\n```\\n\\n### `createShallow([options]) => shallow`\\n\\n\\u5728\\u7279\\u5b9a\\u7684\\u60c5\\u51b5\\u4e0b\\uff0c\\u60a8\\u80fd\\u591f\\u751f\\u6210\\u4e00\\u4e2a\\u52a0\\u5f3a\\u7248\\u7684\\u6d45\\u5c42\\u51fd\\u6570\\u3002 \\u6709\\u5173 `shallow`\\u51fd\\u6570\\u7684\\u66f4\\u591a\\u8be6\\u7ec6\\u4fe1\\u606f, \\u8bf7\\u53c2\\u8003[enzyme API \\u6587\\u6863 ](https://airbnb.io/enzyme/docs/api/shallow.html),\\n\\n#### \\u53c2\\u6570\\n\\n1. `options` (*Object* [optional]) \\n  - `options.shallow`(*Function* [optional])\\uff1a\\u7528\\u6d45\\u5c42\\u51fd\\u6570\\u6765\\u589e\\u5f3a\\uff0c\\u5b83**\\u9ed8\\u8ba4\\u4f7f\\u7528 enzyme **\\u3002\\n  - `options.untilSelector`(*String* [optional])\\uff1a\\u9012\\u5f52\\u5730\\u6d45\\u5c42\\u6e32\\u67d3\\u5b50\\u9879\\uff0c\\u76f4\\u5230\\u627e\\u5230\\u63d0\\u4f9b\\u7684\\u9009\\u62e9\\u5668\\u3002 \\u8fdb\\u4e00\\u6b65\\u63a2\\u7d22 higher-order components\\uff08\\u9ad8\\u9636\\u7ec4\\u4ef6\\uff09\\u662f\\u5f88\\u6709\\u5e2e\\u52a9\\u7684\\u3002\\n  - `options.dive` (*Boolean* [optional])\\uff1a\\u6d45\\u5c42\\u51fd\\u6570\\u80fd\\u591f\\u6e32\\u67d3\\u5f53\\u524d\\u5305\\u88c5\\u5668\\u7684\\u4e00\\u4e2a\\u975e DOM \\u7684\\u5b50\\u8282\\u70b9\\uff0c\\u5e76\\u8fd4\\u56de\\u4e00\\u4e2a\\u542b\\u6709\\u7ed3\\u679c\\u7684\\u5305\\u88c5\\u5668\\u3002\\n  - \\u5176\\u4ed6\\u7684\\u952e\\u5219\\u88ab\\u8f6c\\u53d1\\u5230 `enzyme.shallow()` \\u7684 options \\u53c2\\u6570\\u5f53\\u4e2d\\u3002\\n\\n#### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`shallow` \\uff08*shallow*\\uff09\\uff1a\\u6d45\\u51fd\\u6570\\u3002\\n\\n#### \\u793a\\u4f8b\\n\\n```jsx\\nmport { createShallow } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let shallow;\\n\\n  before(() => {  // \\u8fd9\\u4e2a\\u662f Mocha\\uff1b\\u800c\\u5728 Jest \\u4e2d, \\u8bf7\\u4f7f\\u7528 beforeAll\\n    shallow = createShallow();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = shallow(<MyComponent />);\\n  });\\n});\\n```\\n\\n### `createRender([options]) => render`\\n\\n\\u5728\\u7279\\u5b9a\\u7684\\u60c5\\u51b5\\u4e0b\\uff0c\\u60a8\\u80fd\\u591f\\u751f\\u6210\\u4e00\\u4e2a\\u52a0\\u5f3a\\u7248\\u7684\\u5b57\\u7b26\\u4e32\\u51fd\\u6570\\u3002 \\u6709\\u5173 `render` \\u529f\\u80fd\\u7684\\u66f4\\u591a\\u8be6\\u7ec6\\u4fe1\\u606f\\uff0c\\u8bf7\\u53c2\\u9605 [enzyme API\\u6587\\u6863](https://airbnb.io/enzyme/docs/api/render.html)\\u3002\\n\\n#### \\u53c2\\u6570\\n\\n1. `options` (*Object* [optional]) \\n  - `options.render` (*Function* [optional])\\uff1a\\u7528\\u6e32\\u67d3\\u51fd\\u6570\\u6765\\u589e\\u5f3a\\uff0c\\u5b83**\\u9ed8\\u8ba4\\u4f7f\\u7528 enzyme **\\u3002\\n  - \\u5176\\u4ed6\\u7684\\u952e\\u5219\\u88ab\\u8f6c\\u53d1\\u5230 `enzyme.render()` \\u7684 options \\u53c2\\u6570\\u5f53\\u4e2d\\u3002\\n\\n#### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`render` (*Function*)\\uff1a\\u6e32\\u67d3\\u5230\\u5b57\\u7b26\\u4e32\\u51fd\\u6570\\u3002\\n\\n#### \\u793a\\u4f8b\\n\\n```jsx\\nimport { createRender } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let render;\\n\\n  before(() => {\\n    render = createRender();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = render(<MyComponent />);\\n  });\\n});\\n```\"},cgGG:function(e,n){e.exports=\"# crwdns96592:0crwdne96592:0\\n\\n<p class=\\\"description\\\">crwdns96594:0crwdne96594:0</p>\\n\\ncrwdns96596:0crwdne96596:0\\n\\n## crwdns96598:0crwdne96598:0\\n\\ncrwdns107771:0crwdne107771:0 crwdns101346:0crwdne101346:0\\n\\n## crwdns96614:0crwdne96614:0\\n\\ncrwdns101348:0crwdne101348:0 crwdns101350:0crwdne101350:0 crwdns101352:0crwdne101352:0 crwdns101354:0crwdne101354:0 crwdns101356:0crwdne101356:0 crwdns101358:0crwdne101358:0\\n\\n### crwdns96628:0crwdne96628:0\\n\\ncrwdns101360:0crwdne101360:0\\n\\ncrwdns101362:0crwdne101362:0 crwdns101364:0crwdne101364:0\\n\\n### crwdns96636:0crwdne96636:0\\n\\ncrwdns101366:0crwdne101366:0 crwdns101368:0crwdne101368:0 crwdns101370:0crwdne101370:0 crwdns101372:0crwdne101372:0\\n\\ncrwdns101374:0crwdne101374:0 crwdns101376:0crwdne101376:0\\n\\n### crwdns96650:0crwdne96650:0\\n\\ncrwdns101378:0crwdne101378:0 crwdns101380:0crwdne101380:0\\n\\ncrwdns101382:0crwdne101382:0 crwdns101384:0crwdne101384:0\\n\\n## crwdns96660:0crwdne96660:0\\n\\n### `crwdns96662:0[options]crwdne96662:0`\\n\\ncrwdns101386:0crwdne101386:0 crwdns101388:0crwdne101388:0\\n\\n#### crwdns96668:0crwdne96668:0\\n\\n1. crwdns96670:0[optional]crwdne96670:0 \\n  - crwdns96672:0[optional]crwdne96672:0\\n  - crwdns96674:0crwdne96674:0\\n\\n#### crwdns96676:0crwdne96676:0\\n\\ncrwdns101390:0crwdne101390:0\\n\\n#### crwdns96680:0crwdne96680:0\\n\\n```jsx\\ncrwdns103446:0{ createMount }crwdnd103446:0{ ThemeProvider }crwdnd103446:0{ children }crwdnd103446:0{ main: '#fff' }crwdnd103446:0{children}crwdne103446:0\\n```\\n\\n### `crwdns96684:0[options]crwdne96684:0`\\n\\ncrwdns101392:0crwdne101392:0 crwdns101394:0crwdne101394:0\\n\\n#### crwdns96690:0crwdne96690:0\\n\\n1. crwdns96692:0[optional]crwdne96692:0 \\n  - crwdns96694:0[optional]crwdne96694:0\\n  - crwdns96696:0[optional]crwdne96696:0 crwdns96698:0crwdne96698:0\\n  - crwdns96700:0[optional]crwdne96700:0\\n  - crwdns96702:0crwdne96702:0\\n\\n#### crwdns96704:0crwdne96704:0\\n\\ncrwdns101396:0crwdne101396:0\\n\\n#### crwdns96708:0crwdne96708:0\\n\\n```jsx\\ncrwdns96710:0{ createShallow }crwdne96710:0\\n```\\n\\n### `crwdns96712:0[options]crwdne96712:0`\\n\\ncrwdns101398:0crwdne101398:0 crwdns101400:0crwdne101400:0\\n\\n#### crwdns96718:0crwdne96718:0\\n\\n1. crwdns96720:0[optional]crwdne96720:0 \\n  - crwdns96722:0[optional]crwdne96722:0\\n  - crwdns96724:0crwdne96724:0\\n\\n#### crwdns96726:0crwdne96726:0\\n\\ncrwdns101402:0crwdne101402:0\\n\\n#### crwdns96730:0crwdne96730:0\\n\\n```jsx\\ncrwdns96732:0{ createRender }crwdne96732:0\\n```\"},k81A:function(e,n){function t(e){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id=\"k81A\"},sPon:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/guides/testing\",function(){return t(\"YhnN\")}])},uBtk:function(e,n){e.exports=\"# Testando\\n\\n<p class=\\\"description\\\">Escreva testes para evitar regress\\xf5es e ter uma boa qualidade de c\\xf3digo.</p>\\n\\nExemplos neste guia usam [m\\xe9todos globais do Mocha](https://mochajs.org/api/global.html), ao inv\\xe9s do [Jest](https://jestjs.io/docs/en/api).\\n\\n## Interno\\n\\nMaterial-UI tem **uma vasta gama** de testes para que possamos liberar os componentes com confian\\xe7a, por exemplo, os testes de regress\\xe3o visual s\\xe3o feitos atrav\\xe9s da [Argos-CI](https://www.argos-ci.com/mui-org/material-ui), provaram ser realmente \\xfateis. Para saber mais sobre os testes internos, voc\\xea pode dar uma olhada no [LEIA-ME](https://github.com/mui-org/material-ui/blob/master/test/README.md).\\n\\n## Espa\\xe7o do usu\\xe1rio\\n\\nQue tal escrever testes no espa\\xe7o do usu\\xe1rio? A infraestrutura de estilos do Material-UI usa algumas fun\\xe7\\xf5es auxiliares constru\\xeddas sobre o [enzyme](https://github.com/airbnb/enzyme) para facilitar o processo, ao qual estamos expondo. Voc\\xea pode aproveit\\xe1-los, se assim preferir. Usamos APIs de processamento de DOM quase que totalmente completas. N\\xf3s encorajamos voc\\xea a fazer o mesmo, especialmente, se seus componentes dependem de temas personalizados. Testes usando APIs de renderiza\\xe7\\xe3o rasas tornam-se mais fr\\xe1geis com a quantidade de componentes que necessitam.\\n\\n### Renderiza\\xe7\\xe3o completa do DOM (Full)\\n\\nA renderiza\\xe7\\xe3o total do DOM \\xe9 ideal para casos em que voc\\xea tem componentes que podem interagir com as APIs do DOM, ou podem exigir o ciclo de vida completo para testar completamente o componente (por exemplo, `componentDidMount` etc).\\n\\nA fun\\xe7\\xe3o `createMount ()` \\xe9 fornecida para esta situa\\xe7\\xe3o. Al\\xe9m de envolver enzyme API, ela fornece uma fun\\xe7\\xe3o chamada `cleanUp`.\\n\\n### Renderiza\\xe7\\xe3o Rasa (Shallow)\\n\\nA renderiza\\xe7\\xe3o rasa \\xe9 \\xfatil para restringir seu teste a um componente como uma unidade. Isso tamb\\xe9m garante que seus testes n\\xe3o est\\xe3o adquirindo indiretamente o comportamento de componentes filhos. A renderiza\\xe7\\xe3o rasa foi criada para testar componentes isoladamente. Isso significa sem vazar detalhes de implementa\\xe7\\xe3o de filhos, como o contexto.\\n\\nA fun\\xe7\\xe3o `createShallow()` pode ser utilizada para esta situa\\xe7\\xe3o. Al\\xe9m de encapsular a API do enzyme, ela fornece uma op\\xe7\\xe3o `dive` e `untilSelector`.\\n\\n### Renderizar para string\\n\\nRenderizar em uma string \\xe9 \\xfatil para testar o comportamento dos componentes usados no servidor. Voc\\xea pode aproveitar isso para confirmar a sequ\\xeancia HTML gerada.\\n\\nA fun\\xe7\\xe3o `createRender()` \\xe9 ideal para isso. Isso \\xe9 apenas um alias para enzyme API, que \\xe9 apenas exposta para consist\\xeancia.\\n\\n## API\\n\\n### `createMount([options]) => mount`\\n\\nGere uma fun\\xe7\\xe3o de montagem aprimorada com o contexto necess\\xe1rio. Por favor, consulte [a documenta\\xe7\\xe3o da API enzyme ](https://airbnb.io/enzyme/docs/api/mount.html) para mais detalhes sobre a fun\\xe7\\xe3o `mount`.\\n\\n#### Argumentos\\n\\n1. `options` (*Object* [opcional]) \\n  - `options.mount` (*Function* [opcional]): A fun\\xe7\\xe3o de montagem para melhorar, usa **enzyme por padr\\xe3o**.\\n  - As outras chaves s\\xe3o encaminhadas para o argumento de op\\xe7\\xf5es de `enzyme.mount()`.\\n\\n#### Retornos\\n\\n`mount` (*mount*): A fun\\xe7\\xe3o mount.\\n\\n#### Exemplos\\n\\n```jsx\\nimport { createMount } from '@material-ui/core/test-utils';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\ndescribe('<MyComponent />', () => {\\n  let mount;\\n\\n  function MySuccessButton({ children }) {\\n    return (\\n      <ThemeProvider theme={{ success: { main: '#fff' } }}>\\n        {children}\\n      </ThemeProvider>\\n    );\\n  }\\n\\n  before(() => {\\n    mount = createMount();\\n  });\\n\\n  after(() => {\\n    mount.cleanUp();\\n  });\\n\\n  it('should work', () => {\\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\\n  });\\n});\\n```\\n\\n### `createShallow([options]) => shallow`\\n\\nGere uma fun\\xe7\\xe3o superficial aprimorada com o contexto necess\\xe1rio. Por favor, consulte [a documenta\\xe7\\xe3o da API enzyme ](https://airbnb.io/enzyme/docs/api/shallow.html) para mais detalhes sobre a fun\\xe7\\xe3o `shallow`.\\n\\n#### Argumentos\\n\\n1. `options` (*Object* [opcional]) \\n  - `options.shallow` (*Function* [opcional]): A fun\\xe7\\xe3o superficial para melhorar, usa **enzyme por padr\\xe3o**.\\n  - `options.untilSelector` (*String* [opcional]): Recursivamente, renderiza superficialmente o componente children at\\xe9 encontrar o seletor fornecido. \\xc9 \\xfatil para detalhar os componentes de ordem mais alta.\\n  - `options.dive` (*Boolean* [opcional]): A fun\\xe7\\xe3o superficial renderiza o filho n\\xe3o-DOM do wrapper atual e retorna um wrapper em torno do resultado.\\n  - As outras chaves s\\xe3o encaminhadas para o argumento de op\\xe7\\xf5es de `enzyme.shallow()`.\\n\\n#### Retornos\\n\\n`shallow` (*shallow*): A fun\\xe7\\xe3o shallow.\\n\\n#### Exemplos\\n\\n```jsx\\nimport { createShallow } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let shallow;\\n\\n  before(() => {  // Isto \\xe9 Mocha; em Jest, use beforeAll\\n    shallow = createShallow();\\n  });\\n\\n  it('deve funcionar', () => {\\n    const wrapper = shallow(<MyComponent />);\\n  });\\n});\\n```\\n\\n### `createRender([options]) => render`\\n\\nGere uma fun\\xe7\\xe3o de render para string com o contexto necess\\xe1rio. Por favor, consulte [a documenta\\xe7\\xe3o da API enzyme ](https://airbnb.io/enzyme/docs/api/render.html) para mais detalhes sobre a fun\\xe7\\xe3o `render`.\\n\\n#### Argumentos\\n\\n1. `options` (*Object* [opcional]) \\n  - `options.render` (*Function* [opcional]): A fun\\xe7\\xe3o de renderiza\\xe7\\xe3o para melhorar, usa **enzyme por padr\\xe3o**.\\n  - As outras chaves s\\xe3o encaminhadas para o argumento de op\\xe7\\xf5es de `enzyme.render()`.\\n\\n#### Retornos\\n\\n`render` (*Function*): Uma fun\\xe7\\xe3o render para string.\\n\\n#### Exemplos\\n\\n```jsx\\nimport { createRender } from '@material-ui/core/test-utils';\\n\\ndescribe('<MyComponent />', () => {\\n  let render;\\n\\n  before(() => {\\n    render = createRender();\\n  });\\n\\n  it('deve funionar', () => {\\n    const wrapper = render(<MyComponent />);\\n  });\\n});\\n```\"},wejF:function(e,n,t){var o={\"./testing-aa.md\":\"cgGG\",\"./testing-de.md\":\"QfAY\",\"./testing-es.md\":\"YdRb\",\"./testing-fr.md\":\"LEMW\",\"./testing-ja.md\":\"RrWY\",\"./testing-pt.md\":\"uBtk\",\"./testing-ru.md\":\"OgoS\",\"./testing-zh.md\":\"Zuzt\",\"./testing.md\":\"8ERC\"};function r(e){var n=s(e);return t(n)}function s(e){if(!t.o(o,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return o[e]}r.keys=function(){return Object.keys(o)},r.resolve=s,e.exports=r,r.id=\"wejF\"}},[[\"sPon\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}