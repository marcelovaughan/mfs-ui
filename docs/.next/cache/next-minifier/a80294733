{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{\"78Tm\":function(e,n,a){var s={\"./avatar.md\":\"cVUq\"};function t(e){var n=o(e);return a(n)}function o(e){if(!a.o(s,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return s[e]}t.keys=function(){return Object.keys(s)},t.resolve=o,e.exports=t,t.id=\"78Tm\"},E3jC:function(e,n,a){\"use strict\";a.r(n),a.d(n,\"default\",(function(){return l}));var s=a(\"mXGw\"),t=a.n(s),o=a(\"e+1t\"),r=a(\"kVtE\"),p=t.a.createElement,i=a(\"78Tm\");function l(e){var n=e.docs;return p(o.a,{docs:n})}l.getInitialProps=function(){var e=Object(r.a)({pageFilename:\"api/avatar\",requireRaw:i});return{demos:e.demos,docs:e.docs}}},cVUq:function(e,n){e.exports='---\\nfilename: /packages/material-ui/src/Avatar/Avatar.js\\n---\\n\\n\\x3c!--- This documentation is automatically generated, do not try to edit it. --\\x3e\\n\\n# Avatar API\\n\\n<p class=\"description\">The API documentation of the Avatar React component. Learn more about the props and the CSS customization points.</p>\\n\\n## Import\\n\\n```js\\nimport Avatar from \\'@material-ui/core/Avatar\\';\\n// or\\nimport { Avatar } from \\'@material-ui/core\\';\\n```\\n\\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\\n\\n\\n\\n## Component name\\n\\nThe `MuiAvatar` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\\n\\n## Props\\n\\n| Name | Type | Default | Description |\\n|:-----|:-----|:--------|:------------|\\n| <span class=\"prop-name\">alt</span> | <span class=\"prop-type\">string</span> |  | Used in combination with `src` or `srcSet` to provide an alt attribute for the rendered `img` element. |\\n| <span class=\"prop-name\">children</span> | <span class=\"prop-type\">node</span> |  | Used to render icon or text elements inside the Avatar if `src` is not set. This can be an element, or just a string. |\\n| <span class=\"prop-name\">classes</span> | <span class=\"prop-type\">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\\n| <span class=\"prop-name\">component</span> | <span class=\"prop-type\">elementType</span> | <span class=\"prop-default\">\\'div\\'</span> | The component used for the root node. Either a string to use a HTML element or a component. |\\n| <span class=\"prop-name\">imgProps</span> | <span class=\"prop-type\">object</span> |  | Attributes applied to the `img` element if the component is used to display an image. It can be used to listen for the loading error event. |\\n| <span class=\"prop-name\">sizes</span> | <span class=\"prop-type\">string</span> |  | The `sizes` attribute for the `img` element. |\\n| <span class=\"prop-name\">src</span> | <span class=\"prop-type\">string</span> |  | The `src` attribute for the `img` element. |\\n| <span class=\"prop-name\">srcSet</span> | <span class=\"prop-type\">string</span> |  | The `srcSet` attribute for the `img` element. Use this attribute for responsive image display. |\\n| <span class=\"prop-name\">variant</span> | <span class=\"prop-type\">\\'circle\\'<br>&#124;&nbsp;\\'rounded\\'<br>&#124;&nbsp;\\'square\\'</span> | <span class=\"prop-default\">\\'circle\\'</span> | The shape of the avatar. |\\n\\nThe `ref` is forwarded to the root element.\\n\\nAny other props supplied will be provided to the root element (native element).\\n\\n## CSS\\n\\n| Rule name | Global class | Description |\\n|:-----|:-------------|:------------|\\n| <span class=\"prop-name\">root</span> | <span class=\"prop-name\">.MuiAvatar-root</span> | Styles applied to the root element.\\n| <span class=\"prop-name\">colorDefault</span> | <span class=\"prop-name\">.MuiAvatar-colorDefault</span> | Styles applied to the root element if not `src` or `srcSet`.\\n| <span class=\"prop-name\">circle</span> | <span class=\"prop-name\">.MuiAvatar-circle</span> | Styles applied to the root element if `variant=\"circle\"`.\\n| <span class=\"prop-name\">rounded</span> | <span class=\"prop-name\">.MuiAvatar-rounded</span> | Styles applied to the root element if `variant=\"rounded\"`.\\n| <span class=\"prop-name\">square</span> | <span class=\"prop-name\">.MuiAvatar-square</span> | Styles applied to the root element if `variant=\"square\"`.\\n| <span class=\"prop-name\">img</span> | <span class=\"prop-name\">.MuiAvatar-img</span> | Styles applied to the img element if either `src` or `srcSet` is defined.\\n| <span class=\"prop-name\">fallback</span> | <span class=\"prop-name\">.MuiAvatar-fallback</span> | Styles applied to the fallback icon\\n\\nYou can override the style of the component thanks to one of these customization points:\\n\\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\\n- With a theme and an [`overrides` property](/customization/globals/#css).\\n\\nIf that\\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Avatar/Avatar.js) for more detail.\\n\\n## Demos\\n\\n- [Avatars](/components/avatars/)\\n\\n'},jOiJ:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/api-docs/avatar\",function(){return a(\"E3jC\")}])}},[[\"jOiJ\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}