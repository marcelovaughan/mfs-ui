{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{DtIx:function(n,a,e){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/api-docs/pagination\",function(){return e(\"RHD7\")}])},RHD7:function(n,a,e){\"use strict\";e.r(a),e.d(a,\"default\",(function(){return l}));var s=e(\"mXGw\"),p=e.n(s),t=e(\"e+1t\"),o=e(\"kVtE\"),r=p.a.createElement,i=e(\"eiq5\");function l(n){var a=n.docs;return r(t.a,{docs:a})}l.getInitialProps=function(){var n=Object(o.a)({pageFilename:\"api/pagination\",requireRaw:i});return{demos:n.demos,docs:n.docs}}},eiq5:function(n,a,e){var s={\"./pagination.md\":\"lQSx\"};function p(n){var a=t(n);return e(a)}function t(n){if(!e.o(s,n)){var a=new Error(\"Cannot find module '\"+n+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}return s[n]}p.keys=function(){return Object.keys(s)},p.resolve=t,n.exports=p,p.id=\"eiq5\"},lQSx:function(n,a){n.exports='---\\nfilename: /packages/material-ui-lab/src/Pagination/Pagination.js\\n---\\n\\n\\x3c!--- This documentation is automatically generated, do not try to edit it. --\\x3e\\n\\n# Pagination API\\n\\n<p class=\"description\">The API documentation of the Pagination React component. Learn more about the props and the CSS customization points.</p>\\n\\n## Import\\n\\n```js\\nimport Pagination from \\'@material-ui/lab/Pagination\\';\\n// or\\nimport { Pagination } from \\'@material-ui/lab\\';\\n```\\n\\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\\n\\n\\n\\n## Component name\\n\\nThe `MuiPagination` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\\n\\n## Props\\n\\n| Name | Type | Default | Description |\\n|:-----|:-----|:--------|:------------|\\n| <span class=\"prop-name\">boundaryCount</span> | <span class=\"prop-type\">number</span> | <span class=\"prop-default\">1</span> | Number of always visible pages at the beginning and end. |\\n| <span class=\"prop-name\">classes</span> | <span class=\"prop-type\">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\\n| <span class=\"prop-name\">color</span> | <span class=\"prop-type\">\\'primary\\'<br>&#124;&nbsp;\\'secondary\\'<br>&#124;&nbsp;\\'standard\\'</span> | <span class=\"prop-default\">\\'standard\\'</span> | The active color. |\\n| <span class=\"prop-name\">count</span> | <span class=\"prop-type\">number</span> | <span class=\"prop-default\">1</span> | The total number of pages. |\\n| <span class=\"prop-name\">defaultPage</span> | <span class=\"prop-type\">number</span> | <span class=\"prop-default\">1</span> | The page selected by default when the component is uncontrolled. |\\n| <span class=\"prop-name\">disabled</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the pagination component will be disabled. |\\n| <span class=\"prop-name\">getItemAriaLabel</span> | <span class=\"prop-type\">func</span> |  | Accepts a function which returns a string value that provides a user-friendly name for the current page.<br>For localization purposes, you can use the provided [translations](/guides/localization/).<br><br>**Signature:**<br>`function(type: string, page: number, selected: bool) => string`<br>*type:* The link or button type to format (\\'page\\' | \\'first\\' | \\'last\\' | \\'next\\' | \\'previous\\'). Defaults to \\'page\\'.<br>*page:* The page number to format.<br>*selected:* If true, the current page is selected. |\\n| <span class=\"prop-name\">hideNextButton</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, hide the next-page button. |\\n| <span class=\"prop-name\">hidePrevButton</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, hide the previous-page button. |\\n| <span class=\"prop-name\">onChange</span> | <span class=\"prop-type\">func</span> |  | Callback fired when the page is changed.<br><br>**Signature:**<br>`function(event: object, page: number) => void`<br>*event:* The event source of the callback.<br>*page:* The page selected. |\\n| <span class=\"prop-name\">page</span> | <span class=\"prop-type\">number</span> |  | The current page. |\\n| <span class=\"prop-name\">renderItem</span> | <span class=\"prop-type\">func</span> | <span class=\"prop-default\">(item) => &lt;PaginationItem {...item} /></span> | Render the item.<br><br>**Signature:**<br>`function(params: PaginationRenderItemParams) => ReactNode`<br>*params:* The props to spread on a PaginationItem. |\\n| <span class=\"prop-name\">shape</span> | <span class=\"prop-type\">\\'round\\'<br>&#124;&nbsp;\\'rounded\\'</span> | <span class=\"prop-default\">\\'round\\'</span> | The shape of the pagination items. |\\n| <span class=\"prop-name\">showFirstButton</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, show the first-page button. |\\n| <span class=\"prop-name\">showLastButton</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, show the last-page button. |\\n| <span class=\"prop-name\">siblingCount</span> | <span class=\"prop-type\">number</span> | <span class=\"prop-default\">1</span> | Number of always visible pages before and after the current page. |\\n| <span class=\"prop-name\">size</span> | <span class=\"prop-type\">\\'large\\'<br>&#124;&nbsp;\\'medium\\'<br>&#124;&nbsp;\\'small\\'</span> | <span class=\"prop-default\">\\'medium\\'</span> | The size of the pagination component. |\\n| <span class=\"prop-name\">variant</span> | <span class=\"prop-type\">\\'outlined\\'<br>&#124;&nbsp;\\'text\\'</span> | <span class=\"prop-default\">\\'text\\'</span> | The variant to use. |\\n\\nThe `ref` is forwarded to the root element.\\n\\nAny other props supplied will be provided to the root element (native element).\\n\\n## CSS\\n\\n| Rule name | Global class | Description |\\n|:-----|:-------------|:------------|\\n| <span class=\"prop-name\">root</span> | <span class=\"prop-name\">.MuiPagination-root</span> | Styles applied to the root element.\\n| <span class=\"prop-name\">ul</span> | <span class=\"prop-name\">.MuiPagination-ul</span> | Styles applied to the ul element.\\n\\nYou can override the style of the component thanks to one of these customization points:\\n\\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\\n- With a theme and an [`overrides` property](/customization/globals/#css).\\n\\nIf that\\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-lab/src/Pagination/Pagination.js) for more detail.\\n\\n## Demos\\n\\n- [Pagination](/components/pagination/)\\n\\n'}},[[\"DtIx\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}