{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[303],{\"1kFD\":function(e,n){e.exports=\"# Abordagem do Design da API\\n\\n<p class=\\\"description\\\">N\\xf3s aprendemos bastante como o Material-UI \\xe9 usado e o refatoramento da v1 permitiu-nos repensar completamente o componente de API.</p>\\n\\n> O design da API \\xe9 dif\\xedcil porque voc\\xea pode fazer com que pare\\xe7a simples, mas na verdade \\xe9 extremamente complexo ou simples, mas parece complexo.\\n\\n[@sebmarkbage](https://twitter.com/sebmarkbage/status/728433349337841665)\\n\\nComo Sebastian Markbage [apontou](https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html), nenhuma abstra\\xe7\\xe3o \\xe9 superior a abstra\\xe7\\xf5es erradas. Estamos fornecendo componentes de baixo n\\xedvel para maximizar os recursos de composi\\xe7\\xe3o.\\n\\n## Composi\\xe7\\xe3o\\n\\nVoc\\xea deve ter notado alguma inconsist\\xeancia na API em rela\\xe7\\xe3o \\xe0 composi\\xe7\\xe3o de componentes. Para fornecer alguma transpar\\xeancia, usamos as seguintes regras ao projetar a API:\\n\\n1. Usando a propriedade `children` \\xe9 a maneira idiom\\xe1tica de fazer composi\\xe7\\xe3o com React.\\n2. \\xc0s vezes, precisamos apenas de uma composi\\xe7\\xe3o limitada com child, por exemplo, quando n\\xe3o precisamos permitir permuta\\xe7\\xf5es de ordem com child. Nesse caso, fornecer propriedades expl\\xedcitas torna a implementa\\xe7\\xe3o mais simples e com maior desempenho; por exemplo, o componente `Tab` recebe uma propriedade `icon` e `label`.\\n3. A consist\\xeancia da API \\xe9 importante.\\n\\n## Regras\\n\\nAl\\xe9m do trade-off da composi\\xe7\\xe3o acima, aplicamos as seguintes regras:\\n\\n### Propagar\\n\\nPropriedades fornecidas para um componente que n\\xe3o est\\xe3o explicitamente documentadas, s\\xe3o propagadas para o elemento raiz; por exemplo, a propriedade `className` \\xe9 aplicada no elemento raiz.\\n\\nAgora, digamos que voc\\xea queira desabilitar o efeito cascata do `MenuItem`. Voc\\xea pode aproveitar o comportamento de propaga\\xe7\\xe3o:\\n\\n```jsx\\n<MenuItem disableRipple />\\n```\\n\\nA propriedade `disableRipple` fluir\\xe1 desta maneira: [`MenuItem`](/api/menu-item/) > [`ListItem`](/api/list-item/) > [`ButtonBase`](/api/button-base/).\\n\\n### Propriedades nativas\\n\\nEvitamos documentar propriedades nativas suportadas pelo DOM como [`className`](/customization/components/#overriding-styles-with-class-names).\\n\\n### Classes CSS\\n\\nTodos os componentes aceitam uma propriedade [`classes`](/customization/components/#overriding-styles-with-classes) para customizar os estilos. O design de classes responde a duas restri\\xe7\\xf5es: para tornar a estrutura das classes o mais simples poss\\xedvel, enquanto suficiente, implementa a especifica\\xe7\\xe3o de Material Design.\\n\\n- A classe aplicada ao elemento raiz \\xe9 sempre chamada de `root`.\\n- Todos os estilos padr\\xe3o s\\xe3o agrupados em uma \\xfanica classe.\\n- As classes aplicadas a elementos n\\xe3o-raiz s\\xe3o prefixadas com o nome do elemento, por exemplo, `paperWidthXs` no componente Dialog.\\n- As variantes aplicadas por uma propriedade booleana **n\\xe3o s\\xe3o** prefixadas, por exemplo, a classe `rounded` aplicada pela propriedade `rounded`.\\n- As variantes aplicadas por uma propriedade enum **s\\xe3o** prefixadas, por exemplo, a classe `colorPrimary` aplicada pela propriedade `color=\\\"primary\\\"`.\\n- Uma variante tem **um n\\xedvel de especificidade**. As propriedades `color` e `variant` s\\xe3o consideradas uma variante. Quanto menor a especificidade de estilo, mais simples \\xe9 sobrescrever.\\n- Aumentamos a especificidade de um modificador variante. N\\xf3s j\\xe1 **temos que fazer isso** para as pseudo-classes (`:hover`, `:focus`, etc.). Permite muito mais controle ao custo de mais clich\\xea. Esperamos que tamb\\xe9m seja mais intuitivo.\\n\\n```js\\nconst styles = {\\n  root: {\\n    color: green[600],\\n    '&$checked': {\\n      color: green[500],\\n    },\\n  },\\n  checked: {},\\n};\\n```\\n\\n### Componentes aninhados\\n\\nOs componentes aninhados dentro de um componente possuem:\\n\\n- suas pr\\xf3prias propriedades niveladas quando estas s\\xe3o chaves para a abstra\\xe7\\xe3o do componente de n\\xedvel superior, por exemplo uma propriedade `id` para o componente `input`.\\n- suas pr\\xf3prias propriedades `xxxProps`, quando os usu\\xe1rios podem precisar ajustar os subcomponentes do m\\xe9todo de renderiza\\xe7\\xe3o interno, por exemplo, expondo as propriedades `inputProps` e `InputProps` em componentes que usam `Input` internamente.\\n- suas pr\\xf3prias propriedades `xxxComponent` para executar a inje\\xe7\\xe3o de componentes.\\n- suas pr\\xf3prias propriedades `xxxRef`, quando o usu\\xe1rio precisar executar a\\xe7\\xf5es imperativas, por exemplo, expondo uma propriedade `inputRef` para acessar nativamente o `input` no componente `Input`. Isso ajuda a responder a pergunta [\\\"Como posso acessar o elemento DOM?\\\"](/getting-started/faq/#how-can-i-access-the-dom-element)\\n\\n### Nomeando propriedades\\n\\nO nome de uma propriedade booleana deve ser escolhido com base no **valor padr\\xe3o**. Por exemplo, o atributo `disabled` em um elemento de entrada, se fornecido, \\xe9 padronizado para `true`. Essa escolha permite a nota\\xe7\\xe3o abreviada:\\n\\n```diff\\n-<Input enabled={false} />\\n+<Input disabled />\\n```\\n\\n### Componentes controlados\\n\\nA maior parte de componentes controlados, \\xe9 controlado pelas propriedades `value` e `onChange`, no entanto, o `open` / `onClose` / `onOpen` \\xe9 uma combina\\xe7\\xe3o usada para o estado relacionado \\xe0 exibi\\xe7\\xe3o.\\n\\n### boolean vs enum\\n\\nExistem duas op\\xe7\\xf5es para projetar a API para as varia\\xe7\\xf5es de um componente: com um *boolean*; ou com um *enum*. Por exemplo, vamos pegar um bot\\xe3o que tenha tipos diferentes. Cada op\\xe7\\xe3o tem seus pr\\xf3s e contras:\\n\\n- Op\\xe7\\xe3o 1 *boleano*:\\n    \\n    ```tsx\\n    type Props = {\\n    contained: boolean;\\n    fab: boolean;\\n    };\\n    ```\\n    \\n    Esta API ativou a nota\\xe7\\xe3o abreviada: `<Button>`, `<Button contained />`, `<Button fab />`.\\n\\n- Op\\xe7\\xe3o 2 *enumerador*:\\n    \\n    ```tsx\\n    type Props = {\\n      variant: 'text' | 'contained' | 'fab';\\n    }\\n    ```\\n    \\n    Esta API \\xe9 mais verbosa: `<Button>`, `<Button variant=\\\"contained\\\">`, `<Button variant=\\\"fab\\\">`.\\n    \\n    No entanto, isso impede que uma combina\\xe7\\xe3o inv\\xe1lida seja usada, limita o n\\xfamero de propriedades expostas, e pode facilmente suportar novos valores no futuro.\\n\\nOs componentes de Material-UI usam uma combina\\xe7\\xe3o das duas abordagens de acordo com as seguintes regras:\\n\\n- Um *boleano* \\xe9 usado quando **2** valores poss\\xedveis s\\xe3o necess\\xe1rios.\\n- Um *enumerador* \\xe9 usado quando **2** valores poss\\xedveis s\\xe3o necess\\xe1rios, ou se houver a possibilidade de que valores poss\\xedveis adicionais possam ser necess\\xe1rios no futuro.\\n\\nVoltando ao exemplo do bot\\xe3o anterior; ele requer 3 valores poss\\xedveis, usamos um *enumerador*.\\n\\n### Ref\\n\\nO `ref` \\xe9 encaminhado para o elemento raiz. Isso significa que, sem alterar o elemento raiz renderizado atrav\\xe9s da propriedade `component`, ele \\xe9 encaminhado para o elemento DOM mais externo para que o componente renderize. Se voc\\xea passar um componente diferente atrav\\xe9s da propriedade `component`, o ref ser\\xe1 anexado para esse componente.\\n\\n## Gloss\\xe1rio\\n\\n- **componente hospedeiro**: um tipo de n\\xf3 DOM no contexto de `react-dom`, por exemplo, um `'div'`. Veja tamb\\xe9m as [Notas de implementa\\xe7\\xe3o do React](https://reactjs.org/docs/implementation-notes.html#mounting-host-elements).\\n- **elemento hospedeiro**: um n\\xf3 DOM no contexto de `react-dom`, por exemplo, uma inst\\xe2ncia de `window.HTMLDivElement`.\\n- **mais externo**: O primeiro componente ao ler a \\xe1rvore de componentes de cima para baixo, ou seja, busca em largura (breadth-first search).\\n- **componente raiz**: o componente mais externo que renderiza um componente do hospedeiro.\\n- **elemento raiz**: o elemento mais externo que renderiza um componente hospedeiro.\"},\"9qaA\":function(e,n){e.exports=\"# API\\u306e\\u8a2d\\u8a08\\u30a2\\u30d7\\u30ed\\u30fc\\u30c1\\n\\n<p class=\\\"description\\\">Material-UI\\u306e\\u4f7f\\u7528\\u65b9\\u6cd5\\u306b\\u3064\\u3044\\u3066\\u306f\\u591a\\u304f\\u306e\\u3053\\u3068\\u3092\\u5b66\\u3073\\u3001v1\\u306e\\u30ea\\u30e9\\u30a4\\u30c8\\u306b\\u3088\\u3063\\u3066\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8API\\u3092\\u5b8c\\u5168\\u306b\\u518d\\u8003\\u3059\\u308b\\u3053\\u3068\\u304c\\u3067\\u304d\\u307e\\u3057\\u305f\\u3002</p>\\n\\n> API\\u8a2d\\u8a08\\u304c\\u96e3\\u3057\\u3044\\u306e\\u306f\\u3001\\u5358\\u7d14\\u306b\\u898b\\u3048\\u308b\\u3088\\u3046\\u306b\\u3057\\u3066\\u3082\\u5b9f\\u969b\\u306b\\u306f\\u304b\\u306a\\u308a\\u8907\\u96d1\\u306b\\u898b\\u3048\\u308b\\u3088\\u3046\\u306b\\u3057\\u305f\\u308a\\u3001\\u5358\\u7d14\\u3060\\u304c\\u8907\\u96d1\\u306b\\u898b\\u3048\\u308b\\u3088\\u3046\\u306b\\u3057\\u305f\\u308a\\u3067\\u304d\\u308b\\u304b\\u3089\\u3067\\u3059\\u3002\\n\\n[@sebmarkbage](https://twitter.com/sebmarkbage/status/728433349337841665)\\n\\nApi\\u8a2d\\u8a08\\u304c\\u96e3\\u3057\\u3044\\u306e\\u306f\\u3001\\u5358\\u7d14\\u306b\\u898b\\u3048\\u308b\\u3088\\u3046\\u306b\\u3057\\u3066\\u3082\\u5b9f\\u969b\\u306b\\u306f\\u304b\\u306a\\u308a\\u8907\\u96d1\\u306b\\u898b\\u3048\\u308b\\u3088\\u3046\\u306b\\u3057\\u305f\\u308a\\u3001\\u5358\\u7d14\\u3060\\u304c\\u8907\\u96d1\\u306b\\u898b\\u3048\\u308b\\u3088\\u3046\\u306b\\u3057\\u305f\\u308a\\u3067\\u304d\\u308b\\u304b\\u3089\\u3067\\u3059\\u3002 \\u7d44\\u7248\\u6a5f\\u80fd\\u3092\\u6700\\u5927\\u9650\\u306b\\u6d3b\\u7528\\u3059\\u308b\\u305f\\u3081\\u3001\\u4f4e\\u30ec\\u30d9\\u30eb\\u306e\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3092\\u63d0\\u4f9b\\u3057\\u3066\\u3044\\u307e\\u3059\\u3002\\n\\n## \\u30b3\\u30f3\\u30dd\\u30b8\\u30b7\\u30e7\\u30f3\\n\\n\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306e\\u69cb\\u6210\\u306b\\u95a2\\u3057\\u3066API\\u306b\\u77db\\u76fe\\u304c\\u3042\\u308b\\u3053\\u3068\\u306b\\u6c17\\u4ed8\\u3044\\u305f\\u304b\\u3082\\u3057\\u308c\\u307e\\u305b\\u3093\\u3002 \\u900f\\u904e\\u6027\\u3092\\u63d0\\u4f9b\\u3059\\u308b\\u305f\\u3081\\u306b\\u3001API\\u3092\\u8a2d\\u8a08\\u3059\\u308b\\u969b\\u306b\\u6b21\\u306e\\u30eb\\u30fc\\u30eb\\u3092\\u4f7f\\u7528\\u3057\\u3066\\u3044\\u307e\\u3059\\u3002\\n\\n1. `children` \\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306e\\u5229\\u7528\\u306f\\u3001React\\u3067\\u69cb\\u6210\\u3092\\u884c\\u3046\\u6163\\u7528\\u7684\\u306a\\u65b9\\u6cd5\\u3067\\u3059\\u3002\\n2. \\u5834\\u5408\\u306b\\u3088\\u3063\\u3066\\u306f\\u3001\\u5b50\\u3069\\u3082\\u306e\\u9806\\u5e8f\\u306e\\u5165\\u308c\\u66ff\\u3048\\u3092\\u8a31\\u53ef\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u306a\\u3044\\u5834\\u5408\\u306a\\u3069\\u3001\\u5b50\\u3069\\u3082\\u306e\\u69cb\\u6210\\u304c\\u9650\\u5b9a\\u3055\\u308c\\u308b\\u3053\\u3068\\u3082\\u3042\\u308a\\u307e\\u3059\\u3002 \\u3053\\u306e\\u5834\\u5408\\u3001\\u660e\\u793a\\u7684\\u306a\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u30fc\\u3092\\u6307\\u5b9a\\u3059\\u308b\\u3068\\u3001\\u5b9f\\u88c5\\u304c\\u3088\\u308a\\u5358\\u7d14\\u306b\\u306a\\u308a\\u3001\\u3088\\u308a\\u30d1\\u30d5\\u30a9\\u30fc\\u30de\\u30f3\\u30b9\\u304c\\u5411\\u4e0a\\u3057\\u307e\\u3059\\u3002; \\u305f\\u3068\\u3048\\u3070\\u3001`Tab`\\u306f`\\u30a2\\u30a4\\u30b3\\u30f3`\\u304a\\u3088\\u3073`\\u30e9\\u30d9\\u30eb`\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3092\\u4f8b\\u306b\\u53d6\\u308a\\u307e\\u3059\\u3002\\n3. API\\u306e\\u4e00\\u8cab\\u6027\\u304c\\u91cd\\u8981\\u3067\\u3059\\u3002\\n\\n## \\u30eb\\u30fc\\u30eb\\n\\n\\u4e0a\\u8a18\\u306e\\u69cb\\u6210\\u306e\\u30c8\\u30ec\\u30fc\\u30c9\\u30aa\\u30d5\\u3068\\u306f\\u5225\\u306b\\u3001\\u6b21\\u306e\\u30eb\\u30fc\\u30eb\\u3092\\u5b9f\\u65bd\\u3057\\u307e\\u3059\\u3002\\n\\n### \\u30b9\\u30d7\\u30ec\\u30c3\\u30c9\\n\\nProps supplied to a component which are not explictly documented, are spread to the root element; for instance, the `className` property is applied to the root.\\n\\n\\u3053\\u3053\\u3067\\u3001`MenuItem`\\u306e\\u30ea\\u30d7\\u30eb\\u3092\\u7121\\u52b9\\u306b\\u3059\\u308b\\u3068\\u3057\\u307e\\u3059\\u3002 \\u30b9\\u30d7\\u30ec\\u30c3\\u30c9\\u52d5\\u4f5c\\u3092\\u5229\\u7528\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n```jsx\\n<MenuItem disableRipple />\\n```\\n\\n` disableRipple` \\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306f\\u6b21\\u306e\\u3088\\u3046\\u306b\\u6d41\\u308c\\u307e\\u3059\\uff1a[` MenuItem `](/api/menu-item/) > [` ListItem `](/api/list-item/) > [` ButtonBase `](/api/button-base/) \\u3002\\n\\n### \\u30cd\\u30a4\\u30c6\\u30a3\\u30d6\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\n\\n\\u63d0\\u4f9b\\u3055\\u308c\\u305f\\u30c9\\u30ad\\u30e5\\u30e1\\u30f3\\u30c8\\u5316\\u3055\\u308c\\u3066\\u3044\\u306a\\u3044\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306f\\u30eb\\u30fc\\u30c8\\u8981\\u7d20\\u306b\\u5e83\\u304c\\u308a\\u307e\\u3059; \\u305f\\u3068\\u3048\\u3070\\u3001[`className`](/customization/components/#overriding-styles-with-class-names)\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306f\\u30eb\\u30fc\\u30c8\\u306b\\u9069\\u7528\\u3055\\u308c\\u307e\\u3059\\u3002\\n\\n### CSS \\u30af\\u30e9\\u30b9\\n\\nAll components accept a [`classes`](/customization/components/#overriding-styles-with-classes) prop to customize the styles. \\u30af\\u30e9\\u30b9\\u8a2d\\u8a08\\u306f\\u3001\\u6b21\\u306e2\\u3064\\u306e\\u5236\\u7d04\\u306b\\u7b54\\u3048\\u307e\\u3059: Material Design\\u4ed5\\u69d8\\u3092\\u5b9f\\u88c5\\u3059\\u308b\\u306e\\u306b\\u5341\\u5206\\u306a\\u3060\\u3051\\u3067\\u3001\\u53ef\\u80fd\\u306a\\u9650\\u308a\\u30af\\u30e9\\u30b9\\u69cb\\u9020\\u3092\\u5358\\u7d14\\u306b\\u3057\\u307e\\u3059\\u3002\\n\\n- \\u30eb\\u30fc\\u30c8\\u8981\\u7d20\\u306b\\u9069\\u7528\\u3055\\u308c\\u308b\\u30af\\u30e9\\u30b9\\u306f\\u3001\\u5e38\\u306b`root`\\u3068\\u547c\\u3070\\u308c\\u307e\\u3059\\u3002\\n- \\u65e2\\u5b9a\\u306e\\u30b9\\u30bf\\u30a4\\u30eb\\u306f\\u3059\\u3079\\u30661\\u3064\\u306e\\u30af\\u30e9\\u30b9\\u306b\\u30b0\\u30eb\\u30fc\\u30d7\\u5316\\u3055\\u308c\\u307e\\u3059\\u3002\\n- \\u975e\\u30eb\\u30fc\\u30c8\\u8981\\u7d20\\u306b\\u9069\\u7528\\u3055\\u308c\\u308b\\u30af\\u30e9\\u30b9\\u306b\\u306f\\u3001\\u8981\\u7d20\\u306e\\u540d\\u524d\\u306e\\u63a5\\u982d\\u8f9e\\u304c\\u4ed8\\u304d\\u307e\\u3059\\uff08\\u4f8b\\uff1a\\u30c0\\u30a4\\u30a2\\u30ed\\u30b0\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306e` paperWidthXs`\\uff09 \\u3002\\n- boolean\\u578b\\u306e\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3**\\u3067\\u9069\\u7528\\u3055\\u308c\\u308b\\u5909\\u6570\\u306b\\u63a5\\u982d\\u8f9e\\u306f\\u4ed8\\u304d\\u307e\\u305b\\u3093**\\u3002\\u4f8b\\u3048\\u3070\\u3001`rounded`\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3067\\u9069\\u7528\\u3055\\u308c\\u308b`rounded`\\u30af\\u30e9\\u30b9\\u306e\\u3088\\u3046\\u306b\\u306a\\u308a\\u307e\\u3059\\u3002\\n- Enum\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3**\\u306b\\u3088\\u3063\\u3066\\u9069\\u7528\\u3055\\u308c\\u308b\\u30d0\\u30ea\\u30a2\\u30f3\\u30c8\\u306fprifix\\u3055\\u308c\\u307e\\u3059**\\u3001(\\u4f8b\\uff1a`color=\\\"primary\\\"`\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306b\\u3088\\u3063\\u3066\\u9069\\u7528\\u3055\\u308c\\u308b`colorPrimary`\\u30af\\u30e9\\u30b9)\\u3002\\n- \\u30d0\\u30ea\\u30a2\\u30f3\\u30c8\\u306b\\u306f** 1\\u30ec\\u30d9\\u30eb\\u306e\\u7279\\u7570\\u6027\\u304c\\u3042\\u308a\\u307e\\u3059** \\u3002 `color`\\u304a\\u3088\\u3073`variant`\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306f\\u3001variant\\u3068\\u898b\\u306a\\u3055\\u308c\\u307e\\u3059\\u3002 \\u30b9\\u30bf\\u30a4\\u30eb\\u306e\\u7279\\u6b8a\\u6027\\u304c\\u4f4e\\u3044\\u307b\\u3069\\u3001\\u30aa\\u30fc\\u30d0\\u30fc\\u30e9\\u30a4\\u30c9\\u304c\\u7c21\\u5358\\u306b\\u306a\\u308a\\u307e\\u3059\\u3002\\n- \\u30d0\\u30ea\\u30a2\\u30f3\\u30c8\\u4fee\\u98fe\\u5b50\\u306e\\u7279\\u7570\\u6027\\u3092\\u9ad8\\u3081\\u307e\\u3059\\u3002 \\u79c1\\u305f\\u3061\\u306f\\u65e2\\u306b\\u7591\\u4f3c\\u30af\\u30e9\\u30b9(`:hover`, `:focus`\\u306a\\u3069\\u3002)\\u306e\\u305f\\u3081\\u306b\\u305d\\u308c\\u3092\\u3057\\u306a\\u3051\\u308c\\u3070\\u306a\\u308a\\u307e\\u305b\\u3093</strong>\\u3002 \\u3088\\u308a\\u591a\\u304f\\u306e\\u5b9a\\u578b\\u7684\\u306a\\u30b3\\u30b9\\u30c8\\u3067\\u3001\\u3088\\u308a\\u591a\\u304f\\u306e\\u5236\\u5fa1\\u3092\\u53ef\\u80fd\\u306b\\u3057\\u307e\\u3059\\u3002 \\u3082\\u3063\\u3068\\u76f4\\u611f\\u7684\\u306b\\u306a\\u308c\\u3070\\u3044\\u3044\\u306e\\u3067\\u3059\\u304c\\u3002\\n\\n```js\\nconst styles = {\\n  root: {\\n    color: green[600],\\n    '&$checked': {\\n      color: green[500],\\n    },\\n  },\\n  checked: {},\\n};\\n```\\n\\n### \\u30cd\\u30b9\\u30c8\\u3055\\u308c\\u305f\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\n\\n\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u5185\\u306e\\u30cd\\u30b9\\u30c8\\u3055\\u308c\\u305f\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306b\\u306f\\u3001\\u6b21\\u306e\\u3082\\u306e\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002\\n\\n- their own flattened properties when these are key to the top level component abstraction, for instance an `id` prop for the `Input` component.\\n- \\u30e6\\u30fc\\u30b6\\u304c\\u5185\\u90e8\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u30e1\\u30bd\\u30c3\\u30c9\\u306e\\u30b5\\u30d6\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3092\\u5fae\\u8abf\\u6574\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308b\\u5834\\u5408\\u306f\\u3001\\u72ec\\u81ea\\u306e`xxxProps`\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3092\\u4f7f\\u7528\\u3057\\u307e\\u3059\\u3002 \\u305f\\u3068\\u3048\\u3070\\u3001`Input`\\u3092\\u5185\\u90e8\\u7684\\u306b\\u4f7f\\u7528\\u3059\\u308b\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306e`inputProps`\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3068`InputProps`\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3092\\u516c\\u958b\\u3057\\u307e\\u3059\\u3002\\n- \\u72ec\\u81ea\\u306e` xxxComponent `\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u30a4\\u30f3\\u30b8\\u30a7\\u30af\\u30b7\\u30e7\\u30f3\\u3092\\u5b9f\\u884c\\u3059\\u308b\\u305f\\u3081\\u306e\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3002\\n- their own `xxxRef` prop when you might need to perform imperative actions, for instance, exposing an `inputRef` prop to access the native `input` on the `Input` component. \\u3053\\u308c\\u306f\\u3001[\\u300cDOM\\u8981\\u7d20\\u306b\\u30a2\\u30af\\u30bb\\u30b9\\u3059\\u308b\\u306b\\u306f\\u3069\\u3046\\u3059\\u308c\\u3070\\u3044\\u3044\\u3067\\u3059\\u304b\\u3002\\u300d](/getting-started/faq/#how-can-i-access-the-dom-element)\\u3068\\u3044\\u3046\\u8cea\\u554f\\u306b\\u7b54\\u3048\\u308b\\u306e\\u306b\\u5f79\\u7acb\\u3061\\u307e\\u3059\\u3002\\n\\n### \\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306e\\u547d\\u540d\\n\\n\\u30d6\\u30fc\\u30ea\\u30a2\\u30f3\\u578b\\u306e\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306e\\u540d\\u524d\\u306f\\u3001**\\u306e\\u30c7\\u30d5\\u30a9\\u30eb\\u30c8\\u5024**\\u306b\\u57fa\\u3065\\u3044\\u3066\\u9078\\u629e\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002 \\u305f\\u3068\\u3048\\u3070\\u3001\\u5165\\u529b\\u30a8\\u30ec\\u30e1\\u30f3\\u30c8\\u306e`disabled`\\u5c5e\\u6027\\u3092\\u6307\\u5b9a\\u3059\\u308b\\u3068\\u3001\\u30c7\\u30d5\\u30a9\\u30eb\\u30c8\\u3067`true`\\u306b\\u306a\\u308a\\u307e\\u3059\\u3002 \\u3053\\u306e\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3\\u3092\\u9078\\u629e\\u3059\\u308b\\u3068\\u3001\\u6b21\\u306e\\u3088\\u3046\\u306a\\u7701\\u7565\\u8868\\u8a18\\u304c\\u53ef\\u80fd\\u306b\\u306a\\u308a\\u307e\\u3059\\u3002\\n\\n```diff\\n-<Input enabled={false} />\\n+<Input disabled />\\n```\\n\\n### \\u5236\\u5fa1\\u3055\\u308c\\u305f\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\n\\n\\u307b\\u3068\\u3093\\u3069\\u306e\\u5236\\u5fa1\\u5bfe\\u8c61\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306f\\u3001`\\u5024`\\u304a\\u3088\\u3073`onChange`\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306b\\u3088\\u3063\\u3066\\u5236\\u5fa1\\u3055\\u308c\\u307e\\u3059\\u3002 \\u305f\\u3060\\u3057\\u3001\\u30c7\\u30a3\\u30b9\\u30d7\\u30ec\\u30a4\\u95a2\\u9023\\u306e\\u72b6\\u614b\\u306b\\u306f\\u3001`open`/`onClose`/`onOpen`\\u306e\\u7d44\\u307f\\u5408\\u308f\\u305b\\u304c\\u4f7f\\u7528\\u3055\\u308c\\u307e\\u3059\\u3002\\n\\n### boolean vs enum\\n\\n\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306e\\u30d0\\u30ea\\u30a8\\u30fc\\u30b7\\u30e7\\u30f3\\u306e\\u305f\\u3081\\u306eAPI\\u3092\\u8a2d\\u8a08\\u3059\\u308b\\u306b\\u306f\\u3001\\u6b21\\u306e\\u4e8c\\u3064\\u306e\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002*boolean*; \\u307e\\u305f\\u306f*enum*\\u3092\\u4f7f\\u7528\\u3057\\u307e\\u3059\\u3002 \\u305f\\u3068\\u3048\\u3070\\u3001\\u7570\\u306a\\u308b\\u30bf\\u30a4\\u30d7\\u306e\\u30dc\\u30bf\\u30f3\\u3092\\u9078\\u629e\\u3057\\u307e\\u3059\\u3002 \\u5404\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3\\u306b\\u306f\\u9577\\u6240\\u3068\\u77ed\\u6240\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002\\n\\n- Option 1 *boolean*:\\n    \\n    ```tsx\\n    type Props = {\\n    contained: boolean;\\n    fab: boolean;\\n    };\\n    ```\\n    \\n    This API enables the shorthand notation: `<Button>`, `<Button contained />`, `<Button fab />`.\\n\\n- Option 2 *enum*:\\n    \\n    ```tsx\\n    type Props = {\\n      variant: 'text' | 'contained' | 'fab';\\n    }\\n    ```\\n    \\n    \\u3053\\u306eAPI\\u306f\\u3088\\u308a\\u5197\\u9577\\u3067\\u3059\\uff1a `<Button>`\\u3001`<Button variant=\\\"contained\\\">`\\u3001`<Button variant=\\\"fab\\\">`\\u3002\\n    \\n    \\u305f\\u3060\\u3057\\u3001\\u7121\\u52b9\\u306a\\u7d44\\u307f\\u5408\\u308f\\u305b\\u306e\\u4f7f\\u7528\\u3092\\u9632\\u304e\\u3001 \\u306f\\u516c\\u958b\\u3055\\u308c\\u308b\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306e\\u6570\\u3092\\u5236\\u9650\\u3057\\u3001 \\u306f\\u5c06\\u6765\\u65b0\\u3057\\u3044\\u5024\\u3092\\u7c21\\u5358\\u306b\\u30b5\\u30dd\\u30fc\\u30c8\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\nMaterial-UI\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306f\\u3001\\u6b21\\u306e\\u898f\\u5247\\u306b\\u5f93\\u3063\\u30662\\u3064\\u306e\\u30a2\\u30d7\\u30ed\\u30fc\\u30c1\\u306e\\u7d44\\u307f\\u5408\\u308f\\u305b\\u3092\\u4f7f\\u7528\\u3057\\u307e\\u3059\\u3002\\n\\n- A *boolean* is used when **2** possible values are required.\\n- An *enum* is used when **> 2** possible values are required, or if there is the possibility that additional possible values may be required in the future.\\n\\nGoing back to the previous button example; since it requires 3 possible values, we use an *enum*.\\n\\n### Ref\\n\\n` ref `\\u306f\\u30eb\\u30fc\\u30c8\\u8981\\u7d20\\u306b\\u8ee2\\u9001\\u3055\\u308c\\u307e\\u3059\\u3002 This means that, without changing the rendered root element via the `component` prop, it is forwarded to the outermost DOM element which the component renders. If you pass a different component via the `component` prop, the ref will be attached to that component instead.\\n\\n## \\u7528\\u8a9e\\u96c6\\n\\n- **host component**:`react-dom`\\u306e\\u30b3\\u30f3\\u30c6\\u30ad\\u30b9\\u30c8\\u306b\\u304a\\u3051\\u308bDOM\\u30ce\\u30fc\\u30c9\\u30bf\\u30a4\\u30d7\\u3001\\u4f8b\\u3048\\u3070`'div'`\\u3002 [ React Implementation Notes\\u3082\\u53c2\\u7167\\u3057\\u3066\\u304f\\u3060\\u3055\\u3044](https://reactjs.org/docs/implementation-notes.html#mounting-host-elements) \\u3002\\n- **host element** \\uff1a` react-dom\\u306e\\u30b3\\u30f3\\u30c6\\u30ad\\u30b9\\u30c8\\u306eDOM\\u30ce\\u30fc\\u30c9`\\u305f\\u3068\\u3048\\u3070\\u3001` window.HTMLDivElement\\u306e\\u30a4\\u30f3\\u30b9\\u30bf\\u30f3\\u30b9` \\u3002\\n- **outermost**:\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u30c4\\u30ea\\u30fc\\u3092\\u4e0a\\u304b\\u3089\\u4e0b\\u306b\\u8aad\\u307f\\u8fbc\\u3080\\u3068\\u304d\\u306e\\u6700\\u521d\\u306e\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3067\\u3059\\u3002\\u3064\\u307e\\u308a\\u3001\\u5e45\\u512a\\u5148\\u306e\\u691c\\u7d22\\u3067\\u3059\\u3002\\n- **root component** \\uff1a\\u30db\\u30b9\\u30c8\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3092\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3059\\u308b\\u6700\\u3082\\u5916\\u5074\\u306e\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3002\\n- **root element**\\uff1a\\u30db\\u30b9\\u30c8\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3092\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3059\\u308b\\u6700\\u3082\\u5916\\u5074\\u306e\\u8981\\u7d20\\u3002\"},QKI6:function(e,n){e.exports=\"# \\u041f\\u043e\\u0434\\u0445\\u043e\\u0434 \\u043a \\u043f\\u0440\\u043e\\u0435\\u043a\\u0442\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d\\u0438\\u044e API\\n\\n<p class=\\\"description\\\">N\\xf3s aprendemos bastante como o Material-UI \\xe9 usado e o refatoramento da v1 permitiu-nos repensar completamente o componente de API.</p>\\n\\n> API design is hard because you can make it seem simple but it's actually deceptively complex, or make it actually simple but seem complex.\\n\\n[@sebmarkbage](https://twitter.com/sebmarkbage/status/728433349337841665)\\n\\nAs Sebastian Markbage [pointed out](https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html), no abstraction is superior to wrong abstractions. We are providing low-level components to maximize composition capabilities.\\n\\n## Composition\\n\\nYou may have noticed some inconsistency in the API regarding composing components. To provide some transparency, we have been using the following rules when designing the API:\\n\\n1. Using the `children` property is the idiomatic way to do composition with React.\\n2. Sometimes we only need limited child composition, for instance when we don't need to allow child order permutations. In this case, providing explicit properties makes the implementation simpler and more performant; for example, the `Tab` takes an `icon` and a `label` property.\\n3. API consistency matters.\\n\\n## Rules\\n\\nAside from the above composition trade-off, we enforce the following rules:\\n\\n### Spread\\n\\nProps supplied to a component which are not explictly documented, are spread to the root element; for instance, the `className` property is applied to the root.\\n\\nNow, let's say you want to disable the ripples on the `MenuItem`. You can take advantage of the spread behavior:\\n\\n```jsx\\n<MenuItem disableRipple />\\n```\\n\\nThe `disableRipple` property will flow this way: [`MenuItem`](/api/menu-item/) > [`ListItem`](/api/list-item/) > [`ButtonBase`](/api/button-base/).\\n\\n### Native properties\\n\\nWe avoid documenting native properties supported by the DOM like [`className`](/customization/components/#overriding-styles-with-class-names).\\n\\n### CSS Classes\\n\\nAll components accept a [`classes`](/customization/components/#overriding-styles-with-classes) prop to customize the styles. The classes design answers two constraints: to make the classes structure as simple as possible, while sufficient to implement the Material Design specification.\\n\\n- The class applied to the root element is always called `root`.\\n- All the default styles are grouped in a single class.\\n- The classes applied to non-root elements are prefixed with the name of the element, e.g. `paperWidthXs` in the Dialog component.\\n- The variants applied by a boolean property **aren't** prefixed, e.g. the `rounded` class applied by the `rounded` property.\\n- The variants applied by an enum property **are** prefixed, e.g. the `colorPrimary` class applied by the `color=\\\"primary\\\"` property.\\n- A variant has **one level of specificity**. The `color` and `variant` properties are considered a variant. The lower the style specificity is, the simpler it is to override.\\n- We increase the specificity for a variant modifier. We already **have to do it** for the pseudo-classes (`:hover`, `:focus`, etc.). It allows much more control at the cost of more boilerplate. Hopefully, it's also more intuitive.\\n\\n```js\\nconst styles = {\\n  root: {\\n    color: green[600],\\n    '&$checked': {\\n      color: green[500],\\n    },\\n  },\\n  checked: {},\\n};\\n```\\n\\n### Nested components\\n\\nNested components inside a component have:\\n\\n- their own flattened properties when these are key to the top level component abstraction, for instance an `id` prop for the `Input` component.\\n- their own `xxxProps` property when users might need to tweak the internal render method's sub-components, for instance, exposing the `inputProps` and `InputProps` properties on components that use `Input` internally.\\n- their own `xxxComponent` property for performing component injection.\\n- their own `xxxRef` prop when you might need to perform imperative actions, for instance, exposing an `inputRef` prop to access the native `input` on the `Input` component. This helps answer the question [\\\"How can I access the DOM element?\\\"](/getting-started/faq/#how-can-i-access-the-dom-element)\\n\\n### Property naming\\n\\nThe name of a boolean property should be chosen based on the **default value**. For example, the `disabled` attribute on an input element, if supplied, defaults to `true`. This choice allows the shorthand notation:\\n\\n```diff\\n-<Input enabled={false} />\\n+<Input disabled />\\n```\\n\\n### Controlled components\\n\\nMost of the controlled component are controlled via the `value` and the `onChange` properties, however, the `open` / `onClose` / `onOpen` combination is used for display related state.\\n\\n### boolean vs enum\\n\\nThere are two options to design the API for the variations of a component: with a *boolean*; or with an *enum*. For example, let's take a button that has different types. Each option has its pros and cons:\\n\\n- Option 1 *boolean*:\\n    \\n    ```tsx\\n    type Props = {\\n    contained: boolean;\\n    fab: boolean;\\n    };\\n    ```\\n    \\n    This API enables the shorthand notation: `<Button>`, `<Button contained />`, `<Button fab />`.\\n\\n- Option 2 *enum*:\\n    \\n    ```tsx\\n    type Props = {\\n      variant: 'text' | 'contained' | 'fab';\\n    }\\n    ```\\n    \\n    This API is more verbose: `<Button>`, `<Button variant=\\\"contained\\\">`, `<Button variant=\\\"fab\\\">`.\\n    \\n    However it prevents an invalid combination from being used, bounds the number of properties exposed, and can easily support new values in the future.\\n\\nThe Material-UI components use a combination of the two approaches according to the following rules:\\n\\n- A *boolean* is used when **2** possible values are required.\\n- An *enum* is used when **> 2** possible values are required, or if there is the possibility that additional possible values may be required in the future.\\n\\nGoing back to the previous button example; since it requires 3 possible values, we use an *enum*.\\n\\n### Ref\\n\\nThe `ref` is forwarded to the root element. This means that, without changing the rendered root element via the `component` prop, it is forwarded to the outermost DOM element which the component renders. If you pass a different component via the `component` prop, the ref will be attached to that component instead.\\n\\n## \\u0421\\u043b\\u043e\\u0432\\u0430\\u0440\\u044c\\n\\n- **host component**: a DOM node type in the context of `react-dom`, e.g. a `'div'`. \\u0421\\u043c. \\u0442\\u0430\\u043a\\u0436\\u0435 [React Implementation Notes:](https://reactjs.org/docs/implementation-notes.html#mounting-host-elements).\\n- **host element**: DOM-\\u043d\\u043e\\u0434\\u0430 \\u0432 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043a\\u0441\\u0442\\u0435 `react-dom`, \\u0442.\\u0435. \\u044d\\u043a\\u0437\\u0435\\u043c\\u043b\\u044f\\u0440 `window.HTMLDivElement`.\\n- **outermost**: The first component when reading the component tree from top to bottom i.e. breadth-first search.\\n- **root component**: the outermost component that renders a host component.\\n- **root element**: the outermost element that renders a host component.\"},QWHD:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/guides/api\",function(){return t(\"nsI6\")}])},RwnX:function(e,n){e.exports='# crwdns95186:0crwdne95186:0\\n\\n<p class=\"description\">crwdns95188:0crwdne95188:0</p>\\n\\n> crwdns95190:0crwdne95190:0\\n\\n[crwdns95194:0crwdne95194:0](crwdns95192:0crwdne95192:0)\\n\\ncrwdns95196:0crwdne95196:0 crwdns95198:0crwdne95198:0\\n\\n## crwdns95200:0crwdne95200:0\\n\\ncrwdns95202:0crwdne95202:0 crwdns95204:0crwdne95204:0\\n\\n1. crwdns95206:0crwdne95206:0\\n2. crwdns95208:0crwdne95208:0 crwdns95210:0crwdne95210:0\\n3. crwdns95212:0crwdne95212:0\\n\\n## crwdns95214:0crwdne95214:0\\n\\ncrwdns95216:0crwdne95216:0\\n\\n### crwdns95218:0crwdne95218:0\\n\\ncrwdns132862:0crwdne132862:0\\n\\ncrwdns95222:0crwdne95222:0 crwdns95224:0crwdne95224:0\\n\\n```jsx\\ncrwdns95226:0crwdne95226:0\\n```\\n\\ncrwdns95228:0crwdne95228:0\\n\\n### crwdns95230:0crwdne95230:0\\n\\ncrwdns95232:0crwdne95232:0\\n\\n### crwdns95234:0crwdne95234:0\\n\\ncrwdns132864:0crwdne132864:0 crwdns95238:0crwdne95238:0\\n\\n- crwdns95240:0crwdne95240:0\\n- crwdns95242:0crwdne95242:0\\n- crwdns95244:0crwdne95244:0\\n- crwdns95246:0crwdne95246:0\\n- crwdns95248:0crwdne95248:0\\n- crwdns95250:0crwdne95250:0 crwdns95252:0crwdne95252:0 crwdns95254:0crwdne95254:0\\n- crwdns95256:0crwdne95256:0 crwdns95258:0crwdne95258:0 crwdns95260:0crwdne95260:0 crwdns95262:0crwdne95262:0\\n\\n```js\\ncrwdns95264:0[600]crwdnd95264:0$checkedcrwdnd95264:0[500]crwdne95264:0\\n```\\n\\n### crwdns95266:0crwdne95266:0\\n\\ncrwdns95268:0crwdne95268:0\\n\\n- crwdns132866:0crwdne132866:0\\n- crwdns95272:0crwdne95272:0\\n- crwdns95274:0crwdne95274:0\\n- crwdns132868:0crwdne132868:0 crwdns95278:0crwdne95278:0\\n\\n### crwdns95280:0crwdne95280:0\\n\\ncrwdns95282:0crwdne95282:0 crwdns95284:0crwdne95284:0 crwdns95286:0crwdne95286:0\\n\\n```diff\\ncrwdns95288:0{false}crwdne95288:0\\n```\\n\\n### crwdns95290:0crwdne95290:0\\n\\ncrwdns95292:0crwdne95292:0\\n\\n### crwdns95294:0crwdne95294:0\\n\\ncrwdns95296:0crwdne95296:0 crwdns95298:0crwdne95298:0 crwdns95300:0crwdne95300:0\\n\\n- crwdns95302:0crwdne95302:0\\n    \\n    ```tsx\\n    crwdns95304:0crwdne95304:0\\n    ```\\n    \\n    crwdns132870:0crwdne132870:0\\n\\n- crwdns95308:0crwdne95308:0\\n    \\n    ```tsx\\n    crwdns95310:0crwdne95310:0\\n    ```\\n    \\n    crwdns95312:0crwdne95312:0\\n    \\n    crwdns95314:0crwdne95314:0\\n\\ncrwdns95316:0crwdne95316:0\\n\\n- crwdns132872:0crwdne132872:0\\n- crwdns132874:0crwdne132874:0\\n\\ncrwdns132876:0crwdne132876:0\\n\\n### crwdns95324:0crwdne95324:0\\n\\ncrwdns95326:0crwdne95326:0 crwdns132878:0crwdne132878:0 crwdns132880:0crwdne132880:0\\n\\n## crwdns95332:0crwdne95332:0\\n\\n- crwdns95334:0crwdne95334:0 crwdns95336:0crwdne95336:0\\n- crwdns95338:0crwdne95338:0\\n- crwdns95340:0crwdne95340:0\\n- crwdns95342:0crwdne95342:0\\n- crwdns95344:0crwdne95344:0'},W0fp:function(e,n){e.exports=\"# API\\u8bbe\\u8ba1\\u65b9\\u6cd5\\n\\n<p class=\\\"description\\\">\\u5f00\\u53d1\\u56e2\\u961f\\u5728\\u4e4b\\u524d\\u7684\\u7248\\u672c\\u4e86\\u89e3\\u4e86 Material-UI \\u5982\\u4f55\\u88ab\\u4f7f\\u7528\\u3002\\u5728v1\\u91cd\\u5199\\u65f6\\uff0c\\u91cd\\u65b0\\u8003\\u8651\\u4e86\\u7ec4\\u4ef6API\\u7684\\u8bbe\\u8ba1\\u65b9\\u6cd5\\u8bba\\u3002</p>\\n\\n> API\\u8bbe\\u8ba1\\u7684\\u96be\\u70b9\\u5728\\u4e8e\\u4f60\\u53ef\\u4ee5\\u8ba9\\u4e00\\u4e9b\\u590d\\u6742\\u7684\\u4e1c\\u897f\\u770b\\u8d77\\u6765\\u7b80\\u5355\\uff0c\\u4e5f\\u53ef\\u80fd\\u628a\\u7b80\\u5355\\u7684\\u4e1c\\u897f\\u641e\\u5f97\\u590d\\u6742\\u3002\\n\\n[@sebmarkbage](https://twitter.com/sebmarkbage/status/728433349337841665)\\n\\n\\u6b63\\u5982Sebastian Markbage [\\u6307\\u51fa](https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html)\\uff0c\\u6ca1\\u6709\\u62bd\\u8c61\\u4f18\\u4e8e\\u9519\\u8bef\\u7684\\u62bd\\u8c61\\u3002 \\u6211\\u4eec\\u63d0\\u4f9b\\u4f4e\\u7ea7\\u7684\\u7ec4\\u4ef6\\u4ee5\\u6700\\u5927\\u5316\\u4fdd\\u7559\\u53ef\\u7528\\u6027\\u3002\\n\\n## \\u6784\\u6210\\n\\n\\u60a8\\u53ef\\u80fd\\u5df2\\u7ecf\\u6ce8\\u610f\\u5230API\\u4e2d\\u6709\\u5173\\u7ec4\\u5408\\u7ec4\\u4ef6\\u7684\\u4e00\\u4e9b\\u4e0d\\u4e00\\u81f4\\u4e4b\\u5904\\u3002 \\u4e3a\\u4e86\\u63d0\\u4f9b\\u4e00\\u4e9b\\u900f\\u660e\\u5ea6\\uff0c\\u6211\\u4eec\\u5728\\u8bbe\\u8ba1API\\u65f6\\u4e00\\u76f4\\u4f7f\\u7528\\u4ee5\\u4e0b\\u89c4\\u5219\\uff1a\\n\\n1. \\u4f7f\\u7528` children `\\u5c5e\\u6027\\u662f\\u4f7f\\u7528React\\u8fdb\\u884c\\u5408\\u6210\\u7684\\u60ef\\u7528\\u65b9\\u6cd5\\u3002\\n2. \\u6709\\u65f6\\u6211\\u4eec\\u53ea\\u9700\\u8981\\u6709\\u9650\\u7684\\u5b50\\u7ec4\\u6210\\uff0c\\u4f8b\\u5982\\u5f53\\u6211\\u4eec\\u4e0d\\u9700\\u8981\\u5141\\u8bb8\\u5b50\\u987a\\u5e8f\\u6392\\u5217\\u65f6\\u3002 \\u5728\\u8fd9\\u79cd\\u60c5\\u51b5\\u4e0b\\uff0c\\u63d0\\u4f9b\\u663e\\u5f0f\\u5c5e\\u6027\\u53ef\\u4ee5\\u4f7f\\u5b9e\\u73b0\\u66f4\\u7b80\\u5355\\uff0c\\u66f4\\u9ad8\\u6548; \\u4f8b\\u5982\\uff0c`Tab`\\u91c7\\u7528`icon`\\u548c`label`\\u5c5e\\u6027\\u3002\\n3. API\\u4e00\\u81f4\\u6027\\u5f88\\u91cd\\u8981\\u3002\\n\\n## \\u89c4\\u5219\\n\\n\\u9664\\u4e86\\u4e0a\\u8ff0\\u6784\\u6210\\u6743\\u8861\\u4e4b\\u5916\\uff0c\\u6211\\u4eec\\u8fd8\\u6267\\u884c\\u4ee5\\u4e0b\\u89c4\\u5219\\uff1a\\n\\n### \\u4f20\\u64ad\\n\\nProps supplied to a component which are not explictly documented, are spread to the root element; for instance, the `className` property is applied to the root.\\n\\n\\u73b0\\u5728\\uff0c\\u5047\\u8bbe\\u60a8\\u8981\\u7981\\u7528` MenuItem `\\u4e0a\\u7684\\u6d9f\\u6f2a\\u3002 \\u60a8\\u53ef\\u4ee5\\u5229\\u7528\\u4f20\\u64ad\\u884c\\u4e3a\\uff1a\\n\\n```jsx\\n<MenuItem disableRipple />\\n```\\n\\n` disableRipple `\\u5c5e\\u6027\\u5c06\\u4ee5\\u8fd9\\u79cd\\u65b9\\u5f0f\\u6d41\\u52a8\\uff1a[` MenuItem `](/api/menu-item/)> [` ListItem `](/api/list-item/)> [` ButtonBase `](/api/button-base/)\\u3002\\n\\n### \\u539f\\u751f\\u5c5e\\u6027\\n\\n\\u6211\\u4eec\\u907f\\u514d\\u8bb0\\u5f55DOM\\u652f\\u6301\\u7684\\u672c\\u673a\\u5c5e\\u6027\\uff0c\\u5982[` className `](/customization/components/#overriding-styles-with-class-names)\\u3002\\n\\n### CSS classes\\n\\nAll components accept a [`classes`](/customization/components/#overriding-styles-with-classes) prop to customize the styles. \\u7c7b\\u8bbe\\u8ba1\\u56de\\u7b54\\u4e86\\u4e24\\u4e2a\\u7ea6\\u675f\\uff1a \\u4f7f\\u7c7b\\u7ed3\\u6784\\u5c3d\\u53ef\\u80fd\\u7b80\\u5355\\uff0c\\u540c\\u65f6\\u8db3\\u4ee5\\u5b9e\\u73b0Material Design\\u89c4\\u8303\\u3002\\n\\n- \\u5e94\\u7528\\u4e8e\\u6839\\u5143\\u7d20\\u7684\\u7c7b\\u59cb\\u7ec8\\u79f0\\u4e3a` root `\\u3002\\n- \\u6240\\u6709\\u9ed8\\u8ba4\\u6837\\u5f0f\\u90fd\\u5206\\u7ec4\\u5728\\u4e00\\u4e2a\\u7c7b\\u4e2d\\u3002\\n- \\u5e94\\u7528\\u4e8e\\u975e\\u6839\\u5143\\u7d20\\u7684\\u7c7b\\u4ee5\\u5143\\u7d20\\u7684\\u540d\\u79f0\\u4e3a\\u524d\\u7f00\\uff0c\\u4f8b\\u5982\\uff0c Dialog\\u7ec4\\u4ef6\\u4e2d\\u7684` paperWidthXs `\\u3002\\n- \\u7531\\u5e03\\u5c14\\u5c5e\\u6027\\u5e94\\u7528\\u7684variants **\\u4e0d\\u662f** \\u524d\\u7f00\\uff0c\\u4f8b\\u5982 `rounded` \\u7c7b\\u7531 `rounded` \\u5c5e\\u6027\\u5e94\\u7528\\n- \\u7531 enum \\u5c5e\\u6027\\u5e94\\u7528\\u7684variants ** \\u662f ** \\u524d\\u7f00, \\u4f8b\\u5982 ` colorPrimary ` \\u7c7b \\u5e94\\u7528\\u7684 ` color = \\\"primary\\\" ` \\u5c5e\\u6027\\u3002\\n- Variant\\u5177\\u6709 ** \\u4e00\\u4e2a\\u7279\\u5b9a\\u7ea7\\u522b **\\u3002 `color`\\u548c`variant`\\u5c5e\\u6027\\u88ab\\u89c6\\u4e3avariant\\u3002 \\u6837\\u5f0f\\u7279\\u5f02\\u6027\\u8d8a\\u4f4e, \\u5b83\\u5c31\\u8d8a\\u5bb9\\u6613\\u8986\\u76d6\\u3002\\n- \\u6211\\u4eec\\u589e\\u52a0\\u4e86variant\\u4fee\\u9970\\u7b26\\u7684\\u7279\\u5f02\\u6027\\u3002 \\u6211\\u4eec\\u5df2\\u7ecf ** \\u5fc5\\u987b\\u8fd9\\u6837\\u505a ** \\u4e3a\\u4f2a\\u7c7b (`:hover `, `:focus ` \\u7b49)\\u3002 \\u5b83\\u5141\\u8bb8\\u66f4\\u591a\\u7684\\u63a7\\u5236\\uff0c\\u4f46\\u4ee3\\u4ef7\\u662f\\u66f4\\u591a\\u7684\\u6837\\u677f\\u3002 \\u5e0c\\u671b\\u5b83\\u4e5f\\u66f4\\u76f4\\u89c2\\u3002\\n\\n```js\\nconst styles = {\\n  root: {\\n    color: green[600],\\n    '&$checked': {\\n      color: green[500],\\n    },\\n  },\\n  checked: {},\\n};\\n```\\n\\n### \\u5d4c\\u5957\\u7684\\u7ec4\\u4ef6\\n\\n\\u7ec4\\u4ef6\\u5185\\u7684\\u5d4c\\u5957\\u7ec4\\u4ef6\\u5177\\u6709:\\n\\n- their own flattened properties when these are key to the top level component abstraction, for instance an `id` prop for the `Input` component.\\n- \\u5f53\\u7528\\u6237\\u53ef\\u80fd\\u9700\\u8981\\u8c03\\u6574\\u5185\\u90e8render\\u65b9\\u6cd5\\u7684\\u5b50\\u7ec4\\u4ef6\\u65f6\\uff0c\\u4ed6\\u4eec\\u81ea\\u5df1\\u7684` xxxProps `\\u5c5e\\u6027\\uff0c\\u4f8b\\u5982\\uff0c\\u5728\\u5185\\u90e8\\u4f7f\\u7528`input`\\u7684\\u7ec4\\u4ef6\\u4e0a\\u516c\\u5f00` inputProps `\\u548c` InputProps `\\u5c5e\\u6027\\u3002\\n- \\u4ed6\\u4eec\\u81ea\\u5df1\\u7684` xxxComponent `\\u5c5e\\u6027\\uff0c\\u7528\\u4e8e\\u6267\\u884c\\u7ec4\\u4ef6\\u6ce8\\u5165\\u3002\\n- their own `xxxRef` prop when you might need to perform imperative actions, for instance, exposing an `inputRef` prop to access the native `input` on the `Input` component. \\u8fd9\\u6709\\u52a9\\u4e8e\\u56de\\u7b54\\u95ee\\u9898[\\u201c\\u6211\\u5982\\u4f55\\u8bbf\\u95eeDOM\\u5143\\u7d20\\uff1f\\u201d](/getting-started/faq/#how-can-i-access-the-dom-element)\\n\\n### \\u5c5e\\u6027\\u540d\\u79f0\\n\\n\\u5e94\\u6839\\u636e ** \\u9ed8\\u8ba4\\u503c ** \\u9009\\u62e9\\u5e03\\u5c14\\u5c5e\\u6027\\u7684\\u540d\\u79f0\\u3002 \\u4f8b\\u5982, \\u8f93\\u5165\\u5143\\u7d20\\u4e0a\\u7684 ` disabled ` \\u7279\\u6027 (\\u5982\\u679c\\u63d0\\u4f9b) \\u9ed8\\u8ba4\\u4e3a ` true `\\u3002 \\u6b64\\u9009\\u9879\\u5141\\u8bb8\\u901f\\u8bb0\\u7b26\\u53f7:\\n\\n```diff\\n-<Input enabled={false} />\\n+<Input disabled />\\n```\\n\\n### \\u53d7\\u63a7\\u7ec4\\u4ef6\\n\\n\\u5927\\u591a\\u6570\\u53d7\\u63a7\\u7ec4\\u4ef6\\u901a\\u8fc7 ` value ` \\u548c ` onChange ` \\u5c5e\\u6027\\u8fdb\\u884c\\u63a7\\u5236, \\u4f46\\u662f, ` onChange `/` onClose `/` onOpen ` \\u7ec4\\u5408\\u7528\\u4e8e\\u663e\\u793a\\u76f8\\u5173\\u72b6\\u6001\\u3002\\n\\n### \\u5e03\\u5c14\\u503c vs \\u679a\\u4e3e\\n\\n\\u4e3a\\u7ec4\\u4ef6\\u7684\\u53d8\\u4f53\\u8bbe\\u8ba1API\\u6709\\u4e24\\u79cd\\u9009\\u62e9\\uff1a\\u4f7f\\u7528* boolean*; \\u6216\\u8005\\u4f7f\\u7528* enum *\\u3002 \\u4f8b\\u5982, \\u8ba9\\u6211\\u4eec\\u53d6\\u4e00\\u4e2a\\u5177\\u6709\\u4e0d\\u540c\\u7c7b\\u578b\\u7684\\u6309\\u94ae\\u3002 \\u6bcf\\u4e2a\\u9009\\u9879\\u90fd\\u6709\\u5176\\u4f18\\u70b9\\u548c\\u7f3a\\u70b9:\\n\\n- \\u9009\\u9879 1 * \\u5e03\\u5c14\\u503c(boolean) *:\\n    \\n    ```tsx\\n    type Props = {\\n    contained: boolean;\\n    fab: boolean;\\n    };\\n    ```\\n    \\n    This API enables the shorthand notation: `<Button>`, `<Button contained />`, `<Button fab />`.\\n\\n- \\u9009\\u98792 *\\u679a\\u4e3e(enum)*\\n    \\n    ```tsx\\n    type Props = {\\n      variant: 'text' | 'contained' | 'fab';\\n    }\\n    ```\\n    \\n    \\u8fd9\\u4e2aAPI\\u66f4\\u8be6\\u7ec6\\uff1a `<Button>`,`<Button variant=\\\"contained\\\">`,`<Button variant=\\\"fab\\\">`\\u3002\\n    \\n    However it prevents an invalid combination from being used, bounds the number of properties exposed, and can easily support new values in the future.\\n\\nMaterial-UI\\u7ec4\\u4ef6\\u6839\\u636e\\u4ee5\\u4e0b\\u89c4\\u5219\\u4f7f\\u7528\\u4e24\\u79cd\\u65b9\\u6cd5\\u7684\\u7ec4\\u5408\\uff1a\\n\\n- A *boolean* is used when **2** possible values are required.\\n- An *enum* is used when **> 2** possible values are required, or if there is the possibility that additional possible values may be required in the future.\\n\\nGoing back to the previous button example; since it requires 3 possible values, we use an *enum*.\\n\\n### Ref\\n\\nThe `ref` is forwarded to the root element. This means that, without changing the rendered root element via the `component` prop, it is forwarded to the outermost DOM element which the component renders. If you pass a different component via the `component` prop, the ref will be attached to that component instead.\\n\\n## Glossary\\n\\n- **host component**: a DOM node type in the context of `react-dom`, e.g. a `'div'`. See also [React Implementation Notes](https://reactjs.org/docs/implementation-notes.html#mounting-host-elements).\\n- **host element**: a DOM node in the context of `react-dom`, e.g. an instance of `window.HTMLDivElement`.\\n- **outermost**: The first component when reading the component tree from top to bottom i.e. breadth-first search.\\n- **root component**: the outermost component that renders a host component.\\n- **root element**: the outermost element that renders a host component.\"},Yyeh:function(e,n){e.exports=\"# Enfoque de dise\\xf1o para el API\\n\\n<p class=\\\"description\\\">N\\xf3s aprendemos bastante como o Material-UI \\xe9 usado e o refatoramento da v1 permitiu-nos repensar completamente o componente de API.</p>\\n\\n> API design is hard because you can make it seem simple but it's actually deceptively complex, or make it actually simple but seem complex.\\n\\n[@sebmarkbage](https://twitter.com/sebmarkbage/status/728433349337841665)\\n\\nAs Sebastian Markbage [pointed out](https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html), no abstraction is superior to wrong abstractions. We are providing low-level components to maximize composition capabilities.\\n\\n## Composici\\xf3n\\n\\nYou may have noticed some inconsistency in the API regarding composing components. To provide some transparency, we have been using the following rules when designing the API:\\n\\n1. Using the `children` property is the idiomatic way to do composition with React.\\n2. Sometimes we only need limited child composition, for instance when we don't need to allow child order permutations. In this case, providing explicit properties makes the implementation simpler and more performant; for example, the `Tab` takes an `icon` and a `label` property.\\n3. API consistency matters.\\n\\n## Rules\\n\\nAside from the above composition trade-off, we enforce the following rules:\\n\\n### Spread\\n\\nProps supplied to a component which are not explictly documented, are spread to the root element; for instance, the `className` property is applied to the root.\\n\\nNow, let's say you want to disable the ripples on the `MenuItem`. You can take advantage of the spread behavior:\\n\\n```jsx\\n<MenuItem disableRipple />\\n```\\n\\nThe `disableRipple` property will flow this way: [`MenuItem`](/api/menu-item/) > [`ListItem`](/api/list-item/) > [`ButtonBase`](/api/button-base/).\\n\\n### Native properties\\n\\nWe avoid documenting native properties supported by the DOM like [`className`](/customization/components/#overriding-styles-with-class-names).\\n\\n### CSS Classes\\n\\nAll components accept a [`classes`](/customization/components/#overriding-styles-with-classes) prop to customize the styles. The classes design answers two constraints: to make the classes structure as simple as possible, while sufficient to implement the Material Design specification.\\n\\n- The class applied to the root element is always called `root`.\\n- All the default styles are grouped in a single class.\\n- The classes applied to non-root elements are prefixed with the name of the element, e.g. `paperWidthXs` in the Dialog component.\\n- The variants applied by a boolean property **aren't** prefixed, e.g. the `rounded` class applied by the `rounded` property.\\n- The variants applied by an enum property **are** prefixed, e.g. the `colorPrimary` class applied by the `color=\\\"primary\\\"` property.\\n- A variant has **one level of specificity**. The `color` and `variant` properties are considered a variant. The lower the style specificity is, the simpler it is to override.\\n- We increase the specificity for a variant modifier. We already **have to do it** for the pseudo-classes (`:hover`, `:focus`, etc.). It allows much more control at the cost of more boilerplate. Hopefully, it's also more intuitive.\\n\\n```js\\nconst styles = {\\n  root: {\\n    color: green[600],\\n    '&$checked': {\\n      color: green[500],\\n    },\\n  },\\n  checked: {},\\n};\\n```\\n\\n### Nested components\\n\\nNested components inside a component have:\\n\\n- their own flattened properties when these are key to the top level component abstraction, for instance an `id` prop for the `Input` component.\\n- their own `xxxProps` property when users might need to tweak the internal render method's sub-components, for instance, exposing the `inputProps` and `InputProps` properties on components that use `Input` internally.\\n- their own `xxxComponent` property for performing component injection.\\n- their own `xxxRef` prop when you might need to perform imperative actions, for instance, exposing an `inputRef` prop to access the native `input` on the `Input` component. This helps answer the question [\\\"How can I access the DOM element?\\\"](/getting-started/faq/#how-can-i-access-the-dom-element)\\n\\n### Property naming\\n\\nThe name of a boolean property should be chosen based on the **default value**. For example, the `disabled` attribute on an input element, if supplied, defaults to `true`. This choice allows the shorthand notation:\\n\\n```diff\\n-<Input enabled={false} />\\n+<Input disabled />\\n```\\n\\n### Controlled components\\n\\nMost of the controlled component are controlled via the `value` and the `onChange` properties, however, the `open` / `onClose` / `onOpen` combination is used for display related state.\\n\\n### boolean vs enum\\n\\nThere are two options to design the API for the variations of a component: with a *boolean*; or with an *enum*. For example, let's take a button that has different types. Each option has its pros and cons:\\n\\n- Option 1 *boolean*:\\n    \\n    ```tsx\\n    type Props = {\\n    contained: boolean;\\n    fab: boolean;\\n    };\\n    ```\\n    \\n    This API enables the shorthand notation: `<Button>`, `<Button contained />`, `<Button fab />`.\\n\\n- Option 2 *enum*:\\n    \\n    ```tsx\\n    type Props = {\\n      variant: 'text' | 'contained' | 'fab';\\n    }\\n    ```\\n    \\n    This API is more verbose: `<Button>`, `<Button variant=\\\"contained\\\">`, `<Button variant=\\\"fab\\\">`.\\n    \\n    However it prevents an invalid combination from being used, bounds the number of properties exposed, and can easily support new values in the future.\\n\\nThe Material-UI components use a combination of the two approaches according to the following rules:\\n\\n- A *boolean* is used when **2** possible values are required.\\n- An *enum* is used when **> 2** possible values are required, or if there is the possibility that additional possible values may be required in the future.\\n\\nGoing back to the previous button example; since it requires 3 possible values, we use an *enum*.\\n\\n### Ref\\n\\nThe `ref` is forwarded to the root element. This means that, without changing the rendered root element via the `component` prop, it is forwarded to the outermost DOM element which the component renders. If you pass a different component via the `component` prop, the ref will be attached to that component instead.\\n\\n## Glossary\\n\\n- **host component**: a DOM node type in the context of `react-dom`, e.g. a `'div'`. See also [React Implementation Notes](https://reactjs.org/docs/implementation-notes.html#mounting-host-elements).\\n- **host element**: a DOM node in the context of `react-dom`, e.g. an instance of `window.HTMLDivElement`.\\n- **outermost**: The first component when reading the component tree from top to bottom i.e. breadth-first search.\\n- **root component**: the outermost component that renders a host component.\\n- **root element**: the outermost element that renders a host component.\"},Z3ot:function(e,n){e.exports=\"# API Design Approach\\n\\n<p class=\\\"description\\\">We have learned a great deal regarding how Material-UI is used, and the v1 rewrite allowed us to completely rethink the component API.</p>\\n\\n> API design is hard because you can make it seem simple but it's actually deceptively complex, or make it actually simple but seem complex.\\n\\n[@sebmarkbage](https://twitter.com/sebmarkbage/status/728433349337841665)\\n\\nAs Sebastian Markbage [pointed out](https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html), no abstraction is superior to wrong abstractions.\\nWe are providing low-level components to maximize composition capabilities.\\n\\n## Composition\\n\\nYou may have noticed some inconsistency in the API regarding composing components.\\nTo provide some transparency, we have been using the following rules when designing the API:\\n\\n1. Using the `children` property is the idiomatic way to do composition with React.\\n2. Sometimes we only need limited child composition, for instance when we don't need to allow child order permutations.\\n   In this case, providing explicit properties makes the implementation simpler and more performant; for example, the `Tab` takes an `icon` and a `label` property.\\n3. API consistency matters.\\n\\n## Rules\\n\\nAside from the above composition trade-off, we enforce the following rules:\\n\\n### Spread\\n\\nProps supplied to a component which are not explictly documented, are spread to the root element;\\nfor instance, the `className` property is applied to the root.\\n\\nNow, let's say you want to disable the ripples on the `MenuItem`.\\nYou can take advantage of the spread behavior:\\n\\n```jsx\\n<MenuItem disableRipple />\\n```\\n\\nThe `disableRipple` property will flow this way: [`MenuItem`](/api/menu-item/) > [`ListItem`](/api/list-item/) > [`ButtonBase`](/api/button-base/).\\n\\n### Native properties\\n\\nWe avoid documenting native properties supported by the DOM like [`className`](/customization/components/#overriding-styles-with-class-names).\\n\\n### CSS Classes\\n\\nAll components accept a [`classes`](/customization/components/#overriding-styles-with-classes) prop to customize the styles.\\nThe classes design answers two constraints:\\nto make the classes structure as simple as possible, while sufficient to implement the Material Design specification.\\n\\n- The class applied to the root element is always called `root`.\\n- All the default styles are grouped in a single class.\\n- The classes applied to non-root elements are prefixed with the name of the element, e.g. `paperWidthXs` in the Dialog component.\\n- The variants applied by a boolean property **aren't** prefixed, e.g. the `rounded` class\\n  applied by the `rounded` property.\\n- The variants applied by an enum property **are** prefixed, e.g. the `colorPrimary` class\\n  applied by the `color=\\\"primary\\\"` property.\\n- A variant has **one level of specificity**.\\n  The `color` and `variant` properties are considered a variant.\\n  The lower the style specificity is, the simpler it is to override.\\n- We increase the specificity for a variant modifier.\\n  We already **have to do it** for the pseudo-classes (`:hover`, `:focus`, etc.).\\n  It allows much more control at the cost of more boilerplate.\\n  Hopefully, it's also more intuitive.\\n\\n```js\\nconst styles = {\\n  root: {\\n    color: green[600],\\n    '&$checked': {\\n      color: green[500],\\n    },\\n  },\\n  checked: {},\\n};\\n```\\n\\n### Nested components\\n\\nNested components inside a component have:\\n\\n- their own flattened properties when these are key to the top level component abstraction,\\n  for instance an `id` prop for the `Input` component.\\n- their own `xxxProps` property when users might need to tweak the internal render method's sub-components,\\n  for instance, exposing the `inputProps` and `InputProps` properties on components that use `Input` internally.\\n- their own `xxxComponent` property for performing component injection.\\n- their own `xxxRef` prop when you might need to perform imperative actions,\\n  for instance, exposing an `inputRef` prop to access the native `input` on the `Input` component.\\n  This helps answer the question [\\\"How can I access the DOM element?\\\"](/getting-started/faq/#how-can-i-access-the-dom-element)\\n\\n### Property naming\\n\\nThe name of a boolean property should be chosen based on the **default value**.\\nFor example, the `disabled` attribute on an input element, if supplied, defaults to `true`.\\nThis choice allows the shorthand notation:\\n\\n```diff\\n-<Input enabled={false} />\\n+<Input disabled />\\n```\\n\\n### Controlled components\\n\\nMost of the controlled component are controlled via the `value` and the `onChange` properties,\\nhowever, the `open` / `onClose` / `onOpen` combination is used for display related state.\\n\\n### boolean vs enum\\n\\nThere are two options to design the API for the variations of a component: with a _boolean_; or with an _enum_.\\nFor example, let's take a button that has different types. Each option has its pros and cons:\\n\\n- Option 1 _boolean_:\\n\\n  ```tsx\\n  type Props = {\\n    contained: boolean;\\n    fab: boolean;\\n  };\\n  ```\\n\\n  This API enables the shorthand notation:\\n  `<Button>`, `<Button contained />`, `<Button fab />`.\\n\\n- Option 2 _enum_:\\n\\n  ```tsx\\n  type Props = {\\n    variant: 'text' | 'contained' | 'fab';\\n  };\\n  ```\\n\\n  This API is more verbose:\\n  `<Button>`, `<Button variant=\\\"contained\\\">`, `<Button variant=\\\"fab\\\">`.\\n\\n  However it prevents an invalid combination from being used,\\n  bounds the number of properties exposed,\\n  and can easily support new values in the future.\\n\\nThe Material-UI components use a combination of the two approaches according to the following rules:\\n\\n- A _boolean_ is used when **2** possible values are required.\\n- An _enum_ is used when **> 2** possible values are required, or if there is the possibility that additional possible values may be required in the future.\\n\\nGoing back to the previous button example; since it requires 3 possible values, we use an _enum_.\\n\\n### Ref\\n\\nThe `ref` is forwarded to the root element. This means that, without changing the rendered root element\\nvia the `component` prop, it is forwarded to the outermost DOM element which the component\\nrenders. If you pass a different component via the `component` prop, the ref will be attached\\nto that component instead.\\n\\n## Glossary\\n\\n- **host component**: a DOM node type in the context of `react-dom`, e.g. a `'div'`. See also [React Implementation Notes](https://reactjs.org/docs/implementation-notes.html#mounting-host-elements).\\n- **host element**: a DOM node in the context of `react-dom`, e.g. an instance of `window.HTMLDivElement`.\\n- **outermost**: The first component when reading the component tree from top to bottom i.e. breadth-first search.\\n- **root component**: the outermost component that renders a host component.\\n- **root element**: the outermost element that renders a host component.\\n\"},i73a:function(e,n){e.exports=\"# API-Design-Ansatz\\n\\n<p class=\\\"description\\\">Wir haben viel \\xfcber die Verwendung von Material-UI gelernt, und durch das Umschreiben von Version 1 konnten wir die Komponenten-API vollst\\xe4ndig \\xfcberdenken.</p>\\n\\n> Das API-Design ist schwierig, weil man es einfach erscheinen lassen kann, aber es ist tats\\xe4chlich t\\xe4uschend komplex ist, oder man macht die API einfach, aber die Umsetzung komplex.\\n\\n[@sebmarkbage](https://twitter.com/sebmarkbage/status/728433349337841665)\\n\\nWie Sebastian Markbage [sagt](https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html): Keine Abstraktion ist falschen Abstraktionen \\xfcberlegen. Wir bieten Komponenten auf niedriger Ebene an, um die Kompositionsf\\xe4higkeiten zu maximieren.\\n\\n## Komposition\\n\\nM\\xf6glicherweise haben Sie bei der Erstellung von Komponenten Inkonsistenzen in der API festgestellt. Um f\\xfcr mehr Transparenz zu sorgen, haben wir beim Entwurf der API die folgenden Regeln verwendet:\\n\\n1. Verwenden der `children` Eigenschaft ist der idiomatische Weg, um mit React zu komponieren.\\n2. Manchmal ben\\xf6tigen wir nur eine eingeschr\\xe4nkte Zusammensetzung von Kidnern, zum Beispiel, wenn wir keine Permutationen f\\xfcr untergeordnete Elemente zulassen m\\xfcssen. In diesem Fall macht die Angabe expliziter Eigenschaften die Implementierung einfacher und performanter. Zum Beispiel nimmt ein `Tab` ein `icon` und `label` als Eigenschaft an.\\n3. Die API-Konsistenz ist wichtig.\\n\\n## Regeln\\n\\nAbgesehen von den oben genannten Kompensationsregeln setzen wir die folgenden Regeln durch:\\n\\n### Verteilt\\n\\nProps supplied to a component which are not explictly documented, are spread to the root element; for instance, the `className` property is applied to the root.\\n\\nAngenommen, Sie m\\xf6chten die Wellen im `Men\\xfcelement` deaktivieren. Sie k\\xf6nnen das Ausbreitungsverhalten nutzen:\\n\\n```jsx\\n<MenuItem disableRipple />\\n```\\n\\nDie Eigenschaft `disableRipple` wird folgenderma\\xdfen weitergegeben: [`MenuItem`](/api/menu-item/) > [`ListItem`](/api/list-item/) > [`ButtonBase`](/api/button-base/).\\n\\n### Native Eigenschaften\\n\\nWir vermeiden, die vom DOM unterst\\xfctzten nativen Eigenschaften wie [`className`](/customization/components/#overriding-styles-with-class-names) zu dokumentieren.\\n\\n### CSS-Klassen\\n\\nAll components accept a [`classes`](/customization/components/#overriding-styles-with-classes) prop to customize the styles. Das Design der classes beantwortet zwei Bedingungen: Die Klassenstruktur so einfach wie m\\xf6glich zu gestalten, aber trotzdem ausreichend, um die Material Design-Spezifikation zu implementieren.\\n\\n- Die auf das Wurzelelement angewendete Klasse wird immer als `root` bezeichnet.\\n- Alle Standardstile sind in einer einzigen Klasse zusammengefasst.\\n- Die auf Nicht-Root-Elemente angewendeten Klassen wird der Name des Elements vorangestellt, z. B. `paperWidthXs` in der Dialogkomponente.\\n- Die von einer booleschen Eigenschaft angewendeten Varianten sind **nicht** vorangestellt, zB die `rounded` Klasse wird durch die `rounded` Eigenschaft angewendet.\\n- Die von einer Enumeneigenschaft angewendeten Varianten **sind** vorangestellt, z. B. die `colorPrimary` Klasse wird von der Farbe `color= \\\"primary\\\" ` Eigenschaft angewendet.\\n- Eine Variante hat **eine Spezifit\\xe4tsebene**. Die `color` und `variant` Eigenscahft werden als Variant betrachtet. Je geringer die Stilspezifit\\xe4t ist, desto einfacher ist es, sie zu \\xfcberschreiben.\\n- Wir erh\\xf6hen die Spezifit\\xe4t f\\xfcr einen Variantenmodifikator. Wir ** m\\xfcssen es schon ** f\\xfcr die Pseudoklassen (`:hover`, `:focus`, usw.) anwenden. Es erm\\xf6glicht viel mehr Kontrolle auf Kosten von mehr Boilerplate. Hoffentlich ist es auch intuitiver.\\n\\n```js\\nconst styles = {\\n  root: {\\n    color: green[600],\\n    '&$checked': {\\n      color: green[500],\\n    },\\n  },\\n  checked: {},\\n};\\n```\\n\\n### Verschachtelte Komponenten\\n\\nVerschachtelte Komponenten in einer Komponente haben:\\n\\n- their own flattened properties when these are key to the top level component abstraction, for instance an `id` prop for the `Input` component.\\n- ihre eigenen `xxxProps ` Eigenschaft, falls Benutzer m\\xf6glicherweise die Unterkomponenten der internen Render-Methode anpassen m\\xfcssen, z. B. die `inputProps` und `InputProps` Eigenschaften f\\xfcr Komponenten, die `Input` intern verwenden.\\n- ihre eigene `xxxComponent` Eigenschaft zum Durchf\\xfchren der Komponenteninjektion.\\n- their own `xxxRef` prop when you might need to perform imperative actions, for instance, exposing an `inputRef` prop to access the native `input` on the `Input` component. Dies hilft bei der Beantwortung der Frage [\\\"Wie kann ich auf das DOM-Element zugreifen?\\\"](/getting-started/faq/#how-can-i-access-the-dom-element)\\n\\n### Benennung der Eigenschaften\\n\\nDer Name einer booleschen Eigenschaft sollte basierend auf dem **Standardwert** ausgew\\xe4hlt werden. Zum Beispiel ist das `disabled` Attribut f\\xfcr ein Eingabeelement, sofern angegeben, standardm\\xe4\\xdfig auf `true` gesetzt. Diese Wahl erlaubt die Kurzschreibweise:\\n\\n```diff\\n-<Input enabled={false} />\\n+<Input disabled />\\n```\\n\\n### Kontrollierte Komponenten\\n\\nDer \\xfcberwiegende Teil der kontrollierten Komponente wird \\xfcber die `value` und `onChange` Eigenschaften gesteuert, jedoch werden die `open` / `onClose` / `onOpen` Kombination wird f\\xfcr den Anzeigezustand verwendet.\\n\\n### boolean vs enum\\n\\nEs gibt zwei M\\xf6glichkeiten, die API f\\xfcr die Variationen einer Komponente zu entwerfen: mit einem * Booleschen Wert*; oder mit einer *Aufz\\xe4hlung (enum)*. Nehmen wir zum Beispiel einen Button, die verschiedene Typen hat. Jede Option hat ihre Vor- und Nachteile:\\n\\n- Option 1 *boolean*:\\n    \\n    ```tsx\\n    type Props = {\\n    contained: boolean;\\n    fab: boolean;\\n    };\\n    ```\\n    \\n    This API enables the shorthand notation: `<Button>`, `<Button contained />`, `<Button fab />`.\\n\\n- Option 2 *enum*:\\n    \\n    ```tsx\\n    type Props = {\\n      variant: 'text' | 'contained' | 'fab';\\n    }\\n    ```\\n    \\n    Diese API ist ausf\\xfchrlicher: `<Button>`, `<Button variant=\\\"contained\\\">`, `<Button variant=\\\"fab\\\">`.\\n    \\n    However it prevents an invalid combination from being used, bounds the number of properties exposed, and can easily support new values in the future.\\n\\nDie Komponenten der Material-UI verwenden eine Kombination der beiden Ans\\xe4tze gem\\xe4\\xdf den folgenden Regeln:\\n\\n- A *boolean* is used when **2** possible values are required.\\n- An *enum* is used when **> 2** possible values are required, or if there is the possibility that additional possible values may be required in the future.\\n\\nGoing back to the previous button example; since it requires 3 possible values, we use an *enum*.\\n\\n### Ref\\n\\nDas `ref` Element wird an das Wurzelelement weitergeleitet. This means that, without changing the rendered root element via the `component` prop, it is forwarded to the outermost DOM element which the component renders. If you pass a different component via the `component` prop, the ref will be attached to that component instead.\\n\\n## Glossar\\n\\n- **host component**: ein DOM-Knotentype im Kontext von `react-dom`, z.B. ein `'div'`. Siehe auch [React Implementation Notes](https://reactjs.org/docs/implementation-notes.html#mounting-host-elements).\\n- **host element**: in DOM-Knoten im Kontext von `react-dom` z.B. eine Instanz von `window.HTMLDivElement`.\\n- **outermost**: Die erste Komponente, wenn der Komponentenbaum von oben nach unten gelesen wird, dh die Breitensuche.\\n- ** Wurzelkomponente**: Die \\xe4u\\xdferste Komponente, die eine Hostkomponente darstellt.\\n- ** Wurzelelement**: Das \\xe4u\\xdferste Element, das eine Hostkomponente darstellt.\"},nsI6:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return c}));var o=t(\"mXGw\"),a=t.n(o),s=t(\"e+1t\"),i=t(\"kVtE\"),r=a.a.createElement,p=t(\"wwkA\"),d=t(\"x8Kh\");function c(e){var n=e.demos,t=e.docs;return r(s.a,{demos:n,docs:t,requireDemo:p})}c.getInitialProps=function(){var e=Object(i.a)({pageFilename:\"guides/api\",requireRaw:d});return{demos:e.demos,docs:e.docs}}},wwkA:function(e,n){function t(e){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id=\"wwkA\"},x8Kh:function(e,n,t){var o={\"./api-aa.md\":\"RwnX\",\"./api-de.md\":\"i73a\",\"./api-es.md\":\"Yyeh\",\"./api-fr.md\":\"xVZO\",\"./api-ja.md\":\"9qaA\",\"./api-pt.md\":\"1kFD\",\"./api-ru.md\":\"QKI6\",\"./api-zh.md\":\"W0fp\",\"./api.md\":\"Z3ot\"};function a(e){var n=s(e);return t(n)}function s(e){if(!t.o(o,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return o[e]}a.keys=function(){return Object.keys(o)},a.resolve=s,e.exports=a,a.id=\"x8Kh\"},xVZO:function(e,n){e.exports=\"# Approche de conception de l'API\\n\\n<p class=\\\"description\\\">N\\xf3s aprendemos bastante como o Material-UI \\xe9 usado e o refatoramento da v1 permitiu-nos repensar completamente o componente de API.</p>\\n\\n> Le design de l'API est difficile car vous pouvez le rendre simple mais il est en fait trompeur complexe, ou le rendre vraiment simple mais semble complexe.\\n\\n[@sebmarkbage](https://twitter.com/sebmarkbage/status/728433349337841665)\\n\\nComme Sebastian Markbage [ l'a soulign\\xe9 ](https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html) , aucune abstraction n'est sup\\xe9rieure aux mauvaises abstractions. Nous fournissons des composants de bas niveau pour optimiser les capacit\\xe9s de composition.\\n\\n## Composition\\n\\nVous avez peut-\\xeatre remarqu\\xe9 des incoh\\xe9rences dans l'API par rapport \\xe0 la composition des composants. Pour fournir une certaine transparence, nous avons utilis\\xe9 les r\\xe8gles suivantes lors de la conception de l'API :\\n\\n1. L'utilisation de la propri\\xe9t\\xe9 `children` est le moyen idiomatique pour faire la composition avec React.\\n2. Par fois, on a juste besoin d'une composition limite par enfants, par example lorsque qu'on n'a pas besoin d'autoriser la permutation d'ordre par enfant. Dans ce cas, fournir des propri\\xe9t\\xe9s explicites rend l'impl\\xe9mentation plus simple et plus performante; par example, `Tab` prend `icon` et une propri\\xe9t\\xe9 `label`.\\n3. La coh\\xe9rence des API est importante.\\n\\n## R\\xe8gles\\n\\nOutre le compromis de composition ci-dessus, nous appliquons les r\\xe8gles suivantes:\\n\\n### La propagation\\n\\nProps supplied to a component which are not explictly documented, are spread to the root element; for instance, the `className` property is applied to the root.\\n\\nMaintenant, supposons que vous vouliez d\\xe9sactiver les ondulations sur le `MenuItem`. Vous pouvez tirer parti du comportement de propagation\\xa0:\\n\\n```jsx\\n<MenuItem disableRipple />\\n```\\n\\nLa propri\\xe9t\\xe9 `disableRipple` va suivre de cette fa\\xe7on\\xa0: [`MenuItem`](/api/menu-item/) > [`ListItem`](/api/list-item/) > [`ButtonBase`](/api/button-base/).\\n\\n### Les Propri\\xe9t\\xe9s natives\\n\\nNous \\xe9vitons de documenter les propri\\xe9t\\xe9s natives support\\xe9es par le DOM, comme [` className `](/customization/components/#overriding-styles-with-class-names) .\\n\\n### Les Classes CSS\\n\\nAll components accept a [`classes`](/customization/components/#overriding-styles-with-classes) prop to customize the styles. The classes design answers two constraints: to make the classes structure as simple as possible, while sufficient to implement the Material Design specification.\\n\\n- The class applied to the root element is always called `root`.\\n- All the default styles are grouped in a single class.\\n- The classes applied to non-root elements are prefixed with the name of the element, e.g. `paperWidthXs` in the Dialog component.\\n- The variants applied by a boolean property **aren't** prefixed, e.g. the `rounded` class applied by the `rounded` property.\\n- The variants applied by an enum property **are** prefixed, e.g. the `colorPrimary` class applied by the `color=\\\"primary\\\"` property.\\n- A variant has **one level of specificity**. The `color` and `variant` properties are considered a variant. The lower the style specificity is, the simpler it is to override.\\n- We increase the specificity for a variant modifier. We already **have to do it** for the pseudo-classes (`:hover`, `:focus`, etc.). It allows much more control at the cost of more boilerplate. Hopefully, it's also more intuitive.\\n\\n```js\\nconst styles = {\\n  root: {\\n    color: green[600],\\n    '&$checked': {\\n      color: green[500],\\n    },\\n  },\\n  checked: {},\\n};\\n```\\n\\n### Nested components\\n\\nNested components inside a component have:\\n\\n- their own flattened properties when these are key to the top level component abstraction, for instance an `id` prop for the `Input` component.\\n- their own `xxxProps` property when users might need to tweak the internal render method's sub-components, for instance, exposing the `inputProps` and `InputProps` properties on components that use `Input` internally.\\n- their own `xxxComponent` property for performing component injection.\\n- their own `xxxRef` prop when you might need to perform imperative actions, for instance, exposing an `inputRef` prop to access the native `input` on the `Input` component. This helps answer the question [\\\"How can I access the DOM element?\\\"](/getting-started/faq/#how-can-i-access-the-dom-element)\\n\\n### Property naming\\n\\nThe name of a boolean property should be chosen based on the **default value**. For example, the `disabled` attribute on an input element, if supplied, defaults to `true`. This choice allows the shorthand notation:\\n\\n```diff\\n-<Input enabled={false} />\\n+<Input disabled />\\n```\\n\\n### Controlled components\\n\\nMost of the controlled component are controlled via the `value` and the `onChange` properties, however, the `open` / `onClose` / `onOpen` combination is used for display related state.\\n\\n### boolean vs enum\\n\\nThere are two options to design the API for the variations of a component: with a *boolean*; or with an *enum*. For example, let's take a button that has different types. Each option has its pros and cons:\\n\\n- Option 1 *boolean*:\\n    \\n    ```tsx\\n    type Props = {\\n    contained: boolean;\\n    fab: boolean;\\n    };\\n    ```\\n    \\n    This API enables the shorthand notation: `<Button>`, `<Button contained />`, `<Button fab />`.\\n\\n- Option 2 *enum*:\\n    \\n    ```tsx\\n    type Props = {\\n      variant: 'text' | 'contained' | 'fab';\\n    }\\n    ```\\n    \\n    This API is more verbose: `<Button>`, `<Button variant=\\\"contained\\\">`, `<Button variant=\\\"fab\\\">`.\\n    \\n    However it prevents an invalid combination from being used, bounds the number of properties exposed, and can easily support new values in the future.\\n\\nThe Material-UI components use a combination of the two approaches according to the following rules:\\n\\n- A *boolean* is used when **2** possible values are required.\\n- An *enum* is used when **> 2** possible values are required, or if there is the possibility that additional possible values may be required in the future.\\n\\nGoing back to the previous button example; since it requires 3 possible values, we use an *enum*.\\n\\n### Ref\\n\\nThe `ref` is forwarded to the root element. This means that, without changing the rendered root element via the `component` prop, it is forwarded to the outermost DOM element which the component renders. If you pass a different component via the `component` prop, the ref will be attached to that component instead.\\n\\n## Glossary\\n\\n- **host component**: a DOM node type in the context of `react-dom`, e.g. a `'div'`. See also [React Implementation Notes](https://reactjs.org/docs/implementation-notes.html#mounting-host-elements).\\n- **host element**: a DOM node in the context of `react-dom`, e.g. an instance of `window.HTMLDivElement`.\\n- **outermost**: The first component when reading the component tree from top to bottom i.e. breadth-first search.\\n- **root component**: the outermost component that renders a host component.\\n- **root element**: the outermost element that renders a host component.\"}},[[\"QWHD\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}