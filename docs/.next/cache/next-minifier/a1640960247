{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{\"1v3u\":function(e,s,n){\"use strict\";n.r(s),n.d(s,\"default\",(function(){return r}));var o=n(\"mXGw\"),a=n.n(o),t=n(\"e+1t\"),p=n(\"kVtE\"),i=a.a.createElement,l=n(\"e+o+\");function r(e){var s=e.docs;return i(t.a,{docs:s})}r.getInitialProps=function(){var e=Object(p.a)({pageFilename:\"api/button-base\",requireRaw:l});return{demos:e.demos,docs:e.docs}}},\"4+EP\":function(e,s){e.exports='---\\nfilename: /packages/material-ui/src/ButtonBase/ButtonBase.js\\n---\\n\\n\\x3c!--- This documentation is automatically generated, do not try to edit it. --\\x3e\\n\\n# ButtonBase API\\n\\n<p class=\"description\">The API documentation of the ButtonBase React component. Learn more about the props and the CSS customization points.</p>\\n\\n## Import\\n\\n```js\\nimport ButtonBase from \\'@material-ui/core/ButtonBase\\';\\n// or\\nimport { ButtonBase } from \\'@material-ui/core\\';\\n```\\n\\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\\n\\n`ButtonBase` contains as few styles as possible.\\nIt aims to be a simple building block for creating a button.\\nIt contains a load of style reset and some focus/ripple logic.\\n\\n## Component name\\n\\nThe `MuiButtonBase` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\\n\\n## Props\\n\\n| Name | Type | Default | Description |\\n|:-----|:-----|:--------|:------------|\\n| <span class=\"prop-name\">action</span> | <span class=\"prop-type\">ref</span> |  | A ref for imperative actions. It currently only supports `focusVisible()` action. |\\n| <span class=\"prop-name\">centerRipple</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the ripples will be centered. They won\\'t start at the cursor interaction position. |\\n| <span class=\"prop-name\">children</span> | <span class=\"prop-type\">node</span> |  | The content of the component. |\\n| <span class=\"prop-name\">classes</span> | <span class=\"prop-type\">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\\n| <span class=\"prop-name\">component</span> | <span class=\"prop-type\">element type</span> | <span class=\"prop-default\">\\'button\\'</span> | The component used for the root node. Either a string to use a HTML element or a component.<br>\\u26a0\\ufe0f [Needs to be able to hold a ref](/guides/composition/#caveat-with-refs). |\\n| <span class=\"prop-name\">disabled</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the base button will be disabled. |\\n| <span class=\"prop-name\">disableRipple</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the ripple effect will be disabled.<br>\\u26a0\\ufe0f Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the `focusVisibleClassName`. |\\n| <span class=\"prop-name\">disableTouchRipple</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the touch ripple effect will be disabled. |\\n| <span class=\"prop-name\">focusRipple</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the base button will have a keyboard focus ripple. |\\n| <span class=\"prop-name\">focusVisibleClassName</span> | <span class=\"prop-type\">string</span> |  | This prop can help a person know which element has the keyboard focus. The class name will be applied when the element gain the focus through a keyboard interaction. It\\'s a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo). The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md). A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components if needed. |\\n| <span class=\"prop-name\">onFocusVisible</span> | <span class=\"prop-type\">func</span> |  | Callback fired when the component is focused with a keyboard. We trigger a `onFocus` callback too. |\\n| <span class=\"prop-name\">TouchRippleProps</span> | <span class=\"prop-type\">object</span> |  | Props applied to the `TouchRipple` element. |\\n\\nThe `ref` is forwarded to the root element.\\n\\nAny other props supplied will be provided to the root element (native element).\\n\\n## CSS\\n\\n| Rule name | Global class | Description |\\n|:-----|:-------------|:------------|\\n| <span class=\"prop-name\">root</span> | <span class=\"prop-name\">.MuiButtonBase-root</span> | Styles applied to the root element.\\n| <span class=\"prop-name\">disabled</span> | <span class=\"prop-name\">.Mui-disabled</span> | Pseudo-class applied to the root element if `disabled={true}`.\\n| <span class=\"prop-name\">focusVisible</span> | <span class=\"prop-name\">.Mui-focusVisible</span> | Pseudo-class applied to the root element if keyboard focused.\\n\\nYou can override the style of the component thanks to one of these customization points:\\n\\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\\n- With a theme and an [`overrides` property](/customization/globals/#css).\\n\\nIf that\\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/ButtonBase/ButtonBase.js) for more detail.\\n\\n## Demos\\n\\n- [Buttons](/components/buttons/)\\n\\n'},BlbG:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/api-docs/button-base\",function(){return n(\"1v3u\")}])},\"e+o+\":function(e,s,n){var o={\"./button-base.md\":\"4+EP\"};function a(e){var s=t(e);return n(s)}function t(e){if(!n.o(o,e)){var s=new Error(\"Cannot find module '\"+e+\"'\");throw s.code=\"MODULE_NOT_FOUND\",s}return o[e]}a.keys=function(){return Object.keys(o)},a.resolve=t,e.exports=a,a.id=\"e+o+\"}},[[\"BlbG\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}