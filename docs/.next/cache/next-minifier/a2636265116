{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[264],{\"+oxu\":function(e,n){e.exports=\"---\\ntitle: Media queries in React for responsive design\\n---\\n\\n# useMediaQuery\\n\\n<p class=\\\"description\\\">\\u3053\\u308c\\u306f\\u3001React\\u306eCSS\\u30e1\\u30c7\\u30a3\\u30a2\\u30af\\u30a8\\u30ea\\u30d5\\u30c3\\u30af\\u3067\\u3059\\u3002 CSS\\u30e1\\u30c7\\u30a3\\u30a2\\u30af\\u30a8\\u30ea\\u3078\\u306e\\u4e00\\u81f4\\u3092\\u30ea\\u30c3\\u30b9\\u30f3\\u3057\\u307e\\u3059\\u3002 \\u30af\\u30a8\\u30ea\\u304c\\u4e00\\u81f4\\u3059\\u308b\\u304b\\u3069\\u3046\\u304b\\u306b\\u57fa\\u3065\\u3044\\u3066\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3092\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3067\\u304d\\u307e\\u3059\\u3002</p>\\n\\n\\u4e3b\\u306a\\u6a5f\\u80fd\\u306e\\u4e00\\u90e8\\uff1a\\n\\n- \\u269b\\ufe0f\\u6163\\u7528\\u7684\\u306aReact API\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002\\n- \\ud83d\\ude80\\u5b9a\\u671f\\u7684\\u306b\\u5024\\u3092\\u30dd\\u30fc\\u30ea\\u30f3\\u30b0\\u3059\\u308b\\u306e\\u3067\\u306f\\u306a\\u304f\\u3001\\u6587\\u66f8\\u3092\\u76e3\\u8996\\u3057\\u3066\\u3001\\u30e1\\u30c7\\u30a3\\u30a2\\u30fb\\u30af\\u30a8\\u30ea\\u30fc\\u304c\\u5909\\u66f4\\u3055\\u308c\\u305f\\u3068\\u304d\\u306b\\u305d\\u308c\\u3092\\u691c\\u51fa\\u3057\\u307e\\u3059\\u3002\\n- [1 kB gzipped](/size-snapshot).\\n- server\\u30b5\\u30fc\\u30d0\\u30fc\\u5074\\u306e\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3092\\u30b5\\u30dd\\u30fc\\u30c8\\u3057\\u307e\\u3059\\u3002\\n\\n## \\u5358\\u7d14\\u306a\\u30e1\\u30c7\\u30a3\\u30a2\\u30af\\u30a8\\u30ea\\n\\n\\u30d5\\u30c3\\u30af\\u306e\\u6700\\u521d\\u306e\\u5f15\\u6570\\u306b\\u30e1\\u30c7\\u30a3\\u30a2\\u30af\\u30a8\\u30ea\\u3092\\u63d0\\u4f9b\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002 The media query string can be any valid CSS media query, e.g. [`'(prefers-color-scheme: dark)'`](/customization/palette/#user-preference).\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/SimpleMediaQuery.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n\\u26a0\\ufe0f You can't use `'print'` per browsers limitation, e.g. [Firefox](https://bugzilla.mozilla.org/show_bug.cgi?id=774398).\\n\\n## Material-UI\\u306e\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u30d8\\u30eb\\u30d1\\u30fc\\u306e\\u4f7f\\u7528\\n\\nMaterial-UI\\u306e [\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u30d8\\u30eb\\u30d1\\u30fc](/customization/breakpoints/) \\u3092\\u6b21\\u306e\\u3088\\u3046\\u306b\\u4f7f\\u7528\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n```jsx\\nimport { useTheme } from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const theme = useTheme();\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ThemeHelper.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\n\\u307e\\u305f\\u306f\\u3001\\u30b3\\u30fc\\u30eb\\u30d0\\u30c3\\u30af\\u95a2\\u6570\\u3092\\u4f7f\\u7528\\u3057\\u3066\\u3001\\u6700\\u521d\\u306e\\u5f15\\u6570\\u3068\\u3057\\u3066\\u30c6\\u30fc\\u30de\\u3092\\u53d7\\u3051\\u5165\\u308c\\u308b\\u3053\\u3068\\u3082\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n```jsx\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n\\u65e2\\u5b9a\\u306e**\\u30c6\\u30fc\\u30de\\u306e\\u30b5\\u30dd\\u30fc\\u30c8\\u306f\\u3042\\u308a\\u307e\\u305b\\u3093**\\u3002\\u89aa\\u30c6\\u30fc\\u30de\\u30d7\\u30ed\\u30d0\\u30a4\\u30c0\\u306b\\u633f\\u5165\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002\\n\\n## JavaScript\\u30b7\\u30f3\\u30bf\\u30c3\\u30af\\u30b9\\u3092\\u4f7f\\u7528\\u3059\\u308b\\n\\nJavaScript\\u30aa\\u30d6\\u30b8\\u30a7\\u30af\\u30c8\\u304b\\u3089\\u30e1\\u30c7\\u30a3\\u30a2\\u30af\\u30a8\\u30ea\\u6587\\u5b57\\u5217\\u3092\\u751f\\u6210\\u3059\\u308b\\u306b\\u306f\\u3001 [json2mq](https://github.com/akiran/json2mq) \\u3092\\u4f7f\\u3048\\u307e\\u3059\\u3002\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/JavaScriptMedia.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n## \\u30c6\\u30b9\\u30c8\\n\\nYou need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\\n\\n\\u305f\\u3068\\u3048\\u3070\\u3001 [jsdom\\u306f\\u307e\\u3060\\u30b5\\u30dd\\u30fc\\u30c8\\u3057\\u3066\\u3044\\u307e\\u305b\\u3093](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html)\\u3002 \\u30dd\\u30ea\\u30d5\\u30a3\\u30eb\\u3057\\u305f\\u307b\\u3046\\u304c\\u3044\\u3044\\u3067\\u3059\\u3088\\u3002 Using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it is recommended.\\n\\n```js\\nimport mediaQuery from 'css-mediaquery';\\n\\nfunction createMatchMedia(width) {\\n  return query => ({\\n    matches: mediaQuery.match(query, { width }),\\n    addListener: () => {},\\n    removeListener: () => {},\\n  });\\n}\\n\\ndescribe('MyTests', () => {\\n  beforeAll(() => {\\n    window.matchMedia = createMatchMedia(window.innerWidth);\\n  });\\n});\\n```\\n\\n## \\u30b5\\u30fc\\u30d0\\u30fc\\u30b5\\u30a4\\u30c9\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\n\\n> \\u26a0\\ufe0f\\u30b5\\u30fc\\u30d0\\u30fc\\u5074\\u306e\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3068\\u30af\\u30e9\\u30a4\\u30a2\\u30f3\\u30c8\\u5074\\u306e\\u30e1\\u30c7\\u30a3\\u30a2\\u30af\\u30a8\\u30ea\\u306f\\u57fa\\u672c\\u7684\\u306b\\u5bfe\\u7acb\\u3057\\u3066\\u3044\\u307e\\u3059\\u3002 \\u30c8\\u30ec\\u30fc\\u30c9\\u30aa\\u30d5\\u306b\\u6ce8\\u610f\\u3057\\u3066\\u304f\\u3060\\u3055\\u3044\\u3002 \\u30b5\\u30dd\\u30fc\\u30c8\\u306f\\u90e8\\u5206\\u7684\\u306b\\u306e\\u307f\\u53ef\\u80fd\\u3067\\u3059\\u3002\\n\\nTry relying on client-side CSS media queries first. \\u305f\\u3068\\u3048\\u3070\\u3001\\n\\n- [`<Box display>`](/system/display/#hiding-elements)\\n- [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\\n- or [`<Hidden implementation=\\\"css\\\">`](/components/hidden/#css)\\n\\nIf none of the above alternatives are an option, you can proceed reading this section of the documentation.\\n\\nFirst, you need to guess the characteristics of the client request, from the server. You have the choice between using:\\n\\n- **User agent**. Parse the user agent string of the client to extract information. Using [ua-parser-js](https://github.com/faisalman/ua-parser-js) to parse the user agent is recommended.\\n- **Client hints**. Read the hints the client is sending to the server. Be aware that this feature is [not supported everywhere](https://caniuse.com/#search=client%20hint).\\n\\nFinally, you need to provide an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) to the `useMediaQuery` with the previously guessed characteristics. Using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate matchMedia is recommended.\\n\\nFor instance on the server-side:\\n\\n```js\\nimport ReactDOMServer from 'react-dom/server';\\nimport parser from 'ua-parser-js';\\nimport mediaQuery from 'css-mediaquery';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nfunction handleRender(req, res) {\\n  const deviceType = parser(req.headers['user-agent']).device.type || 'desktop';\\n  const ssrMatchMedia = query => ({\\n    matches: mediaQuery.match(query, {\\n      // The estimated CSS width of the browser.\\n      width: deviceType === 'mobile' ? '0px' : '1024px',\\n    }),\\n  });\\n\\n  const html = ReactDOMServer.renderToString(\\n    <ThemeProvider\\n      theme={{\\n        props: {\\n          // Change the default options of useMediaQuery\\n          MuiUseMediaQuery: { ssrMatchMedia },\\n        },\\n      }}\\n    >\\n      <App />\\n    </ThemeProvider>,\\n  );\\n\\n  // \\u2026\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ServerSide.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nMake sure you provide the same custom match media implementation to the client-side to guarantee a hydration match.\\n\\n## `withWidth\\uff08\\uff09`\\u304b\\u3089\\u306e\\u79fb\\u884c\\n\\n`withWidth()`\\u4e0a\\u4f4d\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306f\\u3001\\u30da\\u30fc\\u30b8\\u306e\\u753b\\u9762\\u5e45\\u3092\\u633f\\u5165\\u3057\\u307e\\u3059\\u3002 `useWidth` \\u30d5\\u30c3\\u30af\\u3067\\u540c\\u3058\\u52d5\\u4f5c\\u3092\\u518d\\u73fe\\u3067\\u304d\\u307e\\u3059\\uff1a\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/UseWidth.js\\\"}}\\n\\n## API\\n\\n### `useMediaQuery(query, [options]) => matches`\\n\\n#### \\u5f15\\u6570\\n\\n1. `query` \\uff08*String* | *Function*\\uff09\\uff1a\\u51e6\\u7406\\u3059\\u308b\\u30e1\\u30c7\\u30a3\\u30a2\\u30af\\u30a8\\u30ea\\u3092\\u8868\\u3059\\u6587\\u5b57\\u5217\\u3001\\u307e\\u305f\\u306f\\u6587\\u5b57\\u5217\\u3092\\u8fd4\\u3059\\uff08\\u30b3\\u30f3\\u30c6\\u30ad\\u30b9\\u30c8\\u5185\\u306e\\uff09\\u30c6\\u30fc\\u30de\\u3092\\u53d7\\u3051\\u5165\\u308c\\u308b\\u30b3\\u30fc\\u30eb\\u30d0\\u30c3\\u30af\\u95a2\\u6570\\u3002\\n2. `\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3` (*\\u30aa\\u30d7\\u30b8\\u30a7\\u30af\\u30c8* [\\u4efb\\u610f]): \\n  - `options.defaultMatches` \\uff08*Boolean* [optional]\\uff09\\uff1a `window.matchMedia\\uff08\\uff09` \\u306f\\u30b5\\u30fc\\u30d0\\u30fc\\u3067\\u4f7f\\u7528\\u3067\\u304d\\u306a\\u3044\\u305f\\u3081\\u3001 \\u6700\\u521d\\u306e\\u30de\\u30a6\\u30f3\\u30c8\\u6642\\u306b\\u30c7\\u30d5\\u30a9\\u30eb\\u30c8\\u306e\\u4e00\\u81f4\\u3092\\u8fd4\\u3057\\u307e\\u3059\\u3002 \\u65e2\\u5b9a\\u5024\\u306f`false`\\u3067\\u3059\\u3002\\n  - `options.matchMedia` (*Function* [optional]) You can provide your own implementation of *matchMedia*. This can be used for handling an iframe content window.\\n  - `options.noSsr` (*\\u30d6\\u30fc\\u30eb\\u5024* [\\u4efb\\u610f]): \\u30c7\\u30d5\\u30a9\\u30eb\\u30c8\\u5024 `false`. \\u30b5\\u30fc\\u30d0\\u30fc\\u5074\\u306e\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u8abf\\u6574\\u3092\\u5b9f\\u884c\\u3059\\u308b\\u306b\\u306f\\u30012\\u56de\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002 1\\u56de\\u76ee\\u306f\\u4f55\\u3082\\u306a\\u3044\\u72b6\\u614b\\u3067\\u30012\\u56de\\u76ee\\u306f\\u5b50\\u8981\\u7d20\\u3068\\u4e00\\u7dd2\\u3067\\u3059\\u3002 \\u3053\\u306e\\u30c0\\u30d6\\u30eb\\u30d1\\u30b9\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u30b5\\u30a4\\u30af\\u30eb\\u306b\\u306f\\u6b20\\u70b9\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002 \\u9045\\u3044\\u3067\\u3059\\u3002 \\u30b5\\u30fc\\u30d0\\u5074\\u3067\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3092`\\u5b9f\\u884c\\u3057\\u306a\\u3044`\\u5834\\u5408\\u306f\\u3001\\u3053\\u306e\\u30d5\\u30e9\\u30b0\\u3092`true`\\u306b\\u8a2d\\u5b9a\\u3057\\u307e\\u3059\\u3002\\n  - `options.ssrMatchMedia` (*Function* [optional]) You can provide your own implementation of *matchMedia* in a [server-side rendering context](#server-side-rendering).\\n\\nNote: You can change the default options using the [`default props`](/customization/globals/#default-props) feature of the theme with the `MuiUseMediaQuery` key.\\n\\n#### \\u623b\\u308a\\u5024\\n\\n`matches`\\uff1a\\u30c9\\u30ad\\u30e5\\u30e1\\u30f3\\u30c8\\u304c\\u73fe\\u5728\\u30e1\\u30c7\\u30a3\\u30a2\\u30af\\u30a8\\u30ea\\u3068\\u4e00\\u81f4\\u3059\\u308b\\u5834\\u5408\\u306f`true` \\u3001\\u4e00\\u81f4\\u3057\\u306a\\u3044\\u5834\\u5408\\u306f`false`\\u306b\\u306a\\u308a\\u307e\\u3059\\u3002\\n\\n#### \\u4f8b\\n\\n```jsx\\nimport React from 'react';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function SimpleMediaQuery() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n```\"},\"1NBc\":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/components/use-media-query\",function(){return t(\"g6QI\")}])},\"8O2g\":function(e,n){e.exports=\"import React from 'react';\\nimport mediaQuery from 'css-mediaquery';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n\\nexport default function ServerSide() {\\n  const ssrMatchMedia = (query) => ({\\n    matches: mediaQuery.match(query, {\\n      // The estimated CSS width of the browser.\\n      width: 800,\\n    }),\\n  });\\n\\n  return (\\n    <ThemeProvider\\n      theme={{\\n        props: {\\n          // Change the default options of useMediaQuery\\n          MuiUseMediaQuery: { ssrMatchMedia },\\n        },\\n      }}\\n    >\\n      <MyComponent />\\n    </ThemeProvider>\\n  );\\n}\\n\"},\"8QCC\":function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return m}));var r=t(\"mXGw\"),a=t.n(r),i=t(\"lTUn\"),s=t.n(i),o=t(\"h7Hf\"),d=t(\"LHO+\"),u=a.a.createElement;var c=u((function(){var e=Object(d.a)(\"(min-width:600px)\");return u(\"span\",null,\"(min-width:600px) matches: \".concat(e))}),null);function m(){return u(o.a,{theme:{props:{MuiUseMediaQuery:{ssrMatchMedia:function(e){return{matches:s.a.match(e,{width:800})}}}}}},c)}},\"9VWf\":function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return o}));var r=t(\"mXGw\"),a=t.n(r),i=t(\"LHO+\"),s=a.a.createElement;function o(){var e=Object(i.a)(\"(min-width:600px)\");return s(\"span\",null,\"(min-width:600px) matches: \".concat(e))}},\"9tue\":function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return u}));var r=t(\"mXGw\"),a=t.n(r),i=t(\"drO/\"),s=t.n(i),o=t(\"LHO+\"),d=a.a.createElement;function u(){var e=Object(o.a)(s()({minWidth:600}));return d(\"span\",null,\"{ minWidth: 600 } matches: \".concat(e))}},HRat:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return u}));var r=t(\"mXGw\"),a=t.n(r),i=t(\"drO/\"),s=t.n(i),o=t(\"LHO+\"),d=a.a.createElement;function u(){var e=Object(o.a)(s()({minWidth:600}));return d(\"span\",null,\"{ minWidth: 600 } matches: \".concat(e))}},\"K++X\":function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return h}));var r=t(\"mXGw\"),a=t.n(r),i=t(\"LMpM\"),s=t(\"mKyP\"),o=t(\"h7Hf\"),d=t(\"LHO+\"),u=a.a.createElement;var c=Object(s.a)(),m=u(o.a,{theme:c},u((function(){var e=Object(i.a)(),n=Object(d.a)(e.breakpoints.up(\"sm\"));return u(\"span\",null,\"theme.breakpoints.up('sm') matches: \".concat(n))}),null));function h(){return m}},KmPq:function(e,n){e.exports=\"import React from 'react';\\nimport mediaQuery from 'css-mediaquery';\\nimport { ThemeProvider, Theme } from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n\\nexport default function ServerSide() {\\n  const ssrMatchMedia = (query: string) => ({\\n    matches: mediaQuery.match(query, {\\n      // The estimated CSS width of the browser.\\n      width: 800,\\n    }),\\n  });\\n\\n  return (\\n    <ThemeProvider<Theme>\\n      theme={{\\n        props: {\\n          // Change the default options of useMediaQuery\\n          MuiUseMediaQuery: { ssrMatchMedia },\\n        },\\n      }}\\n    >\\n      <MyComponent />\\n    </ThemeProvider>\\n  );\\n}\\n\"},NHva:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return h}));var r=t(\"mXGw\"),a=t.n(r),i=t(\"LMpM\"),s=t(\"mKyP\"),o=t(\"h7Hf\"),d=t(\"LHO+\"),u=a.a.createElement;var c=Object(s.a)(),m=u(o.a,{theme:c},u((function(){var e=Object(i.a)(),n=Object(d.a)(e.breakpoints.up(\"sm\"));return u(\"span\",null,\"theme.breakpoints.up('sm') matches: \".concat(n))}),null));function h(){return m}},R0GA:function(e,n){e.exports=\"import React from 'react';\\nimport {\\n  createMuiTheme,\\n  ThemeProvider,\\n  useTheme,\\n} from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const theme = useTheme();\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n\\nconst theme = createMuiTheme();\\n\\nexport default function ThemeHelper() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <MyComponent />\\n    </ThemeProvider>\\n  );\\n}\\n\"},R8xx:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return m}));var r=t(\"mXGw\"),a=t.n(r),i=t(\"lTUn\"),s=t.n(i),o=t(\"h7Hf\"),d=t(\"LHO+\"),u=a.a.createElement;var c=u((function(){var e=Object(d.a)(\"(min-width:600px)\");return u(\"span\",null,\"(min-width:600px) matches: \".concat(e))}),null);function m(){return u(o.a,{theme:{props:{MuiUseMediaQuery:{ssrMatchMedia:function(e){return{matches:s.a.match(e,{width:800})}}}}}},c)}},RMZm:function(e,n){e.exports=\"---\\ntitle: React\\u4e2d\\u7684\\u5a92\\u4f53\\u67e5\\u8be2\\u7528\\u4e8e\\u54cd\\u5e94\\u5f0f\\u8bbe\\u8ba1\\n---\\n\\n# useMediaQuery\\n\\n<p class=\\\"description\\\">\\u8fd9\\u662fReact\\u7684CSS\\u5a92\\u4f53\\u67e5\\u8be2\\u94a9\\u5b50\\u3002 \\u5b83\\u4fa6\\u542c\\u4e0eCSS\\u5a92\\u4f53\\u67e5\\u8be2\\u7684\\u5339\\u914d\\u3002 \\u5b83\\u5141\\u8bb8\\u6839\\u636e\\u67e5\\u8be2\\u662f\\u5426\\u5339\\u914d\\u6765\\u5448\\u73b0\\u7ec4\\u4ef6\\u3002</p>\\n\\n\\u4e00\\u4e9b\\u91cd\\u8981\\u7279\\u70b9\\uff1a\\n\\n- \\u269b\\ufe0f\\u5b83\\u6709\\u4e00\\u4e2a\\u60ef\\u7528\\u7684React API\\u3002\\n- \\ud83d\\ude80\\u5b83\\u5177\\u6709\\u9ad8\\u6027\\u80fd\\uff0c\\u5b83\\u4f1a\\u89c2\\u5bdf\\u6587\\u6863\\u4ee5\\u68c0\\u6d4b\\u5176\\u5a92\\u4f53\\u67e5\\u8be2\\u4f55\\u65f6\\u53d1\\u751f\\u66f4\\u6539\\uff0c\\u800c\\u4e0d\\u662f\\u5b9a\\u671f\\u8f6e\\u8be2\\u503c\\u3002\\n- \\ud83d\\udce6 [1kB \\u5df2\\u538b\\u7f29\\u7684\\u5305](/size-snapshot)\\u3002\\n- \\ud83e\\udd16\\u5b83\\u652f\\u6301\\u670d\\u52a1\\u5668\\u7aef\\u6e32\\u67d3\\u3002\\n\\n## \\u7b80\\u5355\\u7684\\u5a92\\u4f53\\u67e5\\u8be2\\n\\n\\u60a8\\u5e94\\u8be5\\u4e3a\\u6302\\u94a9\\u7684\\u7b2c\\u4e00\\u4e2a\\u53c2\\u6570\\u63d0\\u4f9b\\u5a92\\u4f53\\u67e5\\u8be2\\u3002 The media query string can be any valid CSS media query, e.g. [`'(prefers-color-scheme: dark)'`](/customization/palette/#user-preference).\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/SimpleMediaQuery.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n\\u26a0\\ufe0f You can't use `'print'` per browsers limitation, e.g. [Firefox](https://bugzilla.mozilla.org/show_bug.cgi?id=774398).\\n\\n## \\u4f7f\\u7528Material-UI\\u7684\\u65ad\\u70b9\\u52a9\\u624b\\n\\nYou can use Material-UI's [breakpoint helpers](/customization/breakpoints/) as follows:\\n\\n```jsx\\nimport { useTheme } from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const theme = useTheme();\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ThemeHelper.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nAlternatively, you can use a callback function, accepting the theme as a first argument:\\n\\n```jsx\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n\\u26a0\\ufe0f There is **no default** theme support, you have to inject it in a parent theme provider.\\n\\n## \\u4f7f\\u7528JavaScript\\u8bed\\u6cd5\\n\\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/JavaScriptMedia.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n## \\u6d4b\\u8bd5\\n\\nYou need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\\n\\nFor instance, [jsdom doesn't support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). You should polyfill it. Using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it is recommended.\\n\\n```js\\nimport mediaQuery from 'css-mediaquery';\\n\\nfunction createMatchMedia(width) {\\n  return query => ({\\n    matches: mediaQuery.match(query, { width }),\\n    addListener: () => {},\\n    removeListener: () => {},\\n  });\\n}\\n\\ndescribe('MyTests', () => {\\n  beforeAll(() => {\\n    window.matchMedia = createMatchMedia(window.innerWidth);\\n  });\\n});\\n```\\n\\n## \\u670d\\u52a1\\u5668\\u7aef\\u5448\\u73b0\\n\\n> \\u26a0\\ufe0f Server-side rendering and client-side media queries are fundamentally at odds. Be aware of the tradeoff. The support can only be partial.\\n\\nTry relying on client-side CSS media queries first. For instance, you could use:\\n\\n- [`<Box display>`](/system/display/#hiding-elements)\\n- [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\\n- or [`<Hidden implementation=\\\"css\\\">`](/components/hidden/#css)\\n\\nIf none of the above alternatives are an option, you can proceed reading this section of the documentation.\\n\\nFirst, you need to guess the characteristics of the client request, from the server. You have the choice between using:\\n\\n- **User agent**. Parse the user agent string of the client to extract information. Using [ua-parser-js](https://github.com/faisalman/ua-parser-js) to parse the user agent is recommended.\\n- **Client hints**. Read the hints the client is sending to the server. Be aware that this feature is [not supported everywhere](https://caniuse.com/#search=client%20hint).\\n\\nFinally, you need to provide an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) to the `useMediaQuery` with the previously guessed characteristics. Using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate matchMedia is recommended.\\n\\nFor instance on the server-side:\\n\\n```js\\nimport ReactDOMServer from 'react-dom/server';\\nimport parser from 'ua-parser-js';\\nimport mediaQuery from 'css-mediaquery';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nfunction handleRender(req, res) {\\n  const deviceType = parser(req.headers['user-agent']).device.type || 'desktop';\\n  const ssrMatchMedia = query => ({\\n    matches: mediaQuery.match(query, {\\n      // The estimated CSS width of the browser.\\n      width: deviceType === 'mobile' ? '0px' : '1024px',\\n    }),\\n  });\\n\\n  const html = ReactDOMServer.renderToString(\\n    <ThemeProvider\\n      theme={{\\n        props: {\\n          // Change the default options of useMediaQuery\\n          MuiUseMediaQuery: { ssrMatchMedia },\\n        },\\n      }}\\n    >\\n      <App />\\n    </ThemeProvider>,\\n  );\\n\\n  // \\u2026\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ServerSide.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nMake sure you provide the same custom match media implementation to the client-side to guarantee a hydration match.\\n\\n## \\u8fc1\\u5f99\\u81ea `withWidth()`\\n\\n`withWidth()` \\u9ad8\\u9636\\u7ec4\\u4ef6\\u6ce8\\u5165\\u9875\\u9762\\u7684\\u5c4f\\u5e55\\u5bbd\\u5ea6\\u3002 \\u60a8\\u53ef\\u4ee5\\u5bf9 `useWidth` \\u94a9\\u5b50\\u91cd\\u7528\\u76f8\\u540c\\u7684\\u64cd\\u4f5c\\uff1a\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/UseWidth.js\\\"}}\\n\\n## API\\n\\n### `useMediaQuery(query, [options]) => matches`\\n\\n#### \\u53c2\\u6570\\n\\n1. `query` (*String* | *Function*): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\\n2. `options` (*Object* [optional]): \\n  - `options.defaultMatches` \\uff08*\\u5e03\\u5c14\\u503c* [optional]\\uff09\\uff1a \\u4f5c\\u4e3a `window.matchMedia()` \\u5728\\u670d\\u52a1\\u5668\\u4e0a\\u4e0d\\u53ef\\u7528\\uff0c \\u6211\\u4eec\\u5728\\u7b2c\\u4e00\\u6b21\\u5b89\\u88c5\\u65f6\\u8fd4\\u56de\\u9ed8\\u8ba4\\u5339\\u914d\\u3002 \\u9ed8\\u8ba4\\u503c\\u4e3a `false`\\u3002\\n  - `options.matchMedia` (*Function* [optional]) You can provide your own implementation of *matchMedia*. This can be used for handling an iframe content window.\\n  - `options.noSsr` (*Boolean* [optional]): \\u9ed8\\u8ba4\\u503c\\u4e3a`false`\\u3002 \\u4e3a\\u4e86\\u6267\\u884c\\u670d\\u52a1\\u5668\\u7aef\\u5448\\u73b0\\u534f\\u8c03\\uff0c\\u5b83\\u9700\\u8981\\u5448\\u73b0\\u4e24\\u6b21\\u3002 \\u7b2c\\u4e00\\u6b21\\u6ca1\\u6709\\u4efb\\u4f55\\u4e1c\\u897f\\uff0c\\u7b2c\\u4e8c\\u6b21\\u4e0e\\u5b69\\u5b50\\u4eec\\u5728\\u4e00\\u8d77\\u3002 \\u8fd9\\u79cd\\u53cc\\u904d\\u6e32\\u67d3\\u5468\\u671f\\u6709\\u4e00\\u4e2a\\u7f3a\\u70b9\\u3002 It's slower. You can set this flag to `true` if you are **not doing server-side rendering**.\\n  - `options.ssrMatchMedia` (*Function* [optional]) You can provide your own implementation of *matchMedia* in a [server-side rendering context](#server-side-rendering).\\n\\nNote: You can change the default options using the [`default props`](/customization/globals/#default-props) feature of the theme with the `MuiUseMediaQuery` key.\\n\\n#### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n` matches `\\uff1a\\u5982\\u679c\\u6587\\u6863\\u5f53\\u524d\\u80fd\\u591f\\u5339\\u914d\\u8fd9\\u4e2a\\u5a92\\u4f53\\u67e5\\u8be2\\uff0cMatches \\u662f `true` \\uff0c\\u5426\\u5219\\u4e3a `false` \\u3002\\n\\n#### \\u4f8b\\u5b50\\n\\n```jsx\\nimport React from 'react';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function SimpleMediaQuery() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n```\"},RqkM:function(e,n){e.exports=\"---\\ntitle: Medienanfragen in React f\\xfcr Responsive Design\\n---\\n\\n# useMediaQuery\\n\\n<p class=\\\"description\\\">Dies ist ein CSS-Media-Abfrage-Hook f\\xfcr React. Es wartet auf \\xdcbereinstimmungen mit einer CSS-Medienabfrage. Es erm\\xf6glicht das Rendern von Komponenten basierend darauf, ob die Abfrage \\xfcbereinstimmt oder nicht.</p>\\n\\nEinige der wichtigsten Funktionen:\\n\\n- \\u269b\\ufe0f Es verf\\xfcgt \\xfcber eine idiomatische React-API.\\n- \\ud83d\\ude80 Es ist performant. Es observiert das Dokument, welches erkennt, wenn sich die Medienabfragen \\xe4ndern, anstatt die Werte regelm\\xe4\\xdfig abzufragen.\\n- \\ud83d\\udce6 [ kB](/size-snapshot) gzipped.\\n- \\ud83e\\udd16 Es unterst\\xfctzt serverseitiges Rendering.\\n\\n## Einfache Medienabfrage\\n\\nSie sollten eine Medienabfrage f\\xfcr das erste Argument des Hooks bereitstellen. The media query string can be any valid CSS media query, e.g. [`'(prefers-color-scheme: dark)'`](/customization/palette/#user-preference).\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/SimpleMediaQuery.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n\\u26a0\\ufe0f You can't use `'print'` per browsers limitation, e.g. [Firefox](https://bugzilla.mozilla.org/show_bug.cgi?id=774398).\\n\\n## Verwenden der Haltepunkt-Helfer der Material-UI\\n\\nSie k\\xf6nnen die Material-UI [Haltepunkt-Helfer](/customization/breakpoints/) wie folgt verwenden:\\n\\n```jsx\\nimport { useTheme } from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const theme = useTheme();\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') entspricht: ${matches}`}</span>;\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ThemeHelper.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nAlternatively, you can use a callback function, accepting the theme as a first argument:\\n\\n```jsx\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n\\u26a0\\ufe0f There is **no default** theme support, you have to inject it in a parent theme provider.\\n\\n## JavaScript-Syntax verwenden\\n\\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/JavaScriptMedia.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n## Testen\\n\\nYou need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\\n\\nFor instance, [jsdom doesn't support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). Du solltest ein Polyfill benutzen. Using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it is recommended.\\n\\n```js\\nimport mediaQuery from 'css-mediaquery';\\n\\nfunction createMatchMedia(width) {\\n  return query => ({\\n    matches: mediaQuery.match(query, { width }),\\n    addListener: () => {},\\n    removeListener: () => {},\\n  });\\n}\\n\\ndescribe('MyTests', () => {\\n  beforeAll(() => {\\n    window.matchMedia = createMatchMedia(window.innerWidth);\\n  });\\n});\\n```\\n\\n## Server-Rendering\\n\\n> \\u26a0\\ufe0f Server-side rendering and client-side media queries are fundamentally at odds. Be aware of the tradeoff. The support can only be partial.\\n\\nTry relying on client-side CSS media queries first. Zum Beispiel k\\xf6nnten Sie verwenden:\\n\\n- [`<Box display>`](/system/display/#hiding-elements)\\n- [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\\n- or [`<Hidden implementation=\\\"css\\\">`](/components/hidden/#css)\\n\\nIf none of the above alternatives are an option, you can proceed reading this section of the documentation.\\n\\nFirst, you need to guess the characteristics of the client request, from the server. You have the choice between using:\\n\\n- **User Agent**. Parsen Sie den User-Agent-String des Clients, um Informationen zu extrahieren. Using [ua-parser-js](https://github.com/faisalman/ua-parser-js) to parse the user agent is recommended.\\n- **Client hints**. Read the hints the client is sending to the server. Be aware that this feature is [not supported everywhere](https://caniuse.com/#search=client%20hint).\\n\\nFinally, you need to provide an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) to the `useMediaQuery` with the previously guessed characteristics. Using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate matchMedia is recommended.\\n\\nFor instance on the server-side:\\n\\n```js\\nimport ReactDOMServer from 'react-dom/server';\\nimport parser from 'ua-parser-js';\\nimport mediaQuery from 'css-mediaquery';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nfunction handleRender(req, res) {\\n  const deviceType = parser(req.headers['user-agent']).device.type || 'desktop';\\n  const ssrMatchMedia = query => ({\\n    matches: mediaQuery.match(query, {\\n      // The estimated CSS width of the browser.\\n      width: deviceType === 'mobile' ? '0px' : '1024px',\\n    }),\\n  });\\n\\n  const html = ReactDOMServer.renderToString(\\n    <ThemeProvider\\n      theme={{\\n        props: {\\n          // Change the default options of useMediaQuery\\n          MuiUseMediaQuery: { ssrMatchMedia },\\n        },\\n      }}\\n    >\\n      <App />\\n    </ThemeProvider>,\\n  );\\n\\n  // \\u2026\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ServerSide.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nMake sure you provide the same custom match media implementation to the client-side to guarantee a hydration match.\\n\\n## Migration von `withWidth()`\\n\\nDie Komponente h\\xf6herer Ordnung `withWidth()` f\\xfcgt die Bildschirmbreite der Seite ein. Sie k\\xf6nnen dasselbe Verhalten mit einem `useWidth` Hook reproduzieren:\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/UseWidth.js\\\"}}\\n\\n## API\\n\\n### `useMediaQuery(query, [options]) => matches`\\n\\n#### Argumente\\n\\n1. `query` (*String* | *Function*): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\\n2. `options` (*Object* [optional]): \\n  - ` options.defaultMatches ` (*Boolean* [optional]): Da `window.matchMedia()` auf dem Server nicht verf\\xfcgbar ist, wird ein Standard Match zur\\xfcckgegeben. Der Standardwert ist `false`.\\n  - `options.matchMedia` (*Function* [optional]) You can provide your own implementation of *matchMedia*. This can be used for handling an iframe content window.\\n  - `options.noSsr ` (*Boolean* [optional]): Standardeinstellung ist `false`. Um den serverseitigen Renderingabgleich durchzuf\\xfchren, muss er zweimal gerendert werden. Ein erstes Mal mit nichts und ein zweites Mal mit den Kind-Elementen. Dieser Zyklus mit zwei Durchg\\xe4ngen ist mit einem Nachteil verbunden. Es ist langsamer. Sie k\\xf6nnen diese Flag auf `true` setzten, wenn Sie **nicht serverseitig** rendern.\\n  - `options.ssrMatchMedia` (*Function* [optional]) You can provide your own implementation of *matchMedia* in a [server-side rendering context](#server-side-rendering).\\n\\nNote: You can change the default options using the [`default props`](/customization/globals/#default-props) feature of the theme with the `MuiUseMediaQuery` key.\\n\\n#### R\\xfcckgabewerte\\n\\n`matches`: Match ist `true` wenn das Dokument aktuell mit der Medienabfrage \\xfcbereinstimmt, und `false` wenn dies nicht der Fall ist.\\n\\n#### Beispiele\\n\\n```jsx\\nimport React from 'react';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function SimpleMediaQuery() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n```\"},Umxo:function(e,n){e.exports=\"import React from 'react';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function SimpleMediaQuery() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n\"},VRIS:function(e,n){e.exports=\"---\\ntitle: Media queries in React for responsive design\\n---\\n\\n# useMediaQuery\\n\\n<p class=\\\"description\\\">This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.</p>\\n\\nSome of the key features:\\n\\n- \\u269b\\ufe0f It has an idiomatic React API.\\n- \\ud83d\\ude80 It's performant, it observes the document to detect when its media queries change, instead of polling the values periodically.\\n- \\ud83d\\udce6 [1 kB gzipped](/size-snapshot).\\n- \\ud83e\\udd16 It supports server-side rendering.\\n\\n## Simple media query\\n\\nYou should provide a media query to the first argument of the hook.\\nThe media query string can be any valid CSS media query, e.g. [`'(prefers-color-scheme: dark)'`](/customization/palette/#user-preference).\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/SimpleMediaQuery.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n\\u26a0\\ufe0f You can't use `'print'` per browsers limitation, e.g. [Firefox](https://bugzilla.mozilla.org/show_bug.cgi?id=774398).\\n\\n## Using Material-UI's breakpoint helpers\\n\\nYou can use Material-UI's [breakpoint helpers](/customization/breakpoints/) as follows:\\n\\n```jsx\\nimport { useTheme } from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const theme = useTheme();\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ThemeHelper.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nAlternatively, you can use a callback function, accepting the theme as a first argument:\\n\\n```jsx\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const matches = useMediaQuery((theme) => theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n\\u26a0\\ufe0f There is **no default** theme support, you have to inject it in a parent theme provider.\\n\\n## Using JavaScript syntax\\n\\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/JavaScriptMedia.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n## Testing\\n\\nYou need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\\n\\nFor instance, [jsdom doesn't support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). You should polyfill it.\\nUsing [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it is recommended.\\n\\n```js\\nimport mediaQuery from 'css-mediaquery';\\n\\nfunction createMatchMedia(width) {\\n  return (query) => ({\\n    matches: mediaQuery.match(query, {\\n      width,\\n    }),\\n    addListener: () => {},\\n    removeListener: () => {},\\n  });\\n}\\n\\ndescribe('MyTests', () => {\\n  beforeAll(() => {\\n    window.matchMedia = createMatchMedia(window.innerWidth);\\n  });\\n});\\n```\\n\\n## Server-side rendering\\n\\n> \\u26a0\\ufe0f Server-side rendering and client-side media queries are fundamentally at odds.\\n> Be aware of the tradeoff. The support can only be partial.\\n\\nTry relying on client-side CSS media queries first.\\nFor instance, you could use:\\n\\n- [`<Box display>`](/system/display/#hiding-elements)\\n- [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\\n- or [`<Hidden implementation=\\\"css\\\">`](/components/hidden/#css)\\n\\nIf none of the above alternatives are an option, you can proceed reading this section of the documentation.\\n\\nFirst, you need to guess the characteristics of the client request, from the server.\\nYou have the choice between using:\\n\\n- **User agent**. Parse the user agent string of the client to extract information. Using [ua-parser-js](https://github.com/faisalman/ua-parser-js) to parse the user agent is recommended.\\n- **Client hints**. Read the hints the client is sending to the server. Be aware that this feature is [not supported everywhere](https://caniuse.com/#search=client%20hint).\\n\\nFinally, you need to provide an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) to the `useMediaQuery` with the previously guessed characteristics.\\nUsing [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate matchMedia is recommended.\\n\\nFor instance on the server-side:\\n\\n```js\\nimport ReactDOMServer from 'react-dom/server';\\nimport parser from 'ua-parser-js';\\nimport mediaQuery from 'css-mediaquery';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nfunction handleRender(req, res) {\\n  const deviceType = parser(req.headers['user-agent']).device.type || 'desktop';\\n  const ssrMatchMedia = (query) => ({\\n    matches: mediaQuery.match(query, {\\n      // The estimated CSS width of the browser.\\n      width: deviceType === 'mobile' ? '0px' : '1024px',\\n    }),\\n  });\\n\\n  const html = ReactDOMServer.renderToString(\\n    <ThemeProvider\\n      theme={{\\n        props: {\\n          // Change the default options of useMediaQuery\\n          MuiUseMediaQuery: {\\n            ssrMatchMedia,\\n          },\\n        },\\n      }}\\n    >\\n      <App />\\n    </ThemeProvider>,\\n  );\\n\\n  // \\u2026\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ServerSide.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nMake sure you provide the same custom match media implementation to the client-side to guarantee a hydration match.\\n\\n## Migrating from `withWidth()`\\n\\nThe `withWidth()` higher-order component injects the screen width of the page.\\nYou can reproduce the same behavior with a `useWidth` hook:\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/UseWidth.js\\\"}}\\n\\n## API\\n\\n### `useMediaQuery(query, [options]) => matches`\\n\\n#### Arguments\\n\\n1. `query` (_String_ | _Function_): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\\n2. `options` (_Object_ [optional]):\\n\\n- `options.defaultMatches` (_Boolean_ [optional]):\\n  As `window.matchMedia()` is unavailable on the server,\\n  we return a default matches during the first mount. The default value is `false`.\\n- `options.matchMedia` (_Function_ [optional]): You can provide your own implementation of _matchMedia_. This can be used for handling an iframe content window.\\n- `options.noSsr` (_Boolean_ [optional]): Defaults to `false`.\\n  In order to perform the server-side rendering reconciliation, it needs to render twice.\\n  A first time with nothing and a second time with the children.\\n  This double pass rendering cycle comes with a drawback. It's slower.\\n  You can set this flag to `true` if you are **not doing server-side rendering**.\\n- `options.ssrMatchMedia` (_Function_ [optional]): You can provide your own implementation of _matchMedia_ in a [server-side rendering context](#server-side-rendering).\\n\\nNote: You can change the default options using the [`default props`](/customization/globals/#default-props) feature of the theme with the `MuiUseMediaQuery` key.\\n\\n#### Returns\\n\\n`matches`: Matches is `true` if the document currently matches the media query and `false` when it does not.\\n\\n#### Examples\\n\\n```jsx\\nimport React from 'react';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function SimpleMediaQuery() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n```\\n\"},VZYN:function(e,n){e.exports=\"import React from 'react';\\nimport {\\n  createMuiTheme,\\n  ThemeProvider,\\n  useTheme,\\n} from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const theme = useTheme();\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n\\nconst theme = createMuiTheme();\\n\\nexport default function ThemeHelper() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <MyComponent />\\n    </ThemeProvider>\\n  );\\n}\\n\"},aqrQ:function(e,n){e.exports=\"---\\ntitle: Media queries in React for responsive design\\n---\\n\\n# useMediaQuery\\n\\n<p class=\\\"description\\\">This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.</p>\\n\\nSome of the key features:\\n\\n- \\u269b\\ufe0f It has an idiomatic React API.\\n- \\ud83d\\ude80 It's performant, it observes the document to detect when its media queries change, instead of polling the values periodically.\\n- \\ud83d\\udce6 [1 kB comprimido](/size-snapshot).\\n- \\ud83e\\udd16 It supports server-side rendering.\\n\\n## Simple media query\\n\\nYou should provide a media query to the first argument of the hook. The media query string can be any valid CSS media query, e.g. [`'(prefers-color-scheme: dark)'`](/customization/palette/#user-preference).\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/SimpleMediaQuery.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n\\u26a0\\ufe0f You can't use `'print'` per browsers limitation, e.g. [Firefox](https://bugzilla.mozilla.org/show_bug.cgi?id=774398).\\n\\n## Using Material-UI's breakpoint helpers\\n\\nYou can use Material-UI's [breakpoint helpers](/customization/breakpoints/) as follows:\\n\\n```jsx\\nimport { useTheme } from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const theme = useTheme();\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ThemeHelper.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nAlternatively, you can use a callback function, accepting the theme as a first argument:\\n\\n```jsx\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n\\u26a0\\ufe0f There is **no default** theme support, you have to inject it in a parent theme provider.\\n\\n## Using JavaScript syntax\\n\\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/JavaScriptMedia.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n## Pruebas\\n\\nYou need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\\n\\nFor instance, [jsdom doesn't support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). You should polyfill it. Using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it is recommended.\\n\\n```js\\nimport mediaQuery from 'css-mediaquery';\\n\\nfunction createMatchMedia(width) {\\n  return query => ({\\n    matches: mediaQuery.match(query, { width }),\\n    addListener: () => {},\\n    removeListener: () => {},\\n  });\\n}\\n\\ndescribe('MyTests', () => {\\n  beforeAll(() => {\\n    window.matchMedia = createMatchMedia(window.innerWidth);\\n  });\\n});\\n```\\n\\n## Server-side rendering\\n\\n> \\u26a0\\ufe0f Server-side rendering and client-side media queries are fundamentally at odds. Be aware of the tradeoff. The support can only be partial.\\n\\nTry relying on client-side CSS media queries first. For instance, you could use:\\n\\n- [`<Box display>`](/system/display/#hiding-elements)\\n- [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\\n- or [`<Hidden implementation=\\\"css\\\">`](/components/hidden/#css)\\n\\nIf none of the above alternatives are an option, you can proceed reading this section of the documentation.\\n\\nFirst, you need to guess the characteristics of the client request, from the server. You have the choice between using:\\n\\n- **User agent**. Parse the user agent string of the client to extract information. Using [ua-parser-js](https://github.com/faisalman/ua-parser-js) to parse the user agent is recommended.\\n- **Client hints**. Read the hints the client is sending to the server. Be aware that this feature is [not supported everywhere](https://caniuse.com/#search=client%20hint).\\n\\nFinally, you need to provide an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) to the `useMediaQuery` with the previously guessed characteristics. Using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate matchMedia is recommended.\\n\\nFor instance on the server-side:\\n\\n```js\\nimport ReactDOMServer from 'react-dom/server';\\nimport parser from 'ua-parser-js';\\nimport mediaQuery from 'css-mediaquery';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nfunction handleRender(req, res) {\\n  const deviceType = parser(req.headers['user-agent']).device.type || 'desktop';\\n  const ssrMatchMedia = query => ({\\n    matches: mediaQuery.match(query, {\\n      // The estimated CSS width of the browser.\\n      width: deviceType === 'mobile' ? '0px' : '1024px',\\n    }),\\n  });\\n\\n  const html = ReactDOMServer.renderToString(\\n    <ThemeProvider\\n      theme={{\\n        props: {\\n          // Change the default options of useMediaQuery\\n          MuiUseMediaQuery: { ssrMatchMedia },\\n        },\\n      }}\\n    >\\n      <App />\\n    </ThemeProvider>,\\n  );\\n\\n  // \\u2026\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ServerSide.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nMake sure you provide the same custom match media implementation to the client-side to guarantee a hydration match.\\n\\n## Migrating from `withWidth()`\\n\\nThe `withWidth()` higher-order component injects the screen width of the page. You can reproduce the same behavior with a `useWidth` hook:\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/UseWidth.js\\\"}}\\n\\n## API\\n\\n### `useMediaQuery(query, [options]) => matches`\\n\\n#### Argumentos\\n\\n1. `query` (*String* | *Function*): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\\n2. `options` (*Object* [optional]): \\n  - `options.defaultMatches` (*Boolean* [optional]): As `window.matchMedia()` is unavailable on the server, we return a default matches during the first mount. The default value is `false`.\\n  - `options.matchMedia` (*Function* [optional]) You can provide your own implementation of *matchMedia*. This can be used for handling an iframe content window.\\n  - `options.noSsr` (*Boolean* [optional]): Default `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. It's slower. You can set this flag to `true` if you are **not doing server-side rendering**.\\n  - `options.ssrMatchMedia` (*Function* [optional]) You can provide your own implementation of *matchMedia* in a [server-side rendering context](#server-side-rendering).\\n\\nNote: You can change the default options using the [`default props`](/customization/globals/#default-props) feature of the theme with the `MuiUseMediaQuery` key.\\n\\n#### Devuelve\\n\\n`matches`: Matches is `true` if the document currently matches the media query and `false` when it does not.\\n\\n#### Ejemplos\\n\\n```jsx\\nimport React from 'react';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function SimpleMediaQuery() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n```\"},\"dKE/\":function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return p}));var r=t(\"0tNF\"),a=t(\"mXGw\"),i=t.n(a),s=t(\"LMpM\"),o=t(\"mKyP\"),d=t(\"h7Hf\"),u=t(\"LHO+\"),c=i.a.createElement;var m=Object(o.a)(),h=c(d.a,{theme:m},c((function(){var e=function(){var e=Object(s.a)();return Object(r.a)(e.breakpoints.keys).reverse().reduce((function(n,t){var r=Object(u.a)(e.breakpoints.up(t));return!n&&r?t:n}),null)||\"xs\"}();return c(\"span\",null,\"width: \".concat(e))}),null));function p(){return h}},\"drO/\":function(e,n,t){var r=t(\"jFWS\"),a=function(e){var n=\"\",t=Object.keys(e);return t.forEach((function(a,i){var s=e[a];(function(e){return/[height|width]$/.test(e)})(a=r(a))&&\"number\"===typeof s&&(s+=\"px\"),n+=!0===s?a:!1===s?\"not \"+a:\"(\"+a+\": \"+s+\")\",i<t.length-1&&(n+=\" and \")})),n};e.exports=function(e){var n=\"\";return\"string\"===typeof e?e:e instanceof Array?(e.forEach((function(t,r){n+=a(t),r<e.length-1&&(n+=\", \")})),n):a(e)}},fGpD:function(e,n){e.exports=\"---\\ntitle: Consulta de m\\xeddia no React para design responsivo\\n---\\n\\n# useMediaQuery\\n\\n<p class=\\\"description\\\">Este \\xe9 um hook de CSS media query para React. Ele ouve correspond\\xeancias para uma consulta de m\\xeddia no CSS. Permite a renderiza\\xe7\\xe3o de componentes com base no fato de a consulta corresponder ou n\\xe3o.</p>\\n\\nAlgumas das principais caracter\\xedsticas:\\n\\n- \\u269b\\ufe0f Tem uma API React idiom\\xe1tica.\\n- \\ud83d\\ude80 Com desempenho, ele observa o documento para detectar quando suas consultas de m\\xeddia mudam, em vez de pesquisar os valores periodicamente.\\n- \\ud83d\\udce6 [1 kB gzipped](/size-snapshot).\\n- \\ud83e\\udd16 Ele suporta a renderiza\\xe7\\xe3o do lado do servidor.\\n\\n## Consulta de m\\xeddia simples\\n\\nVoc\\xea deve fornecer uma consulta de m\\xeddia ao primeiro argumento do hook. A string de consulta de m\\xeddia pode ser qualquer consulta de m\\xeddia CSS v\\xe1lida, por exemplo [`'(prefers-color-scheme: dark)'`](/customization/palette/#user-preference).\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/SimpleMediaQuery.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n\\u26a0\\ufe0f Voc\\xea n\\xe3o pode usar `'print'` devido a limita\\xe7\\xe3o de navegadores, por exemplo, este bug [Firefox](https://bugzilla.mozilla.org/show_bug.cgi?id=774398).\\n\\n## Usando helpers de ponto de quebra do Material-UI\\n\\nVoc\\xea pode usar os [helpers de ponto de quebra](/customization/breakpoints/) do Material-UI da seguinte maneira:\\n\\n```jsx\\nimport { useTheme } from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const theme = useTheme();\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ThemeHelper.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nComo alternativa, voc\\xea pode usar uma fun\\xe7\\xe3o de retorno de chamada, aceitando o tema como um primeiro argumento:\\n\\n```jsx\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n\\u26a0\\ufe0f N\\xe3o h\\xe1 **nenhum suporte de tema padr\\xe3o**, voc\\xea precisa injet\\xe1-lo em um provedor de temas.\\n\\n## Usando a sintaxe JavaScript\\n\\nVoc\\xea pode usar [json2mq](https://github.com/akiran/json2mq) para gerar uma string de consulta de m\\xeddia a partir de um objeto JavaScript.\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/JavaScriptMedia.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n## Testando\\n\\nVoc\\xea precisa de uma implementa\\xe7\\xe3o de [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) em seu ambiente de teste.\\n\\nPor exemplo, [jsdom n\\xe3o suporta ainda](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). Voc\\xea deve usar um polyfill para isso. \\xc9 recomend\\xe1vel usar [css-mediaquery](https://github.com/ericf/css-mediaquery) para emular.\\n\\n```js\\nimport mediaQuery from 'css-mediaquery';\\n\\nfunction createMatchMedia(width) {\\n  return query => ({\\n    matches: mediaQuery.match(query, { width }),\\n    addListener: () => {},\\n    removeListener: () => {},\\n  });\\n}\\n\\ndescribe('MeusTestes', () => {\\n  beforeAll(() => {\\n    window.matchMedia = createMatchMedia(window.innerWidth);\\n  });\\n});\\n```\\n\\n## Renderiza\\xe7\\xe3o no servidor (Server-Side Rendering)\\n\\n> \\u26a0\\ufe0f Renderiza\\xe7\\xe3o do lado servidor e consultas de m\\xeddia do lado cliente s\\xe3o fundamentalmente conflitantes. Esteja ciente da escolha. O suporte s\\xf3 pode ser parcial.\\n\\nTente confiar em consultas de m\\xeddia CSS do lado do cliente primeiro. Por exemplo, voc\\xea poderia usar:\\n\\n- [`<Box display>`](/system/display/#hiding-elements)\\n- [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\\n- ou [`<Hidden implementation=\\\"css\\\">`](/components/hidden/#css)\\n\\nSe nenhuma das alternativas acima for uma op\\xe7\\xe3o, voc\\xea poder\\xe1 continuar lendo esta se\\xe7\\xe3o da documenta\\xe7\\xe3o.\\n\\nPrimeiro, voc\\xea precisa adivinhar as caracter\\xedsticas da solicita\\xe7\\xe3o do cliente, no servidor. Voc\\xea tem a op\\xe7\\xe3o entre usar:\\n\\n- **User agent**. Analise a string do user agent do cliente para extrair informa\\xe7\\xf5es. \\xc9 recomend\\xe1vel usar [ua-parser-js](https://github.com/faisalman/ua-parser-js) para analisar o user agent.\\n- **Client hints**. Leia as dicas que o cliente est\\xe1 enviando para o servidor. Esteja ciente de que esse recurso [n\\xe3o \\xe9 suportado em qualquer lugar](https://caniuse.com/#search=client%20hint).\\n\\nPor fim, voc\\xea precisa fornecer uma implementa\\xe7\\xe3o de [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) para o `useMediaQuery` com as caracter\\xedsticas adivinhadas anteriormente. \\xc9 recomend\\xe1vel usar [css-mediaquery](https://github.com/ericf/css-mediaquery) para emular o matchMedia.\\n\\nPor exemplo, no lado do servidor:\\n\\n```js\\nimport ReactDOMServer from 'react-dom/server';\\nimport parser from 'ua-parser-js';\\nimport mediaQuery from 'css-mediaquery';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nfunction handleRender(req, res) {\\n  const deviceType = parser(req.headers['user-agent']).device.type || 'desktop';\\n  const ssrMatchMedia = query => ({\\n    matches: mediaQuery.match(query, {\\n      // O CSS estimado pelo navegador.\\n      width: deviceType === 'mobile' ? '0px' : '1024px',\\n    }),\\n  });\\n\\n  const html = ReactDOMServer.renderToString(\\n    <ThemeProvider\\n      theme={{\\n        props: {\\n          // Modifica as op\\xe7\\xf5es padr\\xe3o de useMediaQuery\\n          MuiUseMediaQuery: { ssrMatchMedia },\\n        },\\n      }}\\n    >\\n      <App />\\n    </ThemeProvider>,\\n  );\\n\\n  // \\u2026\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ServerSide.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nCertifique-se de fornecer a mesma implementa\\xe7\\xe3o de m\\xeddia de correspond\\xeancia customizada para o lado do cliente para garantir uma correspond\\xeancia de hidrata\\xe7\\xe3o.\\n\\n## Migrando de `withWidth()`\\n\\nO componente de ordem superior `withWidth()` injeta a largura da tela da p\\xe1gina. Voc\\xea pode reproduzir o mesmo comportamento com o hook `useWidth`:\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/UseWidth.js\\\"}}\\n\\n## API\\n\\n### `useMediaQuery(query, [options]) => matches`\\n\\n#### Argumentos\\n\\n1. `query` (*String* | *Function*): Uma string representando a consulta de m\\xeddia a ser manipulada ou uma fun\\xe7\\xe3o de retorno de chamada aceitando o tema (no contexto) que retorna uma string.\\n2. `options` (*Object* [opcional]): \\n  - `options.defaultMatches` (*Boolean* [opcional]): Como `window.matchMedia()` n\\xe3o esta dispon\\xedvel no servidor, retornamos uma correspond\\xeancia padr\\xe3o durante a primeira montagem. O valor padr\\xe3o \\xe9 `false`.\\n  - `options.matchMedia` (*Function* [opcional]) Voc\\xea pode fornecer sua pr\\xf3pria implementa\\xe7\\xe3o de *matchMedia*. Isso pode ser usado para manipular uma janela de conte\\xfado do iframe.\\n  - `options.noSsr` (*Boolean* [opcional]): Padr\\xe3o \\xe9 `false`. Para realizar a reconcilia\\xe7\\xe3o de renderiza\\xe7\\xe3o do lado do servidor, ele precisa renderizar duas vezes. Uma primeira vez sem nada e uma segunda vez com os filhos. Este ciclo de renderiza\\xe7\\xe3o de dupla passagem tem uma desvantagem. \\xc9 mais lento. Voc\\xea pode definir esse sinalizador para `true` se voc\\xea **n\\xe3o estiver fazendo a renderiza\\xe7\\xe3o do lado do servidor**.\\n  - `options.ssrMatchMedia` (*Function* [opcional]) Voc\\xea pode fornecer sua pr\\xf3pria implementa\\xe7\\xe3o de *matchMedia* em um [contexto de renderiza\\xe7\\xe3o do lado do servidor](#server-side-rendering).\\n\\nNota: Voc\\xea pode alterar as op\\xe7\\xf5es padr\\xe3o usando [`default props`](/customization/globals/#default-props), este recurso pertence ao tema atrav\\xe9s da chave `MuiUseMediaQuery`.\\n\\n#### Retornos\\n\\n`matches`: Matches \\xe9 `true` se o documento coincidir com a consulta de m\\xeddia, e `false` quando isso n\\xe3o ocorrer.\\n\\n#### Exemplos\\n\\n```jsx\\nimport React from 'react';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function SimpleMediaQuery() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n```\"},fgV5:function(e,n){e.exports=\"---\\ntitle: Consulta de m\\xeddia no React para design responsivo\\n---\\n\\n# useMediaQuery\\n\\n<p class=\\\"description\\\">\\u042d\\u0442\\u043e \\u0445\\u0443\\u043a \\u043c\\u0435\\u0434\\u0438\\u0430-\\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0430 CSS \\u0434\\u043b\\u044f React. \\u041e\\u043d \\u043e\\u0436\\u0438\\u0434\\u0430\\u0435\\u0442(\\u0441\\u043b\\u0443\\u0448\\u0430\\u0435\\u0442) \\u0441\\u043e\\u0432\\u043f\\u0430\\u0434\\u0435\\u043d\\u0438\\u044f \\u0441 \\u043c\\u0435\\u0434\\u0438\\u0430-\\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u043e\\u043c CSS. \\u041e\\u043d \\u043f\\u043e\\u0437\\u0432\\u043e\\u043b\\u044f\\u0435\\u0442 \\u043e\\u0442\\u043e\\u0431\\u0440\\u0430\\u0436\\u0430\\u0442\\u044c \\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442\\u044b \\u0432 \\u0437\\u0430\\u0432\\u0438\\u0441\\u0438\\u043c\\u043e\\u0441\\u0442\\u0438 \\u043e\\u0442 \\u0442\\u043e\\u0433\\u043e, \\u0441\\u043e\\u043e\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441 \\u0438\\u043b\\u0438 \\u043d\\u0435\\u0442.</p>\\n\\nSome of the key features:\\n\\n- \\u269b\\ufe0f \\u0418\\u043c\\u0435\\u0435\\u0442 \\u0438\\u0434\\u0438\\u043e\\u043c\\u0430\\u0442\\u0438\\u0447\\u0435\\u0441\\u043a\\u0438\\u0439 React API.\\n- \\ud83d\\ude80 \\u041e\\u043d \\u043f\\u0440\\u043e\\u0438\\u0437\\u0432\\u043e\\u0434\\u0438\\u0442\\u0435\\u043b\\u0435\\u043d. \\u041e\\u043d \\u043d\\u0430\\u0431\\u043b\\u044e\\u0434\\u0430\\u0435\\u0442 \\u0437\\u0430 \\u0434\\u043e\\u043a\\u0443\\u043c\\u0435\\u043d\\u0442\\u043e\\u043c, \\u0447\\u0442\\u043e\\u0431\\u044b \\u043e\\u043f\\u0440\\u0435\\u0434\\u0435\\u043b\\u0438\\u0442\\u044c, \\u043a\\u043e\\u0433\\u0434\\u0430 \\u0435\\u0433\\u043e \\u043c\\u0435\\u0434\\u0438\\u0430-\\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u044b \\u0438\\u0437\\u043c\\u0435\\u043d\\u044f\\u044e\\u0442\\u0441\\u044f, \\u0432\\u043c\\u0435\\u0441\\u0442\\u043e \\u043f\\u0435\\u0440\\u0438\\u043e\\u0434\\u0438\\u0447\\u0435\\u0441\\u043a\\u043e\\u0433\\u043e \\u043e\\u043f\\u0440\\u043e\\u0441\\u0430 \\u0437\\u043d\\u0430\\u0447\\u0435\\u043d\\u0438\\u044f.\\n- 1 [1 \\u043a\\u0411 \\u0432 \\u0441\\u0436\\u0430\\u0442\\u043e\\u043c \\u0432\\u0438\\u0434\\u0435](/size-snapshot).\\n- \\ud83e\\udd16 It supports server-side rendering.\\n\\n## \\u041f\\u0440\\u043e\\u0441\\u0442\\u043e\\u0439 \\u043c\\u0435\\u0434\\u0438\\u0430-\\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\n\\n\\u0412\\u044b \\u0434\\u043e\\u043b\\u0436\\u043d\\u044b \\u043f\\u0440\\u0435\\u0434\\u043e\\u0441\\u0442\\u0430\\u0432\\u0438\\u0442\\u044c \\u043c\\u0435\\u0434\\u0438\\u0430-\\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0443 \\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u0430\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442 \\u0445\\u0443\\u043a\\u0430. The media query string can be any valid CSS media query, e.g. [`'(prefers-color-scheme: dark)'`](/customization/palette/#user-preference).\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/SimpleMediaQuery.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n\\u26a0\\ufe0f You can't use `'print'` per browsers limitation, e.g. [Firefox](https://bugzilla.mozilla.org/show_bug.cgi?id=774398).\\n\\n## \\u0418\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u043d\\u0438\\u0435 \\u043f\\u043e\\u043c\\u043e\\u0449\\u043d\\u0438\\u043a\\u043e\\u0432 \\u0442\\u043e\\u0447\\u0435\\u043a \\u043f\\u0435\\u0440\\u0435\\u043b\\u043e\\u043c\\u0430 Material-UI\\n\\n\\u0412\\u044b \\u043c\\u043e\\u0436\\u0435\\u0442\\u0435 \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u044c [\\u043f\\u043e\\u043c\\u043e\\u0449\\u043d\\u0438\\u043a\\u043e\\u0432 \\u0442\\u043e\\u0447\\u0435\\u043a \\u043f\\u0435\\u0440\\u0435\\u043b\\u043e\\u043c\\u0430 Material-UI](/customization/breakpoints/) \\u0441\\u043b\\u0435\\u0434\\u0443\\u044e\\u0449\\u0438\\u043c \\u043e\\u0431\\u0440\\u0430\\u0437\\u043e\\u043c:\\n\\n```jsx\\nimport { useTheme } from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const theme = useTheme();\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ThemeHelper.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nAlternatively, you can use a callback function, accepting the theme as a first argument:\\n\\n```jsx\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n\\u26a0\\ufe0f There is **no default** theme support, you have to inject it in a parent theme provider.\\n\\n## Using JavaScript syntax\\n\\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/JavaScriptMedia.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n## \\u0422\\u0435\\u0441\\u0442\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d\\u0438\\u0435\\n\\nYou need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\\n\\nFor instance, [jsdom doesn't support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). You should polyfill it. Using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it is recommended.\\n\\n```js\\nimport mediaQuery from 'css-mediaquery';\\n\\nfunction createMatchMedia(width) {\\n  return query => ({\\n    matches: mediaQuery.match(query, { width }),\\n    addListener: () => {},\\n    removeListener: () => {},\\n  });\\n}\\n\\ndescribe('MyTests', () => {\\n  beforeAll(() => {\\n    window.matchMedia = createMatchMedia(window.innerWidth);\\n  });\\n});\\n```\\n\\n## Server-side rendering\\n\\n> \\u26a0\\ufe0f Server-side rendering and client-side media queries are fundamentally at odds. Be aware of the tradeoff. The support can only be partial.\\n\\nTry relying on client-side CSS media queries first. For instance, you could use:\\n\\n- [`<Box display>`](/system/display/#hiding-elements)\\n- [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\\n- or [`<Hidden implementation=\\\"css\\\">`](/components/hidden/#css)\\n\\nIf none of the above alternatives are an option, you can proceed reading this section of the documentation.\\n\\nFirst, you need to guess the characteristics of the client request, from the server. You have the choice between using:\\n\\n- **User agent**. Parse the user agent string of the client to extract information. Using [ua-parser-js](https://github.com/faisalman/ua-parser-js) to parse the user agent is recommended.\\n- **Client hints**. Read the hints the client is sending to the server. Be aware that this feature is [not supported everywhere](https://caniuse.com/#search=client%20hint).\\n\\nFinally, you need to provide an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) to the `useMediaQuery` with the previously guessed characteristics. Using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate matchMedia is recommended.\\n\\nFor instance on the server-side:\\n\\n```js\\nimport ReactDOMServer from 'react-dom/server';\\nimport parser from 'ua-parser-js';\\nimport mediaQuery from 'css-mediaquery';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nfunction handleRender(req, res) {\\n  const deviceType = parser(req.headers['user-agent']).device.type || 'desktop';\\n  const ssrMatchMedia = query => ({\\n    matches: mediaQuery.match(query, {\\n      // The estimated CSS width of the browser.\\n      width: deviceType === 'mobile' ? '0px' : '1024px',\\n    }),\\n  });\\n\\n  const html = ReactDOMServer.renderToString(\\n    <ThemeProvider\\n      theme={{\\n        props: {\\n          // Change the default options of useMediaQuery\\n          MuiUseMediaQuery: { ssrMatchMedia },\\n        },\\n      }}\\n    >\\n      <App />\\n    </ThemeProvider>,\\n  );\\n\\n  // \\u2026\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ServerSide.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nMake sure you provide the same custom match media implementation to the client-side to guarantee a hydration match.\\n\\n## Migrating from `withWidth()`\\n\\nThe `withWidth()` higher-order component injects the screen width of the page. You can reproduce the same behavior with a `useWidth` hook:\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/UseWidth.js\\\"}}\\n\\n## API\\n\\n### `useMediaQuery(query, [options]) => matches`\\n\\n#### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `query` (*String* | *Function*): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\\n2. `\\u0432\\u0430\\u0440\\u0438\\u0430\\u043d\\u0442\\u044b` (*\\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u0430* [optional]): \\n  - `options.defaultMatches` (*Boolean* [optional]): As `window.matchMedia()` is unavailable on the server, we return a default matches during the first mount. The default value is `false`.\\n  - `options.matchMedia` (*Function* [optional]) You can provide your own implementation of *matchMedia*. This can be used for handling an iframe content window.\\n  - `options.noSsr` (*Boolean* [optional]): \\u041f\\u043e \\u0443\\u043c\\u043e\\u043b\\u0447\\u0430\\u043d\\u0438\\u044e - `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. It's slower. You can set this flag to `true` if you are **not doing server-side rendering**.\\n  - `options.ssrMatchMedia` (*Function* [optional]) You can provide your own implementation of *matchMedia* in a [server-side rendering context](#server-side-rendering).\\n\\nNote: You can change the default options using the [`default props`](/customization/globals/#default-props) feature of the theme with the `MuiUseMediaQuery` key.\\n\\n#### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`matches`: Matches is `true` if the document currently matches the media query and `false` when it does not.\\n\\n#### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport React from 'react';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function SimpleMediaQuery() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n```\"},g6QI:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return c}));var r=t(\"mXGw\"),a=t.n(r),i=t(\"e+1t\"),s=t(\"kVtE\"),o=a.a.createElement,d=t(\"mGuf\"),u=t(\"qZ+e\");function c(e){var n=e.demos,t=e.docs;return o(i.a,{demos:n,docs:t,requireDemo:d})}c.getInitialProps=function(){var e=Object(s.a)({pageFilename:\"components/use-media-query\",requireRaw:u});return{demos:e.demos,docs:e.docs}}},iOfD:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return p}));var r=t(\"0tNF\"),a=t(\"mXGw\"),i=t.n(a),s=t(\"LMpM\"),o=t(\"mKyP\"),d=t(\"h7Hf\"),u=t(\"LHO+\"),c=i.a.createElement;var m=Object(o.a)(),h=c(d.a,{theme:m},c((function(){var e=function(){var e=Object(s.a)();return Object(r.a)(e.breakpoints.keys).reverse().reduce((function(n,t){var r=Object(u.a)(e.breakpoints.up(t));return!n&&r?t:n}),null)||\"xs\"}();return c(\"span\",null,\"width: \".concat(e))}),null));function p(){return h}},jFWS:function(e,n){e.exports=function(e){return e.replace(/[A-Z]/g,(function(e){return\"-\"+e.toLowerCase()})).toLowerCase()}},kR10:function(e,n){e.exports=\"---\\ntitle: Media queries in React for responsive design\\n---\\n\\n# useMediaQuery\\n\\n<p class=\\\"description\\\">This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.</p>\\n\\nSome of the key features:\\n\\n- \\u269b\\ufe0f It has an idiomatic React API.\\n- \\ud83d\\ude80 It's performant, it observes the document to detect when its media queries change, instead of polling the values periodically.\\n- \\ud83d\\udce6 [1 kB gzipped](/size-snapshot).\\n- \\ud83e\\udd16 It supports server-side rendering.\\n\\n## Simple media query\\n\\nYou should provide a media query to the first argument of the hook. The media query string can be any valid CSS media query, e.g. [`'(prefers-color-scheme: dark)'`](/customization/palette/#user-preference).\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/SimpleMediaQuery.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n\\u26a0\\ufe0f You can't use `'print'` per browsers limitation, e.g. [Firefox](https://bugzilla.mozilla.org/show_bug.cgi?id=774398).\\n\\n## Using Material-UI's breakpoint helpers\\n\\nYou can use Material-UI's [breakpoint helpers](/customization/breakpoints/) as follows:\\n\\n```jsx\\nimport { useTheme } from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const theme = useTheme();\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ThemeHelper.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nAlternatively, you can use a callback function, accepting the theme as a first argument:\\n\\n```jsx\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n```\\n\\n\\u26a0\\ufe0f There is **no default** theme support, you have to inject it in a parent theme provider.\\n\\n## Using JavaScript syntax\\n\\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/JavaScriptMedia.js\\\", \\\"defaultCodeOpen\\\": true}}\\n\\n## Test\\n\\nYou need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\\n\\nFor instance, [jsdom doesn't support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). You should polyfill it. Using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it is recommended.\\n\\n```js\\nimport mediaQuery from 'css-mediaquery';\\n\\nfunction createMatchMedia(width) {\\n  return query => ({\\n    matches: mediaQuery.match(query, { width }),\\n    addListener: () => {},\\n    removeListener: () => {},\\n  });\\n}\\n\\ndescribe('MyTests', () => {\\n  beforeAll(() => {\\n    window.matchMedia = createMatchMedia(window.innerWidth);\\n  });\\n});\\n```\\n\\n## Server-side rendering\\n\\n> \\u26a0\\ufe0f Server-side rendering and client-side media queries are fundamentally at odds. Be aware of the tradeoff. The support can only be partial.\\n\\nTry relying on client-side CSS media queries first. For instance, you could use:\\n\\n- [`<Box display>`](/system/display/#hiding-elements)\\n- [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\\n- or [`<Hidden implementation=\\\"css\\\">`](/components/hidden/#css)\\n\\nIf none of the above alternatives are an option, you can proceed reading this section of the documentation.\\n\\nFirst, you need to guess the characteristics of the client request, from the server. You have the choice between using:\\n\\n- **User agent**. Parse the user agent string of the client to extract information. Using [ua-parser-js](https://github.com/faisalman/ua-parser-js) to parse the user agent is recommended.\\n- **Client hints**. Read the hints the client is sending to the server. Be aware that this feature is [not supported everywhere](https://caniuse.com/#search=client%20hint).\\n\\nFinally, you need to provide an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) to the `useMediaQuery` with the previously guessed characteristics. Using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate matchMedia is recommended.\\n\\nFor instance on the server-side:\\n\\n```js\\nimport ReactDOMServer from 'react-dom/server';\\nimport parser from 'ua-parser-js';\\nimport mediaQuery from 'css-mediaquery';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nfunction handleRender(req, res) {\\n  const deviceType = parser(req.headers['user-agent']).device.type || 'desktop';\\n  const ssrMatchMedia = query => ({\\n    matches: mediaQuery.match(query, {\\n      // The estimated CSS width of the browser.\\n      width: deviceType === 'mobile' ? '0px' : '1024px',\\n    }),\\n  });\\n\\n  const html = ReactDOMServer.renderToString(\\n    <ThemeProvider\\n      theme={{\\n        props: {\\n          // Change the default options of useMediaQuery\\n          MuiUseMediaQuery: { ssrMatchMedia },\\n        },\\n      }}\\n    >\\n      <App />\\n    </ThemeProvider>,\\n  );\\n\\n  // \\u2026\\n}\\n```\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/ServerSide.js\\\", \\\"defaultCodeOpen\\\": false}}\\n\\nMake sure you provide the same custom match media implementation to the client-side to guarantee a hydration match.\\n\\n## Migrating from `withWidth()`\\n\\nThe `withWidth()` higher-order component injects the screen width of the page. You can reproduce the same behavior with a `useWidth` hook:\\n\\n{{\\\"demo\\\": \\\"pages/components/use-media-query/UseWidth.js\\\"}}\\n\\n## API\\n\\n### `useMediaQuery(query, [options]) => matches`\\n\\n#### Param\\xe8tres\\n\\n1. `query` (*String* | *Function*): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\\n2. `options` (*Object* [optional]): \\n  - `options.defaultMatches` (*Boolean* [optional]): As `window.matchMedia()` is unavailable on the server, we return a default matches during the first mount. The default value is `false`.\\n  - `options.matchMedia` (*Function* [optional]) You can provide your own implementation of *matchMedia*. This can be used for handling an iframe content window.\\n  - `options.noSsr` (*Boolean* [optional]): Valeur par d\\xe9faut `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. It's slower. You can set this flag to `true` if you are **not doing server-side rendering**.\\n  - `options.ssrMatchMedia` (*Function* [optional]) You can provide your own implementation of *matchMedia* in a [server-side rendering context](#server-side-rendering).\\n\\nNote: You can change the default options using the [`default props`](/customization/globals/#default-props) feature of the theme with the `MuiUseMediaQuery` key.\\n\\n#### Valeur de retour\\n\\n`matches`: Matches is `true` if the document currently matches the media query and `false` when it does not.\\n\\n#### Exemples\\n\\n```jsx\\nimport React from 'react';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function SimpleMediaQuery() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n```\"},krty:function(e,n){e.exports='---\\ntitle: crwdns92704:0crwdne92704:0\\n---\\n\\n# crwdns92706:0crwdne92706:0\\n\\n<p class=\"description\">crwdns92708:0crwdne92708:0 crwdns92710:0crwdne92710:0 crwdns92712:0crwdne92712:0</p>\\n\\ncrwdns92714:0crwdne92714:0\\n\\n- crwdns92716:0crwdne92716:0\\n- crwdns92718:0crwdne92718:0\\n- crwdns92720:0crwdne92720:0\\n- crwdns92722:0crwdne92722:0\\n\\n## crwdns92724:0crwdne92724:0\\n\\ncrwdns92726:0crwdne92726:0 crwdns105931:0crwdne105931:0\\n\\ncrwdns92730:0crwdne92730:0\\n\\ncrwdns103360:0crwdne103360:0\\n\\n## crwdns92732:0crwdne92732:0\\n\\ncrwdns103362:0crwdne103362:0\\n\\n```jsx\\ncrwdns92736:0{ useTheme }crwdnd92736:0${matches}crwdne92736:0\\n```\\n\\ncrwdns104260:0crwdne104260:0\\n\\ncrwdns103366:0crwdne103366:0\\n\\n```jsx\\ncrwdns92742:0${matches}crwdne92742:0\\n```\\n\\ncrwdns103368:0crwdne103368:0\\n\\n## crwdns92746:0crwdne92746:0\\n\\ncrwdns103370:0crwdne103370:0\\n\\ncrwdns103372:0crwdne103372:0\\n\\n## crwdns101672:0crwdne101672:0\\n\\ncrwdns103374:0crwdne103374:0\\n\\ncrwdns103376:0crwdne103376:0 crwdns103378:0crwdne103378:0 crwdns103380:0crwdne103380:0\\n\\n```js\\ncrwdns92790:0{ width }crwdne92790:0\\n```\\n\\n## crwdns101682:0crwdne101682:0\\n\\n> crwdns101684:0crwdne101684:0 crwdns101686:0crwdne101686:0 crwdns101688:0crwdne101688:0\\n\\ncrwdns103382:0crwdne103382:0 crwdns103384:0crwdne103384:0\\n\\n- [`crwdns92772:0crwdne92772:0`](crwdns92770:0crwdne92770:0)\\n- [`crwdns101696:0crwdne101696:0`](crwdns101694:0crwdne101694:0)\\n- crwdns101698:0crwdne101698:0\\n\\ncrwdns103386:0crwdne103386:0\\n\\ncrwdns103388:0crwdne103388:0 crwdns103390:0crwdne103390:0\\n\\n- crwdns101706:0crwdne101706:0 crwdns101708:0crwdne101708:0 crwdns101710:0crwdne101710:0\\n- crwdns101712:0crwdne101712:0 crwdns101714:0crwdne101714:0 crwdns101716:0%20hicrwdne101716:0\\n\\ncrwdns103392:0crwdne103392:0 crwdns103394:0crwdne103394:0\\n\\ncrwdns106489:0crwdne106489:0\\n\\n```js\\ncrwdns103398:0{ ThemeProvider }crwdne103398:0\\n      crwdns101726:0crwdne101726:0 crwdns105110:0{ ssrMatchMedia }crwdne105110:0\\n```\\n\\ncrwdns106491:0crwdne106491:0\\n\\ncrwdns106493:0crwdne106493:0\\n\\n## crwdns92792:0crwdne92792:0\\n\\ncrwdns106495:0crwdne106495:0 crwdns106497:0crwdne106497:0\\n\\ncrwdns106499:0crwdne106499:0\\n\\n## crwdns92800:0crwdne92800:0\\n\\n### `crwdns92802:0[options]crwdne92802:0`\\n\\n#### crwdns92804:0crwdne92804:0\\n\\n1. crwdns92806:0crwdne92806:0\\n2. crwdns92808:0[optional]crwdne92808:0 \\n  - crwdns92810:0[optional]crwdne92810:0 crwdns92812:0crwdne92812:0\\n  - crwdns106705:0[optional]crwdne106705:0 crwdns106707:0crwdne106707:0\\n  - crwdns106709:0[optional]crwdne106709:0 crwdns106711:0crwdne106711:0 crwdns106713:0crwdne106713:0 crwdns106715:0crwdne106715:0 crwdns106717:0crwdne106717:0 crwdns106719:0crwdne106719:0\\n  - crwdns106721:0[optional]crwdne106721:0\\n\\ncrwdns106501:0crwdne106501:0\\n\\n#### crwdns92834:0crwdne92834:0\\n\\ncrwdns106503:0crwdne106503:0\\n\\n#### crwdns92838:0crwdne92838:0\\n\\n```jsx\\ncrwdns103412:0${matches}crwdne103412:0\\n```'},lTUn:function(e,n,t){\"use strict\";n.match=function(e,n){return d(e).some((function(e){var t=e.inverse,r=\"all\"===e.type||n.type===e.type;if(r&&t||!r&&!t)return!1;var a=e.expressions.every((function(e){var t=e.feature,r=e.modifier,a=e.value,i=n[t];if(!i)return!1;switch(t){case\"orientation\":case\"scan\":return i.toLowerCase()===a.toLowerCase();case\"width\":case\"height\":case\"device-width\":case\"device-height\":a=m(a),i=m(i);break;case\"resolution\":a=c(a),i=c(i);break;case\"aspect-ratio\":case\"device-aspect-ratio\":case\"device-pixel-ratio\":a=u(a),i=u(i);break;case\"grid\":case\"color\":case\"color-index\":case\"monochrome\":a=parseInt(a,10)||1,i=parseInt(i,10)||0}switch(r){case\"min\":return i>=a;case\"max\":return i<=a;default:return i===a}}));return a&&!t||!a&&t}))},n.parse=d;var r=/(?:(only|not)?\\s*([^\\s\\(\\)]+)(?:\\s*and)?\\s*)?(.+)?/i,a=/\\(\\s*([^\\s\\:\\)]+)\\s*(?:\\:\\s*([^\\s\\)]+))?\\s*\\)/,i=/^(?:(min|max)-)?(.+)/,s=/(em|rem|px|cm|mm|in|pt|pc)?$/,o=/(dpi|dpcm|dppx)?$/;function d(e){return e.split(\",\").map((function(e){var n=(e=e.trim()).match(r),t=n[1],s=n[2],o=n[3]||\"\",d={};return d.inverse=!!t&&\"not\"===t.toLowerCase(),d.type=s?s.toLowerCase():\"all\",o=o.match(/\\([^\\)]+\\)/g)||[],d.expressions=o.map((function(e){var n=e.match(a),t=n[1].toLowerCase().match(i);return{modifier:t[1],feature:t[2],value:n[2]}})),d}))}function u(e){var n,t=Number(e);return t||(t=(n=e.match(/^(\\d+)\\s*\\/\\s*(\\d+)$/))[1]/n[2]),t}function c(e){var n=parseFloat(e);switch(String(e).match(o)[1]){case\"dpcm\":return n/2.54;case\"dppx\":return 96*n;default:return n}}function m(e){var n=parseFloat(e);switch(String(e).match(s)[1]){case\"em\":case\"rem\":return 16*n;case\"cm\":return 96*n/2.54;case\"mm\":return 96*n/2.54/10;case\"in\":return 96*n;case\"pt\":return 72*n;case\"pc\":return 72*n/12;default:return n}}},\"m+D3\":function(e,n){e.exports=\"import React from 'react';\\nimport json2mq from 'json2mq';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function JavaScriptMedia() {\\n  const matches = useMediaQuery(\\n    json2mq({\\n      minWidth: 600,\\n    }),\\n  );\\n\\n  return <span>{`{ minWidth: 600 } matches: ${matches}`}</span>;\\n}\\n\"},m4R2:function(e,n){e.exports=\"import React from 'react';\\nimport {\\n  Theme,\\n  ThemeProvider,\\n  useTheme,\\n  createMuiTheme,\\n} from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\\n\\ntype BreakpointOrNull = Breakpoint | null;\\n\\n/**\\n * Be careful using this hook. It only works because the number of\\n * breakpoints in theme is static. It will break once you change the number of\\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\\n */\\nfunction useWidth() {\\n  const theme: Theme = useTheme();\\n  const keys: Breakpoint[] = [...theme.breakpoints.keys].reverse();\\n  return (\\n    keys.reduce((output: BreakpointOrNull, key: Breakpoint) => {\\n      // eslint-disable-next-line react-hooks/rules-of-hooks\\n      const matches = useMediaQuery(theme.breakpoints.up(key));\\n      return !output && matches ? key : output;\\n    }, null) || 'xs'\\n  );\\n}\\n\\nfunction MyComponent() {\\n  const width = useWidth();\\n  return <span>{`width: ${width}`}</span>;\\n}\\n\\nconst theme = createMuiTheme();\\n\\nexport default function UseWidth() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <MyComponent />\\n    </ThemeProvider>\\n  );\\n}\\n\"},mGuf:function(e,n,t){var r={\"./JavaScriptMedia.js\":\"HRat\",\"./JavaScriptMedia.tsx\":\"9tue\",\"./ServerSide.js\":\"R8xx\",\"./ServerSide.tsx\":\"8QCC\",\"./SimpleMediaQuery.js\":\"9VWf\",\"./SimpleMediaQuery.tsx\":\"o++A\",\"./ThemeHelper.js\":\"K++X\",\"./ThemeHelper.tsx\":\"NHva\",\"./UseWidth.js\":\"dKE/\",\"./UseWidth.tsx\":\"iOfD\"};function a(e){var n=i(e);return t(n)}function i(e){if(!t.o(r,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=\"mGuf\"},mw8F:function(e,n){e.exports=\"import React from 'react';\\nimport {\\n  ThemeProvider,\\n  useTheme,\\n  createMuiTheme,\\n} from '@material-ui/core/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\n/**\\n * Be careful using this hook. It only works because the number of\\n * breakpoints in theme is static. It will break once you change the number of\\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\\n */\\nfunction useWidth() {\\n  const theme = useTheme();\\n  const keys = [...theme.breakpoints.keys].reverse();\\n  return (\\n    keys.reduce((output, key) => {\\n      // eslint-disable-next-line react-hooks/rules-of-hooks\\n      const matches = useMediaQuery(theme.breakpoints.up(key));\\n      return !output && matches ? key : output;\\n    }, null) || 'xs'\\n  );\\n}\\n\\nfunction MyComponent() {\\n  const width = useWidth();\\n  return <span>{`width: ${width}`}</span>;\\n}\\n\\nconst theme = createMuiTheme();\\n\\nexport default function UseWidth() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <MyComponent />\\n    </ThemeProvider>\\n  );\\n}\\n\"},\"o++A\":function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return o}));var r=t(\"mXGw\"),a=t.n(r),i=t(\"LHO+\"),s=a.a.createElement;function o(){var e=Object(i.a)(\"(min-width:600px)\");return s(\"span\",null,\"(min-width:600px) matches: \".concat(e))}},oxla:function(e,n){e.exports=\"import React from 'react';\\nimport json2mq from 'json2mq';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function JavaScriptMedia() {\\n  const matches = useMediaQuery(\\n    json2mq({\\n      minWidth: 600,\\n    }),\\n  );\\n\\n  return <span>{`{ minWidth: 600 } matches: ${matches}`}</span>;\\n}\\n\"},\"qZ+e\":function(e,n,t){var r={\"./JavaScriptMedia.js\":\"m+D3\",\"./JavaScriptMedia.tsx\":\"oxla\",\"./ServerSide.js\":\"8O2g\",\"./ServerSide.tsx\":\"KmPq\",\"./SimpleMediaQuery.js\":\"Umxo\",\"./SimpleMediaQuery.tsx\":\"z6cy\",\"./ThemeHelper.js\":\"R0GA\",\"./ThemeHelper.tsx\":\"VZYN\",\"./UseWidth.js\":\"mw8F\",\"./UseWidth.tsx\":\"m4R2\",\"./use-media-query-aa.md\":\"krty\",\"./use-media-query-de.md\":\"RqkM\",\"./use-media-query-es.md\":\"aqrQ\",\"./use-media-query-fr.md\":\"kR10\",\"./use-media-query-ja.md\":\"+oxu\",\"./use-media-query-pt.md\":\"fGpD\",\"./use-media-query-ru.md\":\"fgV5\",\"./use-media-query-zh.md\":\"RMZm\",\"./use-media-query.md\":\"VRIS\"};function a(e){var n=i(e);return t(n)}function i(e){if(!t.o(r,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=\"qZ+e\"},z6cy:function(e,n){e.exports=\"import React from 'react';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function SimpleMediaQuery() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n\"}},[[\"1NBc\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}