{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{C8gm:function(n,a,e){var t={\"./avatar-group.md\":\"ek4T\"};function o(n){var a=s(n);return e(a)}function s(n){if(!e.o(t,n)){var a=new Error(\"Cannot find module '\"+n+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}return t[n]}o.keys=function(){return Object.keys(t)},o.resolve=s,n.exports=o,o.id=\"C8gm\"},Mcif:function(n,a,e){\"use strict\";e.r(a),e.d(a,\"default\",(function(){return c}));var t=e(\"mXGw\"),o=e.n(t),s=e(\"e+1t\"),r=e(\"kVtE\"),p=o.a.createElement,i=e(\"C8gm\");function c(n){var a=n.docs;return p(s.a,{docs:a})}c.getInitialProps=function(){var n=Object(r.a)({pageFilename:\"api/avatar-group\",requireRaw:i});return{demos:n.demos,docs:n.docs}}},ek4T:function(n,a){n.exports='---\\nfilename: /packages/material-ui-lab/src/AvatarGroup/AvatarGroup.js\\n---\\n\\n\\x3c!--- This documentation is automatically generated, do not try to edit it. --\\x3e\\n\\n# AvatarGroup API\\n\\n<p class=\"description\">The API documentation of the AvatarGroup React component. Learn more about the props and the CSS customization points.</p>\\n\\n## Import\\n\\n```js\\nimport AvatarGroup from \\'@material-ui/lab/AvatarGroup\\';\\n// or\\nimport { AvatarGroup } from \\'@material-ui/lab\\';\\n```\\n\\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\\n\\n\\n\\n## Component name\\n\\nThe `MuiAvatarGroup` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\\n\\n## Props\\n\\n| Name | Type | Default | Description |\\n|:-----|:-----|:--------|:------------|\\n| <span class=\"prop-name\">children</span> | <span class=\"prop-type\">node</span> |  | The avatars to stack. |\\n| <span class=\"prop-name\">classes</span> | <span class=\"prop-type\">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\\n| <span class=\"prop-name\">max</span> | <span class=\"prop-type\">number</span> | <span class=\"prop-default\">5</span> | Max avatars to show before +x. |\\n| <span class=\"prop-name\">spacing</span> | <span class=\"prop-type\">\\'medium\\'<br>&#124;&nbsp;\\'small\\'<br>&#124;&nbsp;number</span> | <span class=\"prop-default\">\\'medium\\'</span> | Spacing between avatars. |\\n\\nThe `ref` is forwarded to the root element.\\n\\nAny other props supplied will be provided to the root element (native element).\\n\\n## CSS\\n\\n| Rule name | Global class | Description |\\n|:-----|:-------------|:------------|\\n| <span class=\"prop-name\">root</span> | <span class=\"prop-name\">.MuiAvatarGroup-root</span> | Styles applied to the root element.\\n| <span class=\"prop-name\">avatar</span> | <span class=\"prop-name\">.MuiAvatarGroup-avatar</span> | Styles applied to the avatar elements.\\n\\nYou can override the style of the component thanks to one of these customization points:\\n\\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\\n- With a theme and an [`overrides` property](/customization/globals/#css).\\n\\nIf that\\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-lab/src/AvatarGroup/AvatarGroup.js) for more detail.\\n\\n## Demos\\n\\n- [Avatars](/components/avatars/)\\n\\n'},of2Z:function(n,a,e){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/api-docs/avatar-group\",function(){return e(\"Mcif\")}])}},[[\"of2Z\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}