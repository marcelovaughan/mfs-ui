{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{\"/TMc\":function(n,e,s){var a={\"./input-base.md\":\"xviK\"};function p(n){var e=t(n);return s(e)}function t(n){if(!s.o(a,n)){var e=new Error(\"Cannot find module '\"+n+\"'\");throw e.code=\"MODULE_NOT_FOUND\",e}return a[n]}p.keys=function(){return Object.keys(a)},p.resolve=t,n.exports=p,p.id=\"/TMc\"},\"5x7T\":function(n,e,s){\"use strict\";s.r(e),s.d(e,\"default\",(function(){return i}));var a=s(\"mXGw\"),p=s.n(a),t=s(\"e+1t\"),o=s(\"kVtE\"),r=p.a.createElement,l=s(\"/TMc\");function i(n){var e=n.docs;return r(t.a,{docs:e})}i.getInitialProps=function(){var n=Object(o.a)({pageFilename:\"api/input-base\",requireRaw:l});return{demos:n.demos,docs:n.docs}}},oYqb:function(n,e,s){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/api-docs/input-base\",function(){return s(\"5x7T\")}])},xviK:function(n,e){n.exports='---\\nfilename: /packages/material-ui/src/InputBase/InputBase.js\\n---\\n\\n\\x3c!--- This documentation is automatically generated, do not try to edit it. --\\x3e\\n\\n# InputBase API\\n\\n<p class=\"description\">The API documentation of the InputBase React component. Learn more about the props and the CSS customization points.</p>\\n\\n## Import\\n\\n```js\\nimport InputBase from \\'@material-ui/core/InputBase\\';\\n// or\\nimport { InputBase } from \\'@material-ui/core\\';\\n```\\n\\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\\n\\n`InputBase` contains as few styles as possible.\\nIt aims to be a simple building block for creating an input.\\nIt contains a load of style reset and some state logic.\\n\\n## Component name\\n\\nThe `MuiInputBase` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\\n\\n## Props\\n\\n| Name | Type | Default | Description |\\n|:-----|:-----|:--------|:------------|\\n| <span class=\"prop-name\">autoComplete</span> | <span class=\"prop-type\">string</span> |  | This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it\\'s more like an autofill. You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill). |\\n| <span class=\"prop-name\">autoFocus</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the `input` element will be focused during the first mount. |\\n| <span class=\"prop-name\">classes</span> | <span class=\"prop-type\">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\\n| <span class=\"prop-name\">color</span> | <span class=\"prop-type\">\\'primary\\'<br>&#124;&nbsp;\\'secondary\\'</span> |  | The color of the component. It supports those theme colors that make sense for this component. |\\n| <span class=\"prop-name\">defaultValue</span> | <span class=\"prop-type\">any</span> |  | The default `input` element value. Use when the component is not controlled. |\\n| <span class=\"prop-name\">disabled</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the `input` element will be disabled. |\\n| <span class=\"prop-name\">endAdornment</span> | <span class=\"prop-type\">node</span> |  | End `InputAdornment` for this component. |\\n| <span class=\"prop-name\">error</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the input will indicate an error. This is normally obtained via context from FormControl. |\\n| <span class=\"prop-name\">fullWidth</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the input will take up the full width of its container. |\\n| <span class=\"prop-name\">id</span> | <span class=\"prop-type\">string</span> |  | The id of the `input` element. |\\n| <span class=\"prop-name\">inputComponent</span> | <span class=\"prop-type\">elementType</span> | <span class=\"prop-default\">\\'input\\'</span> | The component used for the `input` element. Either a string to use a HTML element or a component. |\\n| <span class=\"prop-name\">inputProps</span> | <span class=\"prop-type\">object</span> | <span class=\"prop-default\">{}</span> | [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element. |\\n| <span class=\"prop-name\">inputRef</span> | <span class=\"prop-type\">ref</span> |  | Pass a ref to the `input` element. |\\n| <span class=\"prop-name\">margin</span> | <span class=\"prop-type\">\\'dense\\'<br>&#124;&nbsp;\\'none\\'</span> |  | If `dense`, will adjust vertical spacing. This is normally obtained via context from FormControl. |\\n| <span class=\"prop-name\">multiline</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, a textarea element will be rendered. |\\n| <span class=\"prop-name\">name</span> | <span class=\"prop-type\">string</span> |  | Name attribute of the `input` element. |\\n| <span class=\"prop-name\">onBlur</span> | <span class=\"prop-type\">func</span> |  | Callback fired when the input is blurred.<br>Notice that the first argument (event) might be undefined. |\\n| <span class=\"prop-name\">onChange</span> | <span class=\"prop-type\">func</span> |  | Callback fired when the value is changed.<br><br>**Signature:**<br>`function(event: object) => void`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.value` (string). |\\n| <span class=\"prop-name\">placeholder</span> | <span class=\"prop-type\">string</span> |  | The short hint displayed in the input before the user enters a value. |\\n| <span class=\"prop-name\">readOnly</span> | <span class=\"prop-type\">bool</span> |  | It prevents the user from changing the value of the field (not from interacting with the field). |\\n| <span class=\"prop-name\">required</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the `input` element will be required. |\\n| <span class=\"prop-name\">rows</span> | <span class=\"prop-type\">number<br>&#124;&nbsp;string</span> |  | Number of rows to display when multiline option is set to true. |\\n| <span class=\"prop-name\">rowsMax</span> | <span class=\"prop-type\">number<br>&#124;&nbsp;string</span> |  | Maximum number of rows to display when multiline option is set to true. |\\n| <span class=\"prop-name\">rowsMin</span> | <span class=\"prop-type\">number<br>&#124;&nbsp;string</span> |  | Minimum number of rows to display when multiline option is set to true. |\\n| <span class=\"prop-name\">startAdornment</span> | <span class=\"prop-type\">node</span> |  | Start `InputAdornment` for this component. |\\n| <span class=\"prop-name\">type</span> | <span class=\"prop-type\">string</span> | <span class=\"prop-default\">\\'text\\'</span> | Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types). |\\n| <span class=\"prop-name\">value</span> | <span class=\"prop-type\">any</span> |  | The value of the `input` element, required for a controlled component. |\\n\\nThe `ref` is forwarded to the root element.\\n\\nAny other props supplied will be provided to the root element (native element).\\n\\n## CSS\\n\\n| Rule name | Global class | Description |\\n|:-----|:-------------|:------------|\\n| <span class=\"prop-name\">@global</span> | | Apply global styles.\\n| <span class=\"prop-name\">root</span> | <span class=\"prop-name\">.MuiInputBase-root</span> | Styles applied to the root element.\\n| <span class=\"prop-name\">formControl</span> | <span class=\"prop-name\">.MuiInputBase-formControl</span> | Styles applied to the root element if the component is a descendant of `FormControl`.\\n| <span class=\"prop-name\">focused</span> | <span class=\"prop-name\">.Mui-focused</span> | Styles applied to the root element if the component is focused.\\n| <span class=\"prop-name\">disabled</span> | <span class=\"prop-name\">.Mui-disabled</span> | Styles applied to the root element if `disabled={true}`.\\n| <span class=\"prop-name\">adornedStart</span> | <span class=\"prop-name\">.MuiInputBase-adornedStart</span> | Styles applied to the root element if `startAdornment` is provided.\\n| <span class=\"prop-name\">adornedEnd</span> | <span class=\"prop-name\">.MuiInputBase-adornedEnd</span> | Styles applied to the root element if `endAdornment` is provided.\\n| <span class=\"prop-name\">error</span> | <span class=\"prop-name\">.Mui-error</span> | Pseudo-class applied to the root element if `error={true}`.\\n| <span class=\"prop-name\">marginDense</span> | <span class=\"prop-name\">.MuiInputBase-marginDense</span> | Styles applied to the `input` element if `margin=\"dense\"`.\\n| <span class=\"prop-name\">multiline</span> | <span class=\"prop-name\">.MuiInputBase-multiline</span> | Styles applied to the root element if `multiline={true}`.\\n| <span class=\"prop-name\">colorSecondary</span> | <span class=\"prop-name\">.MuiInputBase-colorSecondary</span> | Styles applied to the root element if the color is secondary.\\n| <span class=\"prop-name\">fullWidth</span> | <span class=\"prop-name\">.MuiInputBase-fullWidth</span> | Styles applied to the root element if `fullWidth={true}`.\\n| <span class=\"prop-name\">input</span> | <span class=\"prop-name\">.MuiInputBase-input</span> | Styles applied to the `input` element.\\n| <span class=\"prop-name\">inputMarginDense</span> | <span class=\"prop-name\">.MuiInputBase-inputMarginDense</span> | Styles applied to the `input` element if `margin=\"dense\"`.\\n| <span class=\"prop-name\">inputMultiline</span> | <span class=\"prop-name\">.MuiInputBase-inputMultiline</span> | Styles applied to the `input` element if `multiline={true}`.\\n| <span class=\"prop-name\">inputTypeSearch</span> | <span class=\"prop-name\">.MuiInputBase-inputTypeSearch</span> | Styles applied to the `input` element if `type=\"search\"`.\\n| <span class=\"prop-name\">inputAdornedStart</span> | <span class=\"prop-name\">.MuiInputBase-inputAdornedStart</span> | Styles applied to the `input` element if `startAdornment` is provided.\\n| <span class=\"prop-name\">inputAdornedEnd</span> | <span class=\"prop-name\">.MuiInputBase-inputAdornedEnd</span> | Styles applied to the `input` element if `endAdornment` is provided.\\n| <span class=\"prop-name\">inputHiddenLabel</span> | <span class=\"prop-name\">.MuiInputBase-inputHiddenLabel</span> | Styles applied to the `input` element if `hiddenLabel={true}`.\\n\\nYou can override the style of the component thanks to one of these customization points:\\n\\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\\n- With a theme and an [`overrides` property](/customization/globals/#css).\\n\\nIf that\\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/InputBase/InputBase.js) for more detail.\\n\\n## Demos\\n\\n- [Text Fields](/components/text-fields/)\\n\\n'}},[[\"oYqb\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}