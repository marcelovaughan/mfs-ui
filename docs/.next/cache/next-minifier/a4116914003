{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[306],{\"/kLV\":function(n,e){n.exports=\"# Style Library Interoperability\\n\\n<p class=\\\"description\\\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\\n\\nThis guide aims to document the most popular alternatives,\\nbut you should find that the principles applied here can be adapted to other libraries.\\nThere are examples for the following styling solutions:\\n\\n- [Plain CSS](#plain-css)\\n- [Global CSS](#global-css)\\n- [Styled Components](#styled-components)\\n- [CSS Modules](#css-modules)\\n- [Emotion](#emotion)\\n- [React JSS](#react-jss)\\n\\n## Plain CSS\\n\\nNothing fancy, just plain CSS.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\\n\\n**PlainCssButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**PlainCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButton.css';\\n\\nexport default function PlainCssButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className=\\\"button\\\">Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>{/* Your component tree.\\n      Now, you can override Material-UI's styles. */}</StylesProvider>;\\n```\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent,\\nyou will likely need to affect the Drawer's child paper element.\\nHowever, the paper is not the root element of Drawer and therefore styled-components customization as above will not work.\\nYou need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**PlainCssButtonDeep.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n.button-label {\\n  color: #fff;\\n}\\n```\\n\\n**PlainCssButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButtonDeep.css';\\n\\nexport default function PlainCssButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button\\n        classes={{\\n          root: 'button',\\n          label: 'button-label',\\n        }}\\n      >\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Global CSS\\n\\nExplicitly providing the class names to the component is too much effort?\\n[You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\\n\\n**GlobalCssButton.css**\\n\\n```css\\n.MuiButton-root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.MuiButton-root:hover {\\n  background-color: #5469d4;\\n}\\n.MuiButton-label {\\n  color: #fff;\\n}\\n```\\n\\n**GlobalCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './GlobalCssButton.css';\\n\\nexport default function GlobalCssButton() {\\n  return <Button>Customized</Button>;\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>{/* Your component tree.\\n      Now, you can override Material-UI's styles. */}</StylesProvider>;\\n```\\n\\n## Styled Components\\n\\n![stars](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star)\\n![npm](https://img.shields.io/npm/dm/styled-components.svg?)\\n\\nThe `styled()` method works perfectly on all of the components.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n`;\\n\\nexport default function StyledComponents() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`.\\nThe best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>{/* Your component tree.\\n      Now, you can override Material-UI's styles. */}</StylesProvider>;\\n```\\n\\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent,\\nyou will likely need to affect the Drawer's child paper element.\\nHowever, the paper is not the root element of Drawer and therefore styled-components customization as above will not work.\\nYou need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\\nIt also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \\\"consuming\\\" properties that should not be passed on to the underlying component.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsDeep.js\\\"}}\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .MuiButton-label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(({ color, ...other }) => (\\n  <Button classes={{ label: 'label' }} {...other} />\\n))`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\n### Theme\\n\\nMaterial-UI has a rich theme structure that you can leverage for\\nthe color manipulations, the transitions, the media queries, and more.\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\nconst StyledButton = styled(Button)`\\n  ${({ theme }) => `\\n  background-color: ${theme.palette.primary.main};\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 4px 10px;\\n  font-size: 13px;\\n  &:hover {\\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\\n  }\\n  ${theme.breakpoints.up('sm')} {\\n    font-size: 14px;\\n    padding: 7px 14px;\\n  }\\n  `}\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsTheme.js\\\"}}\\n\\n### Portals\\n\\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\\nBecause of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\\n\\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`,\\nyou will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy.\\nThe following example shows a workaround:\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Menu from '@material-ui/core/Menu';\\nimport MenuItem from '@material-ui/core/MenuItem';\\n\\nconst StyledMenu = styled(({ className, ...props }) => (\\n  <Menu {...props} classes={{ paper: className }} />\\n))`\\n  box-shadow: none;\\n  border: 1px solid #d3d4d5;\\n\\n  li {\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n  }\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsPortal.js\\\"}}\\n\\n## CSS Modules\\n\\n![stars](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\\n\\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the\\nbundling solution people are using.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\\n\\n**CssModulesButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**CssModulesButton.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButton.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className={styles.button}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>{/* Your component tree.\\n      Now, you can override Material-UI's styles. */}</StylesProvider>;\\n```\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent,\\nyou will likely need to affect the Drawer's child paper element.\\nHowever, the paper is not the root element of Drawer and therefore styled-components customization as above will not work.\\nYou need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**CssModulesButtonDeep.css**\\n\\n```css\\n.root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.root:hover {\\n  background-color: #5469d4;\\n}\\n.label {\\n  color: #fff;\\n}\\n```\\n\\n**CssModulesButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButtonDeep.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={styles}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Emotion\\n\\n![stars](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star)\\n![npm](https://img.shields.io/npm/dm/emotion.svg?)\\n\\n### The `css` prop\\n\\nEmotion's **css()** method works seamlessly with Material-UI.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionCSS.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\\n\\n```jsx\\n/** @jsx jsx */\\nimport { jsx, css } from '@emotion/core';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function EmotionCSS() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button\\n        css={css`\\n          background-color: #6772e5;\\n          color: #fff;\\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n          padding: 7px 14px;\\n          &:hover {\\n            background-color: #5469d4;\\n          }\\n        `}\\n      >\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>{/* Your component tree.\\n      Now, you can override Material-UI's styles. */}</StylesProvider>;\\n```\\n\\n### Theme\\n\\nMaterial-UI has a rich theme structure that you can leverage for\\nthe color manipulations, the transitions, the media queries, and more.\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\n<Button\\n  css={(theme) => css`\\n    background-color: ${theme.palette.primary.main};\\n    color: #fff;\\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n    padding: 4px 10px;\\n    font-size: 13px;\\n    &:hover {\\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\\n    }\\n    ${theme.breakpoints.up('sm')} {\\n      font-size: 14px;\\n      padding: 7px 14px;\\n    }\\n  `}\\n>\\n  Customized\\n</Button>\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionTheme.js\\\"}}\\n\\n### The `styled()` API\\n\\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components).\\n\"},\"1P8z\":function(n,e){n.exports=\"# Style Library Interoperability\\n\\n<p class=\\\"description\\\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\\n\\nThis guide aims to document the most popular alternatives, but you should find that the principles applied here can be adapted to other libraries. There are examples for the following styling solutions:\\n\\n- [Plain CSS](#plain-css)\\n- [\\u0413\\u043b\\u043e\\u0431\\u0430\\u043b\\u044c\\u043d\\u044b\\u0439 CSS](#global-css)\\n- [Styled Components](#styled-components)\\n- [CSS Modules](#css-modules)\\n- [Emotion](#emotion)\\n- [React JSS](#react-jss)\\n\\n## Plain CSS\\n\\nNothing fancy, just plain CSS.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\\n\\n**PlainCssButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**PlainCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButton.css';\\n\\nexport default function PlainCssButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className=\\\"button\\\">Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**PlainCssButtonDeep.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n.button-label {\\n  color: #fff;\\n}\\n```\\n\\n**PlainCssButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButtonDeep.css';\\n\\nexport default function PlainCssButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={{ root: 'button', label: 'button-label' }}>\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## \\u0413\\u043b\\u043e\\u0431\\u0430\\u043b\\u044c\\u043d\\u044b\\u0439 CSS\\n\\nExplicitly providing the class names to the component is too much effort? [You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\\n\\n**GlobalCssButton.css**\\n\\n```css\\n.MuiButton-root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.MuiButton-root:hover {\\n  background-color: #5469d4;\\n}\\n.MuiButton-label {\\n  color: #fff;\\n}\\n```\\n\\n**GlobalCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './GlobalCssButton.css';\\n\\nexport default function GlobalCssButton() {\\n  return <Button>Customized</Button>;\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n## Styled Components\\n\\n![stars](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\\n\\nThe `styled()` method works perfectly on all of the components.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n`;\\n\\nexport default function StyledComponents() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`. The best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself. It also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \\\"consuming\\\" properties that should not be passed on to the underlying component.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsDeep.js\\\"}}\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .MuiButton-label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(({ color, ...other }) => (\\n  <Button classes={{ label: 'label' }} {...other} />\\n))`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\n### Theme\\n\\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\nconst StyledButton = styled(Button)`\\n  ${({ theme }) => `\\n  background-color: ${theme.palette.primary.main};\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 4px 10px;\\n  font-size: 13px;\\n  &:hover {\\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\\n  }\\n  ${theme.breakpoints.up('sm')} {\\n    font-size: 14px;\\n    padding: 7px 14px;\\n  }\\n  `}\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsTheme.js\\\"}}\\n\\n### Portals\\n\\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Because of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\\n\\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`, you will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy. The following example shows a workaround:\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Menu from '@material-ui/core/Menu';\\nimport MenuItem from '@material-ui/core/MenuItem';\\n\\nconst StyledMenu = styled(({ className, ...props }) => (\\n  <Menu {...props} classes={{ paper: className }} />\\n))`\\n  box-shadow: none;\\n  border: 1px solid #d3d4d5;\\n\\n  li {\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n  }\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsPortal.js\\\"}}\\n\\n## CSS Modules\\n\\n![stars](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\\n\\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the bundling solution people are using.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\\n\\n**CssModulesButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**CssModulesButton.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButton.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className={styles.button}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**CssModulesButtonDeep.css**\\n\\n```css\\n.root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.root:hover {\\n  background-color: #5469d4;\\n}\\n.label {\\n  color: #fff;\\n}\\n```\\n\\n**CssModulesButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButtonDeep.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={styles}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Emotion\\n\\n![stars](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\\n\\n### The `css` prop\\n\\nEmotion's **css()** method works seamlessly with Material-UI.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionCSS.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\\n\\n```jsx\\n/** @jsx jsx */\\nimport { jsx, css } from '@emotion/core';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function EmotionCSS() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button\\n        css={css`\\n          background-color: #6772e5;\\n          color: #fff;\\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n          padding: 7px 14px;\\n          &:hover {\\n            background-color: #5469d4;\\n          }\\n        `}\\n      >\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Theme\\n\\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\n<Button\\n  css={theme => css`\\n    background-color: ${theme.palette.primary.main};\\n    color: #fff;\\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n    padding: 4px 10px;\\n    font-size: 13px;\\n    &:hover {\\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\\n    }\\n    ${theme.breakpoints.up('sm')} {\\n      font-size: 14px;\\n      padding: 7px 14px;\\n    }\\n  `}\\n>\\n  Customized\\n</Button>\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionTheme.js\\\"}}\\n\\n### The `styled()` API\\n\\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components).\"},\"3IaU\":function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return f}));var o=t(\"kGIj\"),s=t(\"mXGw\"),r=t.n(s),a=t(\"UutA\"),i=t(\"WKBU\"),l=t(\"mKyP\"),d=t(\"cYeA\"),c=t(\"h7Hf\"),u=t(\"O8uh\"),p=r.a.createElement;function m(){var n=Object(o.a)([\"\\n  \",\"\\n\"]);return m=function(){return n},n}var h=Object(l.a)({palette:{primary:{main:\"#6772e5\"}}}),y=Object(a.b)(u.a)(m(),(function(n){var e=n.theme;return\"\\n  background-color: \".concat(e.palette.primary.main,\";\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 4px 10px;\\n  font-size: 13px;\\n  &:hover {\\n    background-color: \").concat(Object(d.darken)(e.palette.primary.main,.2),\";\\n  }\\n  \").concat(e.breakpoints.up(\"sm\"),\" {\\n    font-size: 14px;\\n    padding: 7px 14px;\\n  }\\n  \")})),b=p(i.a,null,p(c.a,{theme:h},p(a.a,{theme:h},p(u.a,null,\"Default\"),p(y,null,\"Customized\"))));function f(){return b}},5893:function(n,e,t){\"use strict\";t.d(e,\"a\",(function(){return u}));var o=t(\"OvAC\"),s=t.n(o),r=t(\"mXGw\"),a=t(\"aD51\"),i=t(\"kgi3\");t(\"8VmE\"),t(\"GeWT\");function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}var d=function(n,e){return\"function\"===typeof e?e(n):function(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(t,!0).forEach((function(e){s()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(t).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}({},n,{},e)},c=Object(i.a)((function(n){return Object(i.a)((function(e){return d(n,e)}))})),u=function(n){return Object(r.createElement)(a.a.Consumer,null,(function(e){return n.theme!==e&&(e=c(e)(n.theme)),Object(r.createElement)(a.a.Provider,{value:e},n.children)}))}},\"61z2\":function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return y}));var o=t(\"kGIj\"),s=t(\"mXGw\"),r=t.n(s),a=t(\"aD51\"),i=t(\"O8uh\"),l=t(\"5893\"),d=t(\"mKyP\"),c=t(\"h7Hf\"),u=t(\"cYeA\");r.a.createElement;function p(){var n=Object(o.a)([\"\\n            background-color: \",\";\\n            color: #fff;\\n            box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11),\\n              0 1px 3px rgba(0, 0, 0, 0.08);\\n            padding: 4px 10px;\\n            font-size: 13px;\\n            &:hover {\\n              background-color: \",\";\\n            }\\n            \",\" {\\n              font-size: 14px;\\n              padding: 7px 14px;\\n            }\\n          \"]);return p=function(){return n},n}var m=Object(d.a)({palette:{primary:{main:\"#6772e5\"}}}),h=Object(a.c)(i.a,null,\"Default\");function y(){return Object(a.c)(c.a,{theme:m},Object(a.c)(l.a,{theme:m},h,Object(a.c)(i.a,{css:function(n){return Object(a.b)(p(),n.palette.primary.main,Object(u.darken)(n.palette.primary.main,.2),n.breakpoints.up(\"sm\"))}},\"Customized\")))}},\"8S9M\":function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return c}));var o=t(\"kGIj\"),s=t(\"mXGw\"),r=t.n(s),a=t(\"aD51\"),i=t(\"O8uh\");r.a.createElement;function l(){var n=Object(o.a)([\"\\n          background-color: #6772e5;\\n          color: #fff;\\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11),\\n            0 1px 3px rgba(0, 0, 0, 0.08);\\n          padding: 7px 14px;\\n          &:hover {\\n            background-color: #5469d4;\\n          }\\n        \"]);return l=function(){return n},n}var d=Object(a.c)(i.a,null,\"Default\");function c(){return Object(a.c)(\"div\",null,d,Object(a.c)(i.a,{css:Object(a.b)(l())},\"Customized\"))}},\"8VmE\":function(n,e){function t(){return n.exports=t=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n},t.apply(this,arguments)}n.exports=t},\"A/oB\":function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return m}));var o=t(\"kGIj\"),s=t(\"mXGw\"),r=t.n(s),a=t(\"UutA\"),i=t(\"O8uh\"),l=t(\"WKBU\"),d=r.a.createElement;function c(){var n=Object(o.a)([\"\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n\"]);return c=function(){return n},n}var u=Object(a.b)(i.a)(c()),p=d(l.a,null,d(i.a,null,\"Default\"),d(u,null,\"Customized\"));function m(){return p}},A2u3:function(n,e){n.exports=\"# Interoperabilidade da Biblioteca de Estilo\\n\\n<p class=\\\"description\\\">Enquanto voc\\xea pode usar a solu\\xe7\\xe3o de estilo baseada em JSS fornecida pelo Material-UI para estilizar sua aplica\\xe7\\xe3o, voc\\xea tamb\\xe9m pode usar o que voc\\xea j\\xe1 conhece e ama (desde CSS simples a styled-components).</p>\\n\\nEste guia tem como objetivo documentar as alternativas mais populares, mas voc\\xea deve descobrir que os princ\\xedpios aplicados aqui podem ser adaptados para outras bibliotecas. Existem exemplos para as seguintes solu\\xe7\\xf5es de estilo:\\n\\n- [CSS puro](#plain-css)\\n- [CSS global](#global-css)\\n- [Styled Components](#global-css)\\n- [M\\xf3dulos CSS](#styled-components)\\n- [Emotion](#css-modules)\\n- [React JSS](#react-jss)\\n\\n## CSS puro\\n\\nNada extravagante, apenas CSS.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Bot\\xe3o editar](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\\n\\n**PlainCssButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**PlainCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButton.css';\\n\\nexport default function PlainCssButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className=\\\"button\\\">Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlando prioridade \\u26a0\\ufe0f\\n\\n**Nota:** O JSS injeta seus estilos na parte inferior do `<head>`. Se voc\\xea n\\xe3o quiser marcar atributos de estilo com **!important**, voc\\xea precisa alterar [a ordem de inje\\xe7\\xe3o do CSS](/styles/advanced/#css-injection-order), como na demonstra\\xe7\\xe3o:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Sua \\xe1rvore de componentes.\\n      Agora, voc\\xea pode sobrescrever os estilos do Material-UI. */}\\n</StylesProvider>\\n```\\n\\n### Elementos mais profundos\\n\\nSe voc\\xea tentar estilizar um Drawer com variante permanente, provavelmente precisar\\xe1 afetar o elemento Paper, elemento filho do Drawer. No entanto, o paper n\\xe3o \\xe9 o elemento raiz do Drawer e, portanto, a customiza\\xe7\\xe3o de styled-components como acima n\\xe3o funcionar\\xe1. Voc\\xea precisa usar a API [`classes`](/styles/advanced/#overriding-styles-classes-prop) do Material-UI.\\n\\nO exemplo a seguir sobrescreve o estilo de `label` e `Button`, al\\xe9m dos estilos customizados no pr\\xf3prio bot\\xe3o.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**PlainCssButtonDeep.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n.button-label {\\n  color: #fff;\\n}\\n```\\n\\n**PlainCssButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButtonDeep.css';\\n\\nexport default function PlainCssButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={{ root: 'button', label: 'button-label' }}>\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## CSS global\\n\\nFornecer explicitamente os nomes das classes ao componente \\xe9 um esfor\\xe7o excessivo? [Voc\\xea pode segmentar os nomes de classe gerados por Material-UI](/styles/advanced/#with-material-ui-core).\\n\\n[![Bot\\xe3o editar](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\\n\\n**GlobalCssButton.css**\\n\\n```css\\n.MuiButton-root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.MuiButton-root:hover {\\n  background-color: #5469d4;\\n}\\n.MuiButton-label {\\n  color: #fff;\\n}\\n```\\n\\n**GlobalCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './GlobalCssButton.css';\\n\\nexport default function GlobalCssButton() {\\n  return <Button>Customized</Button>;\\n}\\n```\\n\\n### Controlar prioridade \\u26a0\\ufe0f\\n\\n**Nota:** O JSS injeta seus estilos na parte inferior do `<head>`. Se voc\\xea n\\xe3o quiser marcar atributos de estilo com **!important**, voc\\xea precisa alterar [a ordem de inje\\xe7\\xe3o do CSS](/styles/advanced/#css-injection-order), como na demonstra\\xe7\\xe3o:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Sua \\xe1rvore de componentes.\\n      Agora, voc\\xea pode sobrescrever os estilos do Material-UI. */}\\n</StylesProvider>\\n```\\n\\n## Styled Components\\n\\n![estrelas](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\\n\\nO m\\xe9todo `styled()` funciona perfeitamente em todos os componentes.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Bot\\xe3o editar](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n`;\\n\\nexport default function StyledComponents() {\\n  return (\\n    <div>\\n      <Button>Padr\\xe3o</Button>\\n      <StyledButton> Customizado</StyledButton>\\n    </div>\\n  );\\n}\\n\\n```\\n\\n### Controlando prioridade \\u26a0\\ufe0f\\n\\n**Nota:** Ambos, styled-components e JSS injetam seus estilos na parte inferior do `<head>`. A melhor abordagem para garantir que os estilos do styled-components sejam carregados por \\xfaltimo, \\xe9 alterar [a ordem de inje\\xe7\\xe3o do CSS](/styles/advanced/#css-injection-order), como na demonstra\\xe7\\xe3o:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Sua \\xe1rvore de componentes.\\n      Agora, voc\\xea pode sobrescrever os estilos do Material-UI. */}\\n</StylesProvider>\\n```\\n\\nOutra abordagem \\xe9 usar os caracteres `&&` em styled-components para [aumentar a especificidade](https://www.styled-components.com/docs/advanced#issues-with-specificity) repetindo o nome da classe. Evite o uso de `!important`.\\n\\n### Elementos mais profundos\\n\\nSe voc\\xea tentar estilizar um Drawer com variante permanente, provavelmente precisar\\xe1 afetar o elemento Paper, elemento filho do Drawer. No entanto, o paper n\\xe3o \\xe9 o elemento raiz do Drawer e, portanto, a customiza\\xe7\\xe3o de styled-components como acima n\\xe3o funcionar\\xe1. Voc\\xea precisa usar a API [`classes`](/styles/advanced/#overriding-styles-classes-prop) do Material-UI.\\n\\nO exemplo a seguir sobrescreve o estilo de `label` e `Button`, al\\xe9m dos estilos customizados no pr\\xf3prio bot\\xe3o. Tamb\\xe9m funciona como solu\\xe7\\xe3o de contorno [para este problema com styled-components](https://github.com/styled-components/styled-components/issues/439), por \\\"consumir\\\" propriedades que n\\xe3o devem ser passadas para o componente subjacente.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsDeep.js\\\"}}\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .MuiButton-label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Padr\\xe3o</Button>\\n      <StyledButton>Customizado</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\nA demonstra\\xe7\\xe3o acima depende [doa valores padr\\xe3o de `classes`](/styles/advanced/#with-material-ui-core), mas voc\\xea pode fornecer seu pr\\xf3prio nome de classe: `.label`.\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(({ color, ...other }) => (\\n  <Button classes={{ label: 'label' }} {...other} />\\n))`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Padr\\xe3o</Button>\\n      <StyledButton>Customizado</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\n### Tema\\n\\nMaterial-UI tem uma estrutura de tema rica, que voc\\xea pode aproveitar para manipula\\xe7\\xf5es de cores, transi\\xe7\\xf5es, consultas de m\\xeddia e muito mais.\\n\\nIncentivamos a compartilhar o mesmo objeto de tema entre Material-UI e seus estilos.\\n\\n```jsx\\nconst StyledButton = styled(Button)`\\n  ${({ theme }) => `\\n  background-color: ${theme.palette.primary.main};\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 4px 10px;\\n  font-size: 13px;\\n  &:hover {\\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\\n  }\\n  ${theme.breakpoints.up('sm')} {\\n    font-size: 14px;\\n    padding: 7px 14px;\\n  }\\n  `}\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsTheme.js\\\"}}\\n\\n### Portal\\n\\nO [Portal](/components/portal/) fornece uma maneira de primeira classe para renderizar filhos em um n\\xf3 DOM que existe fora da hierarquia DOM do componente pai. Devido a maneira como o escopo de CSS do styled-components funciona, voc\\xea pode encontrar problemas nos quais o estilo n\\xe3o \\xe9 aplicado.\\n\\nPor exemplo, se voc\\xea tentar estilizar o [Menu](/components/menus/) de um componente [Select](/components/selects/) usando a propriedade `MenuProps`, voc\\xea precisar\\xe1 passar a propriedade `className` para o elemento que est\\xe1 sendo renderizado fora de sua hierarquia DOM. O exemplo a seguir mostra uma solu\\xe7\\xe3o alternativa:\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Menu from '@material-ui/core/Menu';\\nimport MenuItem from '@material-ui/core/MenuItem';\\n\\nconst StyledMenu = styled(({ className, ...props }) => (\\n  <Menu {...props} classes={{ paper: className }} />\\n))`\\n  box-shadow: none;\\n  border: 1px solid #d3d4d5;\\n\\n  li {\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n  }\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsPortal.js\\\"}}\\n\\n## M\\xf3dulos CSS\\n\\n![estrelas](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\\n\\n\\xc9 dif\\xedcil saber a participa\\xe7\\xe3o de mercado [nesta solu\\xe7\\xe3o de estilo](https://github.com/css-modules/css-modules), pois \\xe9 dependente da solu\\xe7\\xe3o de empacotamento que as pessoas est\\xe3o usando.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Bot\\xe3o editar](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\\n\\n**CssModulesButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**CssModulesButton.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel ou qualquer outro ir\\xe1 injetar o CSS na p\\xe1gina\\nimport styles from './CssModulesButton.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButton() {\\n  return (\\n    <div>\\n      <Button>Padr\\xe3o</Button>\\n      <Button className={styles.button}>Customizado</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlando prioridade \\u26a0\\ufe0f\\n\\n**Nota:** O JSS injeta seus estilos na parte inferior do `<head>`. Se voc\\xea n\\xe3o quiser marcar atributos de estilo com **!important**, voc\\xea precisa alterar [a ordem de inje\\xe7\\xe3o do CSS](/styles/advanced/#css-injection-order), como na demonstra\\xe7\\xe3o:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Sua \\xe1rvore de componentes.\\n      Agora, voc\\xea pode sobrescrever os estilos do Material-UI. */}\\n</StylesProvider>\\n```\\n\\n### Elementos mais profundos\\n\\nSe voc\\xea tentar estilizar um Drawer com variante permanente, provavelmente precisar\\xe1 afetar o elemento Paper, elemento filho do Drawer. No entanto, o paper n\\xe3o \\xe9 o elemento raiz do Drawer e, portanto, a customiza\\xe7\\xe3o de styled-components como acima n\\xe3o funcionar\\xe1. Voc\\xea precisa usar a API [`classes`](/styles/advanced/#overriding-styles-classes-prop) do Material-UI.\\n\\nO exemplo a seguir sobrescreve o estilo de `label` e `Button`, al\\xe9m dos estilos customizados no pr\\xf3prio bot\\xe3o.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**CssModulesButtonDeep.css**\\n\\n```css\\n.root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.root:hover {\\n  background-color: #5469d4;\\n}\\n.label {\\n  color: #fff;\\n}\\n```\\n\\n**CssModulesButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel ou qualquer outro ir\\xe1 injetar o CSS na p\\xe1gina\\nimport styles from './CssModulesButtonDeep.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Padr\\xe3o</Button>\\n      <Button classes={styles}>Customizado</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Emotion\\n\\n![estrelas](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\\n\\n### A propriedade `css`\\n\\nO m\\xe9todo **css()** do Emotion funciona perfeitamente com Material-UI.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionCSS.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Bot\\xe3o editar](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\\n\\n```jsx\\n/** @jsx jsx */\\nimport { jsx, css } from '@emotion/core';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function EmotionCSS() {\\n  return (\\n    <div>\\n      <Button>Padr\\xe3o</Button>\\n      <Button\\n        css={css`\\n          background-color: #6772e5;\\n          color: #fff;\\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n          padding: 7px 14px;\\n          &:hover {\\n            background-color: #5469d4;\\n          }\\n        `}\\n      >\\n        Customizado\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlando prioridade \\u26a0\\ufe0f\\n\\n**Nota:** O JSS injeta seus estilos na parte inferior do `<head>`. Se voc\\xea n\\xe3o quiser marcar atributos de estilo com **!important**, voc\\xea precisa alterar [a ordem de inje\\xe7\\xe3o do CSS](/styles/advanced/#css-injection-order), como na demonstra\\xe7\\xe3o:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Sua \\xe1rvore de componentes.\\n      Agora, voc\\xea pode sobrescrever os estilos do Material-UI. */}\\n</StylesProvider>\\n```\\n\\n### Tema\\n\\nMaterial-UI tem uma estrutura de tema rica, que voc\\xea pode aproveitar para manipula\\xe7\\xf5es de cores, transi\\xe7\\xf5es, consultas de m\\xeddia e muito mais.\\n\\nIncentivamos a compartilhar o mesmo objeto de tema entre Material-UI e seus estilos.\\n\\n```jsx\\n<Button\\n  css={theme => css`\\n    background-color: ${theme.palette.primary.main};\\n    color: #fff;\\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n    padding: 4px 10px;\\n    font-size: 13px;\\n    &:hover {\\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\\n    }\\n    ${theme.breakpoints.up('sm')} {\\n      font-size: 14px;\\n      padding: 7px 14px;\\n    }\\n  `}\\n>\\n  Customizado\\n</Button>\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionTheme.js\\\"}}\\n\\n### A API `styled()`\\n\\nFunciona exatamente como styled components. Voc\\xea pode [usar o mesmo guia](/guides/interoperability/#styled-components).\"},Bs3m:function(n,e){n.exports=\"import React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\nimport NoSsr from '@material-ui/core/NoSsr';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .MuiButton-label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <NoSsr>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </NoSsr>\\n  );\\n}\\n\"},C80S:function(n,e){n.exports=\"# \\u30b9\\u30bf\\u30a4\\u30eb\\u30e9\\u30a4\\u30d6\\u30e9\\u30ea\\u306e\\u76f8\\u4e92\\u904b\\u7528\\u6027\\n\\n<p class=\\\"description\\\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\\n\\nThis guide aims to document the most popular alternatives, but you should find that the principles applied here can be adapted to other libraries. There are examples for the following styling solutions:\\n\\n- [Plain CSS](#plain-css)\\n- [Global CSS](#global-css)\\n- [Styled Components](#styled-components)\\n- [CSS Modules](#css-modules)\\n- [Emotion](#emotion)\\n- [React JSS](#react-jss)\\n\\n## Plain CSS\\n\\nNothing fancy, just plain CSS.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\\n\\n**PlainCssButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**PlainCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButton.css';\\n\\nexport default function PlainCssButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className=\\\"button\\\">Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**PlainCssButtonDeep.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n.button-label {\\n  color: #fff;\\n}\\n```\\n\\n**PlainCssButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButtonDeep.css';\\n\\nexport default function PlainCssButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={{ root: 'button', label: 'button-label' }}>\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Global CSS\\n\\nExplicitly providing the class names to the component is too much effort? [You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\\n\\n**GlobalCssButton.css**\\n\\n```css\\n.MuiButton-root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.MuiButton-root:hover {\\n  background-color: #5469d4;\\n}\\n.MuiButton-label {\\n  color: #fff;\\n}\\n```\\n\\n**GlobalCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './GlobalCssButton.css';\\n\\nexport default function GlobalCssButton() {\\n  return <Button>Customized</Button>;\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n## Styled Components\\n\\n![Stars](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\\n\\nThe `styled()` method works perfectly on all of the components.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n`;\\n\\nexport default function StyledComponents() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`. The best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself. It also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \\\"consuming\\\" properties that should not be passed on to the underlying component.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsDeep.js\\\"}}\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .MuiButton-label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(({ color, ...other }) => (\\n  <Button classes={{ label: 'label' }} {...other} />\\n))`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\n### \\u30c6\\u30fc\\u30de\\n\\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\nconst StyledButton = styled(Button)`\\n  ${({ theme }) => `\\n  background-color: ${theme.palette.primary.main};\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 4px 10px;\\n  font-size: 13px;\\n  &:hover {\\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\\n  }\\n  ${theme.breakpoints.up('sm')} {\\n    font-size: 14px;\\n    padding: 7px 14px;\\n  }\\n  `}\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsTheme.js\\\"}}\\n\\n### Portals\\n\\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Because of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\\n\\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`, you will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy. The following example shows a workaround:\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Menu from '@material-ui/core/Menu';\\nimport MenuItem from '@material-ui/core/MenuItem';\\n\\nconst StyledMenu = styled(({ className, ...props }) => (\\n  <Menu {...props} classes={{ paper: className }} />\\n))`\\n  box-shadow: none;\\n  border: 1px solid #d3d4d5;\\n\\n  li {\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n  }\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsPortal.js\\\"}}\\n\\n## CSS Modules\\n\\n![Stars](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\\n\\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the bundling solution people are using.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\\n\\n**CssModulesButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**CssModulesButton.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButton.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className={styles.button}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**CssModulesButtonDeep.css**\\n\\n```css\\n.root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.root:hover {\\n  background-color: #5469d4;\\n}\\n.label {\\n  color: #fff;\\n}\\n```\\n\\n**CssModulesButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButtonDeep.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={styles}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Emotion\\n\\n![Stars](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\\n\\n### The `css` prop\\n\\nEmotion's **css()** method works seamlessly with Material-UI.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionCSS.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\\n\\n```jsx\\n/** @jsx jsx */\\nimport { jsx, css } from '@emotion/core';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function EmotionCSS() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button\\n        css={css`\\n          background-color: #6772e5;\\n          color: #fff;\\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n          padding: 7px 14px;\\n          &:hover {\\n            background-color: #5469d4;\\n          }\\n        `}\\n      >\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### \\u30c6\\u30fc\\u30de\\n\\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\n<Button\\n  css={theme => css`\\n    background-color: ${theme.palette.primary.main};\\n    color: #fff;\\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n    padding: 4px 10px;\\n    font-size: 13px;\\n    &:hover {\\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\\n    }\\n    ${theme.breakpoints.up('sm')} {\\n      font-size: 14px;\\n      padding: 7px 14px;\\n    }\\n  `}\\n>\\n  Customized\\n</Button>\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionTheme.js\\\"}}\\n\\n### The `styled()` API\\n\\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components).\"},CQ1A:function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return c}));var o=t(\"kGIj\"),s=t(\"mXGw\"),r=t.n(s),a=t(\"aD51\"),i=t(\"O8uh\");r.a.createElement;function l(){var n=Object(o.a)([\"\\n          background-color: #6772e5;\\n          color: #fff;\\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11),\\n            0 1px 3px rgba(0, 0, 0, 0.08);\\n          padding: 7px 14px;\\n          &:hover {\\n            background-color: #5469d4;\\n          }\\n        \"]);return l=function(){return n},n}var d=Object(a.c)(i.a,null,\"Default\");function c(){return Object(a.c)(\"div\",null,d,Object(a.c)(i.a,{css:Object(a.b)(l())},\"Customized\"))}},CalN:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/guides/interoperability\",function(){return t(\"hpSN\")}])},E3Tn:function(n,e){n.exports=\"# Interop\\xe9rabilit\\xe9 de la biblioth\\xe8que de styles\\n\\n<p class=\\\"description\\\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\\n\\nThis guide aims to document the most popular alternatives, but you should find that the principles applied here can be adapted to other libraries. There are examples for the following styling solutions:\\n\\n- [Plain CSS](#plain-css)\\n- [CSS global](#global-css)\\n- [Styled Components](#styled-components)\\n- [CSS Modules](#css-modules)\\n- [Emotion](#emotion)\\n- [React JSS](#react-jss)\\n\\n## Plain CSS\\n\\nNothing fancy, just plain CSS.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\\n\\n**PlainCssButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**PlainCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButton.css';\\n\\nexport default function PlainCssButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className=\\\"button\\\">Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**PlainCssButtonDeep.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n.button-label {\\n  color: #fff;\\n}\\n```\\n\\n**PlainCssButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButtonDeep.css';\\n\\nexport default function PlainCssButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={{ root: 'button', label: 'button-label' }}>\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## CSS global\\n\\nExplicitly providing the class names to the component is too much effort? [You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\\n\\n**GlobalCssButton.css**\\n\\n```css\\n.MuiButton-root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.MuiButton-root:hover {\\n  background-color: #5469d4;\\n}\\n.MuiButton-label {\\n  color: #fff;\\n}\\n```\\n\\n**GlobalCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './GlobalCssButton.css';\\n\\nexport default function GlobalCssButton() {\\n  return <Button>Customized</Button>;\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n## Styled Components\\n\\n![stars](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\\n\\nThe `styled()` method works perfectly on all of the components.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n`;\\n\\nexport default function StyledComponents() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`. The best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself. It also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \\\"consuming\\\" properties that should not be passed on to the underlying component.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsDeep.js\\\"}}\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .MuiButton-label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(({ color, ...other }) => (\\n  <Button classes={{ label: 'label' }} {...other} />\\n))`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\n### Th\\xe8me\\n\\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\nconst StyledButton = styled(Button)`\\n  ${({ theme }) => `\\n  background-color: ${theme.palette.primary.main};\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 4px 10px;\\n  font-size: 13px;\\n  &:hover {\\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\\n  }\\n  ${theme.breakpoints.up('sm')} {\\n    font-size: 14px;\\n    padding: 7px 14px;\\n  }\\n  `}\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsTheme.js\\\"}}\\n\\n### Portals\\n\\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Because of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\\n\\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`, you will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy. The following example shows a workaround:\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Menu from '@material-ui/core/Menu';\\nimport MenuItem from '@material-ui/core/MenuItem';\\n\\nconst StyledMenu = styled(({ className, ...props }) => (\\n  <Menu {...props} classes={{ paper: className }} />\\n))`\\n  box-shadow: none;\\n  border: 1px solid #d3d4d5;\\n\\n  li {\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n  }\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsPortal.js\\\"}}\\n\\n## CSS Modules\\n\\n![stars](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\\n\\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the bundling solution people are using.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\\n\\n**CssModulesButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**CssModulesButton.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButton.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className={styles.button}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**CssModulesButtonDeep.css**\\n\\n```css\\n.root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.root:hover {\\n  background-color: #5469d4;\\n}\\n.label {\\n  color: #fff;\\n}\\n```\\n\\n**CssModulesButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButtonDeep.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={styles}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Emotion\\n\\n![stars](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\\n\\n### The `css` prop\\n\\nEmotion's **css()** method works seamlessly with Material-UI.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionCSS.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\\n\\n```jsx\\n/** @jsx jsx */\\nimport { jsx, css } from '@emotion/core';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function EmotionCSS() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button\\n        css={css`\\n          background-color: #6772e5;\\n          color: #fff;\\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n          padding: 7px 14px;\\n          &:hover {\\n            background-color: #5469d4;\\n          }\\n        `}\\n      >\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Th\\xe8me\\n\\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\n<Button\\n  css={theme => css`\\n    background-color: ${theme.palette.primary.main};\\n    color: #fff;\\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n    padding: 4px 10px;\\n    font-size: 13px;\\n    &:hover {\\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\\n    }\\n    ${theme.breakpoints.up('sm')} {\\n      font-size: 14px;\\n      padding: 7px 14px;\\n    }\\n  `}\\n>\\n  Customized\\n</Button>\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionTheme.js\\\"}}\\n\\n### The `styled()` API\\n\\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components).\"},HP4X:function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return m}));var o=t(\"kGIj\"),s=t(\"mXGw\"),r=t.n(s),a=t(\"UutA\"),i=t(\"O8uh\"),l=t(\"WKBU\"),d=r.a.createElement;function c(){var n=Object(o.a)([\"\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .MuiButton-label {\\n    color: #fff;\\n  }\\n\"]);return c=function(){return n},n}var u=Object(a.b)(i.a)(c()),p=d(l.a,null,d(i.a,null,\"Default\"),d(u,null,\"Customized\"));function m(){return p}},Hg2j:function(n,e){n.exports=\"# \\u6837\\u5f0f\\u5e93\\u7684\\u4e92\\u901a\\u6027\\n\\n<p class=\\\"description\\\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\\n\\nThis guide aims to document the most popular alternatives, but you should find that the principles applied here can be adapted to other libraries. \\u6211\\u4eec\\u4e3a\\u4ee5\\u4e0b\\u7684\\u6837\\u5f0f\\u65b9\\u6848\\u63d0\\u4f9b\\u4e86\\u4e00\\u4e9b\\u65b9\\u6848\\uff1a\\n\\n- [\\u7eaf CSS](#plain-css)\\n- [\\u5168\\u5c40 CSS](#global-css)\\n- [Styled Components](#styled-components)\\n- [CSS Modules](#css-modules)\\n- [Emotion](#css-modules)\\n- [React JSS](#emotion)\\n\\n## \\u7eaf CSS\\n\\n\\u6ca1\\u6709\\u4ec0\\u4e48\\u7279\\u522b\\u82b1\\u54e8\\u7684\\uff0c\\u53ea\\u662f\\u666e\\u901a\\u7684\\u65e7\\u7248 CSS\\u3002\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![\\u7f16\\u8f91\\u6309\\u94ae](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\\n\\n**PlainCssButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**PlainCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButton.css';\\n\\nexport default function PlainCssButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className=\\\"button\\\">Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**\\u8bf7\\u6ce8\\u610f\\uff1a** JSS \\u5728 `<head>` \\u5e95\\u90e8\\u6ce8\\u5165\\u5176\\u6837\\u5f0f\\u8868\\u3002 If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### \\u66f4\\u6df1\\u5c42\\u7684\\u5143\\u7d20\\n\\n\\u5982\\u679c\\u60a8\\u5c1d\\u8bd5\\u8d4b\\u4e88Drawer\\uff08\\u62bd\\u5c49\\uff09\\u7ec4\\u4ef6\\u4ee5\\u6c38\\u4e45\\u7684\\u53d8\\u4f53\\u7684\\u6837\\u5f0f\\uff0c\\u60a8\\u5f88\\u53ef\\u80fd\\u4f1a\\u9700\\u8981\\u6d89\\u53ca\\u62bd\\u5c49\\u7ec4\\u4ef6\\u7684\\u5b50\\u7eb8\\u5f20\\u5143\\u7d20\\u3002 \\u4f46\\u662f\\uff0c\\u8fd9\\u4e0d\\u662f\\u62bd\\u5c49\\u7ec4\\u4ef6\\u7684\\u6839\\u5143\\u7d20\\uff0c\\u56e0\\u6b64\\u4e0a\\u9762\\u7684\\u6837\\u5f0f\\u7ec4\\u4ef6\\u81ea\\u5b9a\\u4e49\\u5c06\\u4e0d\\u8d77\\u4f5c\\u7528\\u3002 \\u60a8\\u5219\\u9700\\u8981\\u4f7f\\u7528 Material-UI \\u7684 API \\u4e2d\\u7684 [`classes`](/styles/advanced/#overriding-styles-classes-prop) \\u6765\\u8fbe\\u5230\\u76ee\\u7684\\u3002\\n\\n\\u4ee5\\u4e0b\\u793a\\u4f8b\\u9664\\u4e86\\u6309\\u94ae\\u672c\\u8eab\\u7684\\u81ea\\u5b9a\\u4e49\\u6837\\u5f0f\\u5916\\uff0c\\u8fd8\\u4f1a\\u8986\\u76d6 `label` \\u7684 `Button` \\u6837\\u5f0f\\u3002\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**PlainCssButtonDeep.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n.button-label {\\n  color: #fff;\\n}\\n```\\n\\n**PlainCssButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButtonDeep.css';\\n\\nexport default function PlainCssButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={{ root: 'button', label: 'button-label' }}>\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## \\u5168\\u5c40 CSS\\n\\n\\u660e\\u786e\\u5411\\u63d0\\u7ec4\\u4ef6\\u63d0\\u4f9b\\u7c7b\\u540d\\u662f\\u4e0d\\u662f\\u592a\\u5927\\u8d39\\u5468\\u7ae0\\u4e86\\uff1f [\\u60a8\\u53ef\\u4ee5\\u5b9a\\u4f4d\\u5230\\u7531 Material-UI \\u751f\\u6210\\u7684\\u7c7b\\u540d](/styles/advanced/#with-material-ui-core)\\u3002\\n\\n[![\\u7f16\\u8f91\\u6309\\u94ae](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\\n\\n**GlobalCssButton.css**\\n\\n```css\\n.MuiButton-root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.MuiButton-root:hover {\\n  background-color: #5469d4;\\n}\\n.MuiButton-label {\\n  color: #fff;\\n}\\n```\\n\\n**GlobalCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './GlobalCssButton.css';\\n\\nexport default function GlobalCssButton() {\\n  return <Button>Customized</Button>;\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**\\u8bf7\\u6ce8\\u610f\\uff1a** JSS \\u5728 `<head>` \\u5e95\\u90e8\\u6ce8\\u5165\\u5176\\u6837\\u5f0f\\u8868\\u3002 If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n## Styled Components\\n\\n![stars](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\\n\\nThe `styled()` method works perfectly on all of the components.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![\\u7f16\\u8f91\\u6309\\u94ae](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n`;\\n\\nexport default function StyledComponents() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**\\u8bf7\\u6ce8\\u610f\\uff1a** styled-components \\u548c JSS \\u90fd\\u5728 `<head>` \\u7684\\u5e95\\u90e8\\u6ce8\\u5165\\u5176\\u6837\\u5f0f\\u8868\\u3002 \\u82e5\\u60f3\\u8981 styled-components \\u7684\\u6837\\u5f0f\\u5728\\u6700\\u540e\\u52a0\\u8f7d\\uff0c\\u6211\\u4eec\\u63a8\\u8350\\u7684\\u6700\\u4f73\\u65b9\\u6cd5\\u662f\\u66f4\\u6539 [CSS \\u7684\\u6ce8\\u5165\\u987a\\u5e8f](/styles/advanced/#css-injection-order)\\uff0c\\u5982\\u4e0b\\u6f14\\u793a\\uff1a\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n\\u53e6\\u5916\\u4e00\\u4e2a\\u5728 styled-components \\u4e2d\\u4f7f\\u7528 `&&` \\u5b57\\u7b26\\u7684\\u65b9\\u6848\\u5219\\u662f\\u901a\\u8fc7\\u91cd\\u590d\\u7c7b\\u540d\\u6765[\\u589e\\u5f3a\\u7279\\u5f81](https://www.styled-components.com/docs/advanced#issues-with-specificity)\\u3002 Avoid the usage of `!important`.\\n\\n### \\u66f4\\u6df1\\u5c42\\u7684\\u5143\\u7d20\\n\\n\\u5982\\u679c\\u60a8\\u5c1d\\u8bd5\\u8d4b\\u4e88Drawer\\uff08\\u62bd\\u5c49\\uff09\\u7ec4\\u4ef6\\u4ee5\\u6c38\\u4e45\\u7684\\u53d8\\u4f53\\u7684\\u6837\\u5f0f\\uff0c\\u60a8\\u5f88\\u53ef\\u80fd\\u4f1a\\u9700\\u8981\\u6d89\\u53ca\\u62bd\\u5c49\\u7ec4\\u4ef6\\u7684\\u5b50\\u7eb8\\u5f20\\u5143\\u7d20\\u3002 \\u4f46\\u662f\\uff0c\\u8fd9\\u4e0d\\u662f\\u62bd\\u5c49\\u7ec4\\u4ef6\\u7684\\u6839\\u5143\\u7d20\\uff0c\\u56e0\\u6b64\\u4e0a\\u9762\\u7684\\u6837\\u5f0f\\u7ec4\\u4ef6\\u81ea\\u5b9a\\u4e49\\u5c06\\u4e0d\\u8d77\\u4f5c\\u7528\\u3002 \\u60a8\\u5219\\u9700\\u8981\\u4f7f\\u7528 Material-UI \\u7684 API \\u4e2d\\u7684 [`classes`](/styles/advanced/#overriding-styles-classes-prop) \\u6765\\u8fbe\\u5230\\u76ee\\u7684\\u3002\\n\\n\\u4ee5\\u4e0b\\u793a\\u4f8b\\u9664\\u4e86\\u6309\\u94ae\\u672c\\u8eab\\u7684\\u81ea\\u5b9a\\u4e49\\u6837\\u5f0f\\u5916\\uff0c\\u8fd8\\u4f1a\\u8986\\u76d6 `label` \\u7684 `Button` \\u6837\\u5f0f\\u3002 \\u5b83\\u8fd8\\u89e3\\u51b3\\u4e86 [\\u8fd9\\u4e2astyled-components\\u95ee\\u9898](https://github.com/styled-components/styled-components/issues/439) \\u7531\\u4e0d\\u5e94\\u8be5\\u5728\\u5e95\\u5c42\\u7ec4\\u4ef6\\u6765\\u901a\\u8fc7\\u201c\\u6d88\\u8017\\u201d\\u7684\\u7279\\u6027\\u3002\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsDeep.js\\\"}}\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .MuiButton-label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\n\\u4ee5\\u4e0a\\u7684\\u4f8b\\u5b50\\u4f9d\\u8d56\\u4e8e[\\u9ed8\\u8ba4\\u7684`\\u7c7b`\\u7684\\u503c](/styles/advanced/#with-material-ui-core)\\uff0c\\u4f46\\u662f\\u60a8\\u4e5f\\u53ef\\u4ee5\\u63d0\\u4f9b\\u81ea\\u5b9a\\u4e49\\u7684\\u7c7b\\u540d\\uff1a`.label`\\u3002\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(({ color, ...other }) => (\\n  <Button classes={{ label: 'label' }} {...other} />\\n))`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\n### \\u4e3b\\u9898\\n\\nMaterial-UI \\u6709\\u7740\\u4e00\\u4e2a\\u4e30\\u5bcc\\u7684\\u4e3b\\u9898\\u67b6\\u6784\\uff0c\\u800c\\u60a8\\u53ef\\u4ee5\\u5229\\u7528\\u5b83\\u6765\\u505a\\u4e00\\u4e9b\\u989c\\u8272\\u7684\\u5904\\u7406\\uff0c\\u8fc7\\u6e21\\u52a8\\u753b\\uff0c\\u5a92\\u4f53\\u67e5\\u8be2\\u7b49\\u7b49\\u3002\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\nconst StyledButton = styled(Button)`\\n  ${({ theme }) => `\\n  background-color: ${theme.palette.primary.main};\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 4px 10px;\\n  font-size: 13px;\\n  &:hover {\\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\\n  }\\n  ${theme.breakpoints.up('sm')} {\\n    font-size: 14px;\\n    padding: 7px 14px;\\n  }\\n  `}\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsTheme.js\\\"}}\\n\\n### Portals\\uff08\\u4f20\\u9001\\u95e8\\u7ec4\\u4ef6\\uff09\\n\\n[\\u4f20\\u9001\\u95e8\\u7ec4\\u4ef6](/components/portal/)\\u63d0\\u4f9b\\u4e86\\u4e00\\u79cd\\u4e00\\u6d41\\u7684\\u65b9\\u6cd5\\uff0c\\u5b83\\u5c06\\u5b50\\u5143\\u7d20\\u6e32\\u67d3\\u5728\\u5176\\u7236\\u7ec4\\u4ef6\\u7684 DOM \\u5c42\\u6b21\\u7ed3\\u6784\\u4e4b\\u5916\\u7684 DOM \\u8282\\u70b9\\u4e2d\\u3002 \\u5f53\\u60a8\\u4f7f\\u7528\\u8fd9\\u6837\\u7684 styled-components \\u89c4\\u8303\\u5176 CSS \\u7684\\u65b9\\u5f0f\\u65f6\\uff0c\\u53ef\\u80fd\\u4f1a\\u9047\\u5230\\u4e00\\u4e9b\\u65e0\\u6cd5\\u9644\\u7740\\u6837\\u5f0f\\u7684\\u95ee\\u9898\\u3002\\n\\n\\u4f8b\\u5982\\uff0c\\u82e5\\u60a8\\u5c1d\\u8bd5\\u7528 `MenuProps` \\u5c5e\\u6027\\u6765\\u6837\\u5f0f\\u5316 [Select](/components/selects/) \\u7ec4\\u4ef6\\u7684 [Menu](/components/menus/)\\uff0c\\u60a8\\u5c06\\u9700\\u8981\\u5c06 `className` \\u5c5e\\u6027\\u4f20\\u9012\\u5230\\u5b83\\u7684 DOM \\u5c42\\u6b21\\u7ed3\\u6784\\u4e4b\\u5916\\u6e32\\u67d3\\u7684\\u5143\\u7d20\\u5f53\\u4e2d\\u3002 \\u4e0b\\u9762\\u7684\\u793a\\u4f8b\\u6f14\\u793a\\u4e86\\u4e00\\u4e2a\\u53d8\\u901a\\u529e\\u6cd5\\uff1a\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Menu from '@material-ui/core/Menu';\\nimport MenuItem from '@material-ui/core/MenuItem';\\n\\nconst StyledMenu = styled(({ className, ...props }) => (\\n  <Menu {...props} classes={{ paper: className }} />\\n))`\\n  box-shadow: none;\\n  border: 1px solid #d3d4d5;\\n\\n  li {\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n  }\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsPortal.js\\\"}}\\n\\n## CSS Modules\\n\\n![stars](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\\n\\n\\u9274\\u4e8e\\u5b83\\u5168\\u6743\\u4f9d\\u8d56\\u4e8e\\u5927\\u5bb6\\u4f7f\\u7528\\u7684\\u6253\\u5305\\u65b9\\u6848\\uff0c\\u6211\\u4eec\\u5f88\\u96be\\u5f97\\u77e5[\\u6b64\\u79cd\\u6837\\u5f0f\\u65b9\\u6848](https://github.com/css-modules/css-modules)\\u7684\\u5e02\\u573a\\u5360\\u6709\\u7387\\u3002\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![\\u7f16\\u8f91\\u6309\\u94ae](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\\n\\n**CssModulesButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**CssModulesButton.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButton.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className={styles.button}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**\\u8bf7\\u6ce8\\u610f\\uff1a** JSS \\u5728 `<head>` \\u5e95\\u90e8\\u6ce8\\u5165\\u5176\\u6837\\u5f0f\\u8868\\u3002 If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### \\u66f4\\u6df1\\u5c42\\u7684\\u5143\\u7d20\\n\\n\\u5982\\u679c\\u60a8\\u5c1d\\u8bd5\\u8d4b\\u4e88Drawer\\uff08\\u62bd\\u5c49\\uff09\\u7ec4\\u4ef6\\u4ee5\\u6c38\\u4e45\\u7684\\u53d8\\u4f53\\u7684\\u6837\\u5f0f\\uff0c\\u60a8\\u5f88\\u53ef\\u80fd\\u4f1a\\u9700\\u8981\\u6d89\\u53ca\\u62bd\\u5c49\\u7ec4\\u4ef6\\u7684\\u5b50\\u7eb8\\u5f20\\u5143\\u7d20\\u3002 \\u4f46\\u662f\\uff0c\\u8fd9\\u4e0d\\u662f\\u62bd\\u5c49\\u7ec4\\u4ef6\\u7684\\u6839\\u5143\\u7d20\\uff0c\\u56e0\\u6b64\\u4e0a\\u9762\\u7684\\u6837\\u5f0f\\u7ec4\\u4ef6\\u81ea\\u5b9a\\u4e49\\u5c06\\u4e0d\\u8d77\\u4f5c\\u7528\\u3002 \\u60a8\\u5219\\u9700\\u8981\\u4f7f\\u7528 Material-UI \\u7684 API \\u4e2d\\u7684 [`classes`](/styles/advanced/#overriding-styles-classes-prop) \\u6765\\u8fbe\\u5230\\u76ee\\u7684\\u3002\\n\\n\\u4ee5\\u4e0b\\u793a\\u4f8b\\u9664\\u4e86\\u6309\\u94ae\\u672c\\u8eab\\u7684\\u81ea\\u5b9a\\u4e49\\u6837\\u5f0f\\u5916\\uff0c\\u8fd8\\u4f1a\\u8986\\u76d6 `label` \\u7684 `Button` \\u6837\\u5f0f\\u3002\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**CssModulesButtonDeep.css**\\n\\n```css\\n.root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.root:hover {\\n  background-color: #5469d4;\\n}\\n.label {\\n  color: #fff;\\n}\\n```\\n\\n**CssModulesButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButtonDeep.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={styles}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Emotion\\n\\n![stars](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\\n\\n### `css` \\u5c5e\\u6027\\n\\nEmotion\\u7684 **css()** \\u65b9\\u6cd5\\u4e0eMaterial-UI\\u65e0\\u7f1d\\u534f\\u4f5c\\u3002\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionCSS.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![\\u7f16\\u8f91\\u6309\\u94ae](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\\n\\n```jsx\\n/** @jsx jsx */\\nimport { jsx, css } from '@emotion/core';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function EmotionCSS() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button\\n        css={css`\\n          background-color: #6772e5;\\n          color: #fff;\\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n          padding: 7px 14px;\\n          &:hover {\\n            background-color: #5469d4;\\n          }\\n        `}\\n      >\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**\\u8bf7\\u6ce8\\u610f\\uff1a** JSS \\u5728 `<head>` \\u5e95\\u90e8\\u6ce8\\u5165\\u5176\\u6837\\u5f0f\\u8868\\u3002 If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### \\u4e3b\\u9898\\n\\nMaterial-UI \\u6709\\u7740\\u4e00\\u4e2a\\u4e30\\u5bcc\\u7684\\u4e3b\\u9898\\u67b6\\u6784\\uff0c\\u800c\\u60a8\\u53ef\\u4ee5\\u5229\\u7528\\u5b83\\u6765\\u505a\\u4e00\\u4e9b\\u989c\\u8272\\u7684\\u5904\\u7406\\uff0c\\u8fc7\\u6e21\\u52a8\\u753b\\uff0c\\u5a92\\u4f53\\u67e5\\u8be2\\u7b49\\u7b49\\u3002\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\n<Button\\n  css={theme => css`\\n    background-color: ${theme.palette.primary.main};\\n    color: #fff;\\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n    padding: 4px 10px;\\n    font-size: 13px;\\n    &:hover {\\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\\n    }\\n    ${theme.breakpoints.up('sm')} {\\n      font-size: 14px;\\n      padding: 7px 14px;\\n    }\\n  `}\\n>\\n  Customized\\n</Button>\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionTheme.js\\\"}}\\n\\n### `styled()` \\u7684 API\\n\\n\\u5b83\\u5b8c\\u5168\\u548c styled components \\u4e00\\u6837\\u8d77\\u4f5c\\u7528\\u3002 \\u60a8\\u53ef\\u4ee5[\\u4f7f\\u7528\\u76f8\\u540c\\u7684\\u6307\\u5357](/guides/interoperability/#styled-components) \\u3002\"},I059:function(n,e){n.exports=\"import React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\nimport NoSsr from '@material-ui/core/NoSsr';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n`;\\n\\nexport default function StyledComponents() {\\n  return (\\n    <NoSsr>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </NoSsr>\\n  );\\n}\\n\"},KRlT:function(n,e){n.exports=\"/** @jsx jsx */\\nimport { jsx, css } from '@emotion/core';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function EmotionCSS() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button\\n        css={css`\\n          background-color: #6772e5;\\n          color: #fff;\\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11),\\n            0 1px 3px rgba(0, 0, 0, 0.08);\\n          padding: 7px 14px;\\n          &:hover {\\n            background-color: #5469d4;\\n          }\\n        `}\\n      >\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n\"},LMa9:function(n,e,t){var o={\"./EmotionCSS.js\":\"CQ1A\",\"./EmotionCSS.tsx\":\"8S9M\",\"./EmotionTheme.js\":\"61z2\",\"./EmotionTheme.tsx\":\"yWcT\",\"./StyledComponents.js\":\"A/oB\",\"./StyledComponents.tsx\":\"pfvL\",\"./StyledComponentsDeep.js\":\"HP4X\",\"./StyledComponentsDeep.tsx\":\"Wd+q\",\"./StyledComponentsPortal.js\":\"LuWk\",\"./StyledComponentsPortal.tsx\":\"nBrM\",\"./StyledComponentsTheme.js\":\"3IaU\",\"./StyledComponentsTheme.tsx\":\"whv5\"};function s(n){var e=r(n);return t(e)}function r(n){if(!t.o(o,n)){var e=new Error(\"Cannot find module '\"+n+\"'\");throw e.code=\"MODULE_NOT_FOUND\",e}return o[n]}s.keys=function(){return Object.keys(o)},s.resolve=r,n.exports=s,s.id=\"LMa9\"},LuWk:function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return y}));var o=t(\"z3IF\"),s=t(\"2Fjn\"),r=t(\"kGIj\"),a=t(\"mXGw\"),i=t.n(a),l=t(\"UutA\"),d=t(\"O8uh\"),c=t(\"DmyM\"),u=t(\"2zfq\"),p=i.a.createElement;function m(){var n=Object(r.a)([\"\\n  box-shadow: none;\\n  border: 1px solid #d3d4d5;\\n\\n  li {\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n  }\\n\"]);return m=function(){return n},n}var h=Object(l.b)((function(n){var e=n.className,t=Object(s.a)(n,[\"className\"]);return p(c.a,Object(o.a)({},t,{classes:{paper:e}}))}))(m());function y(){var n=i.a.useState(null),e=n[0],t=n[1],o=function(){t(null)};return p(\"div\",null,p(d.a,{\"aria-owns\":e?\"simple-menu\":void 0,\"aria-haspopup\":\"true\",variant:\"contained\",color:\"primary\",onClick:function(n){t(n.currentTarget)}},\"Open Menu\"),p(h,{id:\"simple-menu\",anchorEl:e,open:Boolean(e),onClose:o,getContentAnchorEl:null,anchorOrigin:{vertical:\"bottom\",horizontal:\"center\"},transformOrigin:{vertical:\"top\",horizontal:\"center\"}},p(u.a,{onClick:o},\"Profile\"),p(u.a,{onClick:o},\"My account\"),p(u.a,{onClick:o},\"Logout\")))}},MTSA:function(n,e){n.exports=\"import React from 'react';\\nimport styled, { ThemeProvider } from 'styled-components';\\nimport NoSsr from '@material-ui/core/NoSsr';\\nimport {\\n  createMuiTheme,\\n  ThemeProvider as MuiThemeProvider,\\n  darken,\\n} from '@material-ui/core/styles';\\nimport Button from '@material-ui/core/Button';\\n\\nconst customTheme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      main: '#6772e5',\\n    },\\n  },\\n});\\n\\nconst StyledButton = styled(Button)`\\n  ${({ theme }) => `\\n  background-color: ${theme.palette.primary.main};\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 4px 10px;\\n  font-size: 13px;\\n  &:hover {\\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\\n  }\\n  ${theme.breakpoints.up('sm')} {\\n    font-size: 14px;\\n    padding: 7px 14px;\\n  }\\n  `}\\n`;\\n\\nexport default function StyledComponentsTheme() {\\n  return (\\n    <NoSsr>\\n      <MuiThemeProvider theme={customTheme}>\\n        <ThemeProvider theme={customTheme}>\\n          <Button>Default</Button>\\n          <StyledButton>Customized</StyledButton>\\n        </ThemeProvider>\\n      </MuiThemeProvider>\\n    </NoSsr>\\n  );\\n}\\n\"},NRJU:function(n,e){n.exports=\"import React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\nimport Menu from '@material-ui/core/Menu';\\nimport MenuItem from '@material-ui/core/MenuItem';\\n\\nconst StyledMenu = styled(({ className, ...props }) => (\\n  <Menu {...props} classes={{ paper: className }} />\\n))`\\n  box-shadow: none;\\n  border: 1px solid #d3d4d5;\\n\\n  li {\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n  }\\n`;\\n\\nexport default function StyledComponentsPortal() {\\n  const [anchorEl, setAnchorEl] = React.useState(null);\\n\\n  const handleClick = (event) => {\\n    setAnchorEl(event.currentTarget);\\n  };\\n\\n  const handleClose = () => {\\n    setAnchorEl(null);\\n  };\\n\\n  return (\\n    <div>\\n      <Button\\n        aria-owns={anchorEl ? 'simple-menu' : undefined}\\n        aria-haspopup=\\\"true\\\"\\n        variant=\\\"contained\\\"\\n        color=\\\"primary\\\"\\n        onClick={handleClick}\\n      >\\n        Open Menu\\n      </Button>\\n      <StyledMenu\\n        id=\\\"simple-menu\\\"\\n        anchorEl={anchorEl}\\n        open={Boolean(anchorEl)}\\n        onClose={handleClose}\\n        getContentAnchorEl={null}\\n        anchorOrigin={{\\n          vertical: 'bottom',\\n          horizontal: 'center',\\n        }}\\n        transformOrigin={{\\n          vertical: 'top',\\n          horizontal: 'center',\\n        }}\\n      >\\n        <MenuItem onClick={handleClose}>Profile</MenuItem>\\n        <MenuItem onClick={handleClose}>My account</MenuItem>\\n        <MenuItem onClick={handleClose}>Logout</MenuItem>\\n      </StyledMenu>\\n    </div>\\n  );\\n}\\n\"},Oujb:function(n,e){n.exports=\"# Interoperabilidad de la biblioteca de estilos\\n\\n<p class=\\\"description\\\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\\n\\nThis guide aims to document the most popular alternatives, but you should find that the principles applied here can be adapted to other libraries. There are examples for the following styling solutions:\\n\\n- [Plain CSS](#plain-css)\\n- [Global CSS](#global-css)\\n- [Styled Components](#styled-components)\\n- [CSS Modules](#css-modules)\\n- [Emotion](#emotion)\\n- [React JSS](#react-jss)\\n\\n## Plain CSS\\n\\nNothing fancy, just plain CSS.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\\n\\n**PlainCssButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**PlainCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButton.css';\\n\\nexport default function PlainCssButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className=\\\"button\\\">Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**PlainCssButtonDeep.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n.button-label {\\n  color: #fff;\\n}\\n```\\n\\n**PlainCssButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButtonDeep.css';\\n\\nexport default function PlainCssButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={{ root: 'button', label: 'button-label' }}>\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Global CSS\\n\\nExplicitly providing the class names to the component is too much effort? [You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\\n\\n**GlobalCssButton.css**\\n\\n```css\\n.MuiButton-root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.MuiButton-root:hover {\\n  background-color: #5469d4;\\n}\\n.MuiButton-label {\\n  color: #fff;\\n}\\n```\\n\\n**GlobalCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './GlobalCssButton.css';\\n\\nexport default function GlobalCssButton() {\\n  return <Button>Customized</Button>;\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n## Styled Components\\n\\n![estrellas](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\\n\\nThe `styled()` method works perfectly on all of the components.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n`;\\n\\nexport default function StyledComponents() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`. The best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself. It also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \\\"consuming\\\" properties that should not be passed on to the underlying component.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsDeep.js\\\"}}\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .MuiButton-label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(({ color, ...other }) => (\\n  <Button classes={{ label: 'label' }} {...other} />\\n))`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\n### Tema\\n\\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\nconst StyledButton = styled(Button)`\\n  ${({ theme }) => `\\n  background-color: ${theme.palette.primary.main};\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 4px 10px;\\n  font-size: 13px;\\n  &:hover {\\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\\n  }\\n  ${theme.breakpoints.up('sm')} {\\n    font-size: 14px;\\n    padding: 7px 14px;\\n  }\\n  `}\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsTheme.js\\\"}}\\n\\n### Portals\\n\\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Because of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\\n\\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`, you will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy. The following example shows a workaround:\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Menu from '@material-ui/core/Menu';\\nimport MenuItem from '@material-ui/core/MenuItem';\\n\\nconst StyledMenu = styled(({ className, ...props }) => (\\n  <Menu {...props} classes={{ paper: className }} />\\n))`\\n  box-shadow: none;\\n  border: 1px solid #d3d4d5;\\n\\n  li {\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n  }\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsPortal.js\\\"}}\\n\\n## CSS Modules\\n\\n![estrellas](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\\n\\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the bundling solution people are using.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\\n\\n**CssModulesButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**CssModulesButton.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButton.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className={styles.button}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Deeper elements\\n\\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\\n\\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**CssModulesButtonDeep.css**\\n\\n```css\\n.root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.root:hover {\\n  background-color: #5469d4;\\n}\\n.label {\\n  color: #fff;\\n}\\n```\\n\\n**CssModulesButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButtonDeep.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={styles}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Emotion\\n\\n![estrellas](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\\n\\n### The `css` prop\\n\\nEmotion's **css()** method works seamlessly with Material-UI.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionCSS.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\\n\\n```jsx\\n/** @jsx jsx */\\nimport { jsx, css } from '@emotion/core';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function EmotionCSS() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button\\n        css={css`\\n          background-color: #6772e5;\\n          color: #fff;\\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n          padding: 7px 14px;\\n          &:hover {\\n            background-color: #5469d4;\\n          }\\n        `}\\n      >\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Tema\\n\\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\n<Button\\n  css={theme => css`\\n    background-color: ${theme.palette.primary.main};\\n    color: #fff;\\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n    padding: 4px 10px;\\n    font-size: 13px;\\n    &:hover {\\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\\n    }\\n    ${theme.breakpoints.up('sm')} {\\n      font-size: 14px;\\n      padding: 7px 14px;\\n    }\\n  `}\\n>\\n  Customized\\n</Button>\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionTheme.js\\\"}}\\n\\n### The `styled()` API\\n\\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components).\"},PUNv:function(n,e){n.exports=\"import React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\nimport Menu from '@material-ui/core/Menu';\\nimport MenuItem from '@material-ui/core/MenuItem';\\n\\nconst StyledMenu = styled(({ className, ...props }) => (\\n  <Menu {...props} classes={{ paper: className }} />\\n))`\\n  box-shadow: none;\\n  border: 1px solid #d3d4d5;\\n\\n  li {\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n  }\\n`;\\n\\nexport default function StyledComponentsPortal() {\\n  const [anchorEl, setAnchorEl] = React.useState<EventTarget | null>(null);\\n\\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\\n    setAnchorEl(event.currentTarget);\\n  };\\n\\n  const handleClose = () => {\\n    setAnchorEl(null);\\n  };\\n\\n  return (\\n    <div>\\n      <Button\\n        aria-owns={anchorEl ? 'simple-menu' : undefined}\\n        aria-haspopup=\\\"true\\\"\\n        variant=\\\"contained\\\"\\n        color=\\\"primary\\\"\\n        onClick={handleClick}\\n      >\\n        Open Menu\\n      </Button>\\n      <StyledMenu\\n        id=\\\"simple-menu\\\"\\n        anchorEl={anchorEl}\\n        open={Boolean(anchorEl)}\\n        onClose={handleClose}\\n        getContentAnchorEl={null}\\n        anchorOrigin={{\\n          vertical: 'bottom',\\n          horizontal: 'center',\\n        }}\\n        transformOrigin={{\\n          vertical: 'top',\\n          horizontal: 'center',\\n        }}\\n      >\\n        <MenuItem onClick={handleClose}>Profile</MenuItem>\\n        <MenuItem onClick={handleClose}>My account</MenuItem>\\n        <MenuItem onClick={handleClose}>Logout</MenuItem>\\n      </StyledMenu>\\n    </div>\\n  );\\n}\\n\"},PVwf:function(n,e){n.exports=\"# crwdns95514:0crwdne95514:0\\n\\n<p class=\\\"description\\\">crwdns108505:0crwdne108505:0</p>\\n\\ncrwdns132858:0crwdne132858:0 crwdns101262:0crwdne101262:0\\n\\n- [crwdns95524:0crwdne95524:0](crwdns95522:0crwdne95522:0)\\n- [crwdns95528:0crwdne95528:0](crwdns95526:0crwdne95526:0)\\n- [crwdns95532:0crwdne95532:0](crwdns95530:0crwdne95530:0)\\n- [crwdns95536:0crwdne95536:0](crwdns95534:0crwdne95534:0)\\n- [crwdns95540:0crwdne95540:0](crwdns95538:0crwdne95538:0)\\n- [crwdns95544:0crwdne95544:0](crwdns95542:0crwdne95542:0)\\n\\n## crwdns95550:0crwdne95550:0\\n\\ncrwdns108507:0crwdne108507:0\\n\\ncrwdns130978:0crwdne130978:0\\n\\n[![crwdns108515:0crwdne108515:0](crwdns108513:0crwdne108513:0)](crwdns108511:0crwdne108511:0)\\n\\n**crwdns108517:0crwdne108517:0**\\n\\n```css\\ncrwdns108519:0crwdne108519:0\\n```\\n\\n**crwdns108521:0crwdne108521:0**\\n\\n```jsx\\ncrwdns132084:0crwdne132084:0\\n```\\n\\n### crwdns108525:0crwdne108525:0\\n\\ncrwdns108527:0crwdne108527:0 crwdns108529:0crwdne108529:0\\n\\n```jsx\\ncrwdns108531:0{ StylesProvider }crwdne108531:0\\n      crwdns108533:0crwdne108533:0 crwdns108535:0crwdne108535:0\\n```\\n\\n### crwdns95636:0crwdne95636:0\\n\\ncrwdns108537:0crwdne108537:0 crwdns108539:0crwdne108539:0 crwdns108541:0crwdne108541:0\\n\\ncrwdns108543:0crwdne108543:0\\n\\ncrwdns130980:0crwdne130980:0\\n\\n**crwdns108547:0crwdne108547:0**\\n\\n```css\\ncrwdns108549:0crwdne108549:0\\n```\\n\\n**crwdns108551:0crwdne108551:0**\\n\\n```jsx\\ncrwdns132086:0{{ root: 'button', label: 'button-label' }}crwdne132086:0\\n```\\n\\n## crwdns95574:0crwdne95574:0\\n\\ncrwdns108555:0crwdne108555:0 crwdns108557:0crwdne108557:0\\n\\n[![crwdns108563:0crwdne108563:0](crwdns108561:0crwdne108561:0)](crwdns108559:0crwdne108559:0)\\n\\n**crwdns108565:0crwdne108565:0**\\n\\n```css\\ncrwdns108567:0crwdne108567:0\\n```\\n\\n**crwdns108569:0crwdne108569:0**\\n\\n```jsx\\ncrwdns132088:0crwdne132088:0\\n```\\n\\n### crwdns108573:0crwdne108573:0\\n\\ncrwdns108575:0crwdne108575:0 crwdns108577:0crwdne108577:0\\n\\n```jsx\\ncrwdns108579:0{ StylesProvider }crwdne108579:0\\n      crwdns108581:0crwdne108581:0 crwdns108583:0crwdne108583:0\\n```\\n\\n## crwdns95598:0crwdne95598:0\\n\\n![crwdns108587:0crwdne108587:0](crwdns108585:0crwdne108585:0) ![crwdns108591:0crwdne108591:0](crwdns108589:0crwdne108589:0)\\n\\ncrwdns108593:0crwdne108593:0\\n\\ncrwdns130982:0crwdne130982:0\\n\\n[![crwdns108601:0crwdne108601:0](crwdns108599:0crwdne108599:0)](crwdns108597:0crwdne108597:0)\\n\\n```jsx\\ncrwdns108603:0crwdne108603:0\\n\\n```\\n\\n### crwdns108605:0crwdne108605:0\\n\\ncrwdns108607:0crwdne108607:0 crwdns108609:0crwdne108609:0\\n\\n```jsx\\ncrwdns108611:0{ StylesProvider }crwdne108611:0\\n      crwdns108613:0crwdne108613:0 crwdns108615:0crwdne108615:0\\n```\\n\\ncrwdns108617:0crwdne108617:0 crwdns108619:0crwdne108619:0\\n\\n### crwdns108621:0crwdne108621:0\\n\\ncrwdns108623:0crwdne108623:0 crwdns108625:0crwdne108625:0 crwdns108627:0crwdne108627:0\\n\\ncrwdns108629:0crwdne108629:0 crwdns108631:0crwdne108631:0\\n\\ncrwdns108633:0crwdne108633:0\\n\\n```jsx\\ncrwdns108635:0crwdne108635:0\\n```\\n\\ncrwdns108637:0crwdne108637:0\\n\\n```jsx\\ncrwdns108639:0{ color, ...other }crwdnd108639:0{{ label: 'label' }}crwdnd108639:0{...other}crwdne108639:0\\n```\\n\\n### crwdns108641:0crwdne108641:0\\n\\ncrwdns108643:0crwdne108643:0\\n\\ncrwdns108645:0crwdne108645:0\\n\\n```jsx\\ncrwdns108647:0{ theme }crwdnd108647:0${theme.palette.primary.main}crwdne108647:0\\n```\\n\\ncrwdns108649:0crwdne108649:0\\n\\n### crwdns108651:0crwdne108651:0\\n\\ncrwdns108653:0crwdne108653:0 crwdns108655:0crwdne108655:0\\n\\ncrwdns108657:0crwdne108657:0 crwdns108659:0crwdne108659:0\\n\\n```jsx\\ncrwdns108661:0{ className, ...props }crwdnd108661:0{...props}crwdnd108661:0{{ paper: className }}crwdne108661:0\\n```\\n\\ncrwdns108663:0crwdne108663:0\\n\\n## crwdns95676:0crwdne95676:0\\n\\n![crwdns108667:0crwdne108667:0](crwdns108665:0crwdne108665:0)\\n\\ncrwdns108669:0crwdne108669:0\\n\\ncrwdns130984:0crwdne130984:0\\n\\n[![crwdns108677:0crwdne108677:0](crwdns108675:0crwdne108675:0)](crwdns108673:0crwdne108673:0)\\n\\n**crwdns108679:0crwdne108679:0**\\n\\n```css\\ncrwdns108681:0crwdne108681:0\\n```\\n\\n**crwdns108683:0crwdne108683:0**\\n\\n```jsx\\ncrwdns108685:0{styles.button}crwdne108685:0\\n```\\n\\n### crwdns108687:0crwdne108687:0\\n\\ncrwdns108689:0crwdne108689:0 crwdns108691:0crwdne108691:0\\n\\n```jsx\\ncrwdns108693:0{ StylesProvider }crwdne108693:0\\n      crwdns108695:0crwdne108695:0 crwdns108697:0crwdne108697:0\\n```\\n\\n### crwdns108699:0crwdne108699:0\\n\\ncrwdns108701:0crwdne108701:0 crwdns108703:0crwdne108703:0 crwdns108705:0crwdne108705:0\\n\\ncrwdns108707:0crwdne108707:0\\n\\ncrwdns130986:0crwdne130986:0\\n\\n**crwdns108711:0crwdne108711:0**\\n\\n```css\\ncrwdns108713:0crwdne108713:0\\n```\\n\\n**crwdns108715:0crwdne108715:0**\\n\\n```jsx\\ncrwdns108717:0{styles}crwdne108717:0\\n```\\n\\n## crwdns95702:0crwdne95702:0\\n\\n![crwdns108721:0crwdne108721:0](crwdns108719:0crwdne108719:0) ![crwdns108725:0crwdne108725:0](crwdns108723:0crwdne108723:0)\\n\\n### crwdns108727:0crwdne108727:0\\n\\ncrwdns108729:0crwdne108729:0\\n\\ncrwdns130988:0crwdne130988:0\\n\\n[![crwdns108737:0crwdne108737:0](crwdns108735:0crwdne108735:0)](crwdns108733:0crwdne108733:0)\\n\\n```jsx\\ncrwdns108739:0{ jsx, css }crwdne108739:0\\n```\\n\\n### crwdns108741:0crwdne108741:0\\n\\ncrwdns108743:0crwdne108743:0 crwdns108745:0crwdne108745:0\\n\\n```jsx\\ncrwdns108747:0{ StylesProvider }crwdne108747:0\\n      crwdns108749:0crwdne108749:0 crwdns108751:0crwdne108751:0\\n```\\n\\n### crwdns108753:0crwdne108753:0\\n\\ncrwdns108755:0crwdne108755:0\\n\\ncrwdns108757:0crwdne108757:0\\n\\n```jsx\\ncrwdns108759:0${theme.palette.primary.main}crwdne108759:0\\n```\\n\\ncrwdns108761:0crwdne108761:0\\n\\n### crwdns108763:0crwdne108763:0\\n\\ncrwdns108765:0crwdne108765:0 crwdns108767:0crwdne108767:0\"},\"Wd+q\":function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return m}));var o=t(\"kGIj\"),s=t(\"mXGw\"),r=t.n(s),a=t(\"UutA\"),i=t(\"O8uh\"),l=t(\"WKBU\"),d=r.a.createElement;function c(){var n=Object(o.a)([\"\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .MuiButton-label {\\n    color: #fff;\\n  }\\n\"]);return c=function(){return n},n}var u=Object(a.b)(i.a)(c()),p=d(l.a,null,d(i.a,null,\"Default\"),d(u,null,\"Customized\"));function m(){return p}},Zkme:function(n,e){n.exports=\"/** @jsx jsx */\\nimport { jsx, css } from '@emotion/core';\\nimport Button from '@material-ui/core/Button';\\nimport { ThemeProvider } from 'emotion-theming';\\nimport {\\n  createMuiTheme,\\n  ThemeProvider as MuiThemeProvider,\\n  darken,\\n} from '@material-ui/core/styles';\\n\\nconst customTheme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      main: '#6772e5',\\n    },\\n  },\\n});\\n\\nexport default function EmotionTheme() {\\n  return (\\n    <MuiThemeProvider theme={customTheme}>\\n      <ThemeProvider theme={customTheme}>\\n        <Button>Default</Button>\\n        <Button\\n          css={(theme) => css`\\n            background-color: ${theme.palette.primary.main};\\n            color: #fff;\\n            box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11),\\n              0 1px 3px rgba(0, 0, 0, 0.08);\\n            padding: 4px 10px;\\n            font-size: 13px;\\n            &:hover {\\n              background-color: ${darken(theme.palette.primary.main, 0.2)};\\n            }\\n            ${theme.breakpoints.up('sm')} {\\n              font-size: 14px;\\n              padding: 7px 14px;\\n            }\\n          `}\\n        >\\n          Customized\\n        </Button>\\n      </ThemeProvider>\\n    </MuiThemeProvider>\\n  );\\n}\\n\"},aYiw:function(n,e){n.exports=\"/** @jsx jsx */\\nimport { jsx, css } from '@emotion/core';\\nimport Button from '@material-ui/core/Button';\\nimport { ThemeProvider } from 'emotion-theming';\\nimport {\\n  createMuiTheme,\\n  ThemeProvider as MuiThemeProvider,\\n  darken,\\n} from '@material-ui/core/styles';\\n\\nconst customTheme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      main: '#6772e5',\\n    },\\n  },\\n});\\n\\nexport default function EmotionTheme() {\\n  return (\\n    <MuiThemeProvider theme={customTheme}>\\n      <ThemeProvider theme={customTheme}>\\n        <Button>Default</Button>\\n        <Button\\n          css={(theme) => css`\\n            background-color: ${theme.palette.primary.main};\\n            color: #fff;\\n            box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11),\\n              0 1px 3px rgba(0, 0, 0, 0.08);\\n            padding: 4px 10px;\\n            font-size: 13px;\\n            &:hover {\\n              background-color: ${darken(theme.palette.primary.main, 0.2)};\\n            }\\n            ${theme.breakpoints.up('sm')} {\\n              font-size: 14px;\\n              padding: 7px 14px;\\n            }\\n          `}\\n        >\\n          Customized\\n        </Button>\\n      </ThemeProvider>\\n    </MuiThemeProvider>\\n  );\\n}\\n\"},bfEe:function(n,e){n.exports=\"import React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\nimport NoSsr from '@material-ui/core/NoSsr';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n`;\\n\\nexport default function StyledComponents() {\\n  return (\\n    <NoSsr>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </NoSsr>\\n  );\\n}\\n\"},\"dX//\":function(n,e,t){var o={\"./EmotionCSS.js\":\"KRlT\",\"./EmotionCSS.tsx\":\"zGL/\",\"./EmotionTheme.js\":\"Zkme\",\"./EmotionTheme.tsx\":\"aYiw\",\"./StyledComponents.js\":\"I059\",\"./StyledComponents.tsx\":\"bfEe\",\"./StyledComponentsDeep.js\":\"hcEk\",\"./StyledComponentsDeep.tsx\":\"Bs3m\",\"./StyledComponentsPortal.js\":\"NRJU\",\"./StyledComponentsPortal.tsx\":\"PUNv\",\"./StyledComponentsTheme.js\":\"eZcB\",\"./StyledComponentsTheme.tsx\":\"MTSA\",\"./interoperability-aa.md\":\"PVwf\",\"./interoperability-de.md\":\"iSVR\",\"./interoperability-es.md\":\"Oujb\",\"./interoperability-fr.md\":\"E3Tn\",\"./interoperability-ja.md\":\"C80S\",\"./interoperability-pt.md\":\"A2u3\",\"./interoperability-ru.md\":\"1P8z\",\"./interoperability-zh.md\":\"Hg2j\",\"./interoperability.md\":\"/kLV\"};function s(n){var e=r(n);return t(e)}function r(n){if(!t.o(o,n)){var e=new Error(\"Cannot find module '\"+n+\"'\");throw e.code=\"MODULE_NOT_FOUND\",e}return o[n]}s.keys=function(){return Object.keys(o)},s.resolve=r,n.exports=s,s.id=\"dX//\"},eZcB:function(n,e){n.exports=\"import React from 'react';\\nimport styled, { ThemeProvider } from 'styled-components';\\nimport NoSsr from '@material-ui/core/NoSsr';\\nimport {\\n  createMuiTheme,\\n  ThemeProvider as MuiThemeProvider,\\n  darken,\\n} from '@material-ui/core/styles';\\nimport Button from '@material-ui/core/Button';\\n\\nconst customTheme = createMuiTheme({\\n  palette: {\\n    primary: {\\n      main: '#6772e5',\\n    },\\n  },\\n});\\n\\nconst StyledButton = styled(Button)`\\n  ${({ theme }) => `\\n  background-color: ${theme.palette.primary.main};\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 4px 10px;\\n  font-size: 13px;\\n  &:hover {\\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\\n  }\\n  ${theme.breakpoints.up('sm')} {\\n    font-size: 14px;\\n    padding: 7px 14px;\\n  }\\n  `}\\n`;\\n\\nexport default function StyledComponentsTheme() {\\n  return (\\n    <NoSsr>\\n      <MuiThemeProvider theme={customTheme}>\\n        <ThemeProvider theme={customTheme}>\\n          <Button>Default</Button>\\n          <StyledButton>Customized</StyledButton>\\n        </ThemeProvider>\\n      </MuiThemeProvider>\\n    </NoSsr>\\n  );\\n}\\n\"},hcEk:function(n,e){n.exports=\"import React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\nimport NoSsr from '@material-ui/core/NoSsr';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .MuiButton-label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <NoSsr>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </NoSsr>\\n  );\\n}\\n\"},hpSN:function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return c}));var o=t(\"mXGw\"),s=t.n(o),r=t(\"e+1t\"),a=t(\"kVtE\"),i=s.a.createElement,l=t(\"LMa9\"),d=t(\"dX//\");function c(n){var e=n.demos,t=n.docs;return i(r.a,{demos:e,docs:t,requireDemo:l})}l.keys().map(l),c.getInitialProps=function(){var n=Object(a.a)({pageFilename:\"guides/interoperability\",requireRaw:d});return{demos:n.demos,docs:n.docs}}},iSVR:function(n,e){n.exports=\"# Interoperabilit\\xe4t der Stilbibliothek\\n\\n<p class=\\\"description\\\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\\n\\nThis guide aims to document the most popular alternatives, but you should find that the principles applied here can be adapted to other libraries. There are examples for the following styling solutions:\\n\\n- [Einfaches CSS](#plain-css)\\n- [Globales CSS](#global-css)\\n- [Styled Components](#styled-components)\\n- [CSS Modules](#styled-components)\\n- [Emotion](#css-modules)\\n- [React JSS](#emotion)\\n\\n## Einfaches CSS\\n\\nNothing fancy, just plain CSS.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\\n\\n**PlainCssButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**PlainCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButton.css';\\n\\nexport default function PlainCssButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className=\\\"button\\\">Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Hinweis:** JSS f\\xfcgt seine Styles am unteren Rand von `<head>` ein. Wenn Sie Stilattribute nicht mit **!important** markieren m\\xf6chten, ist das wichtig, dass Sie die [ CSS-Injektionsreihenfolge ](/styles/advanced/#css-injection-order) wie in der Demo \\xe4ndern:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Tiefere Elemente\\n\\nWenn Sie versuchen, einen Drawer mit der Variante permanent zu stylen, m\\xfcssen Sie wahrscheinlich das untergeordnete Papierelement des Drawers beeinflussen. Das Paper ist jedoch nicht das Wurzelelement vom Drawer, sodass die Anpassung der gestalteten Komponenten wie oben daher nicht funktioniert. Sie m\\xfcssen die [`classes`](/styles/advanced/#overriding-styles-classes-prop) API von Material-UI verwenden.\\n\\nIm folgenden Beispiel wird der `label` Stil der `Button` Komponente zus\\xe4tzlich zu den benutzerdefinierten Stilen auf dem Button selbst \\xfcberschrieben.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**PlainCssButtonDeep.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n.button-label {\\n  color: #fff;\\n}\\n```\\n\\n**PlainCssButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './PlainCssButtonDeep.css';\\n\\nexport default function PlainCssButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={{ root: 'button', label: 'button-label' }}>\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Globales CSS\\n\\nIst es zu viel Aufwand, die Klassennamen explizit f\\xfcr die Komponente bereitzustellen? [Sie k\\xf6nnen die von Material-UI generierten Klassennamen anvisieren](/styles/advanced/#with-material-ui-core).\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\\n\\n**GlobalCssButton.css**\\n\\n```css\\n.MuiButton-root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.MuiButton-root:hover {\\n  background-color: #5469d4;\\n}\\n.MuiButton-label {\\n  color: #fff;\\n}\\n```\\n\\n**GlobalCssButton.js**\\n\\n```jsx\\nimport React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport './GlobalCssButton.css';\\n\\nexport default function GlobalCssButton() {\\n  return <Button>Customized</Button>;\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Hinweis:** JSS f\\xfcgt seine Styles am unteren Rand von `<head>` ein. Wenn Sie Stilattribute nicht mit **!important** markieren m\\xf6chten, ist das wichtig, dass Sie die [ CSS-Injektionsreihenfolge ](/styles/advanced/#css-injection-order) wie in der Demo \\xe4ndern:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n## Styled Components\\n\\n![stars](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\\n\\nThe `styled()` method works perfectly on all of the components.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n`;\\n\\nexport default function StyledComponents() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Hinweis:** Sowohl styled-components als auch JSS f\\xfcgen ihre Stile unten in `<head>` ein. Um sicherzustellen, dass styled-components-Stile zuletzt geladen werden, \\xe4ndern Sie die [CSS-Injektionsreihenfolge](/styles/advanced/#css-injection-order), wie in der Demo:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\nEin anderer Ansatz ist die Verwendung von `&&` Zeichen in Stilkomponenten, um, durch Wiederholen des Klassennamens, die [Spezifit\\xe4t zu erh\\xf6hen ](https://www.styled-components.com/docs/advanced#issues-with-specificity). Avoid the usage of `!important`.\\n\\n### Tiefere Elemente\\n\\nWenn Sie versuchen, einen Drawer mit der Variante permanent zu stylen, m\\xfcssen Sie wahrscheinlich das untergeordnete Papierelement des Drawers beeinflussen. Das Paper ist jedoch nicht das Wurzelelement vom Drawer, sodass die Anpassung der gestalteten Komponenten wie oben daher nicht funktioniert. Sie m\\xfcssen die [`classes`](/styles/advanced/#overriding-styles-classes-prop) API von Material-UI verwenden.\\n\\nIm folgenden Beispiel wird der `label` Stil der `Button` Komponente zus\\xe4tzlich zu den benutzerdefinierten Stilen auf dem Button selbst \\xfcberschrieben. Es funktioniert auch um das [styled-components Problem](https://github.com/styled-components/styled-components/issues/439) durch \\\"verbrauchen\\\" der Eigenschaften, die nicht an die zugrunde liegende Komponente weitergegeben werden sollten, zu beheben.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsDeep.js\\\"}}\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(Button)`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .MuiButton-label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\nDie obige Demo basiert auf den [standard `classes` Werten](/styles/advanced/#with-material-ui-core). Sie k\\xf6nnen jedoch Ihren eigenen Klassennamen angeben: `.label`.\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Button from '@material-ui/core/Button';\\n\\nconst StyledButton = styled(({ color, ...other }) => (\\n  <Button classes={{ label: 'label' }} {...other} />\\n))`\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n  & .label {\\n    color: #fff;\\n  }\\n`;\\n\\nexport default function StyledComponentsDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <StyledButton>Customized</StyledButton>\\n    </div>\\n  );\\n}\\n```\\n\\n### Theme\\n\\nMaterial-UI hat eine reiche Themenstruktur, die Sie f\\xfcr Farbmanipulationen, \\xdcberg\\xe4nge, die Medien - Anfragen und mehr nutzen k\\xf6nnen,.\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\nconst StyledButton = styled(Button)`\\n  ${({ theme }) => `\\n  background-color: ${theme.palette.primary.main};\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 4px 10px;\\n  font-size: 13px;\\n  &:hover {\\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\\n  }\\n  ${theme.breakpoints.up('sm')} {\\n    font-size: 14px;\\n    padding: 7px 14px;\\n  }\\n  `}\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsTheme.js\\\"}}\\n\\n### Portale\\n\\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Aufgrund der Art und Weise, in der styled-components das CSS erfasst, k\\xf6nnen Probleme auftreten, bei denen das Styling nicht angewendet wird.\\n\\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`, you will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy. Das folgende Beispiel zeigt eine Problemumgehung:\\n\\n```jsx\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport Menu from '@material-ui/core/Menu';\\nimport MenuItem from '@material-ui/core/MenuItem';\\n\\nconst StyledMenu = styled(({ className, ...props }) => (\\n  <Menu {...props} classes={{ paper: className }} />\\n))`\\n  box-shadow: none;\\n  border: 1px solid #d3d4d5;\\n\\n  li {\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n  }\\n`;\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponentsPortal.js\\\"}}\\n\\n## CSS Modules\\n\\n![stars](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\\n\\nEs ist schwer zu wissen, welchen Marktanteil [diese Styling-L\\xf6sung](https://github.com/css-modules/css-modules) hat, da es von der B\\xfcndelungsl\\xf6sung, die die Leute verwenden abh\\xe4ngig ist.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\\n\\n**CssModulesButton.css**\\n\\n```css\\n.button {\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.button:hover {\\n  background-color: #5469d4;\\n}\\n```\\n\\n**CssModulesButton.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButton.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButton() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button className={styles.button}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Hinweis:** JSS f\\xfcgt seine Styles am unteren Rand von `<head>` ein. Wenn Sie Stilattribute nicht mit **!important** markieren m\\xf6chten, ist das wichtig, dass Sie die [ CSS-Injektionsreihenfolge ](/styles/advanced/#css-injection-order) wie in der Demo \\xe4ndern:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Tiefere Elemente\\n\\nWenn Sie versuchen, einen Drawer mit der Variante permanent zu stylen, m\\xfcssen Sie wahrscheinlich das untergeordnete Papierelement des Drawers beeinflussen. Das Paper ist jedoch nicht das Wurzelelement vom Drawer, sodass die Anpassung der gestalteten Komponenten wie oben daher nicht funktioniert. Sie m\\xfcssen die [`classes`](/styles/advanced/#overriding-styles-classes-prop) API von Material-UI verwenden.\\n\\nIm folgenden Beispiel wird der `label` Stil der `Button` Komponente zus\\xe4tzlich zu den benutzerdefinierten Stilen auf dem Button selbst \\xfcberschrieben.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/StyledComponents.js\\\", \\\"hideToolbar\\\": true}}\\n\\n**CssModulesButtonDeep.css**\\n\\n```css\\n.root {\\n  background-color: #6772e5;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n}\\n.root:hover {\\n  background-color: #5469d4;\\n}\\n.label {\\n  color: #fff;\\n}\\n```\\n\\n**CssModulesButtonDeep.js**\\n\\n```jsx\\nimport React from 'react';\\n// webpack, parcel or else will inject the CSS into the page\\nimport styles from './CssModulesButtonDeep.css';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function CssModulesButtonDeep() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button classes={styles}>Customized</Button>\\n    </div>\\n  );\\n}\\n```\\n\\n## Emotion\\n\\n![stars](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\\n\\n### Die `css` Eigenschaft\\n\\nDie Emotion **css()** Methode funktioniert nahtlos mit der Material-UI.\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionCSS.js\\\", \\\"hideToolbar\\\": true}}\\n\\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\\n\\n```jsx\\n/** @jsx jsx */\\nimport { jsx, css } from '@emotion/core';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function EmotionCSS() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button\\n        css={css`\\n          background-color: #6772e5;\\n          color: #fff;\\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n          padding: 7px 14px;\\n          &:hover {\\n            background-color: #5469d4;\\n          }\\n        `}\\n      >\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\n### Controlling priority \\u26a0\\ufe0f\\n\\n**Hinweis:** JSS f\\xfcgt seine Styles am unteren Rand von `<head>` ein. Wenn Sie Stilattribute nicht mit **!important** markieren m\\xf6chten, ist das wichtig, dass Sie die [ CSS-Injektionsreihenfolge ](/styles/advanced/#css-injection-order) wie in der Demo \\xe4ndern:\\n\\n```jsx\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Now, you can override Material-UI's styles. */}\\n</StylesProvider>\\n```\\n\\n### Theme\\n\\nMaterial-UI hat eine reiche Themenstruktur, die Sie f\\xfcr Farbmanipulationen, \\xdcberg\\xe4nge, die Medien - Anfragen und mehr nutzen k\\xf6nnen,.\\n\\nWe encourage to share the same theme object between Material-UI and your styles.\\n\\n```jsx\\n<Button\\n  css={theme => css`\\n    background-color: ${theme.palette.primary.main};\\n    color: #fff;\\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n    padding: 4px 10px;\\n    font-size: 13px;\\n    &:hover {\\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\\n    }\\n    ${theme.breakpoints.up('sm')} {\\n      font-size: 14px;\\n      padding: 7px 14px;\\n    }\\n  `}\\n>\\n  Customized\\n</Button>\\n```\\n\\n{{\\\"demo\\\": \\\"pages/guides/interoperability/EmotionTheme.js\\\"}}\\n\\n### Die `styled()` API\\n\\nEs funktioniert genauso wie gestylte Komponenten. Sie k\\xf6nnen [dieselbe Anleitung verwenden](/guides/interoperability/#styled-components).\"},nBrM:function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return y}));var o=t(\"z3IF\"),s=t(\"2Fjn\"),r=t(\"kGIj\"),a=t(\"mXGw\"),i=t.n(a),l=t(\"UutA\"),d=t(\"O8uh\"),c=t(\"DmyM\"),u=t(\"2zfq\"),p=i.a.createElement;function m(){var n=Object(r.a)([\"\\n  box-shadow: none;\\n  border: 1px solid #d3d4d5;\\n\\n  li {\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n  }\\n\"]);return m=function(){return n},n}var h=Object(l.b)((function(n){var e=n.className,t=Object(s.a)(n,[\"className\"]);return p(c.a,Object(o.a)({},t,{classes:{paper:e}}))}))(m());function y(){var n=i.a.useState(null),e=n[0],t=n[1],o=function(){t(null)};return p(\"div\",null,p(d.a,{\"aria-owns\":e?\"simple-menu\":void 0,\"aria-haspopup\":\"true\",variant:\"contained\",color:\"primary\",onClick:function(n){t(n.currentTarget)}},\"Open Menu\"),p(h,{id:\"simple-menu\",anchorEl:e,open:Boolean(e),onClose:o,getContentAnchorEl:null,anchorOrigin:{vertical:\"bottom\",horizontal:\"center\"},transformOrigin:{vertical:\"top\",horizontal:\"center\"}},p(u.a,{onClick:o},\"Profile\"),p(u.a,{onClick:o},\"My account\"),p(u.a,{onClick:o},\"Logout\")))}},pfvL:function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return m}));var o=t(\"kGIj\"),s=t(\"mXGw\"),r=t.n(s),a=t(\"UutA\"),i=t(\"O8uh\"),l=t(\"WKBU\"),d=r.a.createElement;function c(){var n=Object(o.a)([\"\\n  background-color: #6772e5;\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 7px 14px;\\n  &:hover {\\n    background-color: #5469d4;\\n  }\\n\"]);return c=function(){return n},n}var u=Object(a.b)(i.a)(c()),p=d(l.a,null,d(i.a,null,\"Default\"),d(u,null,\"Customized\"));function m(){return p}},whv5:function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return f}));var o=t(\"kGIj\"),s=t(\"mXGw\"),r=t.n(s),a=t(\"UutA\"),i=t(\"WKBU\"),l=t(\"mKyP\"),d=t(\"cYeA\"),c=t(\"h7Hf\"),u=t(\"O8uh\"),p=r.a.createElement;function m(){var n=Object(o.a)([\"\\n  \",\"\\n\"]);return m=function(){return n},n}var h=Object(l.a)({palette:{primary:{main:\"#6772e5\"}}}),y=Object(a.b)(u.a)(m(),(function(n){var e=n.theme;return\"\\n  background-color: \".concat(e.palette.primary.main,\";\\n  color: #fff;\\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\\n  padding: 4px 10px;\\n  font-size: 13px;\\n  &:hover {\\n    background-color: \").concat(Object(d.darken)(e.palette.primary.main,.2),\";\\n  }\\n  \").concat(e.breakpoints.up(\"sm\"),\" {\\n    font-size: 14px;\\n    padding: 7px 14px;\\n  }\\n  \")})),b=p(i.a,null,p(c.a,{theme:h},p(a.a,{theme:h},p(u.a,null,\"Default\"),p(y,null,\"Customized\"))));function f(){return b}},yWcT:function(n,e,t){\"use strict\";t.r(e),t.d(e,\"default\",(function(){return y}));var o=t(\"kGIj\"),s=t(\"mXGw\"),r=t.n(s),a=t(\"aD51\"),i=t(\"O8uh\"),l=t(\"5893\"),d=t(\"mKyP\"),c=t(\"h7Hf\"),u=t(\"cYeA\");r.a.createElement;function p(){var n=Object(o.a)([\"\\n            background-color: \",\";\\n            color: #fff;\\n            box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11),\\n              0 1px 3px rgba(0, 0, 0, 0.08);\\n            padding: 4px 10px;\\n            font-size: 13px;\\n            &:hover {\\n              background-color: \",\";\\n            }\\n            \",\" {\\n              font-size: 14px;\\n              padding: 7px 14px;\\n            }\\n          \"]);return p=function(){return n},n}var m=Object(d.a)({palette:{primary:{main:\"#6772e5\"}}}),h=Object(a.c)(i.a,null,\"Default\");function y(){return Object(a.c)(c.a,{theme:m},Object(a.c)(l.a,{theme:m},h,Object(a.c)(i.a,{css:function(n){return Object(a.b)(p(),n.palette.primary.main,Object(u.darken)(n.palette.primary.main,.2),n.breakpoints.up(\"sm\"))}},\"Customized\")))}},\"zGL/\":function(n,e){n.exports=\"/** @jsx jsx */\\nimport { jsx, css } from '@emotion/core';\\nimport Button from '@material-ui/core/Button';\\n\\nexport default function EmotionCSS() {\\n  return (\\n    <div>\\n      <Button>Default</Button>\\n      <Button\\n        css={css`\\n          background-color: #6772e5;\\n          color: #fff;\\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11),\\n            0 1px 3px rgba(0, 0, 0, 0.08);\\n          padding: 7px 14px;\\n          &:hover {\\n            background-color: #5469d4;\\n          }\\n        `}\\n      >\\n        Customized\\n      </Button>\\n    </div>\\n  );\\n}\\n\"}},[[\"CalN\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18,23,31]]]);"}