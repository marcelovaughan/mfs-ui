{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[333],{\"/7OA\":function(e,n){e.exports=\"# API\\n\\n<p class=\\\"description\\\">The API reference of @material-ui/core/styles.</p>\\n\\n## `createGenerateClassName([options]) => class name generator`\\n\\nA function which returns [a class name generator function](https://cssinjs.org/jss-api/#generate-your-class-names).\\n\\n### Arguments\\n\\n1. `options` (_Object_ [optional]):\\n\\n   - `options.disableGlobal` (_Boolean_ [optional]): Defaults to `false`. Disable the generation of deterministic class names.\\n   - `options.productionPrefix` (_String_ [optional]): Defaults to `'jss'`. The string used to prefix the class names in production.\\n   - `options.seed` (_String_ [optional]): Defaults to `''`. The string used to uniquely identify the generator. It can be used to avoid class name collisions when using multiple generators in the same document.\\n\\n### Returns\\n\\n`class name generator`: The generator should be provided to JSS.\\n\\n### Examples\\n\\n```jsx\\nimport React from 'react';\\nimport {\\n  StylesProvider,\\n  createGenerateClassName,\\n} from '@material-ui/core/styles';\\n\\nconst generateClassName = createGenerateClassName({\\n  productionPrefix: 'c',\\n});\\n\\nexport default function App() {\\n  return (\\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\\n  );\\n}\\n```\\n\\n## `createStyles(styles) => styles`\\n\\nThis function doesn't really \\\"do anything\\\" at runtime, it's just the identity\\nfunction. Its only purpose is to defeat **TypeScript**'s type widening when providing\\nstyle rules to `makeStyles`/`withStyles` which are a function of the `Theme`.\\n\\n### Arguments\\n\\n1. `styles` (_Object_): A styles object.\\n\\n### Returns\\n\\n`styles`: A styles object.\\n\\n### Examples\\n\\n```jsx\\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles((theme: Theme) => createStyles({\\n  root: {\\n    backgroundColor: theme.color.red,\\n  },\\n}));\\n\\nexport default function MyComponent {\\n  const classes = useStyles();\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `makeStyles(styles, [options]) => hook`\\n\\nLink a style sheet with a function component using the **hook** pattern.\\n\\n### Arguments\\n\\n1. `styles` (_Function | Object_): A function generating the styles or a styles object.\\n   It will be linked to the component.\\n   Use the function signature if you need to have access to the theme. It's provided as the first argument.\\n2. `options` (_Object_ [optional]):\\n\\n- `options.defaultTheme` (_Object_ [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n- `options.name` (_String_ [optional]): The name of the style sheet. Useful for debugging.\\n- `options.flip` (_Boolean_ [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n- The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### Returns\\n\\n`hook`: A hook. This hook can be used in a function component. The documentation often calls this returned hook `useStyles`.\\nIt accepts one argument: the properties that will be used for \\\"interpolation\\\" in\\nthe style sheet.\\n\\n### Examples\\n\\n```jsx\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles({\\n  root: {\\n    backgroundColor: 'red',\\n    color: (props) => props.color,\\n  },\\n});\\n\\nexport default function MyComponent(props) {\\n  const classes = useStyles(props);\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `ServerStyleSheets`\\n\\nThis is a class helper to handle server-side rendering. [You can follow this guide for a practical approach](/guides/server-rendering/).\\n\\n```jsx\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets } from '@material-ui/core/styles';\\n\\nconst sheets = new ServerStyleSheets();\\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\\nconst cssString = sheets.toString();\\n\\nconst response = `\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style id=\\\"jss-server-side\\\">${cssString}</style>\\n  </head>\\n  <body>${html}</body>\\n</html>\\n`;\\n```\\n\\n### `new ServerStyleSheets([options])`\\n\\nThe instantiation accepts an options object as a first argument.\\n\\n1. `options` (_Object_ [optional]): The options are spread as props to the [`StylesProvider`](#stylesprovider) component.\\n\\n### `sheets.collect(node) => React element`\\n\\nThe method wraps your React node in a provider element.\\nIt collects the style sheets during the rendering so they can be later sent to the client.\\n\\n### `sheets.toString() => CSS string`\\n\\nThe method returns the collected styles.\\n\\n\\u26a0\\ufe0f You must call `.collect()` before using this method.\\n\\n### `sheets.getStyleElement() => CSS React element`\\n\\nThe method is an alternative to `.toString()` when you are rendering the whole page with React.\\n\\n\\u26a0\\ufe0f You must call `.collect()` before using this method.\\n\\n## `styled(Component)(styles, [options]) => Component`\\n\\nLink a style sheet with a function component using the **styled components** pattern.\\n\\n### Arguments\\n\\n1. `Component`: The component that will be wrapped.\\n2. `styles` (_Function | Object_): A function generating the styles or a styles object.\\n   It will be linked to the component.\\n   Use the function signature if you need to have access to the theme. It's provided as property of the first argument.\\n3. `options` (_Object_ [optional]):\\n\\n- `options.defaultTheme` (_Object_ [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n- `options.withTheme` (_Boolean_ [optional]): Defaults to `false`. Provide the `theme` object to the component as a property.\\n- `options.name` (_String_ [optional]): The name of the style sheet. Useful for debugging.\\n  If the value isn't provided, it will try to fallback to the name of the component.\\n- `options.flip` (_Boolean_ [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n- The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### Returns\\n\\n`Component`: The new component created.\\n\\n### Examples\\n\\n```jsx\\nimport React from 'react';\\nimport { styled } from '@material-ui/core/styles';\\n\\nconst MyComponent = styled('div')({\\n  backgroundColor: 'red',\\n});\\n\\nconst MyThemeComponent = styled('div')(({ theme }) => ({\\n  padding: theme.spacing(1),\\n}));\\n\\nexport default function StyledComponents() {\\n  return (\\n    <MyThemeComponent>\\n      <MyComponent />\\n    </MyThemeComponent>\\n  );\\n}\\n```\\n\\n## `StylesProvider`\\n\\nThis component allows you to change the behavior of the styling solution. It makes the options available down the React tree thanks to the context.\\n\\nIt should preferably be used at **the root of your component tree**.\\n\\n### Props\\n\\n| Name              | Type   | Default | Description                                                                                                                                                                                                                                                                                                                          |\\n| :---------------- | :----- | :------ | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| children&nbsp;\\\\*  | node   |         | Your component tree.                                                                                                                                                                                                                                                                                                                 |\\n| disableGeneration | bool   | false   | You can disable the generation of the styles with this option. It can be useful when traversing the React tree outside of the HTML rendering step on the server. Let's say you are using react-apollo to extract all the queries made by the interface server-side. You can significantly speed up the traversal with this property. |\\n| generateClassName | func   |         | JSS's class name generator.                                                                                                                                                                                                                                                                                                          |\\n| injectFirst       | bool   | false   | By default, the styles are injected last in the `<head>` element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material-UI's styles, set this prop.                                                                                                                       |\\n| jss               | object |         | JSS's instance.                                                                                                                                                                                                                                                                                                                      |\\n\\n### Examples\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\nfunction App() {\\n  return <StylesProvider jss={jss}>...</StylesProvider>;\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `ThemeProvider`\\n\\nThis component takes a `theme` property, and makes it available down the React tree thanks to the context.\\nIt should preferably be used at **the root of your component tree**.\\n\\n### Props\\n\\n| Name             | Type                                     | Default | Description                                                           |\\n| :--------------- | :--------------------------------------- | :------ | :-------------------------------------------------------------------- |\\n| children&nbsp;\\\\* | node                                     |         | Your component tree.                                                  |\\n| theme&nbsp;\\\\*    | union:&nbsp;object&nbsp;&#124;&nbsp;func |         | A theme object. You can provide a function to extend the outer theme. |\\n\\n### Examples\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nconst theme = {};\\n\\nfunction App() {\\n  return <ThemeProvider theme={theme}>...</ThemeProvider>;\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `useTheme() => theme`\\n\\nThis hook returns the `theme` object so it can be used inside a function component.\\n\\n### Returns\\n\\n`theme`: The theme object previously injected in the context.\\n\\n### Examples\\n\\n```jsx\\nimport React from 'react';\\nimport { useTheme } from '@material-ui/core/styles';\\n\\nexport default function MyComponent() {\\n  const theme = useTheme();\\n\\n  return <div>{`spacing ${theme.spacing}`}</div>;\\n}\\n```\\n\\n## `withStyles(styles, [options]) => higher-order component`\\n\\nLink a style sheet with a component using the **higher-order component** pattern.\\nIt does not modify the component passed to it; instead, it returns a new component with a `classes` property.\\nThis `classes` object contains the name of the class names injected in the DOM.\\n\\nSome implementation details that might be interesting to being aware of:\\n\\n- It adds a `classes` property so you can override the injected class names from the outside.\\n- It forwards refs to the inner component.\\n- The `innerRef` prop is deprecated. Use `ref` instead.\\n- It does **not** copy over statics.\\n  For instance, it can be used to defined a `getInitialProps()` static method (next.js).\\n\\n### Arguments\\n\\n1. `styles` (_Function | Object_): A function generating the styles or a styles object.\\n   It will be linked to the component.\\n   Use the function signature if you need to have access to the theme. It's provided as the first argument.\\n2. `options` (_Object_ [optional]):\\n\\n- `options.defaultTheme` (_Object_ [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n- `options.withTheme` (_Boolean_ [optional]): Defaults to `false`. Provide the `theme` object to the component as a property.\\n- `options.name` (_String_ [optional]): The name of the style sheet. Useful for debugging.\\n  If the value isn't provided, it will try to fallback to the name of the component.\\n- `options.flip` (_Boolean_ [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n- The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### Returns\\n\\n`higher-order component`: Should be used to wrap a component.\\n\\n### Examples\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\nfunction MyComponent(props) {\\n  return <div className={props.classes.root} />;\\n}\\n\\nexport default withStyles(styles)(MyComponent);\\n```\\n\\nAlso, you can use as [decorators](https://babeljs.io/docs/en/babel-plugin-proposal-decorators) like so:\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\n@withStyles(styles)\\nclass MyComponent extends React.Component {\\n  render() {\\n    return <div className={this.props.classes.root} />;\\n  }\\n}\\n\\nexport default MyComponent;\\n```\\n\\n## `withTheme(Component) => Component`\\n\\nProvide the `theme` object as a property of the input component so it can be used\\nin the render method.\\n\\n### Arguments\\n\\n1. `Component`: The component that will be wrapped.\\n\\n### Returns\\n\\n`Component`: The new component created. Does forward refs to the inner component.\\n\\n### Examples\\n\\n```jsx\\nimport React from 'react';\\nimport { withTheme } from '@material-ui/core/styles';\\n\\nfunction MyComponent(props) {\\n  return <div>{props.theme.direction}</div>;\\n}\\n\\nexport default withTheme(MyComponent);\\n```\\n\"},\"2yLe\":function(e,n){e.exports=\"# API\\n\\n<p class=\\\"description\\\">The API reference of @material-ui/core/styles.</p>\\n\\n## `createGenerateClassName([options]) => class name generator`\\n\\nA function which returns [a class name generator function](https://cssinjs.org/jss-api/#generate-your-class-names).\\n\\n### Argumentos\\n\\n1. `options` (*Object* [optional]): \\n  - `options.disableGlobal` (*Boolean* [optional]): Default `false`. Disable the generation of deterministic class names.\\n  - `options.productionPrefix` (*String* [optional]): Defaults to `'jss'`. The string used to prefix the class names in production.\\n  - `options.seed` (*String* [optional]): Defaults to `''`. The string used to uniquely identify the generator. It can be used to avoid class name collisions when using multiple generators in the same document.\\n\\n### Regresa\\n\\n`class name generator`: The generator should be provided to JSS.\\n\\n### Ejemplos\\n\\n```jsx\\nimport React from 'react';\\nimport { StylesProvider, createGenerateClassName } from '@material-ui/core/styles';\\n\\nconst generateClassName = createGenerateClassName({\\n  productionPrefix: 'c',\\n});\\n\\nexport default function App() {\\n  return (\\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\\n  );\\n}\\n```\\n\\n## `createStyles(styles) => styles`\\n\\nThis function doesn't really \\\"do anything\\\" at runtime, it's just the identity function. Its only purpose is to defeat **TypeScript**'s type widening when providing style rules to `makeStyles`/`withStyles` which are a function of the `Theme`.\\n\\n### Argumentos\\n\\n1. `styles` (*Object*): A styles object.\\n\\n### Regresa\\n\\n`styles`: A styles object.\\n\\n### Ejemplos\\n\\n```jsx\\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles((theme: Theme) => createStyles({\\n  root: {\\n    backgroundColor: theme.color.red,\\n  },\\n}));\\n\\nexport default function MyComponent {\\n  const classes = useStyles();\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `makeStyles(styles, [options]) => hook`\\n\\nLink a style sheet with a function component using the **hook** pattern.\\n\\n### Argumentos\\n\\n1. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It's provided as the first argument.\\n2. `options` (*Object* [optional]): \\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging.\\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### Regresa\\n\\n`hook`: A hook. This hook can be used in a function component. The documentation often calls this returned hook `useStyles`. It accepts one argument: the properties that will be used for \\\"interpolation\\\" in the style sheet.\\n\\n### Ejemplos\\n\\n```jsx\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles({\\n  root: {\\n    backgroundColor: 'red',\\n    color: props => props.color,\\n  },\\n});\\n\\nexport default function MyComponent(props) {\\n  const classes = useStyles(props);\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `ServerStyleSheets`\\n\\nThis is a class helper to handle server-side rendering. [You can follow this guide for a practical approach](/guides/server-rendering/).\\n\\n```jsx\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets } from '@material-ui/core/styles';\\n\\nconst sheets = new ServerStyleSheets();\\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\\nconst cssString = sheets.toString();\\n\\nconst response = `\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style id=\\\"jss-server-side\\\">${cssString}</style>\\n  </head>\\n  <body>${html}</body>\\n</html>\\n`;\\n```\\n\\n### `new ServerStyleSheets([options])`\\n\\nThe instantiation accepts an options object as a first argument.\\n\\n1. `options` (*Object* [optional]): The options are spread as props to the [`StylesProvider`](#stylesprovider) component.\\n\\n### `sheets.collect(node) => React element`\\n\\nThe method wraps your React node in a provider element. It collects the style sheets during the rendering so they can be later sent to the client.\\n\\n### `sheets.toString() => CSS string`\\n\\nThe method returns the collected styles.\\n\\n\\u26a0\\ufe0f You must call `.collect()` before using this method.\\n\\n### `sheets.getStyleElement() => CSS React element`\\n\\nThe method is an alternative to `.toString()` when you are rendering the whole page with React.\\n\\n\\u26a0\\ufe0f You must call `.collect()` before using this method.\\n\\n## `styled(Component)(styles, [options]) => Component`\\n\\nLink a style sheet with a function component using the **styled components** pattern.\\n\\n### Argumentos\\n\\n1. `Component`: The component that will be wrapped.\\n2. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It's provided as property of the first argument.\\n3. `options` (*Object* [optional]): \\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n  - `options.withTheme` (*Boolean* [optional]): Default `false`. Provide the `theme` object to the component as a property.\\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging. If the value isn't provided, it will try to fallback to the name of the component.\\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### Regresa\\n\\n`Component`: The new component created.\\n\\n### Ejemplos\\n\\n```jsx\\nimport React from 'react';\\nimport { styled } from '@material-ui/core/styles';\\n\\nconst MyComponent = styled('div')({\\n  backgroundColor: 'red',\\n});\\n\\nconst MyThemeComponent = styled('div')(({\\n  theme\\n}) => ({\\n  padding: theme.spacing(1),\\n}));\\n\\nexport default function StyledComponents() {\\n  return (\\n    <MyThemeComponent>\\n      <MyComponent />\\n    </MyThemeComponent>\\n  );\\n}\\n```\\n\\n## `StylesProvider`\\n\\nThis component allows you to change the behavior of the styling solution. It makes the options available down the React tree thanks to the context.\\n\\nIt should preferably be used at **the root of your component tree**.\\n\\n### Props\\n\\n| Nombre            | Tipo   | Por defecto | Descripci\\xf3n                                                                                                                                                                                                                                                                                                                          |\\n|:----------------- |:------ |:----------- |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\\n| hijos&nbsp;*      | node   |             | Your component tree.                                                                                                                                                                                                                                                                                                                 |\\n| disableGeneration | bool   | false       | You can disable the generation of the styles with this option. It can be useful when traversing the React tree outside of the HTML rendering step on the server. Let's say you are using react-apollo to extract all the queries made by the interface server-side. You can significantly speed up the traversal with this property. |\\n| generateClassName | func   |             | JSS's class name generator.                                                                                                                                                                                                                                                                                                          |\\n| injectFirst       | bool   | false       | By default, the styles are injected last in the `<head>` element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material-UI's styles, set this prop.                                                                                                                 |\\n| jss               | object |             | JSS's instance.                                                                                                                                                                                                                                                                                                                      |\\n\\n\\n### Ejemplos\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\nfunction App() {\\n  return (\\n    <StylesProvider jss={jss}>...</StylesProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `ThemeProvider`\\n\\nThis component takes a `theme` property, and makes it available down the React tree thanks to the context. It should preferably be used at **the root of your component tree**.\\n\\n### Props\\n\\n| Nombre       | Tipo                                     | Por defecto | Descripci\\xf3n                                                           |\\n|:------------ |:---------------------------------------- |:----------- |:--------------------------------------------------------------------- |\\n| hijos&nbsp;* | node                                     |             | Your component tree.                                                  |\\n| theme&nbsp;* | union:&nbsp;object&nbsp;&#124;&nbsp;func |             | A theme object. You can provide a function to extend the outer theme. |\\n\\n\\n### Ejemplos\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nconst theme = {};\\n\\nfunction App() {\\n  return (\\n    <ThemeProvider theme={theme}>...</ThemeProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `useTheme() => theme`\\n\\nThis hook returns the `theme` object so it can be used inside a function component.\\n\\n### Regresa\\n\\n`theme`: The theme object previously injected in the context.\\n\\n### Ejemplos\\n\\n```jsx\\nimport React from 'react';\\nimport { useTheme } from '@material-ui/core/styles';\\n\\nexport default function MyComponent() {\\n  const theme = useTheme();\\n\\n  return <div>{`spacing ${theme.spacing}`}</div>;\\n}\\n```\\n\\n## `withStyles(styles, [options]) => higher-order component`\\n\\nLink a style sheet with a component using the **higher-order component** pattern. It does not modify the component passed to it; instead, it returns a new component with a `classes` property. This `classes` object contains the name of the class names injected in the DOM.\\n\\nSome implementation details that might be interesting to being aware of:\\n\\n- It adds a `classes` property so you can override the injected class names from the outside.\\n- It forwards refs to the inner component.\\n- The `innerRef` prop is deprecated. Use `ref` instead.\\n- It does **not** copy over statics. For instance, it can be used to defined a `getInitialProps()` static method (next.js).\\n\\n### Argumentos\\n\\n1. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It's provided as the first argument.\\n2. `options` (*Object* [optional]): \\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n  - `options.withTheme` (*Boolean* [optional]): Default `false`. Provide the `theme` object to the component as a property.\\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging. If the value isn't provided, it will try to fallback to the name of the component.\\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### Regresa\\n\\n`higher-order component`: Should be used to wrap a component.\\n\\n### Ejemplos\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\nfunction MyComponent(props) {\\n  return <div className={props.classes.root} />;\\n}\\n\\nexport default withStyles(styles)(MyComponent);\\n```\\n\\nAlso, you can use as [decorators](https://babeljs.io/docs/en/babel-plugin-proposal-decorators) like so:\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\n@withStyles(styles)\\nclass MyComponent extends React.Component {\\n  render () {\\n    return <div className={this.props.classes.root} />;\\n  }\\n}\\n\\nexport default MyComponent\\n```\\n\\n## `withTheme(Component) => Component`\\n\\nProvide the `theme` object as a property of the input component so it can be used in the render method.\\n\\n### Argumentos\\n\\n1. `Component`: The component that will be wrapped.\\n\\n### Regresa\\n\\n`Component`: The new component created. Does forward refs to the inner component.\\n\\n### Ejemplos\\n\\n```jsx\\nimport React from 'react';\\nimport { withTheme } from '@material-ui/core/styles';\\n\\nfunction MyComponent(props) {\\n  return <div>{props.theme.direction}</div>;\\n}\\n\\nexport default withTheme(MyComponent);\\n```\"},\"6AgR\":function(e,n){e.exports=\"# API\\n\\n<p class=\\\"description\\\">The API reference of @material-ui/core/styles.</p>\\n\\n## `createGenerateClassName([options]) => class name generator`\\n\\n[\\u30af\\u30e9\\u30b9\\u540d\\u30b8\\u30a7\\u30cd\\u30ec\\u30fc\\u30bf\\u30fc\\u95a2\\u6570\\u3092\\u8fd4\\u3059\\u95a2\\u6570](https://cssinjs.org/jss-api/#generate-your-class-names) \\u3002\\n\\n### \\u5f15\\u6570\\n\\n1. `\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3` (*\\u30aa\\u30d7\\u30b8\\u30a7\\u30af\\u30c8* [\\u4efb\\u610f]): \\n  - `options.disableGlobal` (*Boolean* [optional]): Defaults `false`. \\u78ba\\u5b9a\\u7684\\u306a\\u30af\\u30e9\\u30b9\\u540d\\u306e\\u751f\\u6210\\u3092\\u7121\\u52b9\\u306b\\u3057\\u307e\\u3059\\u3002\\n  - `options.productionPrefix` (*String* [optional]): Defaults to `'jss'`. \\u30d7\\u30ed\\u30c0\\u30af\\u30b7\\u30e7\\u30f3\\u3067\\u30af\\u30e9\\u30b9\\u540d\\u306e\\u30d7\\u30ec\\u30d5\\u30a3\\u30c3\\u30af\\u30b9\\u306b\\u4f7f\\u7528\\u3055\\u308c\\u308b\\u6587\\u5b57\\u5217\\u3002\\n  - `options.seed` (*String* [optional]): Defaults to `''`. \\u30b8\\u30a7\\u30cd\\u30ec\\u30fc\\u30bf\\u3092\\u4e00\\u610f\\u306b\\u8b58\\u5225\\u3059\\u308b\\u305f\\u3081\\u306b\\u4f7f\\u7528\\u3055\\u308c\\u308b\\u6587\\u5b57\\u5217\\u3002 \\u540c\\u3058\\u30c9\\u30ad\\u30e5\\u30e1\\u30f3\\u30c8\\u3067\\u8907\\u6570\\u306e\\u30b8\\u30a7\\u30cd\\u30ec\\u30fc\\u30bf\\u30fc\\u3092\\u4f7f\\u7528\\u3059\\u308b\\u5834\\u5408\\u3001\\u30af\\u30e9\\u30b9\\u540d\\u306e\\u885d\\u7a81\\u3092\\u907f\\u3051\\u308b\\u305f\\u3081\\u306b\\u4f7f\\u7528\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n### \\u623b\\u308a\\u5024\\n\\n`class name generator` \\uff1a\\u30b8\\u30a7\\u30cd\\u30ec\\u30fc\\u30bf\\u30fc\\u3092JSS\\u306b\\u63d0\\u4f9b\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002\\n\\n### \\u4f8b\\n\\n```jsx\\nimport React from 'react';\\nimport { StylesProvider, createGenerateClassName } from '@material-ui/core/styles';\\n\\nconst generateClassName = createGenerateClassName({\\n  productionPrefix: 'c',\\n});\\n\\nexport default function App() {\\n  return (\\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\\n  );\\n}\\n```\\n\\n## `createStyles(styles) => styles`\\n\\nThis function doesn't really \\\"do anything\\\" at runtime, it's just the identity function. Its only purpose is to defeat **TypeScript**'s type widening when providing style rules to `makeStyles`/`withStyles` which are a function of the `Theme`.\\n\\n### \\u5f15\\u6570\\n\\n1. `styles` (*Object*): A styles object.\\n\\n### \\u623b\\u308a\\u5024\\n\\n`styles`: A styles object.\\n\\n### \\u4f8b\\n\\n```jsx\\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles((theme: Theme) => createStyles({\\n  root: {\\n    backgroundColor: theme.color.red,\\n  },\\n}));\\n\\nexport default function MyComponent {\\n  const classes = useStyles();\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `makeStyles(styles, [options]) => hook`\\n\\nLink a style sheet with a function component using the **hook** pattern.\\n\\n### \\u5f15\\u6570\\n\\n1. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It's provided as the first argument.\\n2. `\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3` (*\\u30aa\\u30d7\\u30b8\\u30a7\\u30af\\u30c8* [\\u4efb\\u610f]): \\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging.\\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### \\u623b\\u308a\\u5024\\n\\n`hook`: A hook. This hook can be used in a function component. The documentation often calls this returned hook `useStyles`. It accepts one argument: the properties that will be used for \\\"interpolation\\\" in the style sheet.\\n\\n### \\u4f8b\\n\\n```jsx\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles({\\n  root: {\\n    backgroundColor: 'red',\\n    color: props => props.color,\\n  },\\n});\\n\\nexport default function MyComponent(props) {\\n  const classes = useStyles(props);\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `ServerStyleSheets`\\n\\nThis is a class helper to handle server-side rendering. [You can follow this guide for a practical approach](/guides/server-rendering/).\\n\\n```jsx\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets } from '@material-ui/core/styles';\\n\\nconst sheets = new ServerStyleSheets();\\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\\nconst cssString = sheets.toString();\\n\\nconst response = `\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style id=\\\"jss-server-side\\\">${cssString}</style>\\n  </head>\\n  <body>${html}</body>\\n</html>\\n`;\\n```\\n\\n### `new ServerStyleSheets([options])`\\n\\nThe instantiation accepts an options object as a first argument.\\n\\n1. `options` (*Object* [optional]): The options are spread as props to the [`StylesProvider`](#stylesprovider) component.\\n\\n### `sheets.collect(node) => React element`\\n\\nThe method wraps your React node in a provider element. It collects the style sheets during the rendering so they can be later sent to the client.\\n\\n### `sheets.toString() => CSS string`\\n\\nThe method returns the collected styles.\\n\\n\\u26a0\\ufe0f You must call `.collect()` before using this method.\\n\\n### `\\nsheets.getStyleElement() => CSS React element`\\n\\nThe method is an alternative to `.toString()` when you are rendering the whole page with React.\\n\\n\\u26a0\\ufe0f You must call `.collect()` before using this method.\\n\\n## `styled(Component)(styles, [options]) => Component`\\n\\nLink a style sheet with a function component using the **styled components** pattern.\\n\\n### \\u5f15\\u6570\\n\\n1. `Component`:\\uff1a\\u30e9\\u30c3\\u30d7\\u3055\\u308c\\u308b\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3002\\n2. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It's provided as property of the first argument.\\n3. `\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3` (*\\u30aa\\u30d7\\u30b8\\u30a7\\u30af\\u30c8* [\\u4efb\\u610f]): \\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n  - `options.withTheme` (*\\u30d6\\u30fc\\u30eb\\u5024* [\\u4efb\\u610f]): \\u30c7\\u30d5\\u30a9\\u30eb\\u30c8\\u5024 `false`. `theme`\\u30aa\\u30d6\\u30b8\\u30a7\\u30af\\u30c8\\u3092\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3068\\u3057\\u3066\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306b\\u63d0\\u4f9b\\u3057\\u307e\\u3059\\u3002\\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging. If the value isn't provided, it will try to fallback to the name of the component.\\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### \\u623b\\u308a\\u5024\\n\\n`Component` \\uff1a\\u4f5c\\u6210\\u3055\\u308c\\u305f\\u65b0\\u3057\\u3044\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3002\\n\\n### \\u4f8b\\n\\n```jsx\\nimport React from 'react';\\nimport { styled } from '@material-ui/core/styles';\\n\\nconst MyComponent = styled('div')({\\n  backgroundColor: 'red',\\n});\\n\\nconst MyThemeComponent = styled('div')(({\\n  theme\\n}) => ({\\n  padding: theme.spacing(1),\\n}));\\n\\nexport default function StyledComponents() {\\n  return (\\n    <MyThemeComponent>\\n      <MyComponent />\\n    </MyThemeComponent>\\n  );\\n}\\n```\\n\\n## `StylesProvider`\\n\\nThis component allows you to change the behavior of the styling solution. It makes the options available down the React tree thanks to the context.\\n\\nIt should preferably be used at **the root of your component tree**.\\n\\n### Props\\n\\n| Name              | Type   | Default | Description                                                                                                                                                                                                                                                                                                                          |\\n|:----------------- |:------ |:------- |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\\n| children&nbsp;*   | node   |         | Your component tree.                                                                                                                                                                                                                                                                                                                 |\\n| disableGeneration | bool   | false   | You can disable the generation of the styles with this option. It can be useful when traversing the React tree outside of the HTML rendering step on the server. Let's say you are using react-apollo to extract all the queries made by the interface server-side. You can significantly speed up the traversal with this property. |\\n| generateClassName | func   |         | JSS's class name generator.                                                                                                                                                                                                                                                                                                          |\\n| injectFirst       | bool   | false   | By default, the styles are injected last in the `<head>` element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material-UI's styles, set this prop.                                                                                                                 |\\n| jss               | object |         | JSS's instance.                                                                                                                                                                                                                                                                                                                      |\\n\\n\\n### \\u4f8b\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\nfunction App() {\\n  return (\\n    <StylesProvider jss={jss}>...</StylesProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `ThemeProvider`\\n\\nThis component takes a `theme` property, and makes it available down the React tree thanks to the context. It should preferably be used at **the root of your component tree**.\\n\\n### Props\\n\\n| Name            | Type                                     | Default | Description                                                           |\\n|:--------------- |:---------------------------------------- |:------- |:--------------------------------------------------------------------- |\\n| children&nbsp;* | node                                     |         | Your component tree.                                                  |\\n| theme&nbsp;*    | union:&nbsp;object&nbsp;&#124;&nbsp;func |         | A theme object. You can provide a function to extend the outer theme. |\\n\\n\\n### \\u4f8b\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nconst theme = {};\\n\\nfunction App() {\\n  return (\\n    <ThemeProvider theme={theme}>...</ThemeProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `useTheme() => theme`\\n\\nThis hook returns the `theme` object so it can be used inside a function component.\\n\\n### \\u623b\\u308a\\u5024\\n\\n`theme`\\uff1a\\u4ee5\\u524d\\u306b\\u30b3\\u30f3\\u30c6\\u30ad\\u30b9\\u30c8\\u306b\\u633f\\u5165\\u3055\\u308c\\u305f\\u30c6\\u30fc\\u30de\\u30aa\\u30d6\\u30b8\\u30a7\\u30af\\u30c8\\u3002\\n\\n### \\u4f8b\\n\\n```jsx\\nimport React from 'react';\\nimport { useTheme } from '@material-ui/core/styles';\\n\\nexport default function MyComponent() {\\n  const theme = useTheme();\\n\\n  return <div>{`spacing ${theme.spacing}`}</div>;\\n}\\n```\\n\\n## `withStyles(styles, [options]) => higher-order component`\\n\\nLink a style sheet with a component using the **higher-order component** pattern. It does not modify the component passed to it; instead, it returns a new component with a `classes` property. This `classes` object contains the name of the class names injected in the DOM.\\n\\n\\u6ce8\\u610f\\u304c\\u5fc5\\u8981\\u306a\\u5b9f\\u88c5\\u306e\\u8a73\\u7d30\\u306f\\u3001\\u6b21\\u306e\\u3068\\u304a\\u308a\\u3067\\u3059\\u3002\\n\\n- It adds a `classes` property so you can override the injected class names from the outside.\\n- It forwards refs to the inner component.\\n- The `innerRef` prop is deprecated. Use `ref` instead.\\n- It does **not** copy over statics. \\u305f\\u3068\\u3048\\u3070\\u3001`getInitialProps()`\\u9759\\u7684\\u30e1\\u30bd\\u30c3\\u30c9 (next.js) \\u3092\\u5b9a\\u7fa9\\u3059\\u308b\\u305f\\u3081\\u306b\\u4f7f\\u7528\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n### \\u5f15\\u6570\\n\\n1. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It's provided as the first argument.\\n2. `\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3` (*\\u30aa\\u30d7\\u30b8\\u30a7\\u30af\\u30c8* [\\u4efb\\u610f]): \\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n  - `options.withTheme` (*\\u30d6\\u30fc\\u30eb\\u5024* [\\u4efb\\u610f]): \\u30c7\\u30d5\\u30a9\\u30eb\\u30c8\\u5024 `false`. `theme`\\u30aa\\u30d6\\u30b8\\u30a7\\u30af\\u30c8\\u3092\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3068\\u3057\\u3066\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306b\\u63d0\\u4f9b\\u3057\\u307e\\u3059\\u3002\\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging. If the value isn't provided, it will try to fallback to the name of the component.\\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### \\u623b\\u308a\\u5024\\n\\n`higher-order component` \\uff1a\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3092\\u30e9\\u30c3\\u30d7\\u3059\\u308b\\u305f\\u3081\\u306b\\u4f7f\\u7528\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002\\n\\n### \\u4f8b\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\nfunction MyComponent(props) {\\n  return <div className={props.classes.root} />;\\n}\\n\\nexport default withStyles(styles)(MyComponent);\\n```\\n\\n\\u307e\\u305f\\u3001[\\u30c7\\u30b3\\u30ec\\u30fc\\u30bf](https://babeljs.io/docs/en/babel-plugin-proposal-decorators)\\u306a\\u3069\\u3068\\u3057\\u3066\\u3057\\u3066\\u3082\\u4f7f\\u7528\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\n@withStyles(styles)\\nclass MyComponent extends React.Component {\\n  render () {\\n    return <div className={this.props.classes.root} />;\\n  }\\n}\\n\\nexport default MyComponent\\n```\\n\\n## `withTheme(Component) => Component`\\n\\nProvide the `theme` object as a property of the input component so it can be used in the render method.\\n\\n### \\u5f15\\u6570\\n\\n1. `Component`:\\uff1a\\u30e9\\u30c3\\u30d7\\u3055\\u308c\\u308b\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3002\\n\\n### \\u623b\\u308a\\u5024\\n\\n`Component` \\uff1a\\u4f5c\\u6210\\u3055\\u308c\\u305f\\u65b0\\u3057\\u3044\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3002 \\u5185\\u90e8\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3078\\u306e\\u53c2\\u7167\\u3092\\u8ee2\\u9001\\u3057\\u307e\\u3059\\u3002\\n\\n### \\u4f8b\\n\\n```jsx\\nimport React from 'react';\\nimport { withTheme } from '@material-ui/core/styles';\\n\\nfunction MyComponent(props) {\\n  return <div>{props.theme.direction}</div>;\\n}\\n\\nexport default withTheme(MyComponent);\\n```\"},\"7hPl\":function(e,n){e.exports=\"# API\\n\\n<p class=\\\"description\\\">The API reference of @material-ui/core/styles.</p>\\n\\n## `createGenerateClassName([options]) => class name generator`\\n\\n\\u8fd4\\u56de [ \\u7c7b\\u540d\\u79f0\\u751f\\u6210\\u5668\\u51fd\\u6570 ](https://cssinjs.org/jss-api/#generate-your-class-names) \\u7684\\u51fd\\u6570\\u3002\\n\\n### \\u53c2\\u6570\\n\\n1. `options` (*Object* [optional]): \\n  - `options.disableGlobal` (*Boolean* [optional]): \\u9ed8\\u8ba4\\u503c\\u4e3a`false`\\u3002 Disable the generation of deterministic class names.\\n  - `options.productionPrefix` (*String* [optional])\\uff1a\\u521d\\u59cb\\u503c\\u4e3a`'jss'`. \\u7528\\u4e8e\\u5728\\u751f\\u4ea7\\u4e2d\\u5bf9\\u7c7b\\u540d\\u79f0\\u8fdb\\u884c\\u524d\\u7f00\\u7684\\u5b57\\u7b26\\u4e32\\u3002\\n  - `options.seed` (*String* [optional])\\uff1a\\u521d\\u59cb\\u503c\\u4e3a `''`. \\u7528\\u4e8e\\u552f\\u4e00\\u6807\\u8bc6\\u751f\\u6210\\u5668\\u7684\\u5b57\\u7b26\\u4e32\\u3002 It can be used to avoid class name collisions when using multiple generators in the same document.\\n\\n### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`\\u7c7b\\u540d\\u751f\\u6210\\u5668`\\uff1a\\u5e94\\u8be5\\u5c06\\u751f\\u6210\\u5668\\u63d0\\u4f9b\\u7ed9JSS\\u3002\\n\\n### \\u4f8b\\u5b50\\n\\n```jsx\\nimport React from 'react';\\nimport { StylesProvider, createGenerateClassName } from '@material-ui/core/styles';\\n\\nconst generateClassName = createGenerateClassName({\\n  productionPrefix: 'c',\\n});\\n\\nexport default function App() {\\n  return (\\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\\n  );\\n}\\n```\\n\\n## `createStyles(styles) => styles`\\n\\n\\u8fd9\\u4e2a\\u51fd\\u6570\\u5728\\u8fd0\\u884c\\u65f6\\u5e76\\u6ca1\\u6709\\u771f\\u6b63\\u201c\\u505a\\u4efb\\u4f55\\u4e8b\\u201d\\uff0c\\u5b83\\u53ea\\u662f\\u8eab\\u4efd \\u51fd\\u6570\\u3002 Its only purpose is to defeat **TypeScript**'s type widening when providing style rules to `makeStyles`/`withStyles` which are a function of the `Theme`.\\n\\n### \\u53c2\\u6570\\n\\n1. `styles` (*Object*): A styles object.\\n\\n### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`styles`: A styles object.\\n\\n### \\u4f8b\\u5b50\\n\\n```jsx\\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles((theme: Theme) => createStyles({\\n  root: {\\n    backgroundColor: theme.color.red,\\n  },\\n}));\\n\\nexport default function MyComponent {\\n  const classes = useStyles();\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `makeStyles(styles, [options]) => hook`\\n\\n\\u94fe\\u8def\\u7684\\u6837\\u5f0f\\u8868\\u4e2d\\u6709\\u4e00\\u4e2a\\u529f\\u80fd\\u7ec4\\u4ef6\\u7684\\u4f7f\\u7528**\\u94a9**\\u7684\\u6a21\\u5f0f\\u3002\\n\\n### \\u53c2\\u6570\\n\\n1. ` styles `(* Function | Object *): \\u751f\\u6210\\u6837\\u5f0f\\u6216\\u6837\\u5f0f\\u5bf9\\u8c61\\u7684\\u51fd\\u6570\\u3002 \\u5b83\\u5c06\\u94fe\\u63a5\\u5230\\u7ec4\\u4ef6\\u3002 \\u5982\\u679c\\u9700\\u8981\\u8bbf\\u95ee\\u4e3b\\u9898, \\u8bf7\\u4f7f\\u7528\\u51fd\\u6570\\u7b7e\\u540d\\u3002 \\u5b83\\u4f5c\\u4e3a\\u7b2c\\u4e00\\u4e2a\\u53c2\\u6570\\u63d0\\u4f9b\\u3002\\n2. `options` (*Object* [optional]): \\n  - `options.defaultTheme`\\uff08*Object* [optional]\\uff09\\uff1a\\u5982\\u679c\\u672a\\u901a\\u8fc7\\u4e3b\\u9898\\u63d0\\u4f9b\\u8005\\u63d0\\u4f9b\\u4e3b\\u9898\\uff0c\\u5219\\u4f7f\\u7528\\u9ed8\\u8ba4\\u4e3b\\u9898\\u3002\\n  - ` options.name ` (*String* [optional]): \\u6837\\u5f0f\\u8868\\u7684\\u540d\\u79f0\\u3002 \\u7528\\u4e8e\\u8c03\\u8bd5\\u3002\\n  - `options.flip` (*Boolean* [optional])\\uff1a\\u5f53\\u8bbe\\u7f6e\\u4e3a `false` \\u65f6, \\u6b64\\u5de5\\u4f5c\\u8868\\u5c06\\u9009\\u62e9\\u9000\\u51fa ` rtl ` \\u8f6c\\u6362\\u3002 \\u5982\\u679c\\u8bbe\\u7f6e\\u4e3a ` true `, \\u5219\\u4f1a\\u53cd\\u8f6c\\u6837\\u5f0f\\u3002 \\u5f53\\u8bbe\\u7f6e\\u4e3a`null`\\uff0c\\u5b83\\u8ddf\\u968f`theme.direction`\\u3002\\n  - \\u5176\\u4ed6\\u952e\\u88ab\\u8f6c\\u53d1\\u5230[jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet)\\u3002\\n\\n### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`hook` \\uff1a \\u4e00\\u4e2a\\u94a9\\u5b50\\u3002 \\u8be5\\u94a9\\u5b50\\u53ef\\u4ee5\\u7528\\u5728\\u529f\\u80fd\\u7ec4\\u4ef6\\u4e2d\\u3002 The documentation often calls this returned hook `useStyles`. \\u5b83\\u63a5\\u53d7\\u4e00\\u4e2a\\u53c2\\u6570\\uff1a\\u5c06\\u7528\\u4e8e\\u5728\\u201c\\u5185\\u63d2\\u201d\\u7684\\u5c5e\\u6027 \\u6837\\u5f0f\\u8868\\u3002\\n\\n### \\u4f8b\\u5b50\\n\\n```jsx\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles({\\n  root: {\\n    backgroundColor: 'red',\\n    color: props => props.color,\\n  },\\n});\\n\\nexport default function MyComponent(props) {\\n  const classes = useStyles(props);\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `ServerStyleSheets`\\n\\nThis is a class helper to handle server-side rendering. [You can follow this guide for a practical approach](/guides/server-rendering/).\\n\\n```jsx\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets } from '@material-ui/core/styles';\\n\\nconst sheets = new ServerStyleSheets();\\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\\nconst cssString = sheets.toString();\\n\\nconst response = `\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style id=\\\"jss-server-side\\\">${cssString}</style>\\n  </head>\\n  <body>${html}</body>\\n</html>\\n`;\\n```\\n\\n### `new ServerStyleSheets([options])`\\n\\nThe instantiation accepts an options object as a first argument.\\n\\n1. `options` (*Object* [optional]): The options are spread as props to the [`StylesProvider`](#stylesprovider) component.\\n\\n### `sheets.collect(node) => React element`\\n\\nThe method wraps your React node in a provider element. It collects the style sheets during the rendering so they can be later sent to the client.\\n\\n### `sheets.toString() => CSS string`\\n\\nThe method returns the collected styles.\\n\\n\\u26a0\\ufe0f You must call `.collect()` before using this method.\\n\\n### `sheets.getStyleElement() => CSS React element`\\n\\nThe method is an alternative to `.toString()` when you are rendering the whole page with React.\\n\\n\\u26a0\\ufe0f You must call `.collect()` before using this method.\\n\\n## `styled(Component)(styles, [options]) => Component`\\n\\n\\u94fe\\u8def\\u7684\\u6837\\u5f0f\\u8868\\u4e2d\\u6709\\u4e00\\u4e2a\\u529f\\u80fd\\u7ec4\\u4ef6\\u7684\\u4f7f\\u7528**styled components**\\u7684\\u6a21\\u5f0f\\u3002\\n\\n### \\u53c2\\u6570\\n\\n1. `Component` \\uff1a\\u5c06\\u88ab\\u5305\\u88c5\\u7684\\u7ec4\\u4ef6\\u3002\\n2. ` styles `(* Function | Object *): \\u751f\\u6210\\u6837\\u5f0f\\u6216\\u6837\\u5f0f\\u5bf9\\u8c61\\u7684\\u51fd\\u6570\\u3002 \\u5b83\\u5c06\\u94fe\\u63a5\\u5230\\u7ec4\\u4ef6\\u3002 \\u5982\\u679c\\u9700\\u8981\\u8bbf\\u95ee\\u4e3b\\u9898, \\u8bf7\\u4f7f\\u7528\\u51fd\\u6570\\u7b7e\\u540d\\u3002 It's provided as property of the first argument.\\n3. `options` (*Object* [optional]): \\n  - `options.defaultTheme`\\uff08*Object* [optional]\\uff09\\uff1a\\u5982\\u679c\\u672a\\u901a\\u8fc7\\u4e3b\\u9898\\u63d0\\u4f9b\\u8005\\u63d0\\u4f9b\\u4e3b\\u9898\\uff0c\\u5219\\u4f7f\\u7528\\u9ed8\\u8ba4\\u4e3b\\u9898\\u3002\\n  - ` options.withTheme ` (*Boolean* [optional]): \\u9ed8\\u8ba4\\u503c\\u4e3a `false`\\u3002 \\u5c06 ` theme ` \\u5bf9\\u8c61\\u4f5c\\u4e3a\\u5c5e\\u6027\\u63d0\\u4f9b\\u7ed9\\u7ec4\\u4ef6\\u3002\\n  - ` options.name ` (*String* [optional]): \\u6837\\u5f0f\\u8868\\u7684\\u540d\\u79f0\\u3002 \\u7528\\u4e8e\\u8c03\\u8bd5\\u3002 \\u5982\\u679c\\u672a\\u63d0\\u4f9b\\u8be5\\u503c, \\u5b83\\u5c06\\u5c1d\\u8bd5\\u56de\\u9000\\u5230\\u7ec4\\u4ef6\\u7684\\u540d\\u79f0\\u3002\\n  - `options.flip` (*Boolean* [optional])\\uff1a\\u5f53\\u8bbe\\u7f6e\\u4e3a `false` \\u65f6, \\u6b64\\u5de5\\u4f5c\\u8868\\u5c06\\u9009\\u62e9\\u9000\\u51fa ` rtl ` \\u8f6c\\u6362\\u3002 \\u5982\\u679c\\u8bbe\\u7f6e\\u4e3a ` true `, \\u5219\\u4f1a\\u53cd\\u8f6c\\u6837\\u5f0f\\u3002 \\u5f53\\u8bbe\\u7f6e\\u4e3a`null`\\uff0c\\u5b83\\u8ddf\\u968f`theme.direction`\\u3002\\n  - \\u5176\\u4ed6\\u952e\\u88ab\\u8f6c\\u53d1\\u5230[jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet)\\u3002\\n\\n### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`Component` \\uff1a\\u521b\\u5efa\\u65b0\\u7ec4\\u4ef6\\u3002\\n\\n### \\u4f8b\\u5b50\\n\\n```jsx\\nimport React from 'react';\\nimport { styled } from '@material-ui/core/styles';\\n\\nconst MyComponent = styled('div')({\\n  backgroundColor: 'red',\\n});\\n\\nconst MyThemeComponent = styled('div')(({\\n  theme\\n}) => ({\\n  padding: theme.spacing(1),\\n}));\\n\\nexport default function StyledComponents() {\\n  return (\\n    <MyThemeComponent>\\n      <MyComponent />\\n    </MyThemeComponent>\\n  );\\n}\\n```\\n\\n## `StylesProvider`\\n\\n\\u6b64\\u7ec4\\u4ef6\\u5141\\u8bb8\\u60a8\\u66f4\\u6539\\u6837\\u5f0f\\u89e3\\u51b3\\u65b9\\u6848\\u7684\\u884c\\u4e3a\\u3002 It makes the options available down the React tree thanks to the context.\\n\\n\\u5b83\\u6700\\u597d\\u5e94\\u5728**\\u7ec4\\u4ef6\\u6811\\u7684\\u6839\\u76ee\\u5f55\\u4e2d\\u4f7f\\u7528** \\u3002\\n\\n### Props\\n\\n| \\u540d\\u79f0                | \\u7c7b\\u578b     | \\u9ed8\\u8ba4\\u503c   | \\u63cf\\u8ff0                                                                                                                                                                                                                                                                                                                                   |\\n|:----------------- |:------ |:----- |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\\n| children&nbsp;*   | node   |       | Your component tree.                                                                                                                                                                                                                                                                                                                 |\\n| disableGeneration | bool   | false | You can disable the generation of the styles with this option. It can be useful when traversing the React tree outside of the HTML rendering step on the server. Let's say you are using react-apollo to extract all the queries made by the interface server-side. You can significantly speed up the traversal with this property. |\\n| generateClassName | func   |       | JSS's class name generator.                                                                                                                                                                                                                                                                                                          |\\n| injectFirst       | bool   | false | By default, the styles are injected last in the `<head>` element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material-UI's styles, set this prop.                                                                                                                 |\\n| jss               | object |       | JSS's instance.                                                                                                                                                                                                                                                                                                                      |\\n\\n\\n### \\u4f8b\\u5b50\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\nfunction App() {\\n  return (\\n    <StylesProvider jss={jss}>...</StylesProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `ThemeProvider`\\n\\nThis component takes a `theme` property, and makes it available down the React tree thanks to the context. \\u5b83\\u6700\\u597d\\u5e94\\u5728**\\u7ec4\\u4ef6\\u6811\\u7684\\u6839\\u76ee\\u5f55\\u4e2d\\u4f7f\\u7528** \\u3002\\n\\n### Props\\n\\n| \\u540d\\u79f0              | \\u7c7b\\u578b                                       | \\u9ed8\\u8ba4\\u503c | \\u63cf\\u8ff0                                                                    |\\n|:--------------- |:---------------------------------------- |:--- |:--------------------------------------------------------------------- |\\n| children&nbsp;* | node                                     |     | Your component tree.                                                  |\\n| theme&nbsp;*    | union:&nbsp;object&nbsp;&#124;&nbsp;func |     | A theme object. You can provide a function to extend the outer theme. |\\n\\n\\n### \\u4f8b\\u5b50\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nconst theme = {};\\n\\nfunction App() {\\n  return (\\n    <ThemeProvider theme={theme}>...</ThemeProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `useTheme() => theme`\\n\\n\\u8be5\\u94a9\\u5b50\\u8fd4\\u56de`theme`\\u5bf9\\u8c61\\u56e0\\u6b64\\u53ef\\u4ee5\\u5728\\u51fd\\u6570\\u7ec4\\u4ef6\\u4e2d\\u4f7f\\u7528\\u3002\\n\\n### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`theme`: The theme object previously injected in the context.\\n\\n### \\u4f8b\\u5b50\\n\\n```jsx\\nimport React from 'react';\\nimport { useTheme } from '@material-ui/core/styles';\\n\\nexport default function MyComponent() {\\n  const theme = useTheme();\\n\\n  return <div>{`spacing ${theme.spacing}`}</div>;\\n}\\n```\\n\\n## `withStyles(styles, [options]) => higher-order component`\\n\\n\\u94fe\\u8def\\u7684\\u6837\\u5f0f\\u8868\\u6709\\u5206\\u91cf\\u5229\\u7528**higher-order component**\\u7684\\u6a21\\u5f0f\\u3002 \\u5b83\\u4e0d\\u4f1a\\u4fee\\u6539\\u4f20\\u9012\\u7ed9\\u5b83\\u7684\\u7ec4\\u4ef6\\uff1b\\u76f8\\u53cd\\uff0c\\u5b83\\u8fd4\\u56de\\u4e00\\u4e2a\\u5177\\u6709`classes`\\u5c5e\\u6027\\u7684\\u65b0\\u7ec4\\u4ef6\\u3002 \\u8fd9\\u4e2a`classes`\\u5bf9\\u8c61\\u5305\\u542bDOM\\u4e2d\\u6ce8\\u5165\\u7684class\\u540d\\u79f0\\u3002\\n\\n\\u4e00\\u4e9b\\u53ef\\u80fd\\u6709\\u8da3\\u7684\\u5b9e\\u73b0\\u7ec6\\u8282\\uff1a\\n\\n- \\u5b83\\u6dfb\\u52a0\\u4e86\\u4e00\\u4e2a `classes` \\u5c5e\\u6027\\uff0c\\u56e0\\u6b64\\u60a8\\u53ef\\u4ee5\\u4ece\\u5916\\u90e8\\u8986\\u76d6\\u6ce8\\u5165\\u7684\\u7c7b\\u540d\\u3002\\n- It forwards refs to the inner component.\\n- The `innerRef` prop is deprecated. Use `ref` instead.\\n- It does **not** copy over statics. \\u4f8b\\u5982\\uff0c\\u5b83\\u53ef\\u7528\\u4e8e\\u5b9a\\u4e49 ` getInitialProps()` \\u9759\\u6001\\u65b9\\u6cd5 (next.js)\\u3002\\n\\n### \\u53c2\\u6570\\n\\n1. ` styles `(* Function | Object *): \\u751f\\u6210\\u6837\\u5f0f\\u6216\\u6837\\u5f0f\\u5bf9\\u8c61\\u7684\\u51fd\\u6570\\u3002 \\u5b83\\u5c06\\u94fe\\u63a5\\u5230\\u7ec4\\u4ef6\\u3002 \\u5982\\u679c\\u9700\\u8981\\u8bbf\\u95ee\\u4e3b\\u9898, \\u8bf7\\u4f7f\\u7528\\u51fd\\u6570\\u7b7e\\u540d\\u3002 \\u5b83\\u4f5c\\u4e3a\\u7b2c\\u4e00\\u4e2a\\u53c2\\u6570\\u63d0\\u4f9b\\u3002\\n2. `options` (*Object* [optional]): \\n  - `options.defaultTheme`\\uff08*Object* [optional]\\uff09\\uff1a\\u5982\\u679c\\u672a\\u901a\\u8fc7\\u4e3b\\u9898\\u63d0\\u4f9b\\u8005\\u63d0\\u4f9b\\u4e3b\\u9898\\uff0c\\u5219\\u4f7f\\u7528\\u9ed8\\u8ba4\\u4e3b\\u9898\\u3002\\n  - ` options.withTheme ` (*Boolean* [optional]): \\u9ed8\\u8ba4\\u503c\\u4e3a `false`\\u3002 \\u5c06 ` theme ` \\u5bf9\\u8c61\\u4f5c\\u4e3a\\u5c5e\\u6027\\u63d0\\u4f9b\\u7ed9\\u7ec4\\u4ef6\\u3002\\n  - ` options.name ` (*String* [optional]): \\u6837\\u5f0f\\u8868\\u7684\\u540d\\u79f0\\u3002 \\u7528\\u4e8e\\u8c03\\u8bd5\\u3002 \\u5982\\u679c\\u672a\\u63d0\\u4f9b\\u8be5\\u503c, \\u5b83\\u5c06\\u5c1d\\u8bd5\\u56de\\u9000\\u5230\\u7ec4\\u4ef6\\u7684\\u540d\\u79f0\\u3002\\n  - `options.flip` (*Boolean* [optional])\\uff1a\\u5f53\\u8bbe\\u7f6e\\u4e3a `false` \\u65f6, \\u6b64\\u5de5\\u4f5c\\u8868\\u5c06\\u9009\\u62e9\\u9000\\u51fa ` rtl ` \\u8f6c\\u6362\\u3002 \\u5982\\u679c\\u8bbe\\u7f6e\\u4e3a ` true `, \\u5219\\u4f1a\\u53cd\\u8f6c\\u6837\\u5f0f\\u3002 \\u5f53\\u8bbe\\u7f6e\\u4e3a`null`\\uff0c\\u5b83\\u8ddf\\u968f`theme.direction`\\u3002\\n  - \\u5176\\u4ed6\\u952e\\u88ab\\u8f6c\\u53d1\\u5230[jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet)\\u3002\\n\\n### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`higher-order component`\\uff1a\\u5e94\\u7528\\u4e8e\\u5305\\u88c5\\u7ec4\\u4ef6\\u3002\\n\\n### \\u4f8b\\u5b50\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\nfunction MyComponent(props) {\\n  return <div className={props.classes.root} />;\\n}\\n\\nexport default withStyles(styles)(MyComponent);\\n```\\n\\n\\u6b64\\u5916, \\u8fd8\\u53ef\\u4ee5\\u50cf\\u8fd9\\u6837\\u4f7f\\u7528 [\\u4fee\\u9970\\u5668](https://babeljs.io/docs/en/babel-plugin-proposal-decorators):\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\n@withStyles(styles)\\nclass MyComponent extends React.Component {\\n  render () {\\n    return <div className={this.props.classes.root} />;\\n  }\\n}\\n\\nexport default MyComponent\\n```\\n\\n## `withTheme(Component) => Component`\\n\\n\\u63d0\\u4f9b`theme` object\\u4f5c\\u4e3a\\u8f93\\u5165\\u7ec4\\u4ef6\\u7684\\u5c5e\\u6027\\uff0c\\u56e0\\u6b64\\u53ef\\u4ee5\\u5728render\\u65b9\\u6cd5\\u4e2d\\u4f7f\\u7528 \\u3002\\n\\n### \\u53c2\\u6570\\n\\n1. `Component` \\uff1a\\u5c06\\u88ab\\u5305\\u88c5\\u7684\\u7ec4\\u4ef6\\u3002\\n\\n### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`Component` \\uff1a\\u521b\\u5efa\\u65b0\\u7ec4\\u4ef6\\u3002 Does forward refs to the inner component.\\n\\n### \\u4f8b\\u5b50\\n\\n```jsx\\nimport React from 'react';\\nimport { withTheme } from '@material-ui/core/styles';\\n\\nfunction MyComponent(props) {\\n  return <div>{props.theme.direction}</div>;\\n}\\n\\nexport default withTheme(MyComponent);\\n```\"},\"7zEz\":function(e,n){function t(e){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id=\"7zEz\"},\"8WMs\":function(e,n){e.exports=\"# API\\n\\n<p class=\\\"description\\\">A refer\\xeancia da API do @material-ui/core/styles.</p>\\n\\n## `createGenerateClassName([options]) => class name generator`\\n\\nUma fun\\xe7\\xe3o que retorna [uma fun\\xe7\\xe3o geradora de nome de classe](https://cssinjs.org/jss-api/#generate-your-class-names).\\n\\n### Argumentos\\n\\n1. `options` (*Object* [opcional]): \\n  - `options.disableGlobal` (*Boolean* [opcional]): Padr\\xe3o `false`. Desabilita a gera\\xe7\\xe3o de nomes de classes determin\\xedsticas.\\n  - `options.productionPrefix` (*String* [opcional]): Padr\\xe3o `'jss'`. A string usada para prefixar os nomes de classes em produ\\xe7\\xe3o.\\n  - `options.seed` (*String* [opcional]): Padr\\xe3o `''`. A string u usada unicamente para identificar o gerador. Ela pode ser usada para evitar colis\\xf5es de nomes de classes ao usar v\\xe1rios geradores no mesmo documento.\\n\\n### Retornos\\n\\n`class name generator`: O gerador que deve ser fornecido ao JSS.\\n\\n### Exemplos\\n\\n```jsx\\nimport React from 'react';\\nimport { StylesProvider, createGenerateClassName } from '@material-ui/core/styles';\\n\\nconst generateClassName = createGenerateClassName({\\n  productionPrefix: 'c',\\n});\\n\\nexport default function App() {\\n  return (\\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\\n  );\\n}\\n```\\n\\n## `createStyles(styles) => styles`\\n\\nEsta fun\\xe7\\xe3o realmente n\\xe3o \\\"faz nada\\\" em tempo de execu\\xe7\\xe3o, \\xe9 apenas uma fun\\xe7\\xe3o de identidade. Sua \\xfanica finalidade \\xe9 prevenir a amplia\\xe7\\xe3o de tipos do **TypeScript**, ao fornecer regras de estilo para `makeStyles`/`withStyles` que s\\xe3o uma fun\\xe7\\xe3o do `Tema`.\\n\\n### Argumentos\\n\\n1. `styles` (*Object*): Um objeto de estilos.\\n\\n### Retornos\\n\\n`styles`: Um objeto de estilos.\\n\\n### Exemplos\\n\\n```jsx\\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles((theme: Theme) => createStyles({\\n  root: {\\n    backgroundColor: theme.color.red,\\n  },\\n}));\\n\\nexport default function MyComponent {\\n  const classes = useStyles();\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `makeStyles(styles, [options]) => hook`\\n\\nVincula uma folha de estilo a um componente de fun\\xe7\\xe3o usando o padr\\xe3o **hook**.\\n\\n### Argumentos\\n\\n1. `styles` (*Function | Object*): Uma fun\\xe7\\xe3o que gera os estilos ou um objeto de estilos. Ela ser\\xe1 vinculada ao componente. Use a assinatura da fun\\xe7\\xe3o se voc\\xea precisar ter acesso ao tema. \\xc9 fornecido como o primeiro argumento.\\n2. `options` (*Object* [opcional]): \\n  - `options.defaultTheme` (*Object* [opcional]): O tema padr\\xe3o a ser usado se um tema n\\xe3o for fornecido por meio de um provedor de temas.\\n  - `options.name` (*String* [opcional]): O nome da folha de estilo. \\xdatil para depura\\xe7\\xe3o.\\n  - `options.flip` (*Boolean* [opcional]): Quando definido como `false`, est\\xe1 folha ir\\xe1 cancelar a transforma\\xe7\\xe3o `rtl`. Quando definido para `true`, os estilos s\\xe3o invertidos. Quando definido para `null`, segue `theme.direction`.\\n  - As outras chaves s\\xe3o encaminhadas para o argumento de op\\xe7\\xf5es do [jss.createStyleSheet ([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### Retornos\\n\\n`hook`: Um hook. Este hook pode ser usado em uma fun\\xe7\\xe3o que retorna o componente. A documenta\\xe7\\xe3o geralmente chama esse hook retornado de `useStyles`. Aceita um argumento: as propriedades que ser\\xe3o usadas para \\\"interpola\\xe7\\xe3o\\\" na folha de estilo.\\n\\n### Exemplos\\n\\n```jsx\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles({\\n  root: {\\n    backgroundColor: 'red',\\n    color: props => props.color,\\n  },\\n});\\n\\nexport default function MyComponent(props) {\\n  const classes = useStyles(props);\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `ServerStyleSheets`\\n\\nEsta \\xe9 uma classe auxiliar para manipular a renderiza\\xe7\\xe3o do lado do servidor. [Voc\\xea pode seguir este guia para uma abordagem pr\\xe1tica](/guides/server-rendering/).\\n\\n```jsx\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets } from '@material-ui/core/styles';\\n\\nconst sheets = new ServerStyleSheets();\\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\\nconst cssString = sheets.toString();\\n\\nconst response = `\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style id=\\\"jss-server-side\\\">${cssString}</style>\\n  </head>\\n  <body>${html}</body>\\n</html>\\n`;\\n```\\n\\n### `new ServerStyleSheets([options])`\\n\\nA instancia\\xe7\\xe3o aceita um objeto de op\\xe7\\xf5es como primeiro argumento.\\n\\n1. `options` (*Object* [opcional]): As op\\xe7\\xf5es s\\xe3o distribu\\xeddas como propriedades para o componente [`StylesProvider`](#stylesprovider).\\n\\n### `sheets.collect(node) => Elemento React`\\n\\nO m\\xe9todo envolve seu n\\xf3 React em um elemento provider. Ele coleta as folhas de estilo durante a renderiza\\xe7\\xe3o para que elas possam ser enviadas posteriormente ao cliente.\\n\\n### `sheets.toString() => CSS string`\\n\\nO m\\xe9todo retorna os estilos coletados.\\n\\n\\u26a0\\ufe0f Voc\\xea deve chamar `.collect()` antes de usar este m\\xe9todo.\\n\\n### `sheets.getStyleElement() => CSS do elemento React`\\n\\nO m\\xe9todo \\xe9 uma alternativa para `.toString()` quando voc\\xea esta renderizando a p\\xe1gina inteira com React.\\n\\n\\u26a0\\ufe0f Voc\\xea deve chamar `.collect()` antes de usar este m\\xe9todo.\\n\\n## `styled(Component)(styles, [options]) => Component`\\n\\nVincula uma folha de estilos, com uma fun\\xe7\\xe3o de componente, usando o padr\\xe3o de **componentes estilizados (styled components)**.\\n\\n### Argumentos\\n\\n1. `Component`: O componente que ser\\xe1 manipulado.\\n2. `styles` (*Function | Object*): Uma fun\\xe7\\xe3o que gera os estilos ou um objeto de estilos. Ela ser\\xe1 vinculada ao componente. Use a assinatura da fun\\xe7\\xe3o se voc\\xea precisar ter acesso ao tema. \\xc9 fornecido como propriedade do primeiro argumento.\\n3. `options` (*Object* [opcional]): \\n  - `options.defaultTheme` (*Object* [opcional]): O tema padr\\xe3o a ser usado se um tema n\\xe3o for fornecido por meio de um provedor de temas.\\n  - `options.withTheme` (*Boolean* [opcional]): Padr\\xe3o `false`. Fornecer o objeto `theme` para o componente como uma propriedade.\\n  - `options.name` (*String* [opcional]): O nome da folha de estilo. \\xdatil para depura\\xe7\\xe3o. Se o valor n\\xe3o for fornecido, ele tentar\\xe1 usar o nome do componente.\\n  - `options.flip` (*Boolean* [opcional]): Quando definido como `false`, est\\xe1 folha ir\\xe1 cancelar a transforma\\xe7\\xe3o `rtl`. Quando definido para `true`, os estilos s\\xe3o invertidos. Quando definido para `null`, segue `theme.direction`.\\n  - As outras chaves s\\xe3o encaminhadas para o argumento de op\\xe7\\xf5es do [jss.createStyleSheet ([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### Retornos\\n\\n`Component`: O novo componente criado.\\n\\n### Exemplos\\n\\n```jsx\\nimport React from 'react';\\nimport { styled } from '@material-ui/core/styles';\\n\\nconst MyComponent = styled('div')({\\n  backgroundColor: 'red',\\n});\\n\\nconst MyThemeComponent = styled('div')(({\\n  theme\\n}) => ({\\n  padding: theme.spacing(1),\\n}));\\n\\nexport default function StyledComponents() {\\n  return (\\n    <MyThemeComponent>\\n      <MyComponent />\\n    </MyThemeComponent>\\n  );\\n}\\n```\\n\\n## `StylesProvider`\\n\\nEste componente permite que voc\\xea altere o comportamento da solu\\xe7\\xe3o de estilo. Ele torna as op\\xe7\\xf5es dispon\\xedveis na \\xe1rvore React gra\\xe7as ao contexto.\\n\\nDeve preferencialmente ser usado na **raiz da sua \\xe1rvore de componentes**.\\n\\n### Props\\n\\n| Nome              | Tipo   | Padr\\xe3o | Descri\\xe7\\xe3o                                                                                                                                                                                                                                                                                                                                               |\\n|:----------------- |:------ |:------ |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| children&nbsp;*   | node   |        | Sua \\xe1rvore de componentes.                                                                                                                                                                                                                                                                                                                              |\\n| disableGeneration | bool   | false  | Voc\\xea pode desabilitar a gera\\xe7\\xe3o dos estilos com esta op\\xe7\\xe3o. Pode ser \\xfatil ao percorrer a \\xe1rvore React fora da etapa de renderiza\\xe7\\xe3o de HTML no servidor. Digamos que voc\\xea esteja usando react-apollo para extrair todas as consultas feitas pela interface do lado do servidor. Voc\\xea pode acelerar significativamente a varredura com essa propriedade. |\\n| generateClassName | func   |        | Gerador de nome de classes do JSS.                                                                                                                                                                                                                                                                                                                      |\\n| injectFirst       | bool   | false  | Por padr\\xe3o, os estilos s\\xe3o injetados por \\xfaltimo no elemento `<head>` da p\\xe1gina. Como resultado, eles ganham mais especificidade do que qualquer outra folha de estilo. Se voc\\xea quiser sobrescrever estilos do Material-UI, defina esta propriedade.                                                                                               |\\n| jss               | object |        | Inst\\xe2ncia do JSS.                                                                                                                                                                                                                                                                                                                                       |\\n\\n\\n### Exemplos\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\nfunction App() {\\n  return (\\n    <StylesProvider jss={jss}>...</StylesProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `ThemeProvider`\\n\\nEste componente tem uma propriedade `theme`, e se torna dispon\\xedvel pela \\xe1rvore React gra\\xe7as ao contexto. Deve preferencialmente ser usado na **raiz da sua \\xe1rvore de componentes**.\\n\\n### Props\\n\\n| Nome            | Tipo                                     | Padr\\xe3o | Descri\\xe7\\xe3o                                                                     |\\n|:--------------- |:---------------------------------------- |:------ |:----------------------------------------------------------------------------- |\\n| children&nbsp;* | node                                     |        | Sua \\xe1rvore de componentes.                                                    |\\n| theme&nbsp;*    | union:&nbsp;object&nbsp;&#124;&nbsp;func |        | Um objeto de tema. Voc\\xea pode utilizar uma fun\\xe7\\xe3o para receber o tema externo. |\\n\\n\\n### Exemplos\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nconst theme = {};\\n\\nfunction App() {\\n  return (\\n    <ThemeProvider theme={theme}>...</ThemeProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `useTheme() => theme`\\n\\nEste hook retorna o objeto `theme`, para que possa ser usado dentro de um componente retornado por fun\\xe7\\xe3o.\\n\\n### Retornos\\n\\n`theme`: O objeto de tema previamente injetado no contexto.\\n\\n### Exemplos\\n\\n```jsx\\nimport React from 'react';\\nimport { useTheme } from '@material-ui/core/styles';\\n\\nexport default function MyComponent() {\\n  const theme = useTheme();\\n\\n  return <div>{`spacing ${theme.spacing}`}</div>;\\n}\\n```\\n\\n## `withStyles(styles, [options]) => higher-order component`\\n\\nVincula uma folha de estilos com um componente usando o padr\\xe3o de **higher-order component**. Ele n\\xe3o modifica o componente passados para ele; em vez disso, ele retorna um novo componente, com a propriedade `classes`. Este objeto `classes` cont\\xe9m o nome das classes inseridas no DOM.\\n\\nAlguns detalhes de implementa\\xe7\\xe3o que podem ser interessantes para estar ciente:\\n\\n- Adiciona uma propriedade `classes`, assim voc\\xea pode substituir, a partir do exterior, os nomes de classe previamente injectados.\\n- Ele encaminha refs para o componente interno.\\n- A propriedade `innerRef` est\\xe1 descontinuada. Em vez disso, use `ref`.\\n- Ele **n\\xe3o** faz copia sobre est\\xe1ticos. Por exemplo, pode ser usado para definir um m\\xe9todo est\\xe1tico (next.js) `getInitialProps()`.\\n\\n### Argumentos\\n\\n1. `styles` (*Function | Object*): Uma fun\\xe7\\xe3o que gera os estilos ou um objeto de estilos. Ela ser\\xe1 vinculada ao componente. Use a assinatura da fun\\xe7\\xe3o se voc\\xea precisar ter acesso ao tema. \\xc9 fornecido como o primeiro argumento.\\n2. `options` (*Object* [opcional]): \\n  - `options.defaultTheme` (*Object* [opcional]): O tema padr\\xe3o a ser usado se um tema n\\xe3o for fornecido por meio de um provedor de temas.\\n  - `options.withTheme` (*Boolean* [opcional]): Padr\\xe3o `false`. Fornecer o objeto `theme` para o componente como uma propriedade.\\n  - `options.name` (*String* [opcional]): O nome da folha de estilo. \\xdatil para depura\\xe7\\xe3o. Se o valor n\\xe3o for fornecido, ele tentar\\xe1 usar o nome do componente.\\n  - `options.flip` (*Boolean* [opcional]): Quando definido como `false`, est\\xe1 folha ir\\xe1 cancelar a transforma\\xe7\\xe3o `rtl`. Quando definido para `true`, os estilos s\\xe3o invertidos. Quando definido para `null`, segue `theme.direction`.\\n  - As outras chaves s\\xe3o encaminhadas para o argumento de op\\xe7\\xf5es do [jss.createStyleSheet ([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### Retornos\\n\\n`higher-order component`: Deve ser usado para encapsular o componente.\\n\\n### Exemplos\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\nfunction MyComponent(props) {\\n  return <div className={props.classes.root} />;\\n}\\n\\nexport default withStyles(styles)(MyComponent);\\n```\\n\\nAl\\xe9m disso, voc\\xea pode usar como [decoradores](https://babeljs.io/docs/en/babel-plugin-proposal-decorators) dessa forma:\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\n@withStyles(styles)\\nclass MyComponent extends React.Component {\\n  render () {\\n    return <div className={this.props.classes.root} />;\\n  }\\n}\\n\\nexport default MyComponent\\n```\\n\\n## `withTheme(Component) => Component`\\n\\nFornece o objeto `theme` como uma propriedade do componente de entrada, para que ele possa ser usado no m\\xe9todo de renderiza\\xe7\\xe3o.\\n\\n### Argumentos\\n\\n1. `Component`: O componente que ser\\xe1 manipulado.\\n\\n### Retornos\\n\\n`Component`: O novo componente criado. Encaminha refs para o componente interno.\\n\\n### Exemplos\\n\\n```jsx\\nimport React from 'react';\\nimport { withTheme } from '@material-ui/core/styles';\\n\\nfunction MyComponent(props) {\\n  return <div>{props.theme.direction}</div>;\\n}\\n\\nexport default withTheme(MyComponent);\\n```\"},DBis:function(e,n){e.exports=\"# crwdns97238:0crwdne97238:0\\n\\n<p class=\\\"description\\\">crwdns103448:0crwdne103448:0</p>\\n\\n## `crwdns97242:0[options]crwdne97242:0`\\n\\ncrwdns97244:0crwdne97244:0\\n\\n### crwdns131582:0crwdne131582:0\\n\\n1. crwdns97248:0[optional]crwdne97248:0 \\n  - crwdns97250:0[optional]crwdne97250:0 crwdns97252:0crwdne97252:0\\n  - crwdns97254:0[optional]crwdne97254:0 crwdns97256:0crwdne97256:0\\n  - crwdns97258:0[optional]crwdne97258:0 crwdns97260:0crwdne97260:0 crwdns97262:0crwdne97262:0\\n\\n### crwdns131584:0crwdne131584:0\\n\\ncrwdns97266:0crwdne97266:0\\n\\n### crwdns131586:0crwdne131586:0\\n\\n```jsx\\ncrwdns103450:0{ StylesProvider, createGenerateClassName }crwdnd103450:0{generateClassName}crwdne103450:0\\n```\\n\\n## `crwdns97272:0crwdne97272:0`\\n\\ncrwdns97274:0crwdne97274:0 crwdns97276:0crwdne97276:0\\n\\n### crwdns131588:0crwdne131588:0\\n\\n1. crwdns132080:0crwdne132080:0\\n\\n### crwdns131590:0crwdne131590:0\\n\\ncrwdns132082:0crwdne132082:0\\n\\n### crwdns131592:0crwdne131592:0\\n\\n```jsx\\ncrwdns104094:0{ makeStyles, createStyles }crwdnd104094:0{\\n    backgroundColor: theme.color.red,\\n  }crwdnd104094:0{classes.root}crwdne104094:0\\n```\\n\\n## `crwdns97290:0[options]crwdne97290:0`\\n\\ncrwdns97292:0crwdne97292:0\\n\\n### crwdns131594:0crwdne131594:0\\n\\n1. crwdns97296:0crwdne97296:0 crwdns97298:0crwdne97298:0 crwdns97300:0crwdne97300:0 crwdns97302:0crwdne97302:0\\n2. crwdns97304:0[optional]crwdne97304:0 \\n  - crwdns97306:0[optional]crwdne97306:0\\n  - crwdns97308:0[optional]crwdne97308:0 crwdns97310:0crwdne97310:0\\n  - crwdns97314:0[optional]crwdne97314:0 crwdns97316:0crwdne97316:0 crwdns97318:0crwdne97318:0\\n  - crwdns97320:0[styles]crwdnd97320:0[options]crwdne97320:0\\n\\n### crwdns131596:0crwdne131596:0\\n\\ncrwdns97324:0crwdne97324:0 crwdns97326:0crwdne97326:0 crwdns97328:0crwdne97328:0 crwdns97330:0crwdne97330:0\\n\\n### crwdns131598:0crwdne131598:0\\n\\n```jsx\\ncrwdns103454:0{ makeStyles }crwdnd103454:0{classes.root}crwdne103454:0\\n```\\n\\n## `crwdns97336:0crwdne97336:0`\\n\\ncrwdns97338:0crwdne97338:0 crwdns101420:0crwdne101420:0\\n\\n```jsx\\ncrwdns103456:0{ ServerStyleSheets }crwdnd103456:0${cssString}crwdnd103456:0${html}crwdne103456:0\\n```\\n\\n### `crwdns131600:0[options]crwdne131600:0`\\n\\ncrwdns97346:0crwdne97346:0\\n\\n1. crwdns97348:0[optional]crwdne97348:0\\n\\n### `crwdns131602:0crwdne131602:0`\\n\\ncrwdns97352:0crwdne97352:0 crwdns97354:0crwdne97354:0\\n\\n### `crwdns131604:0crwdne131604:0`\\n\\ncrwdns97358:0crwdne97358:0\\n\\ncrwdns97360:0crwdne97360:0\\n\\n### `crwdns131606:0crwdne131606:0`\\n\\ncrwdns97364:0crwdne97364:0\\n\\ncrwdns97366:0crwdne97366:0\\n\\n## `crwdns97368:0[options]crwdne97368:0`\\n\\ncrwdns97370:0crwdne97370:0\\n\\n### crwdns131608:0crwdne131608:0\\n\\n1. crwdns97374:0crwdne97374:0\\n2. crwdns97376:0crwdne97376:0 crwdns97378:0crwdne97378:0 crwdns97380:0crwdne97380:0 crwdns97382:0crwdne97382:0\\n3. crwdns97384:0[optional]crwdne97384:0 \\n  - crwdns97386:0[optional]crwdne97386:0\\n  - crwdns97388:0[optional]crwdne97388:0 crwdns97390:0crwdne97390:0\\n  - crwdns97392:0[optional]crwdne97392:0 crwdns97394:0crwdne97394:0 crwdns97396:0crwdne97396:0\\n  - crwdns97398:0[optional]crwdne97398:0 crwdns97400:0crwdne97400:0 crwdns97402:0crwdne97402:0\\n  - crwdns97404:0[styles]crwdnd97404:0[options]crwdne97404:0\\n\\n### crwdns131610:0crwdne131610:0\\n\\ncrwdns97408:0crwdne97408:0\\n\\n### crwdns131612:0crwdne131612:0\\n\\n```jsx\\ncrwdns103458:0{ styled }crwdnd103458:0{\\n  theme\\n}crwdne103458:0\\n```\\n\\n## `crwdns97414:0crwdne97414:0`\\n\\ncrwdns97416:0crwdne97416:0 crwdns97418:0crwdne97418:0\\n\\ncrwdns97420:0crwdne97420:0\\n\\n### crwdns131614:0crwdne131614:0\\n\\n| crwdns97424:0crwdne97424:0 | crwdns97426:0crwdne97426:0 | crwdns97428:0crwdne97428:0 | crwdns97430:0crwdne97430:0                                                                                  |\\n|:-------------------------- |:-------------------------- |:-------------------------- |:----------------------------------------------------------------------------------------------------------- |\\n| crwdns97432:0crwdne97432:0 | crwdns97434:0crwdne97434:0 |                            | crwdns97436:0crwdne97436:0                                                                                  |\\n| crwdns97438:0crwdne97438:0 | crwdns97440:0crwdne97440:0 | crwdns97442:0crwdne97442:0 | crwdns97444:0crwdne97444:0 crwdns97446:0crwdne97446:0 crwdns97448:0crwdne97448:0 crwdns97450:0crwdne97450:0 |\\n| crwdns97452:0crwdne97452:0 | crwdns97454:0crwdne97454:0 |                            | crwdns97456:0crwdne97456:0                                                                                  |\\n| crwdns97458:0crwdne97458:0 | crwdns97460:0crwdne97460:0 | crwdns97462:0crwdne97462:0 | crwdns105423:0crwdne105423:0 crwdns105425:0crwdne105425:0 crwdns105427:0crwdne105427:0                      |\\n| crwdns97472:0crwdne97472:0 | crwdns97474:0crwdne97474:0 |                            | crwdns97476:0crwdne97476:0                                                                                  |\\n\\n\\n### crwdns131616:0crwdne131616:0\\n\\n```jsx\\ncrwdns103460:0{ StylesProvider }crwdnd103460:0{jss}crwdne103460:0\\n```\\n\\n## `crwdns97482:0crwdne97482:0`\\n\\ncrwdns97484:0crwdne97484:0 crwdns97486:0crwdne97486:0\\n\\n### crwdns131618:0crwdne131618:0\\n\\n| crwdns97490:0crwdne97490:0 | crwdns97492:0crwdne97492:0 | crwdns97494:0crwdne97494:0 | crwdns97496:0crwdne97496:0                            |\\n|:-------------------------- |:-------------------------- |:-------------------------- |:----------------------------------------------------- |\\n| crwdns97498:0crwdne97498:0 | crwdns97500:0crwdne97500:0 |                            | crwdns97502:0crwdne97502:0                            |\\n| crwdns97504:0crwdne97504:0 | crwdns97506:0crwdne97506:0 |                            | crwdns97508:0crwdne97508:0 crwdns97510:0crwdne97510:0 |\\n\\n\\n### crwdns131620:0crwdne131620:0\\n\\n```jsx\\ncrwdns103462:0{ ThemeProvider }crwdnd103462:0{theme}crwdne103462:0\\n```\\n\\n## `crwdns97516:0crwdne97516:0`\\n\\ncrwdns97518:0crwdne97518:0\\n\\n### crwdns131622:0crwdne131622:0\\n\\ncrwdns97522:0crwdne97522:0\\n\\n### crwdns131624:0crwdne131624:0\\n\\n```jsx\\ncrwdns103464:0{ useTheme }crwdnd103464:0${theme.spacing}crwdne103464:0\\n```\\n\\n## `crwdns97528:0[options]crwdne97528:0`\\n\\ncrwdns97530:0crwdne97530:0 crwdns97532:0crwdne97532:0 crwdns97534:0crwdne97534:0\\n\\ncrwdns97536:0crwdne97536:0\\n\\n- crwdns97538:0crwdne97538:0\\n- crwdns97540:0crwdne97540:0\\n- crwdns97542:0crwdne97542:0 crwdns97544:0crwdne97544:0\\n- crwdns97546:0crwdne97546:0 crwdns97548:0crwdne97548:0\\n\\n### crwdns131626:0crwdne131626:0\\n\\n1. crwdns97552:0crwdne97552:0 crwdns97554:0crwdne97554:0 crwdns97556:0crwdne97556:0 crwdns97558:0crwdne97558:0\\n2. crwdns97560:0[optional]crwdne97560:0 \\n  - crwdns97562:0[optional]crwdne97562:0\\n  - crwdns97564:0[optional]crwdne97564:0 crwdns97566:0crwdne97566:0\\n  - crwdns97568:0[optional]crwdne97568:0 crwdns97570:0crwdne97570:0 crwdns97572:0crwdne97572:0\\n  - crwdns97574:0[optional]crwdne97574:0 crwdns97576:0crwdne97576:0 crwdns97578:0crwdne97578:0\\n  - crwdns97580:0[styles]crwdnd97580:0[options]crwdne97580:0\\n\\n### crwdns131628:0crwdne131628:0\\n\\ncrwdns97584:0crwdne97584:0\\n\\n### crwdns131630:0crwdne131630:0\\n\\n```jsx\\ncrwdns103466:0{ withStyles }crwdnd103466:0{\\n    backgroundColor: 'red',\\n  }crwdnd103466:0{props.classes.root}crwdne103466:0\\n```\\n\\ncrwdns97590:0crwdne97590:0\\n\\n```jsx\\ncrwdns103468:0{ withStyles }crwdnd103468:0{\\n    backgroundColor: 'red',\\n  }crwdnd103468:0{this.props.classes.root}crwdne103468:0\\n```\\n\\n## `crwdns97594:0crwdne97594:0`\\n\\ncrwdns97596:0crwdne97596:0\\n\\n### crwdns131632:0crwdne131632:0\\n\\n1. crwdns97600:0crwdne97600:0\\n\\n### crwdns131634:0crwdne131634:0\\n\\ncrwdns97604:0crwdne97604:0 crwdns97606:0crwdne97606:0\\n\\n### crwdns131636:0crwdne131636:0\\n\\n```jsx\\ncrwdns103470:0{ withTheme }crwdnd103470:0{props.theme.direction}crwdne103470:0\\n```\"},FkHk:function(e,n,t){var o={\"./api-aa.md\":\"DBis\",\"./api-de.md\":\"gWoX\",\"./api-es.md\":\"2yLe\",\"./api-fr.md\":\"huR8\",\"./api-ja.md\":\"6AgR\",\"./api-pt.md\":\"8WMs\",\"./api-ru.md\":\"Z2sP\",\"./api-zh.md\":\"7hPl\",\"./api.md\":\"/7OA\"};function s(e){var n=r(e);return t(n)}function r(e){if(!t.o(o,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return o[e]}s.keys=function(){return Object.keys(o)},s.resolve=r,e.exports=s,s.id=\"FkHk\"},UmTS:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/styles/api\",function(){return t(\"iaiH\")}])},Z2sP:function(e,n){e.exports=\"# API\\n\\n<p class=\\\"description\\\">The API reference of @material-ui/core/styles.</p>\\n\\n## `createGenerateClassName([options]) => class name generator`\\n\\nA function which returns [a class name generator function](https://cssinjs.org/jss-api/#generate-your-class-names).\\n\\n### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `\\u0432\\u0430\\u0440\\u0438\\u0430\\u043d\\u0442\\u044b` (*\\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u0430* [optional]): \\n  - `options.disableGlobal` (*Boolean* [optional]): \\u041f\\u043e \\u0443\\u043c\\u043e\\u043b\\u0447\\u0430\\u043d\\u0438\\u044e - `false`. Disable the generation of deterministic class names.\\n  - `options.productionPrefix` (*String* [optional]): Defaults to `'jss'`. The string used to prefix the class names in production.\\n  - `options.seed` (*String* [optional]): Defaults to `''`. The string used to uniquely identify the generator. It can be used to avoid class name collisions when using multiple generators in the same document.\\n\\n### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`class name generator`: The generator should be provided to JSS.\\n\\n### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport React from 'react';\\nimport { StylesProvider, createGenerateClassName } from '@material-ui/core/styles';\\n\\nconst generateClassName = createGenerateClassName({\\n  productionPrefix: 'c',\\n});\\n\\nexport default function App() {\\n  return (\\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\\n  );\\n}\\n```\\n\\n## `createStyles(styles) => styles`\\n\\nThis function doesn't really \\\"do anything\\\" at runtime, it's just the identity function. Its only purpose is to defeat **TypeScript**'s type widening when providing style rules to `makeStyles`/`withStyles` which are a function of the `Theme`.\\n\\n### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `styles` (*Object*): A styles object.\\n\\n### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`styles`: A styles object.\\n\\n### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles((theme: Theme) => createStyles({\\n  root: {\\n    backgroundColor: theme.color.red,\\n  },\\n}));\\n\\nexport default function MyComponent {\\n  const classes = useStyles();\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `makeStyles(styles, [options]) => hook`\\n\\nLink a style sheet with a function component using the **hook** pattern.\\n\\n### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `styles` (*Function | Object*): A function generating the styles or a styles object. \\u042d\\u0442\\u043e \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0441\\u0432\\u044f\\u0437\\u0430\\u043d\\u043e \\u0441 \\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442\\u043e\\u043c. Use the function signature if you need to have access to the theme. It's provided as the first argument.\\n2. `\\u0432\\u0430\\u0440\\u0438\\u0430\\u043d\\u0442\\u044b` (*\\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u0430* [optional]): \\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n  - `options.name` (*String* [optional]): The name of the style sheet. \\u041f\\u043e\\u043b\\u0435\\u0437\\u043d\\u043e \\u0434\\u043b\\u044f \\u043e\\u0442\\u043b\\u0430\\u0434\\u043a\\u0438.\\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`hook`: A hook. This hook can be used in a function component. The documentation often calls this returned hook `useStyles`. It accepts one argument: the properties that will be used for \\\"interpolation\\\" in the style sheet.\\n\\n### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles({\\n  root: {\\n    backgroundColor: 'red',\\n    color: props => props.color,\\n  },\\n});\\n\\nexport default function MyComponent(props) {\\n  const classes = useStyles(props);\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `ServerStyleSheets`\\n\\nThis is a class helper to handle server-side rendering. [You can follow this guide for a practical approach](/guides/server-rendering/).\\n\\n```jsx\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets } from '@material-ui/core/styles';\\n\\nconst sheets = new ServerStyleSheets();\\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\\nconst cssString = sheets.toString();\\n\\nconst response = `\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style id=\\\"jss-server-side\\\">${cssString}</style>\\n  </head>\\n  <body>${html}</body>\\n</html>\\n`;\\n```\\n\\n### `new ServerStyleSheets([options])`\\n\\nThe instantiation accepts an options object as a first argument.\\n\\n1. `options` (*Object* [optional]): The options are spread as props to the [`StylesProvider`](#stylesprovider) component.\\n\\n### `sheets.collect(node) => React element`\\n\\nThe method wraps your React node in a provider element. It collects the style sheets during the rendering so they can be later sent to the client.\\n\\n### `sheets.toString() => CSS string`\\n\\nThe method returns the collected styles.\\n\\n\\u26a0\\ufe0f You must call `.collect()` before using this method.\\n\\n### `sheets.getStyleElement() => CSS React element`\\n\\nThe method is an alternative to `.toString()` when you are rendering the whole page with React.\\n\\n\\u26a0\\ufe0f You must call `.collect()` before using this method.\\n\\n## `styled (Component) (styles, [options]) => Component`\\n\\nLink a style sheet with a function component using the **styled components** pattern.\\n\\n### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `Component`: The component that will be wrapped.\\n2. `styles` (*Function | Object*): A function generating the styles or a styles object. \\u042d\\u0442\\u043e \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0441\\u0432\\u044f\\u0437\\u0430\\u043d\\u043e \\u0441 \\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442\\u043e\\u043c. Use the function signature if you need to have access to the theme. It's provided as property of the first argument.\\n3. `\\u0432\\u0430\\u0440\\u0438\\u0430\\u043d\\u0442\\u044b` (*\\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u0430* [optional]): \\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n  - `options.withTheme` (*Boolean* [optional]): \\u041f\\u043e \\u0443\\u043c\\u043e\\u043b\\u0447\\u0430\\u043d\\u0438\\u044e - `false`. Provide the `theme` object to the component as a property.\\n  - `options.name` (*String* [optional]): The name of the style sheet. \\u041f\\u043e\\u043b\\u0435\\u0437\\u043d\\u043e \\u0434\\u043b\\u044f \\u043e\\u0442\\u043b\\u0430\\u0434\\u043a\\u0438. If the value isn't provided, it will try to fallback to the name of the component.\\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`Component`: The new component created.\\n\\n### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport React from 'react';\\nimport { styled } from '@material-ui/core/styles';\\n\\nconst MyComponent = styled('div')({\\n  backgroundColor: 'red',\\n});\\n\\nconst MyThemeComponent = styled('div')(({\\n  theme\\n}) => ({\\n  padding: theme.spacing(1),\\n}));\\n\\nexport default function StyledComponents() {\\n  return (\\n    <MyThemeComponent>\\n      <MyComponent />\\n    </MyThemeComponent>\\n  );\\n}\\n```\\n\\n## `StylesProvider`\\n\\nThis component allows you to change the behavior of the styling solution. It makes the options available down the React tree thanks to the context.\\n\\nIt should preferably be used at **the root of your component tree**.\\n\\n### Props\\n\\n| \\u0418\\u043c\\u044f               | \\u0422\\u0438\\u043f    | \\u041f\\u043e-\\u0443\\u043c\\u043e\\u043b\\u0447\\u0430\\u043d\\u0438\\u044e | \\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435                                                                                                                                                                                                                                                                                                                             |\\n|:----------------- |:------ |:------------ |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\\n| children&nbsp;*   | node   |              | Your component tree.                                                                                                                                                                                                                                                                                                                 |\\n| disableGeneration | bool   | false        | You can disable the generation of the styles with this option. It can be useful when traversing the React tree outside of the HTML rendering step on the server. Let's say you are using react-apollo to extract all the queries made by the interface server-side. You can significantly speed up the traversal with this property. |\\n| generateClassName | func   |              | JSS's class name generator.                                                                                                                                                                                                                                                                                                          |\\n| injectFirst       | bool   | false        | By default, the styles are injected last in the `<head>` element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material-UI's styles, set this prop.                                                                                                                 |\\n| jss               | object |              | JSS's instance.                                                                                                                                                                                                                                                                                                                      |\\n\\n\\n### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\nfunction App() {\\n  return (\\n    <StylesProvider jss={jss}>...</StylesProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `ThemeProvider`\\n\\nThis component takes a `theme` property, and makes it available down the React tree thanks to the context. It should preferably be used at **the root of your component tree**.\\n\\n### Props\\n\\n| \\u0418\\u043c\\u044f             | \\u0422\\u0438\\u043f                                      | \\u041f\\u043e-\\u0443\\u043c\\u043e\\u043b\\u0447\\u0430\\u043d\\u0438\\u044e | \\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435                                                              |\\n|:--------------- |:---------------------------------------- |:------------ |:--------------------------------------------------------------------- |\\n| children&nbsp;* | node                                     |              | Your component tree.                                                  |\\n| theme&nbsp;*    | union:&nbsp;object&nbsp;&#124;&nbsp;func |              | A theme object. You can provide a function to extend the outer theme. |\\n\\n\\n### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nconst theme = {};\\n\\nfunction App() {\\n  return (\\n    <ThemeProvider theme={theme}>...</ThemeProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `useTheme() => theme`\\n\\nThis hook returns the `theme` object so it can be used inside a function component.\\n\\n### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`theme`: The theme object previously injected in the context.\\n\\n### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport React from 'react';\\nimport { useTheme } from '@material-ui/core/styles';\\n\\nexport default function MyComponent() {\\n  const theme = useTheme();\\n\\n  return <div>{`spacing ${theme.spacing}`}</div>;\\n}\\n```\\n\\n## `withStyles(styles, [options]) => higher-order component`\\n\\nLink a style sheet with a component using the **higher-order component** pattern. It does not modify the component passed to it; instead, it returns a new component with a `classes` property. This `classes` object contains the name of the class names injected in the DOM.\\n\\n\\u041d\\u0435\\u043a\\u043e\\u0442\\u043e\\u0440\\u044b\\u0435 \\u0434\\u0435\\u0442\\u0430\\u043b\\u0438 \\u0440\\u0435\\u0430\\u043b\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438, \\u043a\\u043e\\u0442\\u043e\\u0440\\u044b\\u0435 \\u043c\\u043e\\u0433\\u0443\\u0442 \\u0431\\u044b\\u0442\\u044c \\u0438\\u043d\\u0442\\u0435\\u0440\\u0435\\u0441\\u043d\\u044b \\u0434\\u043b\\u044f \\u043f\\u043e\\u043d\\u0438\\u043c\\u0430\\u043d\\u0438\\u044f:\\n\\n- It adds a `classes` property so you can override the injected class names from the outside.\\n- It forwards refs to the inner component.\\n- The `innerRef` prop is deprecated. Use `ref` instead.\\n- It does **not** copy over statics. For instance, it can be used to defined a `getInitialProps()` static method (next.js).\\n\\n### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `styles` (*Function | Object*): A function generating the styles or a styles object. \\u042d\\u0442\\u043e \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0441\\u0432\\u044f\\u0437\\u0430\\u043d\\u043e \\u0441 \\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442\\u043e\\u043c. Use the function signature if you need to have access to the theme. It's provided as the first argument.\\n2. `\\u0432\\u0430\\u0440\\u0438\\u0430\\u043d\\u0442\\u044b` (*\\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u0430* [optional]): \\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n  - `options.withTheme` (*Boolean* [optional]): \\u041f\\u043e \\u0443\\u043c\\u043e\\u043b\\u0447\\u0430\\u043d\\u0438\\u044e - `false`. Provide the `theme` object to the component as a property.\\n  - `options.name` (*String* [optional]): The name of the style sheet. \\u041f\\u043e\\u043b\\u0435\\u0437\\u043d\\u043e \\u0434\\u043b\\u044f \\u043e\\u0442\\u043b\\u0430\\u0434\\u043a\\u0438. If the value isn't provided, it will try to fallback to the name of the component.\\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`\\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442 \\u0432\\u044b\\u0441\\u0448\\u0435\\u0433\\u043e \\u043f\\u043e\\u0440\\u044f\\u0434\\u043a\\u0430`: \\u0441\\u043b\\u0435\\u0434\\u0443\\u0435\\u0442 \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u044c, \\u0447\\u0442\\u043e\\u0431\\u044b \\u043e\\u0431\\u0435\\u0440\\u043d\\u0443\\u0442\\u044c \\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442.\\n\\n### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\nfunction MyComponent(props) {\\n  return <div className={props.classes.root} />;\\n}\\n\\nexport default withStyles(styles)(MyComponent);\\n```\\n\\nAlso, you can use as [decorators](https://babeljs.io/docs/en/babel-plugin-proposal-decorators) like so:\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\n@withStyles(styles)\\nclass MyComponent extends React.Component {\\n  render () {\\n    return <div className={this.props.classes.root} />;\\n  }\\n}\\n\\nexport default MyComponent\\n```\\n\\n## `withTheme()(Component) => Component`\\n\\nProvide the `theme` object as a property of the input component so it can be used in the render method.\\n\\n### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `Component`: The component that will be wrapped.\\n\\n### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`Component`: The new component created. Does forward refs to the inner component.\\n\\n### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport React from 'react';\\nimport { withTheme } from '@material-ui/core/styles';\\n\\nfunction MyComponent(props) {\\n  return <div>{props.theme.direction}</div>;\\n}\\n\\nexport default withTheme(MyComponent);\\n```\"},gWoX:function(e,n){e.exports=\"# API\\n\\n<p class=\\\"description\\\">The API reference of @material-ui/core/styles.</p>\\n\\n## `createGenerateClassName([options]) => class name generator`\\n\\nEine Funktion, die eine [Klassennamengeneratorfunktion](https://cssinjs.org/jss-api/#generate-your-class-names) zur\\xfcckgibt.\\n\\n### Parameter\\n\\n1. `options` (*Object* [optional]): \\n  - `options.disableGlobal ` (*Boolean* [optional]): Standardeinstellung ist `false`. Deaktivieren Sie die Generierung deterministischer Klassennamen.\\n  - `options.productionPrefix` (*String* [optional]): Standardeinstellung ist ` 'jss' `. Ein String, der den Klassennamen in der Produktion vorangestellt wird.\\n  - `options.seed` (*String* [optional]): Standardeinstellung ist `''`. Der String, mit der der Generator eindeutig identifiziert wird. Dies kann verwendet werden, um Klassennamenskollisionen bei Verwendung mehrerer Generatoren in einem Dokument zu vermeiden.\\n\\n### R\\xfcckgabewerte\\n\\n`class name generator`: Der Generator der JSS zur Verf\\xfcgung gestellt werden sollte.\\n\\n### Beispiele\\n\\n```jsx\\nimport React from 'react';\\nimport { StylesProvider, createGenerateClassName } from '@material-ui/core/styles';\\n\\nconst generateClassName = createGenerateClassName({\\n  productionPrefix: 'c',\\n});\\n\\nexport default function App() {\\n  return (\\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\\n  );\\n}\\n```\\n\\n## `createStyles(styles) => styles`\\n\\nDiese Funktion \\\"macht zur Laufzeit nicht wirklich etwas\\\", es ist nur die Identit\\xe4t Funktion. Sein einziger Zweck ist es, **TypeScript** Typverbreiterung zu verhindern, wenn Style-Regeln f\\xfcr `makeStyles`/`withStyles` bereitgestellt werden, welche eine Funktion des `Themes` sind.\\n\\n### Parameter\\n\\n1. `styles` (*Object*): A styles object.\\n\\n### R\\xfcckgabewerte\\n\\n`styles`: A styles object.\\n\\n### Beispiele\\n\\n```jsx\\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles((theme: Theme) => createStyles({\\n  root: {\\n    backgroundColor: theme.color.red,\\n  },\\n}));\\n\\nexport default function MyComponent {\\n  const classes = useStyles();\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `makeStyles(styles, [options]) => hook`\\n\\nVerkn\\xfcpfen Sie ein Stylesheet mit einer Funktionskomponente mit dem **Hook** Muster.\\n\\n### Parameter\\n\\n1. `styles` (* Function | Object *): Eine Funktion, die die Stile oder ein Stilobjekt generiert. Es wird mit der Komponente verkn\\xfcpft. Verwenden Sie die Funktionssignatur, wenn Sie Zugriff auf das Theme ben\\xf6tigen. Es ist das erste Argument.\\n2. `options` (*Object* [optional]): \\n  - `options.defaultTheme` (*Object* [optional]): Das Standarddesign, das verwendet werden soll, wenn ein Theme nicht \\xfcber einen Theme Provider bereitgestellt wird.\\n  - `options.name` (*String* [optional]): Der Name des Stylesheets. N\\xfctzlich zum Debuggen.\\n  - `options.flip` (*Boolean* [optional]): Wenn auf `false` gestellt, wird die `Rechts-Nach-Links` Transformation deaktiviert. Wenn es `true` ist sind die Stile invertiert. Wenn es `null` ist, folgt es der `theme.direction` Einstellung.\\n  - Die anderen Schl\\xfcssel werden an das Optionsargument [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet) weitergeleitet.\\n\\n### R\\xfcckgabewerte\\n\\n`Hook`: Ein Hook. Dieser Hook kann in einer Funktionskomponente verwendet werden. The documentation often calls this returned hook `useStyles`. Er akzeptiert ein Argument: die Eigenschaften, die f\\xfcr \\u201eInterpolation\\u201c in das Stylesheet verwendet wird.\\n\\n### Beispiele\\n\\n```jsx\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles({\\n  root: {\\n    backgroundColor: 'red',\\n    color: props => props.color,\\n  },\\n});\\n\\nexport default function MyComponent(props) {\\n  const classes = useStyles(props);\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `ServerStyleSheets`\\n\\nDies ist ein Klassenhelfer f\\xfcr das serverseitige Rendering. [You can follow this guide for a practical approach](/guides/server-rendering/).\\n\\n```jsx\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets } from '@material-ui/core/styles';\\n\\nconst sheets = new ServerStyleSheets();\\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\\nconst cssString = sheets.toString();\\n\\nconst response = `\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style id=\\\"jss-server-side\\\">${cssString}</style>\\n  </head>\\n  <body>${html}</body>\\n</html>\\n`;\\n```\\n\\n### `neue ServerStyleSheets ([options])`\\n\\nDie Instantiierung akzeptiert ein Optionsobjekt als erstes Argument.\\n\\n1. `options` (*Objekt * [optional]): Die Optionen werden als Eigenschaften an die [`StylesProvider`](#stylesprovider) Komponente verteilt.\\n\\n### `sheets.collect(node) => React element`\\n\\nDie Methode schlie\\xdft Ihre React Knoten in ein Provider-Element ein. Es sammelt die Stylesheets w\\xe4hrend des Renderns, um sie sp\\xe4ter an den Client zu senden.\\n\\n### `sheets.toString() => CSS string`\\n\\nDie Methode gibt die gesammelten Stile zur\\xfcck.\\n\\n\\u26a0\\ufe0f Sie m\\xfcssen `.collect()` aufrufen, bevor Sie diese Methode verwenden.\\n\\n### `sheets.getStyleElement() => CSS React element`\\n\\nDie Methode ist eine Alternative zu `.toString()`, wenn Sie die gesamte Seite mit React rendern.\\n\\n\\u26a0\\ufe0f Sie m\\xfcssen `.collect()` aufrufen, bevor Sie diese Methode verwenden.\\n\\n## `styled(Component)(styles, [options]) => Component`\\n\\nVerkn\\xfcpfen Sie ein Stylesheet mit einer Funktionskomponente mit dem **styled components** Muster.\\n\\n### Parameter\\n\\n1. `Component`: Die Komponente, die verpackt wird.\\n2. `styles` (* Function | Object *): Eine Funktion, die die Stile oder ein Stilobjekt generiert. Es wird mit der Komponente verkn\\xfcpft. Verwenden Sie die Funktionssignatur, wenn Sie Zugriff auf das Theme ben\\xf6tigen. Es wird als Eigenschaft des ersten Arguments bereitgestellt.\\n3. `options` (*Object* [optional]): \\n  - `options.defaultTheme` (*Object* [optional]): Das Standarddesign, das verwendet werden soll, wenn ein Theme nicht \\xfcber einen Theme Provider bereitgestellt wird.\\n  - `options.withTheme ` (*Boolean* [optional]): Standardeinstellung ist `false`. \\xdcbergeben Sie das `Theme` Objekt als Eigenschaft an die Komponente.\\n  - `options.name` (*String* [optional]): Der Name des Stylesheets. N\\xfctzlich zum Debuggen. Wenn der Wert nicht angegeben wird, wird versucht, auf den Namen der Komponente zur\\xfcckzugreifen.\\n  - `options.flip` (*Boolean* [optional]): Wenn auf `false` gestellt, wird die `Rechts-Nach-Links` Transformation deaktiviert. Wenn es `true` ist sind die Stile invertiert. Wenn es `null` ist, folgt es der `theme.direction` Einstellung.\\n  - Die anderen Schl\\xfcssel werden an das Optionsargument [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet) weitergeleitet.\\n\\n### R\\xfcckgabewerte\\n\\n`Component`: Die neu erstellte Komponente.\\n\\n### Beispiele\\n\\n```jsx\\nimport React from 'react';\\nimport { styled } from '@material-ui/core/styles';\\n\\nconst MyComponent = styled('div')({\\n  backgroundColor: 'red',\\n});\\n\\nconst MyThemeComponent = styled('div')(({\\n  theme\\n}) => ({\\n  padding: theme.spacing(1),\\n}));\\n\\nexport default function StyledComponents() {\\n  return (\\n    <MyThemeComponent>\\n      <MyComponent />\\n    </MyThemeComponent>\\n  );\\n}\\n```\\n\\n## `StylesProvider`\\n\\nMit dieser Komponente k\\xf6nnen Sie das Verhalten der Styling-L\\xf6sung \\xe4ndern. Durch den Kontext werden die Optionen im React-Baum verf\\xfcgbar.\\n\\nEs sollte vorzugsweise an der **Wurzel Ihres Komponentenbaums** verwendet werden.\\n\\n### Eigenschaften\\n\\n| Name              | Typ    | Standard | Beschreibung                                                                                                                                                                                                                                                                                                                                                                      |\\n|:----------------- |:------ |:-------- |:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| children&nbsp;*   | node   |          | Ihr Komponentenbaum.                                                                                                                                                                                                                                                                                                                                                              |\\n| disableGeneration | bool   | false    | Sie k\\xf6nnen die Erzeugung der Stile mit dieser Option deaktivieren. Dies kann n\\xfctzlich sein, wenn Sie den React-Baum au\\xdferhalb des HTML-Rendering-Schrittes auf dem Server durchlaufen. Nehmen wir an, Sie verwenden react-apollo, um alle Abfragen der Schnittstelle auf der Serverseite zu extrahieren. Mit dieser Eigenschaft k\\xf6nnen Sie den Durchlauf erheblich beschleunigen. |\\n| generateClassName | func   |          | Klassennamengenerator von JSS.                                                                                                                                                                                                                                                                                                                                                    |\\n| injectFirst       | bool   | false    | By default, the styles are injected last in the `<head>` element of the page. Dadurch erhalten sie eine h\\xf6here Spezifit\\xe4t als jedes andere Stylesheet. Wenn Sie die Stile der Material-UI \\xfcberschreiben m\\xf6chten, setzen Sie diese Option.                                                                                                                                   |\\n| jss               | object |          | JSS-Instanz.                                                                                                                                                                                                                                                                                                                                                                      |\\n\\n\\n### Beispiele\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\nfunction App() {\\n  return (\\n    <StylesProvider jss={jss}>...</StylesProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `ThemeProvider`\\n\\nDiese Komponente hat eine `Theme` Eigenschaft. Diese wird durch den Kontext in der React-Struktur verf\\xfcgbar gemacht. Es sollte vorzugsweise an der **Wurzel Ihres Komponentenbaums** verwendet werden.\\n\\n### Eigenschaften\\n\\n| Name            | Typ                                      | Standard | Beschreibung                                                                               |\\n|:--------------- |:---------------------------------------- |:-------- |:------------------------------------------------------------------------------------------ |\\n| children&nbsp;* | node                                     |          | Ihr Komponentenbaum.                                                                       |\\n| theme&nbsp;*    | union:&nbsp;object&nbsp;&#124;&nbsp;func |          | Ein Themeobjekt. Sie k\\xf6nnen eine Funktion bereitstellen, um das \\xe4u\\xdfere Theme zu erweitern. |\\n\\n\\n### Beispiele\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nconst theme = {};\\n\\nfunction App() {\\n  return (\\n    <ThemeProvider theme={theme}>...</ThemeProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `useTheme() => theme`\\n\\nDieser Hook gibt das `Theme`-Objekt zur\\xfcck, so dass es innerhalb einer Funktionskomponente verwendet werden kann.\\n\\n### R\\xfcckgabewerte\\n\\n`Theme`: Das Themenobjekt, das zuvor in den Kontext eingef\\xfcgt wurde.\\n\\n### Beispiele\\n\\n```jsx\\nimport React from 'react';\\nimport { useTheme } from '@material-ui/core/styles';\\n\\nexport default function MyComponent() {\\n  const theme = useTheme();\\n\\n  return <div>{`spacing ${theme.spacing}`}</div>;\\n}\\n```\\n\\n## `withStyles(styles, [options]) => higher-order component`\\n\\nVerkn\\xfcpfen Sie ein Stylesheet mit einer Funktionskomponente mit dem **higher-order component** Muster. Die an sie \\xfcbergebene Komponente wird nicht ge\\xe4ndert. Stattdessen wird eine neue Komponente mit der Eigenschaft `classes` zur\\xfcckgegeben. Dieses `classes` Objekt enth\\xe4lt den Namen der Klassennamen, die in das DOM eingef\\xfcgt wurden.\\n\\nEinige Implementierungsdetails, die interessant sein k\\xf6nnten:\\n\\n- Es f\\xfcgt eine `classes` Eigenschaft hinzu, damit Sie die injizierten Klassennamen von au\\xdfen \\xfcberschreiben k\\xf6nnen.\\n- Leitet die innere Komponente mit Ref weiter.\\n- Die `innerRef` Eigenschaft ist veraltet. Verwenden Sie `ref` stattdessen.\\n- Es wird **keine** Statik r\\xfcberkopiert. Es kann zum Beispiel verwendet werden, um eine `getInitialProps()` als statische Methode zu definieren (next.js).\\n\\n### Parameter\\n\\n1. `styles` (* Function | Object *): Eine Funktion, die die Stile oder ein Stilobjekt generiert. Es wird mit der Komponente verkn\\xfcpft. Verwenden Sie die Funktionssignatur, wenn Sie Zugriff auf das Theme ben\\xf6tigen. Es ist das erste Argument.\\n2. `options` (*Object* [optional]): \\n  - `options.defaultTheme` (*Object* [optional]): Das Standarddesign, das verwendet werden soll, wenn ein Theme nicht \\xfcber einen Theme Provider bereitgestellt wird.\\n  - `options.withTheme ` (*Boolean* [optional]): Standardeinstellung ist `false`. \\xdcbergeben Sie das `Theme` Objekt als Eigenschaft an die Komponente.\\n  - `options.name` (*String* [optional]): Der Name des Stylesheets. N\\xfctzlich zum Debuggen. Wenn der Wert nicht angegeben wird, wird versucht, auf den Namen der Komponente zur\\xfcckzugreifen.\\n  - `options.flip` (*Boolean* [optional]): Wenn auf `false` gestellt, wird die `Rechts-Nach-Links` Transformation deaktiviert. Wenn es `true` ist sind die Stile invertiert. Wenn es `null` ist, folgt es der `theme.direction` Einstellung.\\n  - Die anderen Schl\\xfcssel werden an das Optionsargument [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet) weitergeleitet.\\n\\n### R\\xfcckgabewerte\\n\\n`Komponente h\\xf6herer Ordnung`: Sollte zum Umwickeln einer Komponente verwendet werden.\\n\\n### Beispiele\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\nfunction MyComponent(props) {\\n  return <div className={props.classes.root} />;\\n}\\n\\nexport default withStyles(styles)(MyComponent);\\n```\\n\\nSie k\\xf6nnen auch so als [Dekorateur](https://babeljs.io/docs/en/babel-plugin-proposal-decorators) verwenden:\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\n@withStyles(styles)\\nclass MyComponent extends React.Component {\\n  render () {\\n    return <div className={this.props.classes.root} />;\\n  }\\n}\\n\\nexport default MyComponent\\n```\\n\\n## `withTheme(Component) => Component`\\n\\nGeben Sie das `Theme`-Objekt als Eigenschaft der Eingabekomponente weiter, sodass es in der Render-Methode verwendet werden kann.\\n\\n### Parameter\\n\\n1. `Component`: Die Komponente, die verpackt wird.\\n\\n### R\\xfcckgabewerte\\n\\n`Component`: Die neu erstellte Komponente. Leitet die innere Komponente mit Ref weiter.\\n\\n### Beispiele\\n\\n```jsx\\nimport React from 'react';\\nimport { withTheme } from '@material-ui/core/styles';\\n\\nfunction MyComponent(props) {\\n  return <div>{props.theme.direction}</div>;\\n}\\n\\nexport default withTheme(MyComponent);\\n```\"},huR8:function(e,n){e.exports=\"# API\\n\\n<p class=\\\"description\\\">The API reference of @material-ui/core/styles.</p>\\n\\n## `createGenerateClassName([options]) => class name generator`\\n\\nA function which returns [a class name generator function](https://cssinjs.org/jss-api/#generate-your-class-names).\\n\\n### Param\\xe8tres\\n\\n1. `options` (*Object* [optional]): \\n  - `options.disableGlobal` (*Boolean* [optional]): Valeur par d\\xe9faut `false`. Disable the generation of deterministic class names.\\n  - `options.productionPrefix` (*String* [optional]): Defaults to `'jss'`. The string used to prefix the class names in production.\\n  - `options.seed` (*String* [optional]): Defaults to `''`. The string used to uniquely identify the generator. It can be used to avoid class name collisions when using multiple generators in the same document.\\n\\n### Valeur de retour\\n\\n`class name generator`: The generator should be provided to JSS.\\n\\n### Exemples\\n\\n```jsx\\nimport React from 'react';\\nimport { StylesProvider, createGenerateClassName } from '@material-ui/core/styles';\\n\\nconst generateClassName = createGenerateClassName({\\n  productionPrefix: 'c',\\n});\\n\\nexport default function App() {\\n  return (\\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\\n  );\\n}\\n```\\n\\n## `createStyles(styles) => styles`\\n\\nThis function doesn't really \\\"do anything\\\" at runtime, it's just the identity function. Its only purpose is to defeat **TypeScript**'s type widening when providing style rules to `makeStyles`/`withStyles` which are a function of the `Theme`.\\n\\n### Param\\xe8tres\\n\\n1. `styles` (*Object*): A styles object.\\n\\n### Valeur de retour\\n\\n`styles`: A styles object.\\n\\n### Exemples\\n\\n```jsx\\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles((theme: Theme) => createStyles({\\n  root: {\\n    backgroundColor: theme.color.red,\\n  },\\n}));\\n\\nexport default function MyComponent {\\n  const classes = useStyles();\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `makeStyles(styles, [options]) => hook`\\n\\nLink a style sheet with a function component using the **hook** pattern.\\n\\n### Param\\xe8tres\\n\\n1. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It's provided as the first argument.\\n2. `options` (*Object* [optional]): \\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging.\\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### Valeur de retour\\n\\n`hook`: A hook. This hook can be used in a function component. The documentation often calls this returned hook `useStyles`. It accepts one argument: the properties that will be used for \\\"interpolation\\\" in the style sheet.\\n\\n### Exemples\\n\\n```jsx\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles({\\n  root: {\\n    backgroundColor: 'red',\\n    color: props => props.color,\\n  },\\n});\\n\\nexport default function MyComponent(props) {\\n  const classes = useStyles(props);\\n  return <div className={classes.root} />;\\n}\\n```\\n\\n## `ServerStyleSheets`\\n\\nThis is a class helper to handle server-side rendering. [You can follow this guide for a practical approach](/guides/server-rendering/).\\n\\n```jsx\\nimport ReactDOMServer from 'react-dom/server';\\nimport { ServerStyleSheets } from '@material-ui/core/styles';\\n\\nconst sheets = new ServerStyleSheets();\\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\\nconst cssString = sheets.toString();\\n\\nconst response = `\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style id=\\\"jss-server-side\\\">${cssString}</style>\\n  </head>\\n  <body>${html}</body>\\n</html>\\n`;\\n```\\n\\n### `new ServerStyleSheets([options])`\\n\\nThe instantiation accepts an options object as a first argument.\\n\\n1. `options` (*Object* [optional]): The options are spread as props to the [`StylesProvider`](#stylesprovider) component.\\n\\n### `sheets.collect(node) => React element`\\n\\nThe method wraps your React node in a provider element. It collects the style sheets during the rendering so they can be later sent to the client.\\n\\n### `sheets.toString() => CSS string`\\n\\nThe method returns the collected styles.\\n\\n\\u26a0\\ufe0f You must call `.collect()` before using this method.\\n\\n### `sheets.getStyleElement() => CSS React element`\\n\\nThe method is an alternative to `.toString()` when you are rendering the whole page with React.\\n\\n\\u26a0\\ufe0f You must call `.collect()` before using this method.\\n\\n## `styled(Component)(styles, [options]) => Component`\\n\\nLink a style sheet with a function component using the **styled components** pattern.\\n\\n### Param\\xe8tres\\n\\n1. `Component`: The component that will be wrapped.\\n2. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It's provided as property of the first argument.\\n3. `options` (*Object* [optional]): \\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n  - `options.withTheme` (*Boolean* [optional]): Valeur par d\\xe9faut `false`. Provide the `theme` object to the component as a property.\\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging. If the value isn't provided, it will try to fallback to the name of the component.\\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### Valeur de retour\\n\\n`Component`: The new component created.\\n\\n### Exemples\\n\\n```jsx\\nimport React from 'react';\\nimport { styled } from '@material-ui/core/styles';\\n\\nconst MyComponent = styled('div')({\\n  backgroundColor: 'red',\\n});\\n\\nconst MyThemeComponent = styled('div')(({\\n  theme\\n}) => ({\\n  padding: theme.spacing(1),\\n}));\\n\\nexport default function StyledComponents() {\\n  return (\\n    <MyThemeComponent>\\n      <MyComponent />\\n    </MyThemeComponent>\\n  );\\n}\\n```\\n\\n## `StylesProvider`\\n\\nThis component allows you to change the behavior of the styling solution. It makes the options available down the React tree thanks to the context.\\n\\nIt should preferably be used at **the root of your component tree**.\\n\\n### Props\\n\\n| Name              | Type   | Default | Description                                                                                                                                                                                                                                                                                                                          |\\n|:----------------- |:------ |:------- |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\\n| children&nbsp;*   | node   |         | Your component tree.                                                                                                                                                                                                                                                                                                                 |\\n| disableGeneration | bool   | false   | You can disable the generation of the styles with this option. It can be useful when traversing the React tree outside of the HTML rendering step on the server. Let's say you are using react-apollo to extract all the queries made by the interface server-side. You can significantly speed up the traversal with this property. |\\n| generateClassName | func   |         | JSS's class name generator.                                                                                                                                                                                                                                                                                                          |\\n| injectFirst       | bool   | false   | By default, the styles are injected last in the `<head>` element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material-UI's styles, set this prop.                                                                                                                 |\\n| jss               | object |         | JSS's instance.                                                                                                                                                                                                                                                                                                                      |\\n\\n\\n### Exemples\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { StylesProvider } from '@material-ui/core/styles';\\n\\nfunction App() {\\n  return (\\n    <StylesProvider jss={jss}>...</StylesProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `ThemeProvider`\\n\\nThis component takes a `theme` property, and makes it available down the React tree thanks to the context. It should preferably be used at **the root of your component tree**.\\n\\n### Props\\n\\n| Name            | Type                                     | Default | Description                                                           |\\n|:--------------- |:---------------------------------------- |:------- |:--------------------------------------------------------------------- |\\n| children&nbsp;* | node                                     |         | Your component tree.                                                  |\\n| theme&nbsp;*    | union:&nbsp;object&nbsp;&#124;&nbsp;func |         | A theme object. You can provide a function to extend the outer theme. |\\n\\n\\n### Exemples\\n\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { ThemeProvider } from '@material-ui/core/styles';\\n\\nconst theme = {};\\n\\nfunction App() {\\n  return (\\n    <ThemeProvider theme={theme}>...</ThemeProvider>\\n  );\\n}\\n\\nReactDOM.render(<App />, document.querySelector('#app'));\\n```\\n\\n## `useTheme() => theme`\\n\\nThis hook returns the `theme` object so it can be used inside a function component.\\n\\n### Valeur de retour\\n\\n`theme`: The theme object previously injected in the context.\\n\\n### Exemples\\n\\n```jsx\\nimport React from 'react';\\nimport { useTheme } from '@material-ui/core/styles';\\n\\nexport default function MyComponent() {\\n  const theme = useTheme();\\n\\n  return <div>{`spacing ${theme.spacing}`}</div>;\\n}\\n```\\n\\n## `withStyles(styles, [options]) => higher-order component`\\n\\nLink a style sheet with a component using the **higher-order component** pattern. It does not modify the component passed to it; instead, it returns a new component with a `classes` property. This `classes` object contains the name of the class names injected in the DOM.\\n\\nSome implementation details that might be interesting to being aware of:\\n\\n- It adds a `classes` property so you can override the injected class names from the outside.\\n- It forwards refs to the inner component.\\n- The `innerRef` prop is deprecated. Use `ref` instead.\\n- It does **not** copy over statics. For instance, it can be used to defined a `getInitialProps()` static method (next.js).\\n\\n### Param\\xe8tres\\n\\n1. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It's provided as the first argument.\\n2. `options` (*Object* [optional]): \\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\\n  - `options.withTheme` (*Boolean* [optional]): Valeur par d\\xe9faut `false`. Provide the `theme` object to the component as a property.\\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging. If the value isn't provided, it will try to fallback to the name of the component.\\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\\n\\n### Valeur de retour\\n\\n`higher-order component`: Should be used to wrap a component.\\n\\n### Exemples\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\nfunction MyComponent(props) {\\n  return <div className={props.classes.root} />;\\n}\\n\\nexport default withStyles(styles)(MyComponent);\\n```\\n\\nAlso, you can use as [decorators](https://babeljs.io/docs/en/babel-plugin-proposal-decorators) like so:\\n\\n```jsx\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\n\\nconst styles = {\\n  root: {\\n    backgroundColor: 'red',\\n  },\\n};\\n\\n@withStyles(styles)\\nclass MyComponent extends React.Component {\\n  render () {\\n    return <div className={this.props.classes.root} />;\\n  }\\n}\\n\\nexport default MyComponent\\n```\\n\\n## `withTheme(Component) => Component`\\n\\nProvide the `theme` object as a property of the input component so it can be used in the render method.\\n\\n### Param\\xe8tres\\n\\n1. `Component`: The component that will be wrapped.\\n\\n### Valeur de retour\\n\\n`Component`: The new component created. Does forward refs to the inner component.\\n\\n### Exemples\\n\\n```jsx\\nimport React from 'react';\\nimport { withTheme } from '@material-ui/core/styles';\\n\\nfunction MyComponent(props) {\\n  return <div>{props.theme.direction}</div>;\\n}\\n\\nexport default withTheme(MyComponent);\\n```\"},iaiH:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return d}));var o=t(\"mXGw\"),s=t.n(o),r=t(\"e+1t\"),a=t(\"kVtE\"),i=s.a.createElement,l=t(\"7zEz\"),c=t(\"FkHk\");function d(e){var n=e.demos,t=e.docs;return i(r.a,{demos:n,docs:t,requireDemo:l})}d.getInitialProps=function(){var e=Object(a.a)({pageFilename:\"styles/api\",requireRaw:c});return{demos:e.demos,docs:e.docs}}}},[[\"UmTS\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}