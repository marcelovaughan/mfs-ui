{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[265],{\"+QSu\":function(e,n){e.exports=\"# Breakpoints\\n\\n<p class=\\\"description\\\">API that enables the use of breakpoints in a wide variety of contexts.</p>\\n\\nFor optimal user experience, material design interfaces need to be able to adapt their layout at various breakpoints. Material-UI uses a **simplified** implementation of the original [specification](https://material.io/design/layout/responsive-layout-grid.html#breakpoints).\\n\\nThe breakpoints are used internally in various components to make them responsive, but you can also take advantage of them for controlling the layout of your application through the [Grid](/components/grid/) and [Hidden](/components/hidden/) components.\\n\\n## Default breakpoints\\n\\nEach breakpoint (a key) matches with a *fixed* screen width (a value):\\n\\n- **xs,** extra-small: 0px\\n- **sm,** small: 600px\\n- **md,** medium: 960px\\n- **lg,** large: 1280px\\n- **xl,** extra-large: 1920px\\n\\nThese breakpoint values are used to determine breakpoint ranges. A range starts from the breakpoint value inclusive, to the next breakpoint value exclusive:\\n\\n```js\\nvalue         |0px     600px    960px    1280px   1920px\\nkey           |xs      sm       md       lg       xl\\nscreen width  |--------|--------|--------|--------|--------\\x3e\\nrange         |   xs   |   sm   |   md   |   lg   |   xl\\n```\\n\\nThese values can be [customized](#custom-breakpoints).\\n\\n## CSS Media Queries\\n\\nCSS media queries are the idiomatic approach to make your UI responsive. The theme provides four styles helpers to do so:\\n\\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\\n\\nIn the following demo, we change the background color (red, blue & green) based on the screen width.\\n\\n```jsx\\nconst styles = theme => ({\\n  root: {\\n    padding: theme.spacing(1),\\n    [theme.breakpoints.down('sm')]: {\\n      backgroundColor: theme.palette.secondary.main,\\n    },\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: theme.palette.primary.main,\\n    },\\n    [theme.breakpoints.up('lg')]: {\\n      backgroundColor: green[500],\\n    },\\n  },\\n});\\n```\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/MediaQuery.js\\\"}}\\n\\n## JavaScript Media Queries\\n\\nSometimes, using CSS isn't enough. You might want to change the React rendering tree based on the breakpoint value, in JavaScript.\\n\\n### useMediaQuery hook\\n\\nYou can learn more on the [useMediaQuery](/components/use-media-query/) page.\\n\\n### withWidth()\\n\\n> \\u26a0\\ufe0f This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\\n\\n```jsx\\nimport withWidth from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  return <div>{`Current width: ${props.width}`}</div>;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\nIn the following demo, we change the rendered DOM element (*em*, <u>u</u>, ~~del~~ & span) based on the screen width.\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/WithWidth.js\\\"}}\\n\\n## Custom breakpoints\\n\\nYou define your project's breakpoints in the `theme.breakpoints` section of your theme.\\n\\n- [`theme.breakpoints.values`](/customization/default-theme/?expand-path=$.breakpoints.values): Default to the [above values](#default-breakpoints). The keys are your screen names, and the values are the min-width where that breakpoint should start.\\n- `theme.breakpoints.unit`: Default to `px`. The unit used for the breakpoint's values.\\n- `theme.breakpoints.step`: Default to 5 (`0.05px`). The increment used to implement exclusive breakpoints.\\n\\nIf you change the default breakpoints's values, you need to provide them all:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      xs: 0,\\n      sm: 600,\\n      md: 960,\\n      lg: 1280,\\n      xl: 1920,\\n    },\\n  },\\n})\\n```\\n\\nFeel free to have as few or as many breakpoints as you want, naming them in whatever way you'd prefer for your project.\\n\\n```js\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      tablet: 640,\\n      laptop: 1024,\\n      desktop: 1280,\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\\"@material-ui/core/styles/createBreakpoints\\\" {\\n  interface BreakpointOverrides {\\n    xs: false; // removes the `xs` breakpoint\\n    sm: false;\\n    md: false;\\n    lg: false;\\n    xl: false;\\n    tablet: true; // adds the `tablet` breakpoint\\n    laptop: true;\\n    desktop: true;\\n  }\\n}\\n```\\n\\n## API\\n\\n### `theme.breakpoints.up(key) => media query`\\n\\n#### Param\\xe8tres\\n\\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### Valeur de retour\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than and including the screen size given by the breakpoint key.\\n\\n#### Exemples\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, \\u221e)\\n    //       [960px, \\u221e)\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.down(key) => media query`\\n\\n#### Param\\xe8tres\\n\\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### Valeur de retour\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths less than and including the screen size given by the breakpoint key.\\n\\n#### Exemples\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [0, md + 1)\\n    //       [0, lg)\\n    //       [0, 1280px)\\n    [theme.breakpoints.down('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.only(key) => media query`\\n\\n#### Param\\xe8tres\\n\\n1. `key` (*String*): A breakpoint key (`xs`, `sm`, etc.).\\n\\n#### Valeur de retour\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths including the screen size given by the breakpoint key.\\n\\n#### Exemples\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, md + 1)\\n    //       [md, lg)\\n    //       [960px, 1280px)\\n    [theme.breakpoints.only('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.between(start, end) => media query`\\n\\n#### Param\\xe8tres\\n\\n1. `start` (*String*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n2. `end` (*String*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### Valeur de retour\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than the screen size given by the breakpoint key in the first argument and less than the the screen size given by the breakpoint key in the second argument.\\n\\n#### Exemples\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [sm, md + 1)\\n    //       [sm, lg)\\n    //       [600px, 1280px[\\n    [theme.breakpoints.between('sm', 'md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `withWidth([options]) => higher-order component`\\n\\nInject a `width` property. It does not modify the component passed to it; instead, it returns a new component. This `width` breakpoint property match the current screen width. It can be one of the following breakpoints:\\n\\n```ts\\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\\n```\\n\\nSome implementation details that might be interesting to being aware of:\\n\\n- It forwards *non React static* properties so this HOC is more \\\"transparent\\\". For instance, it can be used to defined a `getInitialProps()` static method (next.js).\\n\\n#### Param\\xe8tres\\n\\n1. `options` (*Object* [optional]): \\n  - `options.withTheme` (*Boolean* [optional]): Valeur par d\\xe9faut `false`. Provide the `theme` object to the component as a property.\\n  - `options.noSSR` (*Boolean* [optional]): Valeur par d\\xe9faut `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. The UI might blink. You can set this flag to `true` if you are not doing server-side rendering.\\n  - `options.initialWidth` (*Breakpoint* [optional]): As `window.innerWidth` is unavailable on the server, we default to rendering an empty component during the first mount. You might want to use an heuristic to approximate the screen width of the client browser screen width. For instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint, we also can set the initial width globally using [`custom properties`](/customization/globals/#default-props) on the theme. In order to set the initialWidth we need to pass a custom property with this shape:\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // withWidth component \\u269b\\ufe0f\\n    MuiWithWidth: {\\n      // Initial width property\\n      initialWidth: 'lg', // Breakpoint being globally set \\ud83c\\udf0e!\\n    },\\n  },\\n});\\n```\\n\\n- `options.resizeInterval` (*Number* [optional]): Defaults to 166, corresponds to 10 frames at 60 Hz. Number of milliseconds to wait before responding to a screen resize event.\\n\\n#### Valeur de retour\\n\\n`higher-order component`: Should be used to wrap a component.\\n\\n#### Exemples\\n\\n```jsx\\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  if (isWidthUp('sm', props.width)) {\\n    return <span />\\n  }\\n\\n  return <div />;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\n## Default values\\n\\nYou can explore the default values of the breakpoints using [the theme explorer](/customization/default-theme/?expand-path=$.breakpoints) or by opening the dev tools console on this page (`window.theme.breakpoints`).\"},\"0T3O\":function(e,n){e.exports=\"# Breakpoints\\n\\n<p class=\\\"description\\\">API that enables the use of breakpoints in a wide variety of contexts.</p>\\n\\nFor optimal user experience, material design interfaces need to be able to adapt their layout at various breakpoints.\\nMaterial-UI uses a **simplified** implementation of the original [specification](https://material.io/design/layout/responsive-layout-grid.html#breakpoints).\\n\\nThe breakpoints are used internally in various components to make them responsive,\\nbut you can also take advantage of them\\nfor controlling the layout of your application through the [Grid](/components/grid/) and\\n[Hidden](/components/hidden/) components.\\n\\n## Default breakpoints\\n\\nEach breakpoint (a key) matches with a _fixed_ screen width (a value):\\n\\n- **xs,** extra-small: 0px\\n- **sm,** small: 600px\\n- **md,** medium: 960px\\n- **lg,** large: 1280px\\n- **xl,** extra-large: 1920px\\n\\nThese breakpoint values are used to determine breakpoint ranges. A range starts from the breakpoint value inclusive, to the next breakpoint value exclusive:\\n\\n```js\\nvalue         |0px     600px    960px    1280px   1920px\\nkey           |xs      sm       md       lg       xl\\nscreen width  |--------|--------|--------|--------|--------\\x3e\\nrange         |   xs   |   sm   |   md   |   lg   |   xl\\n```\\n\\nThese values can be [customized](#custom-breakpoints).\\n\\n## CSS Media Queries\\n\\nCSS media queries are the idiomatic approach to make your UI responsive.\\nThe theme provides four styles helpers to do so:\\n\\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\\n\\nIn the following demo, we change the background color (red, blue & green) based on the screen width.\\n\\n```jsx\\nconst styles = (theme) => ({\\n  root: {\\n    padding: theme.spacing(1),\\n    [theme.breakpoints.down('sm')]: {\\n      backgroundColor: theme.palette.secondary.main,\\n    },\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: theme.palette.primary.main,\\n    },\\n    [theme.breakpoints.up('lg')]: {\\n      backgroundColor: green[500],\\n    },\\n  },\\n});\\n```\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/MediaQuery.js\\\"}}\\n\\n## JavaScript Media Queries\\n\\nSometimes, using CSS isn't enough.\\nYou might want to change the React rendering tree based on the breakpoint value, in JavaScript.\\n\\n### useMediaQuery hook\\n\\nYou can learn more on the [useMediaQuery](/components/use-media-query/) page.\\n\\n### withWidth()\\n\\n> \\u26a0\\ufe0f This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\\n\\n```jsx\\nimport withWidth from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  return <div>{`Current width: ${props.width}`}</div>;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\nIn the following demo, we change the rendered DOM element (_em_, <u>u</u>, ~~del~~ & span) based on the screen width.\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/WithWidth.js\\\"}}\\n\\n## Custom breakpoints\\n\\nYou define your project's breakpoints in the `theme.breakpoints` section of your theme.\\n\\n- [`theme.breakpoints.values`](/customization/default-theme/?expand-path=$.breakpoints.values): Default to the [above values](#default-breakpoints). The keys are your screen names, and the values are the min-width where that breakpoint should start.\\n- `theme.breakpoints.unit`: Default to `px`. The unit used for the breakpoint's values.\\n- `theme.breakpoints.step`: Default to 5 (`0.05px`). The increment used to implement exclusive breakpoints.\\n\\nIf you change the default breakpoints's values, you need to provide them all:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      xs: 0,\\n      sm: 600,\\n      md: 960,\\n      lg: 1280,\\n      xl: 1920,\\n    },\\n  },\\n});\\n```\\n\\nFeel free to have as few or as many breakpoints as you want, naming them in whatever way you'd prefer for your project.\\n\\n```js\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      tablet: 640,\\n      laptop: 1024,\\n      desktop: 1280,\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module '@material-ui/core/styles/createBreakpoints' {\\n  interface BreakpointOverrides {\\n    xs: false; // removes the `xs` breakpoint\\n    sm: false;\\n    md: false;\\n    lg: false;\\n    xl: false;\\n    tablet: true; // adds the `tablet` breakpoint\\n    laptop: true;\\n    desktop: true;\\n  }\\n}\\n```\\n\\n## API\\n\\n### `theme.breakpoints.up(key) => media query`\\n\\n#### Arguments\\n\\n1. `key` (_String_ | _Number_): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### Returns\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than and including the screen size given by the breakpoint key.\\n\\n#### Examples\\n\\n```js\\nconst styles = (theme) => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, \\u221e)\\n    //       [960px, \\u221e)\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.down(key) => media query`\\n\\n#### Arguments\\n\\n1. `key` (_String_ | _Number_): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### Returns\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths less than and including the screen size given by the breakpoint key.\\n\\n#### Examples\\n\\n```js\\nconst styles = (theme) => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [0, md + 1)\\n    //       [0, lg)\\n    //       [0, 1280px)\\n    [theme.breakpoints.down('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.only(key) => media query`\\n\\n#### Arguments\\n\\n1. `key` (_String_): A breakpoint key (`xs`, `sm`, etc.).\\n\\n#### Returns\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths including the screen size given by the breakpoint key.\\n\\n#### Examples\\n\\n```js\\nconst styles = (theme) => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, md + 1)\\n    //       [md, lg)\\n    //       [960px, 1280px)\\n    [theme.breakpoints.only('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.between(start, end) => media query`\\n\\n#### Arguments\\n\\n1. `start` (_String_): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n2. `end` (_String_): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### Returns\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than the screen size given by the breakpoint key in the first argument and less than the the screen size given by the breakpoint key in the second argument.\\n\\n#### Examples\\n\\n```js\\nconst styles = (theme) => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [sm, md + 1)\\n    //       [sm, lg)\\n    //       [600px, 1280px[\\n    [theme.breakpoints.between('sm', 'md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `withWidth([options]) => higher-order component`\\n\\nInject a `width` property.\\nIt does not modify the component passed to it; instead, it returns a new component.\\nThis `width` breakpoint property match the current screen width.\\nIt can be one of the following breakpoints:\\n\\n```ts\\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\\n```\\n\\nSome implementation details that might be interesting to being aware of:\\n\\n- It forwards _non React static_ properties so this HOC is more \\\"transparent\\\".\\n  For instance, it can be used to defined a `getInitialProps()` static method (next.js).\\n\\n#### Arguments\\n\\n1. `options` (_Object_ [optional]):\\n\\n- `options.withTheme` (_Boolean_ [optional]): Defaults to `false`. Provide the `theme` object to the component as a property.\\n- `options.noSSR` (_Boolean_ [optional]): Defaults to `false`.\\n  In order to perform the server-side rendering reconciliation, it needs to render twice.\\n  A first time with nothing and a second time with the children.\\n  This double pass rendering cycle comes with a drawback. The UI might blink.\\n  You can set this flag to `true` if you are not doing server-side rendering.\\n- `options.initialWidth` (_Breakpoint_ [optional]):\\n  As `window.innerWidth` is unavailable on the server,\\n  we default to rendering an empty component during the first mount.\\n  You might want to use a heuristic to approximate\\n  the screen width of the client browser screen width.\\n  For instance, you could be using the user-agent or the [client-hints](https://caniuse.com/#search=client%20hint).\\n  we also can set the initial width globally using [`custom properties`](/customization/globals/#default-props) on the theme.\\n  In order to set the initialWidth we need to pass a custom property with this shape:\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // withWidth component \\u269b\\ufe0f\\n    MuiWithWidth: {\\n      // Initial width property\\n      initialWidth: 'lg', // Breakpoint being globally set \\ud83c\\udf0e!\\n    },\\n  },\\n});\\n```\\n\\n- `options.resizeInterval` (_Number_ [optional]): Defaults to 166, corresponds to 10 frames at 60 Hz. Number of milliseconds to wait before responding to a screen resize event.\\n\\n#### Returns\\n\\n`higher-order component`: Should be used to wrap a component.\\n\\n#### Examples\\n\\n```jsx\\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  if (isWidthUp('sm', props.width)) {\\n    return <span />;\\n  }\\n\\n  return <div />;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\n## Default values\\n\\nYou can explore the default values of the breakpoints using [the theme explorer](/customization/default-theme/?expand-path=$.breakpoints) or by opening the dev tools console on this page (`window.theme.breakpoints`).\\n\"},\"4mih\":function(e,n){e.exports=\"# crwdns92842:0crwdne92842:0\\n\\n<p class=\\\"description\\\">crwdns92844:0crwdne92844:0</p>\\n\\ncrwdns92846:0crwdne92846:0 crwdns92848:0crwdne92848:0\\n\\ncrwdns132126:0crwdne132126:0\\n\\n## crwdns132128:0crwdne132128:0\\n\\ncrwdns132130:0crwdne132130:0\\n\\n- crwdns92852:0crwdne92852:0\\n- crwdns92854:0crwdne92854:0\\n- crwdns92856:0crwdne92856:0\\n- crwdns92858:0crwdne92858:0\\n- crwdns92860:0crwdne92860:0\\n\\ncrwdns132132:0crwdne132132:0 crwdns132134:0crwdne132134:0\\n\\n```js\\ncrwdns92866:0crwdne92866:0\\n```\\n\\ncrwdns132136:0crwdne132136:0\\n\\n## crwdns132138:0crwdne132138:0\\n\\ncrwdns101160:0crwdne101160:0 crwdns101162:0crwdne101162:0\\n\\n- [crwdns92882:0crwdne92882:0](crwdns92880:0crwdne92880:0)\\n- [crwdns92886:0crwdne92886:0](crwdns92884:0crwdne92884:0)\\n- [crwdns92890:0crwdne92890:0](crwdns92888:0crwdne92888:0)\\n- [crwdns92894:0crwdne92894:0](crwdns92892:0crwdne92892:0)\\n\\ncrwdns92896:0crwdne92896:0\\n\\n```jsx\\ncrwdns92898:0{\\n      backgroundColor: theme.palette.secondary.main,\\n    }crwdnd92898:0{\\n      backgroundColor: theme.palette.primary.main,\\n    }crwdnd92898:0[500]crwdne92898:0\\n```\\n\\ncrwdns92900:0crwdne92900:0\\n\\n## crwdns132140:0crwdne132140:0\\n\\ncrwdns92904:0crwdne92904:0 crwdns92906:0crwdne92906:0\\n\\n### crwdns92908:0crwdne92908:0\\n\\ncrwdns92910:0crwdne92910:0\\n\\n### crwdns92912:0crwdne92912:0\\n\\n> crwdns92914:0crwdne92914:0\\n\\n```jsx\\ncrwdns92916:0${props.width}crwdne92916:0\\n```\\n\\ncrwdns92918:0crwdne92918:0\\n\\ncrwdns92920:0crwdne92920:0\\n\\n## crwdns132142:0crwdne132142:0\\n\\ncrwdns132144:0crwdne132144:0\\n\\n- crwdns132146:0crwdne132146:0 crwdns132148:0crwdne132148:0\\n- crwdns132150:0crwdne132150:0 crwdns132152:0crwdne132152:0\\n- crwdns132154:0crwdne132154:0 crwdns132156:0crwdne132156:0\\n\\ncrwdns132158:0crwdne132158:0\\n\\n```jsx\\ncrwdns132160:0crwdne132160:0\\n```\\n\\ncrwdns132162:0crwdne132162:0\\n\\n```js\\ncrwdns133266:0crwdne133266:0\\n```\\n\\ncrwdns133268:0crwdne133268:0\\n\\n```ts\\ncrwdns133270:0crwdne133270:0\\n```\\n\\n## crwdns132166:0crwdne132166:0\\n\\n### `crwdns92924:0crwdne92924:0`\\n\\n#### crwdns92926:0crwdne92926:0\\n\\n1. crwdns92928:0crwdne92928:0\\n\\n#### crwdns92930:0crwdne92930:0\\n\\ncrwdns133272:0crwdne133272:0\\n\\n#### crwdns92934:0crwdne92934:0\\n\\n```js\\ncrwdns133274:0{\\n      backgroundColor: 'red',\\n    }crwdne133274:0\\n```\\n\\n### `crwdns92938:0crwdne92938:0`\\n\\n#### crwdns92940:0crwdne92940:0\\n\\n1. crwdns92942:0crwdne92942:0\\n\\n#### crwdns92944:0crwdne92944:0\\n\\ncrwdns133276:0crwdne133276:0\\n\\n#### crwdns92948:0crwdne92948:0\\n\\n```js\\ncrwdns133278:0{\\n      backgroundColor: 'red',\\n    }crwdne133278:0\\n```\\n\\n### `crwdns92952:0crwdne92952:0`\\n\\n#### crwdns92954:0crwdne92954:0\\n\\n1. crwdns92956:0crwdne92956:0\\n\\n#### crwdns92958:0crwdne92958:0\\n\\ncrwdns133280:0crwdne133280:0\\n\\n#### crwdns92962:0crwdne92962:0\\n\\n```js\\ncrwdns133282:0{\\n      backgroundColor: 'red',\\n    }crwdne133282:0\\n```\\n\\n### `crwdns92966:0crwdne92966:0`\\n\\n#### crwdns92968:0crwdne92968:0\\n\\n1. crwdns107363:0crwdne107363:0\\n2. crwdns107365:0crwdne107365:0\\n\\n#### crwdns92974:0crwdne92974:0\\n\\ncrwdns133284:0crwdne133284:0\\n\\n#### crwdns92978:0crwdne92978:0\\n\\n```js\\ncrwdns133286:0{\\n      backgroundColor: 'red',\\n    }crwdne133286:0\\n```\\n\\n### `crwdns92982:0[options]crwdne92982:0`\\n\\ncrwdns133288:0crwdne133288:0 crwdns133290:0crwdne133290:0 crwdns133292:0crwdne133292:0 crwdns133294:0crwdne133294:0\\n\\n```ts\\ncrwdns133296:0crwdne133296:0\\n```\\n\\ncrwdns133298:0crwdne133298:0\\n\\n- crwdns132196:0crwdne132196:0 crwdns132198:0crwdne132198:0\\n\\n#### crwdns93000:0crwdne93000:0\\n\\n1. crwdns93002:0[optional]crwdne93002:0 \\n  - crwdns93004:0[optional]crwdne93004:0 crwdns93006:0crwdne93006:0\\n  - crwdns93008:0[optional]crwdne93008:0 crwdns93010:0crwdne93010:0 crwdns93012:0crwdne93012:0 crwdns93014:0crwdne93014:0 crwdns93016:0crwdne93016:0 crwdns93018:0crwdne93018:0\\n  - crwdns93020:0[optional]crwdne93020:0 crwdns93022:0crwdne93022:0 crwdns93024:0crwdne93024:0 crwdns93026:0%20hicrwdne93026:0 crwdns93028:0crwdne93028:0\\n\\n```js\\ncrwdns133300:0crwdne133300:0\\n    crwdns133302:0crwdne133302:0\\n```\\n\\n- crwdns132204:0[optional]crwdne132204:0 crwdns132206:0crwdne132206:0\\n\\n#### crwdns93038:0crwdne93038:0\\n\\ncrwdns133304:0crwdne133304:0\\n\\n#### crwdns93042:0crwdne93042:0\\n\\n```jsx\\ncrwdns133306:0{ isWidthUp }crwdne133306:0\\n```\\n\\n## crwdns132212:0crwdne132212:0\\n\\ncrwdns133308:0crwdne133308:0\"},CZVn:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return m}));var o=t(\"mXGw\"),r=t.n(o),i=t(\"e+1t\"),a=t(\"kVtE\"),s=r.a.createElement,d=t(\"eJWM\"),p=t(\"xsHy\");function m(e){var n=e.demos,t=e.docs;return s(i.a,{demos:n,docs:t,requireDemo:d})}m.getInitialProps=function(){var e=Object(a.a)({pageFilename:\"customization/breakpoints\",requireRaw:p});return{demos:e.demos,docs:e.docs}}},FAhB:function(e,n){e.exports=\"import React from 'react';\\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles';\\nimport Typography from '@material-ui/core/Typography';\\nimport { green } from '@material-ui/core/colors';\\n\\nconst useStyles = makeStyles((theme: Theme) =>\\n  createStyles({\\n    root: {\\n      padding: theme.spacing(1),\\n      [theme.breakpoints.down('sm')]: {\\n        backgroundColor: theme.palette.secondary.main,\\n      },\\n      [theme.breakpoints.up('md')]: {\\n        backgroundColor: theme.palette.primary.main,\\n      },\\n      [theme.breakpoints.up('lg')]: {\\n        backgroundColor: green[500],\\n      },\\n    },\\n  }),\\n);\\n\\nexport default function MediaQuery() {\\n  const classes = useStyles();\\n  return (\\n    <div className={classes.root}>\\n      <Typography>{'down(sm): red'}</Typography>\\n      <Typography>{'up(md): blue'}</Typography>\\n      <Typography>{'up(lg): green'}</Typography>\\n    </div>\\n  );\\n}\\n\"},Kkdi:function(e,n,t){\"use strict\";t.r(n);var o=t(\"mXGw\"),r=t.n(o),i=t(\"6xHO\"),a=t(\"Oy88\"),s=r.a.createElement,d={sm:\"em\",md:\"u\",lg:\"del\"};n.default=Object(i.a)()((function(e){var n=e.width,t=d[n]||\"span\";return s(a.a,null,s(t,null,\"Current width: \".concat(n)))}))},Rm83:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return b}));var o=t(\"azxR\"),r=t(\"mXGw\"),i=t.n(r),a=t(\"yZEQ\"),s=t(\"WLtd\"),d=t(\"Oy88\"),p=t(\"FJkE\"),m=i.a.createElement,u=Object(a.a)((function(e){var n;return Object(s.a)({root:(n={padding:e.spacing(1)},Object(o.a)(n,e.breakpoints.down(\"sm\"),{backgroundColor:e.palette.secondary.main}),Object(o.a)(n,e.breakpoints.up(\"md\"),{backgroundColor:e.palette.primary.main}),Object(o.a)(n,e.breakpoints.up(\"lg\"),{backgroundColor:p.a[500]}),n)})})),h=m(d.a,null,\"down(sm): red\"),l=m(d.a,null,\"up(md): blue\"),c=m(d.a,null,\"up(lg): green\");function b(){var e=u();return m(\"div\",{className:e.root},h,l,c)}},WLtd:function(e,n,t){\"use strict\";function o(e){return e}t.d(n,\"a\",(function(){return o}))},eJWM:function(e,n,t){var o={\"./MediaQuery.js\":\"i2ZV\",\"./MediaQuery.tsx\":\"Rm83\",\"./WithWidth.js\":\"n7UM\",\"./WithWidth.tsx\":\"Kkdi\"};function r(e){var n=i(e);return t(n)}function i(e){if(!t.o(o,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return o[e]}r.keys=function(){return Object.keys(o)},r.resolve=i,e.exports=r,r.id=\"eJWM\"},fchn:function(e,n){e.exports=\"import React from 'react';\\nimport withWidth from '@material-ui/core/withWidth';\\nimport Typography from '@material-ui/core/Typography';\\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\\n\\ntype TagName = 'em' | 'u' | 'del';\\n\\nconst components: Partial<Record<Breakpoint, TagName>> = {\\n  sm: 'em',\\n  md: 'u',\\n  lg: 'del',\\n};\\n\\nfunction WithWidth(props: { width: Breakpoint }) {\\n  const { width } = props;\\n  const Component = components[width] || 'span';\\n\\n  return (\\n    <Typography>\\n      <Component>{`Current width: ${width}`}</Component>\\n    </Typography>\\n  );\\n}\\n\\nexport default withWidth()(WithWidth);\\n\"},g68c:function(e,n){e.exports=\"# Separaciones\\n\\n<p class=\\\"description\\\">Esta API permite usar separaciones en una amplia variedad de contextos.</p>\\n\\nPara una optima experiencia de usuario, las interfaces de material design necesitan ser capaces de adaptar su layout a varias separaciones. Material-UI usa una implementaci\\xf3n **simplificada** de la [especificaci\\xf3n](https://material.io/design/layout/responsive-layout-grid.html#breakpoints) original.\\n\\nLas separaciones son usadas internamente en varios componentes para hacerlos responsive, pero tambi\\xe9n puede tomar ventaja de ellos para controlar el layout de su aplicaci\\xf3n mediante los componentes [Grid](/components/grid/) y [Hidden](/components/hidden/).\\n\\n## Default breakpoints\\n\\nCada separaci\\xf3n (una llave) coincide con el ancho de pantalla *fijo* (un valor):\\n\\n- **xs** extra-peque\\xf1o: 0px\\n- **sm** peque\\xf1o: 600px\\n- **md,** mediano: 960px\\n- **lg,** grande: 1280px\\n- **xl** extra-grande: 1920px\\n\\nThese breakpoint values are used to determine breakpoint ranges. Un rango empieza desde el valor de separaci\\xf3n inclusivo, hasta el siguiente valor de separaci\\xf3n exclusivo:\\n\\n```js\\nvalue         |0px     600px    960px    1280px   1920px\\nkey           |xs      sm       md       lg       xl\\nscreen width  |--------|--------|--------|--------|--------\\x3e\\nrange         |   xs   |   sm   |   md   |   lg   |   xl\\n```\\n\\nThese values can be [customized](#custom-breakpoints).\\n\\n## CSS Media Queries\\n\\nCSS media queries are the idiomatic approach to make your UI responsive. The theme provides four styles helpers to do so:\\n\\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\\n\\nIn the following demo, we change the background color (red, blue & green) based on the screen width.\\n\\n```jsx\\nconst styles = theme => ({\\n  root: {\\n    padding: theme.spacing(1),\\n    [theme.breakpoints.down('sm')]: {\\n      backgroundColor: theme.palette.secondary.main,\\n    },\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: theme.palette.primary.main,\\n    },\\n    [theme.breakpoints.up('lg')]: {\\n      backgroundColor: green[500],\\n    },\\n  },\\n});\\n```\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/MediaQuery.js\\\"}}\\n\\n## JavaScript Media Queries\\n\\nSometimes, using CSS isn't enough. You might want to change the React rendering tree based on the breakpoint value, in JavaScript.\\n\\n### useMediaQuery hook\\n\\nYou can learn more on the [useMediaQuery](/components/use-media-query/) page.\\n\\n### withWidth()\\n\\n> \\u26a0\\ufe0f This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\\n\\n```jsx\\nimport withWidth from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  return <div>{`Current width: ${props.width}`}</div>;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\nIn the following demo, we change the rendered DOM element (*em*, <u>u</u>, ~~del~~ & span) based on the screen width.\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/WithWidth.js\\\"}}\\n\\n## Custom breakpoints\\n\\nYou define your project's breakpoints in the `theme.breakpoints` section of your theme.\\n\\n- [`theme.breakpoints.values`](/customization/default-theme/?expand-path=$.breakpoints.values): Default to the [above values](#default-breakpoints). The keys are your screen names, and the values are the min-width where that breakpoint should start.\\n- `theme.breakpoints.unit`: Default to `px`. The unit used for the breakpoint's values.\\n- `theme.breakpoints.step`: Default to 5 (`0.05px`). The increment used to implement exclusive breakpoints.\\n\\nIf you change the default breakpoints's values, you need to provide them all:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      xs: 0,\\n      sm: 600,\\n      md: 960,\\n      lg: 1280,\\n      xl: 1920,\\n    },\\n  },\\n})\\n```\\n\\nFeel free to have as few or as many breakpoints as you want, naming them in whatever way you'd prefer for your project.\\n\\n```js\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      tablet: 640,\\n      laptop: 1024,\\n      desktop: 1280,\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\\"@material-ui/core/styles/createBreakpoints\\\" {\\n  interface BreakpointOverrides {\\n    xs: false; // removes the `xs` breakpoint\\n    sm: false;\\n    md: false;\\n    lg: false;\\n    xl: false;\\n    tablet: true; // adds the `tablet` breakpoint\\n    laptop: true;\\n    desktop: true;\\n  }\\n}\\n```\\n\\n## API\\n\\n### `theme.breakpoints.up(key) => media query`\\n\\n#### Argumentos\\n\\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### Devuelve\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than and including the screen size given by the breakpoint key.\\n\\n#### Ejemplos\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, \\u221e)\\n    //       [960px, \\u221e)\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.down(key) => media query`\\n\\n#### Argumentos\\n\\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### Devuelve\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths less than and including the screen size given by the breakpoint key.\\n\\n#### Ejemplos\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [0, md + 1)\\n    //       [0, lg)\\n    //       [0, 1280px)\\n    [theme.breakpoints.down('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.only(key) => media query`\\n\\n#### Argumentos\\n\\n1. `key` (*String*): A breakpoint key (`xs`, `sm`, etc.).\\n\\n#### Devuelve\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths including the screen size given by the breakpoint key.\\n\\n#### Ejemplos\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, md + 1)\\n    //       [md, lg)\\n    //       [960px, 1280px)\\n    [theme.breakpoints.only('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.between(start, end) => media query`\\n\\n#### Argumentos\\n\\n1. `start` (*String*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n2. `end` (*String*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### Devuelve\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than the screen size given by the breakpoint key in the first argument and less than the the screen size given by the breakpoint key in the second argument.\\n\\n#### Ejemplos\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [sm, md + 1)\\n    //       [sm, lg)\\n    //       [600px, 1280px[\\n    [theme.breakpoints.between('sm', 'md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `withWidth([options]) => higher-order component`\\n\\nInject a `width` property. It does not modify the component passed to it; instead, it returns a new component. This `width` breakpoint property match the current screen width. It can be one of the following breakpoints:\\n\\n```ts\\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\\n```\\n\\nSome implementation details that might be interesting to being aware of:\\n\\n- It forwards *non React static* properties so this HOC is more \\\"transparent\\\". For instance, it can be used to defined a `getInitialProps()` static method (next.js).\\n\\n#### Argumentos\\n\\n1. `options` (*Object* [optional]): \\n  - `options.withTheme` (*Boolean* [optional]): Default `false`. Provide the `theme` object to the component as a property.\\n  - `options.noSSR` (*Boolean* [optional]): Default `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. The UI might blink. You can set this flag to `true` if you are not doing server-side rendering.\\n  - `options.initialWidth` (*Breakpoint* [optional]): As `window.innerWidth` is unavailable on the server, we default to rendering an empty component during the first mount. You might want to use an heuristic to approximate the screen width of the client browser screen width. For instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint, we also can set the initial width globally using [`custom properties`](/customization/globals/#default-props) on the theme. In order to set the initialWidth we need to pass a custom property with this shape:\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // withWidth component \\u269b\\ufe0f\\n    MuiWithWidth: {\\n      // Initial width property\\n      initialWidth: 'lg', // Breakpoint being globally set \\ud83c\\udf0e!\\n    },\\n  },\\n});\\n```\\n\\n- `options.resizeInterval` (*Number* [optional]): Defaults to 166, corresponds to 10 frames at 60 Hz. Number of milliseconds to wait before responding to a screen resize event.\\n\\n#### Devuelve\\n\\n`higher-order component`: Should be used to wrap a component.\\n\\n#### Ejemplos\\n\\n```jsx\\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  if (isWidthUp('sm', props.width)) {\\n    return <span />\\n  }\\n\\n  return <div />;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\n## Default values\\n\\nYou can explore the default values of the breakpoints using [the theme explorer](/customization/default-theme/?expand-path=$.breakpoints) or by opening the dev tools console on this page (`window.theme.breakpoints`).\"},i2ZV:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return c}));var o=t(\"azxR\"),r=t(\"mXGw\"),i=t.n(r),a=t(\"yZEQ\"),s=t(\"Oy88\"),d=t(\"FJkE\"),p=i.a.createElement,m=Object(a.a)((function(e){var n;return{root:(n={padding:e.spacing(1)},Object(o.a)(n,e.breakpoints.down(\"sm\"),{backgroundColor:e.palette.secondary.main}),Object(o.a)(n,e.breakpoints.up(\"md\"),{backgroundColor:e.palette.primary.main}),Object(o.a)(n,e.breakpoints.up(\"lg\"),{backgroundColor:d.a[500]}),n)}})),u=p(s.a,null,\"down(sm): red\"),h=p(s.a,null,\"up(md): blue\"),l=p(s.a,null,\"up(lg): green\");function c(){var e=m();return p(\"div\",{className:e.root},u,h,l)}},jU1Y:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/customization/breakpoints\",function(){return t(\"CZVn\")}])},kROV:function(e,n){e.exports=\"import React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport Typography from '@material-ui/core/Typography';\\nimport { green } from '@material-ui/core/colors';\\n\\nconst useStyles = makeStyles((theme) => ({\\n  root: {\\n    padding: theme.spacing(1),\\n    [theme.breakpoints.down('sm')]: {\\n      backgroundColor: theme.palette.secondary.main,\\n    },\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: theme.palette.primary.main,\\n    },\\n    [theme.breakpoints.up('lg')]: {\\n      backgroundColor: green[500],\\n    },\\n  },\\n}));\\n\\nexport default function MediaQuery() {\\n  const classes = useStyles();\\n  return (\\n    <div className={classes.root}>\\n      <Typography>{'down(sm): red'}</Typography>\\n      <Typography>{'up(md): blue'}</Typography>\\n      <Typography>{'up(lg): green'}</Typography>\\n    </div>\\n  );\\n}\\n\"},mePe:function(e,n){e.exports=\"# \\u65ad\\u70b9\\n\\n<p class=\\\"description\\\">API that enables the use of breakpoints in a wide variety of contexts.</p>\\n\\n\\u4e3a\\u4e86\\u83b7\\u5f97\\u6700\\u4f73\\u7684\\u7528\\u6237\\u4f53\\u9a8c\\uff0cmaterial design \\u7684\\u63a5\\u53e3\\u9700\\u8981\\u5728\\u5404\\u79cd\\u65ad\\u70b9\\u8303\\u56f4\\u4e0b\\u81ea\\u9002\\u5e94\\u5e03\\u5c40\\u9700\\u8981\\u3002 Material-UI \\u4f7f\\u7528\\u4e86\\u539f\\u5148 [specification](https://material.io/design/layout/responsive-layout-grid.html#breakpoints) \\u7684 **\\u7b80\\u5316** \\u5b9e\\u73b0\\u3002\\n\\n\\u8bb8\\u591a\\u7ec4\\u4ef6\\u5185\\u90e8\\u90fd\\u4f7f\\u7528\\u4e86\\u65ad\\u70b9\\u6765\\u5b9e\\u73b0\\u54cd\\u5e94\\u5f0f\\u8981\\u6c42\\uff0c\\u540c\\u65f6\\u4f60\\u4e5f\\u53ef\\u4ee5\\u5229\\u7528\\u65ad\\u70b9\\u6765\\u63a7\\u5236\\u5e94\\u7528\\u7684\\u5e03\\u5c40\\uff0c\\u8fd9\\u53ef\\u501f\\u52a9\\u4e8e [Grid](/components/grid/) \\u548c [Hidden](/components/hidden/) \\u7ec4\\u4ef6\\u3002\\n\\n## Default breakpoints\\n\\n\\u6bcf\\u4e2a\\u65ad\\u70b9\\uff08\\u4e00\\u4e2a\\u952e\\uff09\\u5339\\u914d\\u4e00\\u4e2a*\\u56fa\\u5b9a*\\u7684\\u5c4f\\u5e55\\u5bbd\\u5ea6\\uff08\\u4e00\\u4e2a\\u503c\\uff09\\uff1a\\n\\n- ** xs\\uff0c ** \\u8d85\\u5c0f\\uff1a0px\\n- ** sm\\uff0c **\\u5c0f\\uff1a600px\\n- ** md\\uff0c **\\u4e2d\\u7b49\\uff1a960px\\n- ** lg\\uff0c **\\u5927\\uff1a1280px\\n- ** xl\\uff0c **\\u8d85\\u5927\\uff1a1920px\\n\\nThese breakpoint values are used to determine breakpoint ranges. \\u6bcf\\u4e2a\\u8303\\u56f4\\u5305\\u542b\\u8d77\\u59cb\\u65ad\\u70b9\\uff0c\\u4e0d\\u5305\\u542b\\u7ec8\\u6b62\\u65ad\\u70b9\\u3002\\n\\n```js\\nvalue         |0px     600px    960px    1280px   1920px\\nkey           |xs      sm       md       lg       xl\\nscreen width  |--------|--------|--------|--------|--------\\x3e\\nrange         |   xs   |   sm   |   md   |   lg   |   xl\\n```\\n\\nThese values can be [customized](#custom-breakpoints).\\n\\n## CSS \\u5a92\\u4f53\\u67e5\\u8be2\\n\\nCSS media queries are the idiomatic approach to make your UI responsive. The theme provides four styles helpers to do so:\\n\\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\\n\\n\\u5728\\u4e0b\\u9762\\u7684\\u6f14\\u793a\\u4e2d, \\u6211\\u4eec\\u6839\\u636e\\u5c4f\\u5e55\\u5bbd\\u5ea6\\u66f4\\u6539\\u80cc\\u666f\\u989c\\u8272 (\\u7ea2\\u8272\\u3001\\u84dd\\u8272\\u548c\\u7eff\\u8272)\\u3002\\n\\n```jsx\\nconst styles = theme => ({\\n  root: {\\n    padding: theme.spacing(1),\\n    [theme.breakpoints.down('sm')]: {\\n      backgroundColor: theme.palette.secondary.main,\\n    },\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: theme.palette.primary.main,\\n    },\\n    [theme.breakpoints.up('lg')]: {\\n      backgroundColor: green[500],\\n    },\\n  },\\n});\\n```\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/MediaQuery.js\\\"}}\\n\\n## JavaScript\\u5a92\\u4f53\\u67e5\\u8be2\\n\\n\\u6709\\u65f6, \\u4f7f\\u7528 CSS \\u662f\\u4e0d\\u591f\\u7684\\u3002 \\u60a8\\u53ef\\u80fd\\u5e0c\\u671b\\u57fa\\u4e8e JavaScript \\u4e2d\\u7684\\u65ad\\u70b9\\u503c\\u66f4\\u6539 React \\u6e32\\u67d3\\u6811\\u3002\\n\\n### useMediaQuery\\u94a9\\u5b50\\n\\n\\u60a8\\u53ef\\u4ee5\\u5728 [userMediaQuery](/components/use-media-query/) \\u9875\\u9762\\u4e0a\\u4e86\\u89e3\\u66f4\\u591a\\u4fe1\\u606f\\u3002\\n\\n### withWidth()\\n\\n> \\u26a0\\ufe0f This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\\n\\n```jsx\\nimport withWidth from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  return <div>{`Current width: ${props.width}`}</div>;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\n\\u5728\\u4e0b\\u9762\\u7684\\u6f14\\u793a\\u4e2d\\uff0c\\u6211\\u4eec\\u57fa\\u4e8e\\u5c4f\\u5e55\\u5bbd\\u5ea6\\u66f4\\u6539\\u4e86\\u6e32\\u67d3\\u7684DOM\\u5143\\u7d20 (*em* \\uff0c<u>u</u> \\uff0c~~del~~ & span)\\u3002\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/WithWidth.js\\\"}}\\n\\n## Custom breakpoints\\n\\nYou define your project's breakpoints in the `theme.breakpoints` section of your theme.\\n\\n- [`theme.breakpoints.values`](/customization/default-theme/?expand-path=$.breakpoints.values): Default to the [above values](#default-breakpoints). The keys are your screen names, and the values are the min-width where that breakpoint should start.\\n- `theme.breakpoints.unit`: Default to `px`. The unit used for the breakpoint's values.\\n- `theme.breakpoints.step`: Default to 5 (`0.05px`). The increment used to implement exclusive breakpoints.\\n\\nIf you change the default breakpoints's values, you need to provide them all:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      xs: 0,\\n      sm: 600,\\n      md: 960,\\n      lg: 1280,\\n      xl: 1920,\\n    },\\n  },\\n})\\n```\\n\\nFeel free to have as few or as many breakpoints as you want, naming them in whatever way you'd prefer for your project.\\n\\n```js\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      tablet: 640,\\n      laptop: 1024,\\n      desktop: 1280,\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\\"@material-ui/core/styles/createBreakpoints\\\" {\\n  interface BreakpointOverrides {\\n    xs: false; // removes the `xs` breakpoint\\n    sm: false;\\n    md: false;\\n    lg: false;\\n    xl: false;\\n    tablet: true; // adds the `tablet` breakpoint\\n    laptop: true;\\n    desktop: true;\\n  }\\n}\\n```\\n\\n## API\\n\\n### `theme.breakpoints.up(key) => media query`\\n\\n#### \\u53c2\\u6570\\n\\n1. `key` \\uff08*String* | *Number* \\uff09\\uff1a\\u65ad\\u70b9\\u952e\\uff08`xs` \\uff0c`sm`\\u7b49\\u7b49\\uff09\\u6216\\u4ee5\\u50cf\\u7d20\\u4e3a\\u5355\\u4f4d\\u7684\\u5c4f\\u5e55\\u5bbd\\u5ea6\\u6570\\u3002\\n\\n#### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than and including the screen size given by the breakpoint key.\\n\\n#### \\u4f8b\\u5b50\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, \\u221e)\\n    //       [960px, \\u221e)\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.down(key) => media query`\\n\\n#### \\u53c2\\u6570\\n\\n1. `key` \\uff08*String* | *Number* \\uff09\\uff1a\\u65ad\\u70b9\\u952e\\uff08`xs` \\uff0c`sm`\\u7b49\\u7b49\\uff09\\u6216\\u4ee5\\u50cf\\u7d20\\u4e3a\\u5355\\u4f4d\\u7684\\u5c4f\\u5e55\\u5bbd\\u5ea6\\u6570\\u3002\\n\\n#### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths less than and including the screen size given by the breakpoint key.\\n\\n#### \\u4f8b\\u5b50\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [0, md + 1)\\n    //       [0, lg)\\n    //       [0, 1280px)\\n    [theme.breakpoints.down('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.only(key) => media query`\\n\\n#### \\u53c2\\u6570\\n\\n1. `key` \\uff08*String*\\uff09\\uff1a\\u65ad\\u70b9\\u952e\\uff08`xs` \\uff0c`sm`\\u7b49\\uff09\\u3002\\n\\n#### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths including the screen size given by the breakpoint key.\\n\\n#### \\u4f8b\\u5b50\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, md + 1)\\n    //       [md, lg)\\n    //       [960px, 1280px)\\n    [theme.breakpoints.only('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.between(start, end) => media query`\\n\\n#### \\u53c2\\u6570\\n\\n1. `start` (*String*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n2. `end` (*String*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than the screen size given by the breakpoint key in the first argument and less than the the screen size given by the breakpoint key in the second argument.\\n\\n#### \\u4f8b\\u5b50\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [sm, md + 1)\\n    //       [sm, lg)\\n    //       [600px, 1280px[\\n    [theme.breakpoints.between('sm', 'md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `withWidth([options]) => higher-order component`\\n\\n\\u6ce8\\u5165`width`\\u5c5e\\u6027\\u3002 \\u5b83\\u4e0d\\u4f1a\\u4fee\\u6539\\u4f20\\u9012\\u7ed9\\u5b83\\u7684\\u7ec4\\u4ef6\\uff1b\\u76f8\\u53cd\\uff0c\\u5b83\\u8fd4\\u56de\\u4e00\\u4e2a\\u65b0\\u7ec4\\u4ef6\\u3002 \\u8fd9\\u4e2a`width`\\u65ad\\u70b9\\u5c5e\\u6027\\u4e0e\\u5f53\\u524d\\u5c4f\\u5e55\\u5bbd\\u5ea6\\u5339\\u914d\\u3002 \\u5b83\\u53ef\\u4ee5\\u662f\\u4ee5\\u4e0b\\u65ad\\u70b9\\u4e4b\\u4e00\\uff1a\\n\\n```ts\\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\\n```\\n\\n\\u4e00\\u4e9b\\u53ef\\u80fd\\u6709\\u8da3\\u7684\\u5b9e\\u73b0\\u7ec6\\u8282\\uff1a\\n\\n- \\u5b83\\u5c06\\u8f6c\\u53d1*\\u975e React \\u7684\\u9759\\u6001* \\u5c5e\\u6027\\uff0c\\u4ee5\\u4fbf HOC \\u66f4 \\\"\\u900f\\u660e\\\"\\u3002 \\u4f8b\\u5982\\uff0c\\u5b83\\u53ef\\u7528\\u4e8e\\u5b9a\\u4e49 ` getInitialProps()` \\u9759\\u6001\\u65b9\\u6cd5 (next.js)\\u3002\\n\\n#### \\u53c2\\u6570\\n\\n1. `options` (*Object* [optional]): \\n  - ` options.withTheme ` (*Boolean* [optional]): \\u9ed8\\u8ba4\\u503c\\u4e3a `false`\\u3002 \\u5c06 ` theme ` \\u5bf9\\u8c61\\u4f5c\\u4e3a\\u5c5e\\u6027\\u63d0\\u4f9b\\u7ed9\\u7ec4\\u4ef6\\u3002\\n  - `options.noSSR` (*Boolean* [\\u53ef\\u9009\\u7684]): \\u9ed8\\u8ba4\\u503c\\u4e3a`false`\\u3002 \\u4e3a\\u4e86\\u6267\\u884c\\u670d\\u52a1\\u5668\\u7aef\\u5448\\u73b0\\u534f\\u8c03\\uff0c\\u5b83\\u9700\\u8981\\u5448\\u73b0\\u4e24\\u6b21\\u3002 \\u7b2c\\u4e00\\u6b21\\u6ca1\\u6709\\u4efb\\u4f55\\u4e1c\\u897f\\uff0c\\u7b2c\\u4e8c\\u6b21\\u4e0e\\u5b69\\u5b50\\u4eec\\u5728\\u4e00\\u8d77\\u3002 \\u8fd9\\u79cd\\u53cc\\u904d\\u6e32\\u67d3\\u5468\\u671f\\u6709\\u4e00\\u4e2a\\u7f3a\\u70b9\\u3002 UI\\u663e\\u793a\\u7684\\u65f6\\u5019\\u53ef\\u80fd\\u4f1a\\u53d1\\u751f\\u95ea\\u70c1\\uff0c\\u5982\\u679c\\u4f60\\u4e0d\\u6253\\u7b97\\u4f7f\\u7528SSR\\u670d\\u52a1\\u5668\\u7aef\\u6e32\\u67d3 \\u4f60\\u53ef\\u4ee5\\u5c06\\u5176\\u8bbe\\u7f6e\\u4e3a`true`\\u6765\\u907f\\u514d\\u8fd9\\u79cd\\u60c5\\u51b5\\u53d1\\u751f\\n  - `options.initialWidth` \\uff08*Breakpoint* [\\u53ef\\u9009\\u7684]\\uff09\\uff1a \\u4e3a`window.innerWidth`\\u5728\\u670d\\u52a1\\u5668\\u4e0a\\u4e0d\\u53ef\\u7528\\uff0c \\u6211\\u4eec\\u9ed8\\u8ba4\\u5728\\u7b2c\\u4e00\\u6b21\\u5b89\\u88c5\\u671f\\u95f4\\u5448\\u73b0\\u7a7a\\u7ec4\\u4ef6\\u3002 You might want to use an heuristic to approximate the screen width of the client browser screen width. For instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint, we also can set the initial width globally using [`custom properties`](/customization/globals/#default-props) on the theme. In order to set the initialWidth we need to pass a custom property with this shape:\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // withWidth component \\u269b\\ufe0f\\n    MuiWithWidth: {\\n      // Initial width property\\n      initialWidth: 'lg', // \\u65ad\\u70b9\\u5168\\u5c40\\u8bbe\\u7f6e \\ud83c\\udf0e!\\n    },\\n  },\\n});\\n```\\n\\n- `options.resizeInterval` (*Number* [optional]): \\u9ed8\\u8ba4\\u4e3a166\\uff0c\\u5bf9\\u5e94\\u4e8e60 Hz\\u768410\\u5e27\\u3002 Number of milliseconds to wait before responding to a screen resize event.\\n\\n#### \\u8fd4\\u56de\\u7ed3\\u679c\\n\\n`higher-order component`\\uff1a\\u5e94\\u7528\\u4e8e\\u5305\\u88c5\\u7ec4\\u4ef6\\u3002\\n\\n#### \\u4f8b\\u5b50\\n\\n```jsx\\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  if (isWidthUp('sm', props.width)) {\\n    return <span />\\n  }\\n\\n  return <div />;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\n## \\u9ed8\\u8ba4\\u503c\\n\\nYou can explore the default values of the breakpoints using [the theme explorer](/customization/default-theme/?expand-path=$.breakpoints) or by opening the dev tools console on this page (`window.theme.breakpoints`).\"},mrX7:function(e,n){e.exports=\"# Pontos de quebra\\n\\n<p class=\\\"description\\\">API que permite o uso de pontos de quebra em uma ampla variedade de contextos.</p>\\n\\nPara uma experi\\xeancia de usu\\xe1rio ideal, as interfaces do material design precisam adaptar seu leiaute em v\\xe1rios pontos de quebra. Material-UI usa uma implementa\\xe7\\xe3o **simplificada** da [especifica\\xe7\\xe3o](https://material.io/design/layout/responsive-layout-grid.html#breakpoints) original.\\n\\nOs pontos de quebra s\\xe3o usados internamente em v\\xe1rios componentes para torn\\xe1-los responsivos, mas voc\\xea tamb\\xe9m pode tirar proveito deles para controlar o leiaute da sua aplica\\xe7\\xe3o atrav\\xe9s do componente [Grade](/components/grid/) e [Hidden](/components/hidden/).\\n\\n## Pontos de quebra padr\\xe3o\\n\\nCada ponto de quebra (uma chave) corresponde a uma largura de tela *fixa* (um valor):\\n\\n- **xs,** extra-pequeno: 0px\\n- **sm,** pequeno: 600px\\n- **md,** m\\xe9dio: 960px\\n- **lg,** grande: 1280px\\n- **xl,** extra-grande: 1920px\\n\\nEsses valores de ponto de quebra s\\xe3o usados para determinar intervalos de pontos de quebra. Um intervalo inicia a partir do valor do ponto de quebra, incluindo seu valor inicial, at\\xe9 o pr\\xf3ximo valor de ponto de quebra menos um:\\n\\n```js\\nvalue         |0px     600px    960px    1280px   1920px\\nkey           |xs      sm       md       lg       xl\\nscreen width  |--------|--------|--------|--------|--------\\x3e\\nrange         |   xs   |   sm   |   md   |   lg   |   xl\\n```\\n\\nEsses valores podem ser [customizados](#custom-breakpoints).\\n\\n## Consultas de M\\xeddia CSS\\n\\nConsultas de m\\xeddia CSS s\\xe3o a abordagem idiom\\xe1tica para tornar sua interface de usu\\xe1rio responsiva. O tema fornece quatro formas que auxiliam a fazer isso:\\n\\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\\n\\nNa demonstra\\xe7\\xe3o a seguir, alteramos a cor do plano de fundo (vermelho, azul & verde) com base na largura da tela.\\n\\n```jsx\\nconst styles = theme => ({\\n  root: {\\n    padding: theme.spacing(1),\\n    [theme.breakpoints.down('sm')]: {\\n      backgroundColor: theme.palette.secondary.main,\\n    },\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: theme.palette.primary.main,\\n    },\\n    [theme.breakpoints.up('lg')]: {\\n      backgroundColor: green[500],\\n    },\\n  },\\n});\\n```\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/MediaQuery.js\\\"}}\\n\\n## Consultas de m\\xeddia JavaScript\\n\\n\\xc0s vezes, usar CSS n\\xe3o \\xe9 suficiente. Voc\\xea pode querer alterar a \\xe1rvore de renderiza\\xe7\\xe3o React com base no valor do ponto de quebra, em JavaScript.\\n\\n### useMediaQuery hook\\n\\nVoc\\xea pode aprender mais na p\\xe1gina [useMediaQuery](/components/use-media-query/).\\n\\n### withWidth()\\n\\n> \\u26a0\\ufe0f Esse componente de ordem superior ser\\xe1 descontinuado para o hook [useMediaQuery](/components/use-media-query/).\\n\\n```jsx\\nimport withWidth from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  return <div>{`Current width: ${props.width}`}</div>;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\nNa demonstra\\xe7\\xe3o a seguir, alteramos o elemento DOM renderizado (*em*, <u>u</u>, ~~del~~ & span) com base na largura da tela.\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/WithWidth.js\\\"}}\\n\\n## Pontos de quebra customizados\\n\\nVoc\\xea define os pontos de quebra do seu projeto na se\\xe7\\xe3o `theme.breakpoints` do seu tema.\\n\\n- [`theme.breakpoints.values`](/customization/default-theme/?expand-path=$.breakpoints.values): Padr\\xe3o s\\xe3o [os valores acima](#default-breakpoints). As chaves s\\xe3o seus nomes de tela e os valores s\\xe3o a largura m\\xednima onde esse ponto de quebra deve iniciar.\\n- `theme.breakpoints.unit`: Padr\\xe3o \\xe9 `px`. A unidade usada para os valores do ponto de quebra.\\n- `theme.breakpoints.step`: Padr\\xe3o \\xe9 5 (`0.05px`). O incremento usado para implementar os pontos de quebra exclusivos.\\n\\nSe voc\\xea alterar os valores dos pontos de quebra padr\\xe3o, voc\\xea precisar\\xe1 fornecer novos conforme descreveremos:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      xs: 0,\\n      sm: 600,\\n      md: 960,\\n      lg: 1280,\\n      xl: 1920,\\n    },\\n  },\\n})\\n```\\n\\nSinta-se \\xe0 vontade para ter quantos pontos de quebra voc\\xea quiser, nomeando-os da maneira que preferir para o seu projeto.\\n\\n```js\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      tablet: 640,\\n      laptop: 1024,\\n      desktop: 1280,\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\\"@material-ui/core/styles/createBreakpoints\\\" {\\n  interface BreakpointOverrides {\\n    xs: false; // removes the `xs` breakpoint\\n    sm: false;\\n    md: false;\\n    lg: false;\\n    xl: false;\\n    tablet: true; // adds the `tablet` breakpoint\\n    laptop: true;\\n    desktop: true;\\n  }\\n}\\n```\\n\\n## API\\n\\n### `theme.breakpoints.up(key) => media query`\\n\\n#### Argumentos\\n\\n1. `key` (*String* | *Number*): Uma chave de ponto de quebra (`xs`, `sm`, etc.) ou um n\\xfamero de largura de tela em pixels.\\n\\n#### Retornos\\n\\n`media query`: Uma string de consulta de m\\xeddia pronta para ser usada com a maioria das solu\\xe7\\xf5es de estilo, na qual corresponde \\xe0 largura da tela maior que, e incluindo o tamanho de tela fornecido pela chave do ponto de quebra.\\n\\n#### Exemplos\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, \\u221e)\\n    //       [960px, \\u221e)\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.down(key) => media query`\\n\\n#### Argumentos\\n\\n1. `key` (*String* | *Number*): Uma chave de ponto de quebra (`xs`, `sm`, etc.) ou um n\\xfamero de largura de tela em pixels.\\n\\n#### Retornos\\n\\n`media query`: Uma string de consulta de m\\xeddia pronta para ser usada com a maioria das solu\\xe7\\xf5es de estilo, na qual corresponde \\xe0 largura da tela menor que, e incluindo o tamanho de tela fornecido pela chave do ponto de quebra.\\n\\n#### Exemplos\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [0, md + 1)\\n    //       [0, lg)\\n    //       [0, 1280px)\\n    [theme.breakpoints.down('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.only(key) => media query`\\n\\n#### Argumentos\\n\\n1. `key` (*String*): Uma chave de ponto de quebra (`xs`, `sm`, etc.).\\n\\n#### Retornos\\n\\n`media query`: Uma string de consulta de m\\xeddia pronta para ser usada com a maioria das solu\\xe7\\xf5es de estilo, na qual corresponde \\xe0 largura da tela incluindo o tamanho de tela fornecido pela chave do ponto de quebra.\\n\\n#### Exemplos\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, md + 1)\\n    //       [md, lg)\\n    //       [960px, 1280px)\\n    [theme.breakpoints.only('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.between(start, end) => media query`\\n\\n#### Argumentos\\n\\n1. `start` (*String*): Uma chave de ponto de quebra (`xs`, `sm`, etc.) ou um n\\xfamero de largura de tela em pixels.\\n2. `end` (*String*): Uma chave de ponto de quebra (`xs`, `sm`, etc.) ou um n\\xfamero de largura de tela em pixels.\\n\\n#### Retornos\\n\\n`media query`: Uma string de consulta de m\\xeddia pronta para ser usada com a maioria das solu\\xe7\\xf5es de estilo, na qual corresponde a larguras de telas maiores que o tamanho da tela fornecido na chave de ponto de quebra no primeiro argumento e menor que o tamanho de tela fornecido pela chave de ponto de quebra no segundo argumento.\\n\\n#### Exemplos\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [sm, md + 1)\\n    //       [sm, lg)\\n    //       [600px, 1280px[\\n    [theme.breakpoints.between('sm', 'md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `withWidth([options]) => higher-order component`\\n\\nInjeta uma propriedade `width`. N\\xe3o modifica o componente passado para ele; em vez disso, ele retorna um novo componente. Esta propriedade de ponto de quebra, `width`, corresponde \\xe0 largura de tela atual. Pode ser um dos seguintes pontos de quebra:\\n\\n```ts\\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\\n```\\n\\nAlguns detalhes de implementa\\xe7\\xe3o que podem ser interessantes para estar ciente:\\n\\n- Ele encaminha as propriedades *non React static* para que este HOC seja mais \\\"transparente\\\". Por exemplo, pode ser usado para definir um m\\xe9todo est\\xe1tico (next.js) `getInitialProps()`.\\n\\n#### Argumentos\\n\\n1. `options` (*Object* [opcional]): \\n  - `options.withTheme` (*Boolean* [opcional]): Padr\\xe3o `false`. Fornecer o objeto `theme` para o componente como uma propriedade.\\n  - `options.noSSR` (*Boolean* [opcional]): Padr\\xe3o `false`. Para realizar a reconcilia\\xe7\\xe3o de renderiza\\xe7\\xe3o do lado do servidor, ele precisa renderizar duas vezes. Uma primeira vez sem nada e uma segunda vez com os filhos. Este ciclo de renderiza\\xe7\\xe3o de dupla passagem tem uma desvantagem. A interface do usu\\xe1rio pode piscar. Voc\\xea pode definir esse sinalizador para `true` se voc\\xea n\\xe3o estiver fazendo a renderiza\\xe7\\xe3o do lado do servidor.\\n  - `options.initialWidth` (*Breakpoint* [opcional]): Como `window.innerWidth` n\\xe3o esta dispon\\xedvel no servidor, retornamos uma correspond\\xeancia padr\\xe3o durante a primeira montagem. Voc\\xea pode querer usar uma heur\\xedstica para aproximar a largura da tela no navegador do cliente. Por exemplo, voc\\xea poderia estar usando o user-agent ou o client-hint. https://caniuse.com/#search=client%20hint, tamb\\xe9m podemos definir a largura inicial globalmente usando [`propriedades customizadas`](/customization/globals/#default-props) no tema. Para definir o initialWidth, precisamos passar uma propriedade customizada com esta forma:\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // Componente withWidth \\u269b\\ufe0f\\n    MuiWithWidth: {\\n      // Propriedade de largura inicial\\n      initialWidth: 'lg', // Ponto de quebra globalmente definido \\ud83c\\udf0e!\\n    },\\n  },\\n});\\n```\\n\\n- `options.resizeInterval` (*Number* [opcional]): Padr\\xe3o \\xe9 166, que corresponde a 10 quadros a 60 Hz. N\\xfamero de milissegundos a aguardar antes de responder a um evento de redimensionamento de tela.\\n\\n#### Retornos\\n\\n`higher-order component`: Deve ser usado para encapsular o componente.\\n\\n#### Exemplos\\n\\n```jsx\\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  if (isWidthUp('sm', props.width)) {\\n    return <span />\\n  }\\n\\n  return <div />;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\n## Valores padr\\xe3o\\n\\nVoc\\xea pode explorar os valores padr\\xe3o dos pontos de quebra usando [o explorador de tema](/customization/default-theme/?expand-path=$.breakpoints) ou abrindo o console das ferramentas de desenvolvimento nesta p\\xe1gina (`window.theme.breakpoints`).\"},n7UM:function(e,n,t){\"use strict\";t.r(n);var o=t(\"mXGw\"),r=t.n(o),i=t(\"6xHO\"),a=t(\"Oy88\"),s=r.a.createElement,d={sm:\"em\",md:\"u\",lg:\"del\"};n.default=Object(i.a)()((function(e){var n=e.width,t=d[n]||\"span\";return s(a.a,null,s(t,null,\"Current width: \".concat(n)))}))},oCtj:function(e,n){e.exports=\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport withWidth from '@material-ui/core/withWidth';\\nimport Typography from '@material-ui/core/Typography';\\n\\nconst components = {\\n  sm: 'em',\\n  md: 'u',\\n  lg: 'del',\\n};\\n\\nfunction WithWidth(props) {\\n  const { width } = props;\\n  const Component = components[width] || 'span';\\n\\n  return (\\n    <Typography>\\n      <Component>{`Current width: ${width}`}</Component>\\n    </Typography>\\n  );\\n}\\n\\nWithWidth.propTypes = {\\n  width: PropTypes.oneOf(['lg', 'md', 'sm', 'xl', 'xs']).isRequired,\\n};\\n\\nexport default withWidth()(WithWidth);\\n\"},skNi:function(e,n){e.exports=\"# Haltepunkte\\n\\n<p class=\\\"description\\\">API, die die Verwendung von Rasterpunkten in einer Vielzahl von Kontexten erm\\xf6glicht.</p>\\n\\nF\\xfcr eine optimale Benutzererfahrung m\\xfcssen Materialdesign-Schnittstellen in der Lage sein, ihr Layout an verschiedenen Haltepunkten anzupassen. Material-UI verwendet eine **vereinfachte** Implementierung der urspr\\xfcnglichen [Spezifikation](https://material.io/design/layout/responsive-layout-grid.html#breakpoints).\\n\\nDie Haltepunkte werden intern in verschiedenen Komponenten verwendet, um sie ansprechbar zu machen, Sie k\\xf6nnen sie jedoch auch benutzten, um das Layout Ihrer Anwendung \\xfcber das [Grid](/components/grid/) zu steuern und f\\xfcr [Hidden](/components/hidden/) Komponenten.\\n\\n## Default breakpoints\\n\\nJeder Haltepunkt (ein Schl\\xfcssel) stimmt mit einer *festen* Bildschirmbreite (ein Wert) \\xfcberein:\\n\\n- ** xs, ** extraklein: 0px\\n- ** sm, ** klein: 600px\\n- ** md, ** mittel: 960px\\n- ** lg, ** gro\\xdf: 1280px\\n- ** xl ** extra gro\\xdf: 1920px\\n\\nThese breakpoint values are used to determine breakpoint ranges. Ein Bereich beginnt mit dem Haltepunktwert einschlie\\xdflich bis zum n\\xe4chsten Haltepunktwert:\\n\\n```js\\nWert          |0px     600px    960px    1280px   1920px\\nSchl\\xfcssel     |xs      sm       md       lg       xl\\nBreite        |--------|--------|--------|--------|--------\\x3e\\nBereich       |   xs   |   sm   |   md   |   lg   |   xl\\n```\\n\\nThese values can be [customized](#custom-breakpoints).\\n\\n## CSS-Medienabfragen\\n\\nCSS media queries are the idiomatic approach to make your UI responsive. The theme provides four styles helpers to do so:\\n\\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\\n\\nIn der folgenden Demo \\xe4ndern wir die Hintergrundfarbe (rot, blau & gr\\xfcn) basierend auf der Bildschirmbreite.\\n\\n```jsx\\nconst styles = theme => ({\\n  root: {\\n    padding: theme.spacing(1),\\n    [theme.breakpoints.down('sm')]: {\\n      backgroundColor: theme.palette.secondary.main,\\n    },\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: theme.palette.primary.main,\\n    },\\n    [theme.breakpoints.up('lg')]: {\\n      backgroundColor: green[500],\\n    },\\n  },\\n});\\n```\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/MediaQuery.js\\\"}}\\n\\n## JavaScript-Medienabfragen\\n\\nManchmal reicht die Verwendung von CSS nicht aus. M\\xf6glicherweise m\\xf6chten Sie die React-Rendering-Struktur basierend auf dem Haltepunktwert in JavaScript \\xe4ndern.\\n\\n### useMediaQuery hook\\n\\nWeitere Informationen finden Sie auf der [ useMediaQuery](/components/use-media-query/) Seite.\\n\\n### withWidth()\\n\\n> \\u26a0\\ufe0f This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\\n\\n```jsx\\nimport withWidth from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  return <div>{`Current width: ${props.width}`}</div>;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\nIn der folgenden Demo \\xe4ndern wir das gerenderte DOM-Element (* em*, <u> u</u>, ~~ del ~~ & span) basierend auf der Bildschirmbreite.\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/WithWidth.js\\\"}}\\n\\n## Custom breakpoints\\n\\nYou define your project's breakpoints in the `theme.breakpoints` section of your theme.\\n\\n- [`theme.breakpoints.values`](/customization/default-theme/?expand-path=$.breakpoints.values): Default to the [above values](#default-breakpoints). The keys are your screen names, and the values are the min-width where that breakpoint should start.\\n- `theme.breakpoints.unit`: Default to `px`. The unit used for the breakpoint's values.\\n- `theme.breakpoints.step`: Default to 5 (`0.05px`). The increment used to implement exclusive breakpoints.\\n\\nIf you change the default breakpoints's values, you need to provide them all:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      xs: 0,\\n      sm: 600,\\n      md: 960,\\n      lg: 1280,\\n      xl: 1920,\\n    },\\n  },\\n})\\n```\\n\\nFeel free to have as few or as many breakpoints as you want, naming them in whatever way you'd prefer for your project.\\n\\n```js\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      tablet: 640,\\n      laptop: 1024,\\n      desktop: 1280,\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\\"@material-ui/core/styles/createBreakpoints\\\" {\\n  interface BreakpointOverrides {\\n    xs: false; // removes the `xs` breakpoint\\n    sm: false;\\n    md: false;\\n    lg: false;\\n    xl: false;\\n    tablet: true; // adds the `tablet` breakpoint\\n    laptop: true;\\n    desktop: true;\\n  }\\n}\\n```\\n\\n## API\\n\\n### `theme.breakpoints.up(key) => media query`\\n\\n#### Argumente\\n\\n1. `key` (*String* | *Number*): Ein Haltepunkteschl\\xfcssel (`xs`, `sm`, etc.) oder eine Bildschirmbreite in pixel.\\n\\n#### R\\xfcckgabewerte\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than and including the screen size given by the breakpoint key.\\n\\n#### Beispiele\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, \\u221e)\\n    //       [960px, \\u221e)\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.down(key) => media query`\\n\\n#### Argumente\\n\\n1. `key` (*String* | *Number*): Ein Haltepunkteschl\\xfcssel (`xs`, `sm`, etc.) oder eine Bildschirmbreite in pixel.\\n\\n#### R\\xfcckgabewerte\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths less than and including the screen size given by the breakpoint key.\\n\\n#### Beispiele\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [0, md + 1)\\n    //       [0, lg)\\n    //       [0, 1280px)\\n    [theme.breakpoints.down('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.only(key) => media query`\\n\\n#### Argumente\\n\\n1. `key` (*String*): Ein Haltepunkteschl\\xfcssel (`xs`, `sm`, etc.).\\n\\n#### R\\xfcckgabewerte\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths including the screen size given by the breakpoint key.\\n\\n#### Beispiele\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, md + 1)\\n    //       [md, lg)\\n    //       [960px, 1280px)\\n    [theme.breakpoints.only('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.between(start, end) => media query`\\n\\n#### Argumente\\n\\n1. `start` (*String*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n2. `end` (*String*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### R\\xfcckgabewerte\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than the screen size given by the breakpoint key in the first argument and less than the the screen size given by the breakpoint key in the second argument.\\n\\n#### Beispiele\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [sm, md + 1)\\n    //       [sm, lg)\\n    //       [600px, 1280px[\\n    [theme.breakpoints.between('sm', 'md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `withWidth([options]) => higher-order component`\\n\\nInjizieren Sie eine `width` Eigenschaft. Die an sie \\xfcbergebene Komponente wird nicht ge\\xe4ndert. Stattdessen wird eine neue Komponente zur\\xfcckgegeben. Diese `width` Haltepunkt-Eigenschaft entspricht der aktuellen Bildschirmbreite. Es kann einer der folgenden Haltepunkte sein:\\n\\n```ts\\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\\n```\\n\\nEinige Implementierungsdetails, die interessant sein k\\xf6nnten:\\n\\n- Es leitet *nicht React statisch* Eigenschaften weiter, so dass dieser HOC \\\"transparenter\\\" ist. Es kann zum Beispiel verwendet werden, um eine `getInitialProps()` als statische Methode zu definieren (next.js).\\n\\n#### Argumente\\n\\n1. `options` (*Object* [optional]): \\n  - `options.withTheme ` (*Boolean* [optional]): Standardeinstellung ist `false`. \\xdcbergeben Sie das `Theme` Objekt als Eigenschaft an die Komponente.\\n  - `options.noSSR ` (*Boolean* [optional]): Standardeinstellung ist `false`. Um den serverseitigen Renderingabgleich durchzuf\\xfchren, muss er zweimal gerendert werden. Ein erstes Mal mit nichts und ein zweites Mal mit den Kind-Elementen. Dieser Zyklus mit zwei Durchg\\xe4ngen ist mit einem Nachteil verbunden. Die Benutzeroberfl\\xe4che blinkt m\\xf6glicherweise. Sie k\\xf6nnen dieses Flag auf ` true` setzen, wenn Sie kein serverseitiges Rendering durchf\\xfchren.\\n  - ` options.initialWidth ` (*Breakpoint* [optional]): Da ` window.innerWidth ` auf dem Server nicht verf\\xfcgbar ist, wird eine leere Komponente w\\xe4hrend der ersten Mounts standardm\\xe4\\xdfig gerendert. Vielleicht m\\xf6gen Sie eine Heuristik verwenden, um ann\\xe4hernd die Bildschirmbreite des Client-Browsers zu bestimmen. Sie k\\xf6nnten beispielsweise den Benutzeragenten oder die Client-Hinweise verwenden. Mit https://caniuse.com/#search=client%20hint, k\\xf6nnen wir die anf\\xe4ngliche Breite global festlegen, indem Sie die [`benutzerdefinierten Eigenschaften`](/customization/globals/#default-props) zum Theme verwenden. Um die Anfangsbreite festzulegen, m\\xfcssen wir eine benutzerdefinierte Eigenschaft mit dieser Form \\xfcbergeben:\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // withWidth Komponente \\u269b\\ufe0f\\n    MuiWithWidth: {\\n      // Initiale Breite\\n      initialWidth: 'lg', // Haltepunkte ist global gesetzt \\ud83c\\udf0e!\\n    },\\n  },\\n});\\n```\\n\\n- `options.resizeInterval` (*Number* [optional]): Der Standardwert ist 166, entspricht 10 Bildern bei 60 Hz. Anzahl der Millisekunden, die gewartet werden muss, bevor auf ein Ereignis zur Gr\\xf6\\xdfen\\xe4nderung des Bildschirms reagiert wird.\\n\\n#### R\\xfcckgabewerte\\n\\n`Komponente h\\xf6herer Ordnung`: Sollte zum Umwickeln einer Komponente verwendet werden.\\n\\n#### Beispiele\\n\\n```jsx\\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  if (isWidthUp('sm', props.width)) {\\n    return <span />\\n  }\\n\\n  return <div />;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\n## Default values\\n\\nYou can explore the default values of the breakpoints using [the theme explorer](/customization/default-theme/?expand-path=$.breakpoints) or by opening the dev tools console on this page (`window.theme.breakpoints`).\"},v02d:function(e,n){e.exports=\"# \\u041a\\u043e\\u043d\\u0442\\u0440\\u043e\\u043b\\u044c\\u043d\\u044b\\u0435 \\u0442\\u043e\\u0447\\u043a\\u0438\\n\\n<p class=\\\"description\\\">API, \\u043f\\u043e\\u0437\\u0432\\u043e\\u043b\\u044f\\u044e\\u0449\\u0435\\u0435 \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u044c \\u043a\\u043e\\u043d\\u0442\\u0440\\u043e\\u043b\\u044c\\u043d\\u044b\\u0435 \\u0442\\u043e\\u0447\\u043a\\u0438 \\u0432\\u043e \\u043c\\u043d\\u043e\\u0436\\u0435\\u0441\\u0442\\u0432\\u0435 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043a\\u0441\\u0442\\u043e\\u0432.</p>\\n\\n\\u0414\\u043b\\u044f \\u043e\\u043f\\u0442\\u0438\\u043c\\u0430\\u043b\\u044c\\u043d\\u043e\\u0433\\u043e \\u0432\\u0437\\u0430\\u0438\\u043c\\u043e\\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044f \\u0441 \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u0435\\u043c material \\u0438\\u043d\\u0442\\u0435\\u0440\\u0444\\u0435\\u0439\\u0441\\u044b \\u0434\\u043e\\u043b\\u0436\\u043d\\u044b \\u0431\\u044b\\u0442\\u044c \\u0432 \\u0441\\u043e\\u0441\\u0442\\u043e\\u044f\\u043d\\u0438\\u0438 \\u0430\\u0434\\u0430\\u043f\\u0442\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c \\u0441\\u0432\\u043e\\u0435 \\u0440\\u0430\\u0441\\u043f\\u043e\\u043b\\u043e\\u0436\\u0435\\u043d\\u0438\\u0435 \\u0432 \\u0440\\u0430\\u0437\\u043b\\u0438\\u0447\\u043d\\u044b\\u0445 \\u0442\\u043e\\u0447\\u043a\\u0430\\u0445 \\u043e\\u0441\\u0442\\u0430\\u043d\\u043e\\u0432\\u0430. Material-UI \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u0443\\u0435\\u0442 **\\u0443\\u043f\\u0440\\u043e\\u0449\\u0435\\u043d\\u043d\\u0443\\u044e** \\u0440\\u0435\\u0430\\u043b\\u0438\\u0437\\u0430\\u0446\\u0438\\u044e \\u043e\\u0440\\u0438\\u0433\\u0438\\u043d\\u0430\\u043b\\u044c\\u043d\\u043e\\u0439 [\\u0441\\u043f\\u0435\\u0446\\u0438\\u0444\\u0438\\u043a\\u0430\\u0446\\u0438\\u0438](https://material.io/design/layout/responsive-layout-grid.html#breakpoints).\\n\\nThe breakpoints are used internally in various components to make them responsive, but you can also take advantage of them for controlling the layout of your application through the [Grid](/components/grid/) and [Hidden](/components/hidden/) components.\\n\\n## Default breakpoints\\n\\n\\u041a\\u0430\\u0436\\u0434\\u0430\\u044f \\u043a\\u043e\\u043d\\u0442\\u0440\\u043e\\u043b\\u044c\\u043d\\u0430\\u044f \\u0442\\u043e\\u0447\\u043a\\u0430 (\\u043a\\u043b\\u044e\\u0447) \\u0441\\u043e\\u043e\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442 *\\u0444\\u0438\\u043a\\u0441\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d\\u043d\\u043e\\u0439* \\u0448\\u0438\\u0440\\u0438\\u043d\\u0435 \\u044d\\u043a\\u0440\\u0430\\u043d\\u0430 (\\u0437\\u043d\\u0430\\u0447\\u0435\\u043d\\u0438\\u044e):\\n\\n- **xs,** extra-small: 0px\\n- **sm,** small: 600px\\n- **md,** medium: 960px\\n- **lg,** large: 1280px\\n- **xl,** extra-large: 1920px\\n\\nThese breakpoint values are used to determine breakpoint ranges. \\u0414\\u0438\\u0430\\u043f\\u0430\\u0437\\u043e\\u043d \\u043d\\u0430\\u0447\\u0438\\u043d\\u0430\\u0435\\u0442\\u0441\\u044f \\u0441 \\u0437\\u043d\\u0430\\u0447\\u0435\\u043d\\u0438\\u044f \\u043f\\u0435\\u0440\\u0432\\u043e\\u0439 \\u0442\\u043e\\u0447\\u043a\\u0438 (\\u0432\\u043a\\u043b\\u044e\\u0447\\u0438\\u0442\\u0435\\u043b\\u044c\\u043d\\u043e) \\u0434\\u043e \\u0441\\u043b\\u0435\\u0434\\u0443\\u044e\\u0449\\u0435\\u0439, \\u043d\\u043e \\u043d\\u0435 \\u0432\\u043a\\u043b\\u044e\\u0447\\u0430\\u044f \\u0435\\u0451:\\n\\n```js\\n\\u0437\\u043d\\u0430\\u0447\\u0435\\u043d\\u0438\\u0435             |0px     600px    960px    1280px   1920px\\n\\u043a\\u043b\\u044e\\u0447                     |xs      sm       md       lg       xl\\n\\u0448\\u0438\\u0440\\u0438\\u043d\\u0430 \\u044d\\u043a\\u0440\\u0430\\u043d\\u0430  |----------|--------------|--------------------\\x3e\\n\\u0434\\u0438\\u0430\\u043f\\u0430\\u0437\\u043e\\u043d             |   xs   |   m   |   md |   lg   |   xl\\n```\\n\\nThese values can be [customized](#custom-breakpoints).\\n\\n## CSS Media Queries\\n\\nCSS media queries are the idiomatic approach to make your UI responsive. The theme provides four styles helpers to do so:\\n\\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\\n\\n\\u0412 \\u0441\\u043b\\u0435\\u0434\\u0443\\u044e\\u0449\\u0435\\u043c \\u043f\\u0440\\u0438\\u043c\\u0435\\u0440\\u0435 \\u043c\\u044b \\u0438\\u0437\\u043c\\u0435\\u043d\\u044f\\u0435\\u043c \\u0444\\u043e\\u043d\\u043e\\u0432\\u043e\\u0439 \\u0446\\u0432\\u0435\\u0442 (\\u043a\\u0440\\u0430\\u0441\\u043d\\u044b\\u0439, \\u0441\\u0438\\u043d\\u0438\\u0439 \\u0438\\u043b\\u0438 \\u0437\\u0435\\u043b\\u0435\\u043d\\u044b\\u0439) \\u0432 \\u0437\\u0430\\u0432\\u0438\\u0441\\u0438\\u043c\\u043e\\u0441\\u0442\\u0438 \\u043e\\u0442 \\u0448\\u0438\\u0440\\u0438\\u043d\\u044b \\u044d\\u043a\\u0440\\u0430\\u043d\\u0430.\\n\\n```jsx\\nconst styles = theme => ({\\n  root: {\\n    padding: theme.spacing(1),\\n    [theme.breakpoints.down('sm')]: {\\n      backgroundColor: theme.palette.secondary.main,\\n    },\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: theme.palette.primary.main,\\n    },\\n    [theme.breakpoints.up('lg')]: {\\n      backgroundColor: green[500],\\n    },\\n  },\\n});\\n```\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/MediaQuery.js\\\"}}\\n\\n## JavaScript Media Queries\\n\\n\\u0418\\u043d\\u043e\\u0433\\u0434\\u0430 \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f CSS \\u043d\\u0435\\u0434\\u043e\\u0441\\u0442\\u0430\\u0442\\u043e\\u0447\\u043d\\u043e. \\u0412\\u043e \\u043c\\u043e\\u0436\\u0435\\u0442\\u0435 \\u0438\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c \\u0434\\u0435\\u0440\\u0435\\u0432\\u043e \\u0432\\u0438\\u0437\\u0443\\u0430\\u043b\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438 React'\\u0430 \\u043e\\u0441\\u043d\\u043e\\u0432\\u044b\\u0432\\u0430\\u044f\\u0441\\u044c \\u043d\\u0430 \\u043a\\u043e\\u043d\\u0442\\u0440\\u043e\\u043b\\u044c\\u043d\\u044b\\u0445 \\u0442\\u043e\\u0447\\u043a\\u0430\\u0445.\\n\\n### useMediaQuery hook\\n\\nYou can learn more on the [useMediaQuery](/components/use-media-query/) page.\\n\\n### withWidth()\\n\\n> \\u26a0\\ufe0f This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\\n\\n```jsx\\nimport withWidth from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  return <div>{`Current width: ${props.width}`}</div>;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\nIn the following demo, we change the rendered DOM element (*em*, <u>u</u>, ~~del~~ & span) based on the screen width.\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/WithWidth.js\\\"}}\\n\\n## Custom breakpoints\\n\\nYou define your project's breakpoints in the `theme.breakpoints` section of your theme.\\n\\n- [`theme.breakpoints.values`](/customization/default-theme/?expand-path=$.breakpoints.values): Default to the [above values](#default-breakpoints). The keys are your screen names, and the values are the min-width where that breakpoint should start.\\n- `theme.breakpoints.unit`: Default to `px`. The unit used for the breakpoint's values.\\n- `theme.breakpoints.step`: Default to 5 (`0.05px`). The increment used to implement exclusive breakpoints.\\n\\nIf you change the default breakpoints's values, you need to provide them all:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      xs: 0,\\n      sm: 600,\\n      md: 960,\\n      lg: 1280,\\n      xl: 1920,\\n    },\\n  },\\n})\\n```\\n\\nFeel free to have as few or as many breakpoints as you want, naming them in whatever way you'd prefer for your project.\\n\\n```js\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      tablet: 640,\\n      laptop: 1024,\\n      desktop: 1280,\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\\"@material-ui/core/styles/createBreakpoints\\\" {\\n  interface BreakpointOverrides {\\n    xs: false; // removes the `xs` breakpoint\\n    sm: false;\\n    md: false;\\n    lg: false;\\n    xl: false;\\n    tablet: true; // adds the `tablet` breakpoint\\n    laptop: true;\\n    desktop: true;\\n  }\\n}\\n```\\n\\n## API\\n\\n### `theme.breakpoints.up(key) => media query`\\n\\n#### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than and including the screen size given by the breakpoint key.\\n\\n#### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, \\u221e)\\n    //       [960px, \\u221e)\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.down(key) => media query`\\n\\n#### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths less than and including the screen size given by the breakpoint key.\\n\\n#### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [0, md + 1)\\n    //       [0, lg)\\n    //       [0, 1280px)\\n    [theme.breakpoints.down('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.only(key) => media query`\\n\\n#### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `key` (*String*): A breakpoint key (`xs`, `sm`, etc.).\\n\\n#### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths including the screen size given by the breakpoint key.\\n\\n#### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, md + 1)\\n    //       [md, lg)\\n    //       [960px, 1280px)\\n    [theme.breakpoints.only('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.between(start, end) => media query`\\n\\n#### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `start` (*String*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n2. `end` (*String*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than the screen size given by the breakpoint key in the first argument and less than the the screen size given by the breakpoint key in the second argument.\\n\\n#### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [sm, md + 1)\\n    //       [sm, lg)\\n    //       [600px, 1280px[\\n    [theme.breakpoints.between('sm', 'md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `withWidth([options]) => higher-order component`\\n\\n\\u0412\\u0441\\u0442\\u0430\\u0432\\u0438\\u0442\\u044c \\u0441\\u0432\\u043e\\u0439\\u0441\\u0442\\u0432\\u043e `width`. \\u041e\\u043d\\u043e \\u043d\\u0435 \\u0438\\u0437\\u043c\\u0435\\u043d\\u044f\\u0435\\u0442 \\u043f\\u0435\\u0440\\u0435\\u0434\\u0430\\u043d\\u043d\\u044b\\u0439 \\u0432 \\u043d\\u0435\\u0433\\u043e \\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442; \\u0432\\u043c\\u0435\\u0441\\u0442\\u043e \\u044d\\u0442\\u043e\\u0433\\u043e \\u043e\\u043d\\u043e \\u0432\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442 \\u043d\\u043e\\u0432\\u044b\\u0439 \\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442. \\u0421\\u0432\\u043e\\u0439\\u0441\\u0442\\u0432\\u043e \\u0442\\u043e\\u0447\\u043a\\u0438 \\u043e\\u0441\\u0442\\u0430\\u043d\\u043e\\u0432\\u0430 `width` \\u0441\\u043e\\u043e\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442 \\u0442\\u0435\\u043a\\u0443\\u0449\\u0435\\u0439 \\u0448\\u0438\\u0440\\u0438\\u043d\\u0435 \\u044d\\u043a\\u0440\\u0430\\u043d\\u0430. \\u042d\\u0442\\u043e \\u043c\\u043e\\u0436\\u0435\\u0442 \\u0431\\u044b\\u0442\\u044c \\u043e\\u0434\\u043d\\u0430 \\u0438\\u0437 \\u0441\\u043b\\u0435\\u0434\\u0443\\u044e\\u0449\\u0438\\u0445 \\u0442\\u043e\\u0447\\u0435\\u043a \\u043e\\u0441\\u0442\\u0430\\u043d\\u043e\\u0432\\u0430:\\n\\n```ts\\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\\n```\\n\\n\\u041d\\u0435\\u043a\\u043e\\u0442\\u043e\\u0440\\u044b\\u0435 \\u0434\\u0435\\u0442\\u0430\\u043b\\u0438 \\u0440\\u0435\\u0430\\u043b\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438, \\u043a\\u043e\\u0442\\u043e\\u0440\\u044b\\u0435 \\u043c\\u043e\\u0433\\u0443\\u0442 \\u0431\\u044b\\u0442\\u044c \\u0438\\u043d\\u0442\\u0435\\u0440\\u0435\\u0441\\u043d\\u044b \\u0434\\u043b\\u044f \\u043f\\u043e\\u043d\\u0438\\u043c\\u0430\\u043d\\u0438\\u044f:\\n\\n- It forwards *non React static* properties so this HOC is more \\\"transparent\\\". For instance, it can be used to defined a `getInitialProps()` static method (next.js).\\n\\n#### \\u0410\\u0440\\u0433\\u0443\\u043c\\u0435\\u043d\\u0442\\u044b\\n\\n1. `\\u0432\\u0430\\u0440\\u0438\\u0430\\u043d\\u0442\\u044b` (*\\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u0430* [optional]): \\n  - `options.withTheme` (*Boolean* [optional]): \\u041f\\u043e \\u0443\\u043c\\u043e\\u043b\\u0447\\u0430\\u043d\\u0438\\u044e - `false`. Provide the `theme` object to the component as a property.\\n  - `options.noSSR` (*Boolean* [optional]): \\u041f\\u043e \\u0443\\u043c\\u043e\\u043b\\u0447\\u0430\\u043d\\u0438\\u044e - `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. The UI might blink. You can set this flag to `true` if you are not doing server-side rendering.\\n  - `options.initialWidth` (*Breakpoint* [optional]): As `window.innerWidth` is unavailable on the server, we default to rendering an empty component during the first mount. You might want to use an heuristic to approximate the screen width of the client browser screen width. For instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint, we also can set the initial width globally using [`custom properties`](/customization/globals/#default-props) on the theme. In order to set the initialWidth we need to pass a custom property with this shape:\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // withWidth component \\u269b\\ufe0f\\n    MuiWithWidth: {\\n      // Initial width property\\n      initialWidth: 'lg', // Breakpoint being globally set \\ud83c\\udf0e!\\n    },\\n  },\\n});\\n```\\n\\n- `options.resizeInterval` (*Number* [optional]): Defaults to 166, corresponds to 10 frames at 60 Hz. Number of milliseconds to wait before responding to a screen resize event.\\n\\n#### \\u0412\\u043e\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442\\n\\n`\\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442 \\u0432\\u044b\\u0441\\u0448\\u0435\\u0433\\u043e \\u043f\\u043e\\u0440\\u044f\\u0434\\u043a\\u0430`: \\u0441\\u043b\\u0435\\u0434\\u0443\\u0435\\u0442 \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u044c, \\u0447\\u0442\\u043e\\u0431\\u044b \\u043e\\u0431\\u0435\\u0440\\u043d\\u0443\\u0442\\u044c \\u043a\\u043e\\u043c\\u043f\\u043e\\u043d\\u0435\\u043d\\u0442.\\n\\n#### \\u041f\\u0440\\u0438\\u043c\\u0435\\u0440\\u044b\\n\\n```jsx\\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  if (isWidthUp('sm', props.width)) {\\n    return <span />\\n  }\\n\\n  return <div />;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\n## Default values\\n\\nYou can explore the default values of the breakpoints using [the theme explorer](/customization/default-theme/?expand-path=$.breakpoints) or by opening the dev tools console on this page (`window.theme.breakpoints`).\"},xsHy:function(e,n,t){var o={\"./MediaQuery.js\":\"kROV\",\"./MediaQuery.tsx\":\"FAhB\",\"./WithWidth.js\":\"oCtj\",\"./WithWidth.tsx\":\"fchn\",\"./breakpoints-aa.md\":\"4mih\",\"./breakpoints-de.md\":\"skNi\",\"./breakpoints-es.md\":\"g68c\",\"./breakpoints-fr.md\":\"+QSu\",\"./breakpoints-ja.md\":\"yJZl\",\"./breakpoints-pt.md\":\"mrX7\",\"./breakpoints-ru.md\":\"v02d\",\"./breakpoints-zh.md\":\"mePe\",\"./breakpoints.md\":\"0T3O\"};function r(e){var n=i(e);return t(n)}function i(e){if(!t.o(o,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return o[e]}r.keys=function(){return Object.keys(o)},r.resolve=i,e.exports=r,r.id=\"xsHy\"},yJZl:function(e,n){e.exports=\"# \\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\n\\n<p class=\\\"description\\\">\\u3055\\u307e\\u3056\\u307e\\u306a\\u30b3\\u30f3\\u30c6\\u30ad\\u30b9\\u30c8\\u3067\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u3092\\u4f7f\\u7528\\u3067\\u304d\\u308b\\u3088\\u3046\\u306b\\u3059\\u308bAPI\\u3002</p>\\n\\n\\u6700\\u9069\\u306a\\u30e6\\u30fc\\u30b6\\u30fc\\u30a8\\u30af\\u30b9\\u30da\\u30ea\\u30a8\\u30f3\\u30b9\\u3092\\u5f97\\u308b\\u306b\\u306f\\u3001material design\\u30a4\\u30f3\\u30bf\\u30fc\\u30d5\\u30a7\\u30a4\\u30b9\\u304c\\u3055\\u307e\\u3056\\u307e\\u306a\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u3067\\u30ec\\u30a4\\u30a2\\u30a6\\u30c8\\u3092\\u8abf\\u6574\\u3067\\u304d\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002 Material-UI\\u306f\\u3001\\u5143\\u306e\\u4ed5\\u69d8\\u306e**\\u7c21\\u6613**[\\u5b9f\\u88c5](https://material.io/design/layout/responsive-layout-grid.html#breakpoints)\\u3092\\u4f7f\\u7528\\u3057\\u307e\\u3059\\u3002\\n\\n\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u306f\\u3001\\u3055\\u307e\\u3056\\u307e\\u306a\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3067\\u5fdc\\u7b54\\u6027\\u3092\\u9ad8\\u3081\\u308b\\u305f\\u3081\\u306b\\u5185\\u90e8\\u7684\\u306b\\u4f7f\\u7528\\u3055\\u308c\\u307e\\u3059\\u304c\\u3001[Grid](/components/grid/)\\u304a\\u3088\\u3073[Hidden](/components/hidden/)\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3092\\u4f7f\\u7528\\u3057\\u3066\\u30a2\\u30d7\\u30ea\\u30b1\\u30fc\\u30b7\\u30e7\\u30f3\\u306e\\u30ec\\u30a4\\u30a2\\u30a6\\u30c8\\u3092\\u5236\\u5fa1\\u3059\\u308b\\u5834\\u5408\\u306b\\u3082\\u5229\\u7528\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n## Default breakpoints\\n\\n\\u5404\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8(a key) \\u306f\\u3001*\\u56fa\\u5b9a(a value) \\u753b\\u9762\\u5e45*\\u3068\\u4e00\\u81f4\\u3057\\u307e\\u3059\\u3002\\n\\n- **xs,** extra-small: 0px\\n- **sm,** small: 600px\\n- **md,** medium: 960px\\n- **lg,** large: 1280px\\n- **xl,** extra-large: 1920px\\n\\nThese breakpoint values are used to determine breakpoint ranges. \\u7bc4\\u56f2\\u306f\\u3001\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u5024\\u3092\\u542b\\u3080\\u7bc4\\u56f2\\u304b\\u3089\\u3001\\u6b21\\u306e\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u5024\\u3092\\u9664\\u304f\\u7bc4\\u56f2\\u307e\\u3067\\u3067\\u3059\\u3002\\n\\n```js\\nvalue         |0px     600px    960px    1280px   1920px\\nkey           |xs      sm       md       lg       xl\\nscreen width  |--------|--------|--------|--------|--------\\x3e\\nrange         |   xs   |   sm   |   md   |   lg   |   xl\\n```\\n\\nThese values can be [customized](#custom-breakpoints).\\n\\n## CSS\\u30e1\\u30c7\\u30a3\\u30a2\\u30af\\u30a8\\u30ea\\n\\nCSS media queries are the idiomatic approach to make your UI responsive. The theme provides four styles helpers to do so:\\n\\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\\n\\n\\u6b21\\u306e\\u30c7\\u30e2\\u3067\\u306f\\u3001\\u753b\\u9762\\u306e\\u5e45\\u306b\\u57fa\\u3065\\u3044\\u3066\\u80cc\\u666f\\u8272(\\u8d64\\u8272\\u3001\\u9752\\u8272 \\u3001\\u7dd1\\u8272) \\u3092\\u5909\\u66f4\\u3057\\u307e\\u3059\\u3002\\n\\n```jsx\\nconst styles = theme => ({\\n  root: {\\n    padding: theme.spacing(1),\\n    [theme.breakpoints.down('sm')]: {\\n      backgroundColor: theme.palette.secondary.main,\\n    },\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: theme.palette.primary.main,\\n    },\\n    [theme.breakpoints.up('lg')]: {\\n      backgroundColor: green[500],\\n    },\\n  },\\n});\\n```\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/MediaQuery.js\\\"}}\\n\\n## JavaScript\\u30e1\\u30c7\\u30a3\\u30a2\\u30af\\u30a8\\u30ea\\n\\nCSS\\u3060\\u3051\\u3067\\u306f\\u4e0d\\u5341\\u5206\\u306a\\u5834\\u5408\\u3082\\u3042\\u308a\\u307e\\u3059\\u3002 JavaScript\\u3067\\u3001\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u306e\\u5024\\u306b\\u57fa\\u3065\\u3044\\u3066React\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u30c4\\u30ea\\u30fc\\u3092\\u5909\\u66f4\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n### useMediaQuery\\u30d5\\u30c3\\u30af\\n\\n\\u8a73\\u7d30\\u306b\\u3064\\u3044\\u3066\\u306f\\u3001 [useMediaQuery](/components/use-media-query/) \\u30da\\u30fc\\u30b8\\u3092\\u53c2\\u7167\\u3057\\u3066\\u304f\\u3060\\u3055\\u3044\\u3002\\n\\n### withWidth()\\n\\n> \\u26a0\\ufe0f\\u3053\\u306e\\u9ad8\\u6b21\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306f\\u3001[ useMediaQuery\\u30d5\\u30c3\\u30af](/components/use-media-query/)\\u3067\\u306f\\u975e\\u63a8\\u5968\\u306b\\u306a\\u308a\\u307e\\u3059\\u3002\\n\\n```jsx\\nimport withWidth from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  return <div>{`Current width: ${props.width}`}</div>;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\n\\u6b21\\u306e\\u30c7\\u30e2\\u3067\\u306f\\u3001\\u753b\\u9762\\u306e\\u5e45\\u306b\\u57fa\\u3065\\u3044\\u3066\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3055\\u308c\\u305fDOM\\u8981\\u7d20(*em*\\u3001<u>u</u>\\u3001~~del~~& span) \\u3092\\u5909\\u66f4\\u3057\\u307e\\u3059\\u3002\\n\\n{{\\\"demo\\\": \\\"pages/customization/breakpoints/WithWidth.js\\\"}}\\n\\n## Custom breakpoints\\n\\nYou define your project's breakpoints in the `theme.breakpoints` section of your theme.\\n\\n- [`theme.breakpoints.values`](/customization/default-theme/?expand-path=$.breakpoints.values): Default to the [above values](#default-breakpoints). The keys are your screen names, and the values are the min-width where that breakpoint should start.\\n- `theme.breakpoints.unit`: Default to `px`. The unit used for the breakpoint's values.\\n- `theme.breakpoints.step`: Default to 5 (`0.05px`). The increment used to implement exclusive breakpoints.\\n\\nIf you change the default breakpoints's values, you need to provide them all:\\n\\n```jsx\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      xs: 0,\\n      sm: 600,\\n      md: 960,\\n      lg: 1280,\\n      xl: 1920,\\n    },\\n  },\\n})\\n```\\n\\nFeel free to have as few or as many breakpoints as you want, naming them in whatever way you'd prefer for your project.\\n\\n```js\\nconst theme = createMuiTheme({\\n  breakpoints: {\\n    values: {\\n      tablet: 640,\\n      laptop: 1024,\\n      desktop: 1280,\\n    },\\n  },\\n});\\n```\\n\\nIf you are using TypeScript, you would also need to use [module augmentation](/guides/typescript/#customization-of-theme) for the theme to accept the above values.\\n\\n```ts\\ndeclare module \\\"@material-ui/core/styles/createBreakpoints\\\" {\\n  interface BreakpointOverrides {\\n    xs: false; // removes the `xs` breakpoint\\n    sm: false;\\n    md: false;\\n    lg: false;\\n    xl: false;\\n    tablet: true; // adds the `tablet` breakpoint\\n    laptop: true;\\n    desktop: true;\\n  }\\n}\\n```\\n\\n## API\\n\\n### `theme.breakpoints.up(key) => media query`\\n\\n#### \\u5f15\\u6570\\n\\n1. `key` (*String* | *Number*)\\uff1a\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u30ad\\u30fc\\uff08` xs ` \\u3001` sm `\\u306a\\u3069\\uff09\\u307e\\u305f\\u306f\\u30d4\\u30af\\u30bb\\u30eb\\u5358\\u4f4d\\u306e\\u753b\\u9762\\u5e45\\u306e\\u6570\\u5024\\u3002\\n\\n#### \\u623b\\u308a\\u5024\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than and including the screen size given by the breakpoint key.\\n\\n#### \\u4f8b\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, \\u221e)\\n    //       [960px, \\u221e)\\n    [theme.breakpoints.up('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.down(key) => media query`\\n\\n#### \\u5f15\\u6570\\n\\n1. `key` (*String* | *Number*)\\uff1a\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u30ad\\u30fc\\uff08` xs ` \\u3001` sm `\\u306a\\u3069\\uff09\\u307e\\u305f\\u306f\\u30d4\\u30af\\u30bb\\u30eb\\u5358\\u4f4d\\u306e\\u753b\\u9762\\u5e45\\u306e\\u6570\\u5024\\u3002\\n\\n#### \\u623b\\u308a\\u5024\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths less than and including the screen size given by the breakpoint key.\\n\\n#### \\u4f8b\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [0, md + 1)\\n    //       [0, lg)\\n    //       [0, 1280px)\\n    [theme.breakpoints.down('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.only(key) => media query`\\n\\n#### \\u5f15\\u6570\\n\\n1. `key` (*String*)\\uff1a\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u30ad\\u30fc\\uff08` xs ` \\u3001` sm `\\u306a\\u3069\\uff09\\u3002\\n\\n#### \\u623b\\u308a\\u5024\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths including the screen size given by the breakpoint key.\\n\\n#### \\u4f8b\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [md, md + 1)\\n    //       [md, lg)\\n    //       [960px, 1280px)\\n    [theme.breakpoints.only('md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `theme.breakpoints.between(start, end) => media query`\\n\\n#### \\u5f15\\u6570\\n\\n1. `start` (*String*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n2. `end` (*String*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\\n\\n#### \\u623b\\u308a\\u5024\\n\\n`media query`: A media query string ready to be used with most styling solutions, which matches screen widths greater than the screen size given by the breakpoint key in the first argument and less than the the screen size given by the breakpoint key in the second argument.\\n\\n#### \\u4f8b\\n\\n```js\\nconst styles = theme => ({\\n  root: {\\n    backgroundColor: 'blue',\\n    // Match [sm, md + 1)\\n    //       [sm, lg)\\n    //       [600px, 1280px[\\n    [theme.breakpoints.between('sm', 'md')]: {\\n      backgroundColor: 'red',\\n    },\\n  },\\n});\\n```\\n\\n### `withWidth([options]) => higher-order component`\\n\\n`width`\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3092\\u633f\\u5165\\u3057\\u307e\\u3059\\u3002 \\u6e21\\u3055\\u308c\\u305f\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306f\\u5909\\u66f4\\u3055\\u308c\\u307e\\u305b\\u3093\\u3002; \\u4ee3\\u308f\\u308a\\u306b\\u3001\\u65b0\\u3057\\u3044\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3092\\u8fd4\\u3057\\u307e\\u3059\\u3002 \\u3053\\u306e`width`\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u306e\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306f\\u3001\\u73fe\\u5728\\u306e\\u753b\\u9762\\u306e\\u5e45\\u306b\\u4e00\\u81f4\\u3057\\u307e\\u3059\\u3002 \\u6b21\\u306e\\u30d6\\u30ec\\u30fc\\u30af\\u30dd\\u30a4\\u30f3\\u30c8\\u306e\\u3044\\u305a\\u308c\\u304b\\u3067\\u3059\\u3002\\n\\n```ts\\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\\n```\\n\\n\\u6ce8\\u610f\\u304c\\u5fc5\\u8981\\u306a\\u5b9f\\u88c5\\u306e\\u8a73\\u7d30\\u306f\\u3001\\u6b21\\u306e\\u3068\\u304a\\u308a\\u3067\\u3059\\u3002\\n\\n- *non React static* \\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3092\\u8ee2\\u9001\\u3059\\u308b\\u306e\\u3067\\u3001\\u3053\\u306eHOC\\u306f\\u3088\\u308a\\u300c\\u900f\\u660e\\u300d\\u3067\\u3059\\u3002 \\u305f\\u3068\\u3048\\u3070\\u3001`getInitialProps()`\\u9759\\u7684\\u30e1\\u30bd\\u30c3\\u30c9 (next.js) \\u3092\\u5b9a\\u7fa9\\u3059\\u308b\\u305f\\u3081\\u306b\\u4f7f\\u7528\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n#### \\u5f15\\u6570\\n\\n1. `\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3` (*\\u30aa\\u30d7\\u30b8\\u30a7\\u30af\\u30c8* [\\u4efb\\u610f]): \\n  - `options.withTheme` (*\\u30d6\\u30fc\\u30eb\\u5024* [\\u4efb\\u610f]): \\u30c7\\u30d5\\u30a9\\u30eb\\u30c8\\u5024 `false`. `theme`\\u30aa\\u30d6\\u30b8\\u30a7\\u30af\\u30c8\\u3092\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3068\\u3057\\u3066\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306b\\u63d0\\u4f9b\\u3057\\u307e\\u3059\\u3002\\n  - `options.noSSR` (*\\u30d6\\u30fc\\u30eb\\u5024* [\\u4efb\\u610f]): \\u30c7\\u30d5\\u30a9\\u30eb\\u30c8\\u5024 `false`. \\u30b5\\u30fc\\u30d0\\u30fc\\u5074\\u306e\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u8abf\\u6574\\u3092\\u5b9f\\u884c\\u3059\\u308b\\u306b\\u306f\\u30012\\u56de\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002 1\\u56de\\u76ee\\u306f\\u4f55\\u3082\\u306a\\u3044\\u72b6\\u614b\\u3067\\u30012\\u56de\\u76ee\\u306f\\u5b50\\u8981\\u7d20\\u3068\\u4e00\\u7dd2\\u3067\\u3059\\u3002 \\u3053\\u306e\\u30c0\\u30d6\\u30eb\\u30d1\\u30b9\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u30b5\\u30a4\\u30af\\u30eb\\u306b\\u306f\\u6b20\\u70b9\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002 UI\\u304c\\u70b9\\u6ec5\\u3059\\u308b\\u3053\\u3068\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002 \\u30b5\\u30fc\\u30d0\\u30b5\\u30a4\\u30c9\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3092\\u5b9f\\u884c\\u3057\\u306a\\u3044\\u5834\\u5408\\u306f\\u3001\\u3053\\u306e\\u30d5\\u30e9\\u30b0\\u3092`true`\\u306b\\u8a2d\\u5b9a\\u3067\\u304d\\u307e\\u3059\\u3002\\n  - ` options.initialWidth ` \\uff08*Breakpoint* [optional]\\uff09\\uff1a As ` window.innerWidth `\\u30b5\\u30fc\\u30d0\\u30fc\\u3067\\u306f\\u4f7f\\u7528\\u3067\\u304d\\u307e\\u305b\\u3093 \\u30c7\\u30d5\\u30a9\\u30eb\\u30c8\\u3067\\u306f\\u3001\\u6700\\u521d\\u306e\\u30de\\u30a6\\u30f3\\u30c8\\u6642\\u306b\\u7a7a\\u306e\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u304c\\u30ec\\u30f3\\u30c0\\u30ea\\u30f3\\u30b0\\u3055\\u308c\\u307e\\u3059\\u3002 \\u30d2\\u30e5\\u30fc\\u30ea\\u30b9\\u30c6\\u30a3\\u30c3\\u30af\\u3092\\u4f7f\\u7528\\u3057\\u3066\\u3001\\u6b21\\u306e\\u5024\\u3092\\u8fd1\\u4f3c\\u3067\\u304d\\u307e\\u3059\\u3002 \\u30af\\u30e9\\u30a4\\u30a2\\u30f3\\u30c8\\u30fb\\u30d6\\u30e9\\u30a6\\u30b6\\u306e\\u753b\\u9762\\u5e45\\u3002 \\u305f\\u3068\\u3048\\u3070\\u3001\\u30e6\\u30fc\\u30b6\\u30fc\\u30a8\\u30fc\\u30b8\\u30a7\\u30f3\\u30c8\\u307e\\u305f\\u306f\\u30af\\u30e9\\u30a4\\u30a2\\u30f3\\u30c8\\u30d2\\u30f3\\u30c8\\u3092\\u4f7f\\u7528\\u3067\\u304d\\u307e\\u3059\\u3002 https://caniuse.com/#search=client%20hint\\u3001[`\\u30c6\\u30fc\\u30de\\u306b\\u30ab\\u30b9\\u30bf\\u30e0\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3092\\u4f7f\\u7528\\u3057\\u3066\\u521d\\u671f\\u5e45\\n\\u30b0\\u30ed\\u30fc\\u30d0\\u30eb\\u306b\\u8a2d\\u5b9a\\u3059\\u308b\\u3053\\u3068\\u3082\\u3067\\u304d\\u307e\\u3059`](/customization/globals/#default-props)\\u3002 InitialWidth\\u3092\\u8a2d\\u5b9a\\u3059\\u308b\\u306b\\u306f\\u3001\\u3053\\u306e\\u5f62\\u72b6\\u306e\\u30ab\\u30b9\\u30bf\\u30e0\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3092\\u6e21\\u3059\\u5fc5\\u8981\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002\\n\\n```js\\nconst theme = createMuiTheme({\\n  props: {\\n    // withWidth component \\u269b\\ufe0f\\n    MuiWithWidth: {\\n      // Initial width property\\n      initialWidth: 'lg', // Breakpoint being globally set \\ud83c\\udf0e!\\n    },\\n  },\\n});\\n```\\n\\n- `options.resizeInterval` (*Number* [optional]): \\u65e2\\u5b9a\\u306f166\\u3067\\u300160Hz\\u306710\\u30d5\\u30ec\\u30fc\\u30e0\\u306b\\u5bfe\\u5fdc\\u3057\\u307e\\u3059\\u3002 \\u753b\\u9762\\u30b5\\u30a4\\u30ba\\u5909\\u66f4\\u30a4\\u30d9\\u30f3\\u30c8\\u306b\\u5fdc\\u7b54\\u3059\\u308b\\u307e\\u3067\\u306b\\u5f85\\u6a5f\\u3059\\u308b\\u30df\\u30ea\\u79d2\\u6570\\u3002\\n\\n#### \\u623b\\u308a\\u5024\\n\\n`higher-order component` \\uff1a\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u3092\\u30e9\\u30c3\\u30d7\\u3059\\u308b\\u305f\\u3081\\u306b\\u4f7f\\u7528\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002\\n\\n#### \\u4f8b\\n\\n```jsx\\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\\n\\nfunction MyComponent(props) {\\n  if (isWidthUp('sm', props.width)) {\\n    return <span />\\n  }\\n\\n  return <div />;\\n}\\n\\nexport default withWidth()(MyComponent);\\n```\\n\\n## \\u30c7\\u30d5\\u30a9\\u30eb\\u30c8\\u5024\\n\\nYou can explore the default values of the breakpoints using [the theme explorer](/customization/default-theme/?expand-path=$.breakpoints) or by opening the dev tools console on this page (`window.theme.breakpoints`).\"}},[[\"jU1Y\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}