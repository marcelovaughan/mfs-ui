{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{\"/00E\":function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/api-docs/text-field\",function(){return s(\"KJrt\")}])},KJrt:function(e,n,s){\"use strict\";s.r(n),s.d(n,\"default\",(function(){return i}));var p=s(\"mXGw\"),t=s.n(p),a=s(\"e+1t\"),o=s(\"kVtE\"),l=t.a.createElement,r=s(\"cpBv\");function i(e){var n=e.docs;return l(a.a,{docs:n})}i.getInitialProps=function(){var e=Object(o.a)({pageFilename:\"api/text-field\",requireRaw:r});return{demos:e.demos,docs:e.docs}}},cpBv:function(e,n,s){var p={\"./text-field.md\":\"sh4Z\"};function t(e){var n=a(e);return s(n)}function a(e){if(!s.o(p,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return p[e]}t.keys=function(){return Object.keys(p)},t.resolve=a,e.exports=t,t.id=\"cpBv\"},sh4Z:function(e,n){e.exports='---\\nfilename: /packages/material-ui/src/TextField/TextField.js\\n---\\n\\n\\x3c!--- This documentation is automatically generated, do not try to edit it. --\\x3e\\n\\n# TextField API\\n\\n<p class=\"description\">The API documentation of the TextField React component. Learn more about the props and the CSS customization points.</p>\\n\\n## Import\\n\\n```js\\nimport TextField from \\'@material-ui/core/TextField\\';\\n// or\\nimport { TextField } from \\'@material-ui/core\\';\\n```\\n\\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\\n\\nThe `TextField` is a convenience wrapper for the most common cases (80%).\\nIt cannot be all things to all people, otherwise the API would grow out of control.\\n\\n## Advanced Configuration\\n\\nIt\\'s important to understand that the text field is a simple abstraction\\non top of the following components:\\n\\n- [FormControl](/api/form-control/)\\n- [InputLabel](/api/input-label/)\\n- [FilledInput](/api/filled-input/)\\n- [OutlinedInput](/api/outlined-input/)\\n- [Input](/api/input/)\\n- [FormHelperText](/api/form-helper-text/)\\n\\nIf you wish to alter the props applied to the `input` element, you can do so as follows:\\n\\n```jsx\\nconst inputProps = {\\n  step: 300,\\n};\\n\\nreturn <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\\n```\\n\\nFor advanced cases, please look at the source of TextField by clicking on the\\n\"Edit this page\" button above. Consider either:\\n\\n- using the upper case props for passing values directly to the components\\n- using the underlying components directly as shown in the demos\\n\\n## Component name\\n\\nThe `MuiTextField` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\\n\\n## Props\\n\\n| Name | Type | Default | Description |\\n|:-----|:-----|:--------|:------------|\\n| <span class=\"prop-name\">autoComplete</span> | <span class=\"prop-type\">string</span> |  | This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it\\'s more like an autofill. You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill). |\\n| <span class=\"prop-name\">autoFocus</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the `input` element will be focused during the first mount. |\\n| <span class=\"prop-name\">classes</span> | <span class=\"prop-type\">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\\n| <span class=\"prop-name\">color</span> | <span class=\"prop-type\">\\'primary\\'<br>&#124;&nbsp;\\'secondary\\'</span> | <span class=\"prop-default\">\\'primary\\'</span> | The color of the component. It supports those theme colors that make sense for this component. |\\n| <span class=\"prop-name\">defaultValue</span> | <span class=\"prop-type\">any</span> |  | The default value of the `input` element. |\\n| <span class=\"prop-name\">disabled</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the `input` element will be disabled. |\\n| <span class=\"prop-name\">error</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the label will be displayed in an error state. |\\n| <span class=\"prop-name\">FormHelperTextProps</span> | <span class=\"prop-type\">object</span> |  | Props applied to the [`FormHelperText`](/api/form-helper-text/) element. |\\n| <span class=\"prop-name\">fullWidth</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the input will take up the full width of its container. |\\n| <span class=\"prop-name\">helperText</span> | <span class=\"prop-type\">node</span> |  | The helper text content. |\\n| <span class=\"prop-name\">id</span> | <span class=\"prop-type\">string</span> |  | The id of the `input` element. Use this prop to make `label` and `helperText` accessible for screen readers. |\\n| <span class=\"prop-name\">InputLabelProps</span> | <span class=\"prop-type\">object</span> |  | Props applied to the [`InputLabel`](/api/input-label/) element. |\\n| <span class=\"prop-name\">inputProps</span> | <span class=\"prop-type\">object</span> |  | [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element. |\\n| <span class=\"prop-name\">InputProps</span> | <span class=\"prop-type\">object</span> |  | Props applied to the Input element. It will be a [`FilledInput`](/api/filled-input/), [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/) component depending on the `variant` prop value. |\\n| <span class=\"prop-name\">inputRef</span> | <span class=\"prop-type\">ref</span> |  | Pass a ref to the `input` element. |\\n| <span class=\"prop-name\">label</span> | <span class=\"prop-type\">node</span> |  | The label content. |\\n| <span class=\"prop-name\">margin</span> | <span class=\"prop-type\">\\'dense\\'<br>&#124;&nbsp;\\'none\\'<br>&#124;&nbsp;\\'normal\\'</span> |  | If `dense` or `normal`, will adjust vertical spacing of this and contained components. |\\n| <span class=\"prop-name\">multiline</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, a textarea element will be rendered instead of an input. |\\n| <span class=\"prop-name\">name</span> | <span class=\"prop-type\">string</span> |  | Name attribute of the `input` element. |\\n| <span class=\"prop-name\">onChange</span> | <span class=\"prop-type\">func</span> |  | Callback fired when the value is changed.<br><br>**Signature:**<br>`function(event: object) => void`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.value` (string). |\\n| <span class=\"prop-name\">placeholder</span> | <span class=\"prop-type\">string</span> |  | The short hint displayed in the input before the user enters a value. |\\n| <span class=\"prop-name\">required</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, the label is displayed as required and the `input` element` will be required. |\\n| <span class=\"prop-name\">rows</span> | <span class=\"prop-type\">number<br>&#124;&nbsp;string</span> |  | Number of rows to display when multiline option is set to true. |\\n| <span class=\"prop-name\">rowsMax</span> | <span class=\"prop-type\">number<br>&#124;&nbsp;string</span> |  | Maximum number of rows to display when multiline option is set to true. |\\n| <span class=\"prop-name\">select</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter. If this option is set you must pass the options of the select as children. |\\n| <span class=\"prop-name\">SelectProps</span> | <span class=\"prop-type\">object</span> |  | Props applied to the [`Select`](/api/select/) element. |\\n| <span class=\"prop-name\">size</span> | <span class=\"prop-type\">\\'medium\\'<br>&#124;&nbsp;\\'small\\'</span> |  | The size of the text field. |\\n| <span class=\"prop-name\">type</span> | <span class=\"prop-type\">string</span> |  | Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types). |\\n| <span class=\"prop-name\">value</span> | <span class=\"prop-type\">any</span> |  | The value of the `input` element, required for a controlled component. |\\n| <span class=\"prop-name\">variant</span> | <span class=\"prop-type\">\\'filled\\'<br>&#124;&nbsp;\\'outlined\\'<br>&#124;&nbsp;\\'standard\\'</span> | <span class=\"prop-default\">\\'standard\\'</span> | The variant to use. |\\n\\nThe `ref` is forwarded to the root element.\\n\\nAny other props supplied will be provided to the root element ([FormControl](/api/form-control/)).\\n\\n## CSS\\n\\n| Rule name | Global class | Description |\\n|:-----|:-------------|:------------|\\n| <span class=\"prop-name\">root</span> | <span class=\"prop-name\">.MuiTextField-root</span> | Styles applied to the root element.\\n\\nYou can override the style of the component thanks to one of these customization points:\\n\\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\\n- With a theme and an [`overrides` property](/customization/globals/#css).\\n\\nIf that\\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/TextField/TextField.js) for more detail.\\n\\n## Inheritance\\n\\nThe props of the [FormControl](/api/form-control/) component are also available.\\nYou can take advantage of this behavior to [target nested components](/guides/api/#spread).\\n\\n## Demos\\n\\n- [Autocomplete](/components/autocomplete/)\\n- [Pickers](/components/pickers/)\\n- [Text Fields](/components/text-fields/)\\n\\n'}},[[\"/00E\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}