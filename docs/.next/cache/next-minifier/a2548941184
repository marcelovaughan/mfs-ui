{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[316],{\"2SP1\":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/guides/typescript\",function(){return t(\"eavs\")}])},\"2pEA\":function(e,n){e.exports=\"# crwdns96734:0crwdne96734:0\\n\\n<p class=\\\"description\\\">crwdns96736:0crwdne96736:0</p>\\n\\ncrwdns133144:0crwdne133144:0\\n\\ncrwdns133146:0crwdne133146:0\\n\\ncrwdns133148:0crwdne133148:0\\n\\n```json\\ncrwdns100592:0crwdne100592:0\\n```\\n\\ncrwdns133150:0crwdne133150:0 crwdns133152:0crwdne133152:0 crwdns133154:0crwdne133154:0\\n\\n## crwdns96746:0crwdne96746:0\\n\\ncrwdns133156:0crwdne133156:0\\n\\n### crwdns96750:0crwdne96750:0\\n\\ncrwdns133158:0crwdne133158:0\\n\\n```ts\\ncrwdns100604:0{\\n    display: 'flex',\\n    flexDirection: 'column',\\n  }crwdne100604:0\\ncrwdns100606:0crwdne100606:0\\n```\\n\\ncrwdns133160:0crwdne133160:0 crwdns133162:0crwdne133162:0\\n\\n```ts\\ncrwdns100612:0{\\n    display: 'flex',\\n    flexDirection: 'column',\\n  }crwdne100612:0\\n```\\n\\ncrwdns133164:0crwdne133164:0\\n\\n```ts\\ncrwdns100616:0{ palette, spacing }crwdne100616:0\\n```\\n\\ncrwdns133166:0crwdne133166:0\\n\\ncrwdns133168:0crwdne133168:0\\n\\n```ts\\ncrwdns100622:0{\\n    display: 'flex',\\n    flexDirection: 'column',\\n  }crwdnd100622:0{ palette, spacing }crwdne100622:0\\n```\\n\\ncrwdns133170:0crwdne133170:0\\n\\n### crwdns96776:0crwdne96776:0\\n\\ncrwdns133172:0crwdne133172:0\\n\\n```ts\\ncrwdns100628:0{\\n    minHeight: '100vh',\\n  }crwdnd100628:0{\\n      display: 'flex',\\n    }crwdne100628:0\\n```\\n\\ncrwdns133174:0crwdne133174:0 crwdns133176:0crwdne133176:0\\n\\n```ts\\ncrwdns100634:0{\\n    minHeight: '100vh',\\n  }crwdnd100634:0{\\n      display: 'flex',\\n    }crwdnd100634:0{\\n    minHeight: '100vh',\\n  }crwdnd100634:0{\\n      display: 'flex',\\n    }crwdne100634:0\\n```\\n\\n### crwdns96788:0crwdne96788:0\\n\\ncrwdns133178:0crwdne133178:0\\n\\n```ts\\ncrwdns100638:0crwdne100638:0 crwdns96806:0crwdne96806:0 crwdns96808:0crwdne96808:0 crwdns100640:0crwdne100640:0\\n```\\n\\ncrwdns133180:0%27crwdne133180:0 crwdns133182:0crwdne133182:0\\n\\n```ts\\ncrwdns100646:0{ WithStyles, createStyles }crwdne100646:0 crwdns100648:0crwdne100648:0 crwdns100650:0crwdne100650:0 crwdns100652:0crwdne100652:0\\n```\\n\\n### crwdns96812:0crwdne96812:0\\n\\ncrwdns133184:0crwdne133184:0\\n\\n```tsx\\ncrwdns100656:0{type}crwdnd100656:0{color}crwdnd100656:0{classes}crwdnd100656:0{text}crwdnd100656:0{type}crwdnd100656:0{color}crwdnd100656:0{classes}crwdnd100656:0{text}crwdne100656:0\\n```\\n\\ncrwdns133186:0crwdne133186:0\\n\\n## crwdns96820:0crwdne96820:0\\n\\ncrwdns133188:0crwdne133188:0\\n\\ncrwdns133190:0crwdne133190:0\\n\\n```ts\\ncrwdns100664:0{ Theme }crwdnd100664:0{ Breakpoint }crwdne100664:0\\n```\\n\\ncrwdns133192:0crwdne133192:0\\n\\ncrwdns133194:0crwdne133194:0\\n\\n```ts\\ncrwdns130090:0{ createMuiTheme, ThemeOptions }crwdnd130090:0{\\n      width: 225,\\n      breakpoint: 'lg',\\n    }crwdne130090:0\\n```\\n\\ncrwdns133196:0crwdne133196:0\\n\\n```ts\\ncrwdns100674:0{ breakpoint: 'md' }crwdne100674:0\\n```\\n\\n## crwdns101660:0crwdne101660:0\\n\\ncrwdns133198:0crwdne133198:0 crwdns133200:0crwdne133200:0 crwdns133202:0crwdne133202:0\\n\\ncrwdns133204:0crwdne133204:0 crwdns133206:0crwdne133206:0\\n\\ncrwdns133208:0crwdne133208:0\\n\\ncrwdns133210:0crwdne133210:0\\n\\n```ts\\ncrwdns109141:0{ component: 'a' }crwdne109141:0 crwdns109143:0crwdne109143:0\\n```\\n\\ncrwdns133212:0crwdne133212:0 crwdns133214:0crwdne133214:0 crwdns133216:0crwdne133216:0\\n\\ncrwdns133218:0crwdne133218:0\\n\\n```ts\\ncrwdns109153:0crwdne109153:0 crwdns109155:0crwdne109155:0\\n```\\n\\ncrwdns133220:0crwdne133220:0\\n\\n```ts\\ncrwdns109159:0{ prop1 }crwdnd109159:0{ prop1: string }crwdne109159:0\\ncrwdns109161:0{ThirdPartyComponent}crwdne109161:0\\n```\\n\\ncrwdns133222:0crwdne133222:0\\n\\ncrwdns133224:0crwdne133224:0 crwdns133226:0crwdne133226:0 crwdns133228:0crwdne133228:0\\n\\n## crwdns96852:0crwdne96852:0\\n\\ncrwdns133230:0crwdne133230:0 crwdns133232:0crwdne133232:0\\n\\ncrwdns133234:0crwdne133234:0 crwdns133236:0crwdne133236:0 crwdns133238:0crwdne133238:0\\n\\ncrwdns133240:0crwdne133240:0 crwdns133242:0crwdne133242:0 crwdns133244:0crwdne133244:0 crwdns133246:0crwdne133246:0\"},\"9qM0\":function(e,n){e.exports=\"# TypeScript\\n\\n<p class=\\\"description\\\">TypeScript\\u3092\\u4f7f\\u7528\\u3059\\u308b\\u3053\\u3068\\u3067\\u3001JavaScript\\u306b\\u9759\\u7684\\u578b\\u4ed8\\u3051\\u3092\\u8ffd\\u52a0\\u3057\\u3001\\u958b\\u767a\\u8005\\u306e\\u751f\\u7523\\u6027\\u3068\\u30b3\\u30fc\\u30c9\\u54c1\\u8cea\\u3092\\u5411\\u4e0a\\u3055\\u305b\\u308b\\u3053\\u3068\\u304c\\u3067\\u304d\\u307e\\u3059\\u3002</p>\\n\\nMaterial-UI requires a minimum version of TypeScript 3.2.\\n\\n[Create React App\\u3067\\u306eTypeScript](https://github.com/mui-org/material-ui/tree/master/examples/create-react-app-with-typescript)\\u306e\\u4f7f\\u7528\\u4f8b\\u3092\\u53c2\\u8003\\u306b\\u3057\\u3066\\u304f\\u3060\\u3055\\u3044\\u3002\\n\\nIn order for types to work, you have to at least have the following options enabled in your `tsconfig.json`:\\n\\n```json\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"lib\\\": [\\\"es6\\\", \\\"dom\\\"],\\n    \\\"noImplicitAny\\\": true,\\n    \\\"noImplicitThis\\\": true,\\n    \\\"strictNullChecks\\\": true\\n  }\\n}\\n```\\n\\nStrict\\u30e2\\u30fc\\u30c9\\u306e\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3\\u306f\\u3001\\u3059\\u3079\\u3066\\u306e\\u30bf\\u30a4\\u30d7\\u306e\\u30d1\\u30c3\\u30b1\\u30fc\\u30b8\\u306b\\u5fc5\\u8981\\u306a\\u3082\\u306e\\u3068\\u540c\\u3058\\u3067\\u3059\\u3002 \\u306f`@types/`namespace\\u3067\\u767a\\u884c\\u3055\\u308c\\u307e\\u3059\\u3002 \\u3042\\u307e\\u308a\\u53b3\\u5bc6\\u3067\\u306a\\u3044`tsconfig.json`\\u3092\\u4f7f\\u3063\\u305f\\u308a\\u3001\\u4e00\\u90e8\\u306e\\u30e9\\u30a4\\u30d6\\u30e9\\u30ea\\u3092\\u7701\\u7565\\u3057\\u305f\\u5834\\u5408\\u3001\\u30a8\\u30e9\\u30fc\\u304c\\u767a\\u751f\\u3059\\u308b\\u53ef\\u80fd\\u6027\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002 To get the best type experience with the types we recommend setting `\\\"strict\\\": true`.\\n\\n## `withStyles`\\u306e\\u4f7f\\u3044\\u65b9\\n\\n`withStyles`\\u3092TypeScript\\u3067\\u4f7f\\u3046\\u306e\\u306f\\u5c11\\u3057\\u5384\\u4ecb\\u3067\\u3059\\u304c\\u3001\\u305d\\u308c\\u3092\\u3067\\u304d\\u308b\\u3060\\u3051\\u7c21\\u5358\\u306b\\u6271\\u3046\\u305f\\u3081\\u306e\\u30e6\\u30fc\\u30c6\\u30a3\\u30ea\\u30c6\\u30a3\\u304c\\u3044\\u304f\\u3064\\u304b\\u3042\\u308a\\u307e\\u3059\\u3002\\n\\n### `createStyles`\\u3092\\u4f7f\\u3063\\u3066\\u578b\\u306e\\u62e1\\u5927\\u3092\\u6253\\u5012\\u3059\\u308b\\n\\n\\u3088\\u304f\\u3042\\u308b\\u6df7\\u4e71\\u306e\\u539f\\u56e0\\u306f\\u3001TypeScript\\u306e[\\u578b\\u306e\\u62e1\\u5927(widening)](https://mariusschulz.com/blog/typescript-2-1-literal-type-widening)\\u3067\\u3059\\u3002\\u3053\\u308c\\u306b\\u3088\\u308a\\u3001\\u3053\\u306e\\u4f8b\\u306f\\u671f\\u5f85\\u901a\\u308a\\u306b\\u52d5\\u4f5c\\u3057\\u307e\\u305b\\u3093\\u3002\\n\\n```ts\\nconst styles = {\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  }\\n};\\n\\nwithStyles(styles);\\n//         ^^^^^^\\n//         Types of property 'flexDirection' are incompatible.\\n//           Type 'string' is not assignable to type '\\\"-moz-initial\\\" | \\\"inherit\\\" | \\\"initial\\\" | \\\"revert\\\" | \\\"unset\\\" | \\\"column\\\" | \\\"column-reverse\\\" | \\\"row\\\"...'.\\n```\\n\\n\\u554f\\u984c\\u306f\\u3001`flexDirection`\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306e\\u578b\\u304c`string`\\u3068\\u3057\\u3066\\u578b\\u63a8\\u8ad6\\u3055\\u308c\\u308b\\u3053\\u3068\\u3067\\u3059\\u3002\\u3053\\u308c\\u306f\\u72ec\\u65ad\\u7684\\u3059\\u304e\\u307e\\u3059\\u3002 \\u3053\\u308c\\u3092\\u4fee\\u6b63\\u3059\\u308b\\u305f\\u3081\\u3001style\\u30aa\\u30d6\\u30b8\\u30a7\\u30af\\u30c8\\u3092\\u76f4\\u63a5`withStyles`\\u306b\\u6e21\\u3057\\u307e\\u3059:\\n\\n```ts\\nwithStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n```\\n\\n\\u305f\\u3060\\u3057\\u3001\\u30b9\\u30bf\\u30a4\\u30eb\\u3092\\u30c6\\u30fc\\u30de\\u306b\\u4f9d\\u5b58\\u3055\\u305b\\u3088\\u3046\\u3068\\u3059\\u308b\\u3068\\u3001\\u30bf\\u30a4\\u30d7\\u3092\\u5e83\\u3052\\u308b\\u3068\\u3044\\u982d\\u304c\\u518d\\u3073\\u73fe\\u308c\\u307e\\u3059\\uff1a\\n\\n```ts\\nwithStyles(({ palette, spacing }) => ({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n}));\\n```\\n\\n\\u3053\\u308c\\u306f\\u3001TypeScript [\\u304c\\u95a2\\u6570\\u5f0f\\u306e\\u623b\\u308a\\u5024\\u306e\\u578b\\u3092\\u5e83\\u3052\\u308b\\u305f\\u3081\\u3067\\u3059\\u3002 ](https://github.com/Microsoft/TypeScript/issues/241)\\n\\nBecause of this, using the `createStyles` helper function to construct your style rules object is recommended:\\n\\n```ts\\n// Non-dependent styles\\nconst styles = createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n\\n// Theme-dependent styles\\nconst styles = ({ palette, spacing }: Theme) => createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n});\\n```\\n\\n`createStyles`\\u306f\\u3001\\u5358\\u306a\\u308bidentity\\u95a2\\u6570\\u3067\\u3059\\u3002\\u5b9f\\u884c\\u6642\\u306b\\u300c\\u4f55\\u3067\\u3082\\u3059\\u308b\\u300d\\u3059\\u308b\\u306e\\u3067\\u306f\\u306a\\u304f\\u3001\\u30b3\\u30f3\\u30d1\\u30a4\\u30eb\\u6642\\u306b\\u578b\\u63a8\\u8ad6\\u3092\\u30ac\\u30a4\\u30c9\\u3059\\u308b\\u306e\\u306b\\u5f79\\u7acb\\u3064\\u3060\\u3051\\u3067\\u3059\\u3002\\n\\n### \\u30e1\\u30c7\\u30a3\\u30a2\\u30af\\u30a8\\u30ea\\n\\n`withStyles`\\u3067\\u306f\\u3001\\u6b21\\u306e\\u3088\\u3046\\u306a\\u6700\\u4e0a\\u4f4d\\u306e\\u30e1\\u30c7\\u30a3\\u30a2\\u30af\\u30a8\\u30ea\\u3092\\u6301\\u3064\\u30b9\\u30bf\\u30a4\\u30eb\\u30aa\\u30d6\\u30b8\\u30a7\\u30af\\u30c8\\u3092\\u4f7f\\u7528\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n```ts\\nconst styles = createStyles({\\n  root: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    root: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\n\\u305f\\u3060\\u3057\\u3001\\u3053\\u308c\\u3089\\u306e\\u30b9\\u30bf\\u30a4\\u30eb\\u304cTypeScript\\u3092\\u6e21\\u305b\\u308b\\u3088\\u3046\\u306b\\u3059\\u308b\\u306b\\u306f\\u3001CSS\\u30af\\u30e9\\u30b9\\u306e\\u540d\\u524d\\u3068\\u5b9f\\u969b\\u306eCSS\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u540d\\u306b\\u95a2\\u3057\\u3066\\u5b9a\\u7fa9\\u304c\\u3042\\u3044\\u307e\\u3044\\u3067\\u306a\\u3051\\u308c\\u3070\\u306a\\u308a\\u307e\\u305b\\u3093\\u3002 \\u3053\\u306e\\u305f\\u3081\\u3001CSS\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3068\\u540c\\u3058\\u30af\\u30e9\\u30b9\\u540d\\u306f\\u4f7f\\u7528\\u3057\\u306a\\u3044\\u3067\\u304f\\u3060\\u3055\\u3044\\u3002\\n\\n```ts\\n// error because TypeScript thinks `@media (min-width: 960px)` is a class name\\n// and `content` is the css property\\nconst ambiguousStyles = createStyles({\\n  content: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    content: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n\\n// works just fine\\nconst ambiguousStyles = createStyles({\\n  contentClass: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    contentClass: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\n### ` WithStyles\\u3092\\u4f7f\\u7528\\u3057\\u3066 props\\u3092\\u5897\\u5f37\\u3059\\u308b`\\n\\n`withStyles(styles) \\u3067\\u88c5\\u98fe\\u3055\\u308c\\u305f\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8`\\u306b\\u306f\\u3001\\u7279\\u5225\\u306a`classes` \\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u304c\\u633f\\u5165\\u3055\\u308c\\u308b\\u305f\\u3081\\u3001\\u305d\\u308c\\u306b\\u5fdc\\u3058\\u3066\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3092\\u5b9a\\u7fa9\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002\\n\\n```ts\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props {\\n  // non-style props\\n  foo: number;\\n  bar: boolean;\\n  // injected style props\\n  classes: {\\n    root: string;\\n    paper: string;\\n    button: string;\\n  };\\n}\\n```\\n\\n\\u3057\\u304b\\u3057\\u3001\\u3053\\u308c\\u306f\\u3042\\u307e\\u308a[DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)\\u3067\\u306f\\u3042\\u308a\\u307e\\u305b\\u3093\\u3002\\u306a\\u305c\\u306a\\u3089\\u3001\\u30af\\u30e9\\u30b9\\u540d(`'root'`\\u3001`'paper'`\\u3001`'button'`\\u3001...\\u3002) \\u3092\\u4e8c\\u3064\\u306e\\u7570\\u306a\\u308b\\u5834\\u6240\\u306b\\u7dad\\u6301\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308b\\u304b\\u3089\\u3067\\u3059\\u3002 \\u3053\\u306e\\u305f\\u3081\\u306b\\u3001\\u578b\\u6f14\\u7b97\\u5b50`WithStyles`\\u3092\\u4f7f\\u7528\\u3057\\u3066\\u3001\\u6b21\\u306e\\u3088\\u3046\\u306b\\u8a18\\u8ff0\\u3057\\u307e\\u3059\\u3002\\n\\n```ts\\nimport { WithStyles, createStyles } from '@material-ui/core';\\n\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props extends WithStyles<typeof styles> {\\n  foo: number;\\n  bar: boolean;\\n}\\n```\\n\\n### \\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306e\\u88c5\\u98fe\\n\\n` withStyles\\uff08styles\\uff09`\\u306e\\u9069\\u7528\\u3067\\u3001\\u95a2\\u6570\\u304c\\u671f\\u5f85\\u3069\\u304a\\u308a\\u306b\\u6a5f\\u80fd\\u3059\\u308b\\uff1a\\n\\n```tsx\\nconst DecoratedSFC = withStyles(styles)(({ text, type, color, classes }: Props) => (\\n  <Typography variant={type} color={color} classes={classes}>\\n    {text}\\n  </Typography>\\n));\\n\\nconst DecoratedClass = withStyles(styles)(\\n  class extends React.Component<Props> {\\n    render() {\\n      const { text, type, color, classes } = this.props\\n      return (\\n        <Typography variant={type} color={color} classes={classes}>\\n          {text}\\n        </Typography>\\n      );\\n    }\\n  }\\n);\\n```\\n\\n\\u6b8b\\u5ff5\\u306a\\u304c\\u3089\\u3001[TypeScript decorators\\u306e\\u73fe\\u5728\\u306e\\u5236\\u9650](https://github.com/Microsoft/TypeScript/issues/4881) \\u306b\\u3088\\u308a\\u3001`withStyles(\\u30b9\\u30bf\\u30a4\\u30eb)`\\u306fTypeScript\\u306e\\u30c7\\u30b3\\u30ec\\u30fc\\u30bf\\u3068\\u3057\\u3066\\u4f7f\\u7528\\u3067\\u304d\\u307e\\u305b\\u3093\\u3002\\n\\n## `\\u30c6\\u30fc\\u30de\\u306e\\u30ab\\u30b9\\u30bf\\u30de\\u30a4\\u30ba`\\n\\n\\u30ab\\u30b9\\u30bf\\u30e0\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3092`\\u30c6\\u30fc\\u30de`\\u306b\\u8ffd\\u52a0\\u3059\\u308b\\u5834\\u5408\\u3001[TypeScript\\u306e\\u30e2\\u30b8\\u30e5\\u30fc\\u30eb\\u62e1\\u5f35](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation)\\u3092\\u5229\\u7528\\u3057\\u3066\\u3001\\u53b3\\u5bc6\\u306b\\u578b\\u6307\\u5b9a\\u3057\\u305f\\u65b9\\u6cd5\\u3067\\u5f15\\u304d\\u7d9a\\u304d\\u4f7f\\u7528\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n\\u6b21\\u306e\\u4f8b\\u3067\\u306f\\u3001`material-ui`\\u306b\\u3088\\u3063\\u3066\\u66f8\\u304d\\u51fa\\u3055\\u308c\\u305f\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u306b\\u5408\\u6210\\u3055\\u308c\\u308b`appDrawer`\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u3092\\u8ffd\\u52a0\\u3057\\u307e\\u3059\\u3002\\n\\n```ts\\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\\n\\ndeclare module '@material-ui/core/styles/createMuiTheme' {\\n  interface Theme {\\n    appDrawer: {\\n      width: React.CSSProperties['width']\\n      breakpoint: Breakpoint\\n    }\\n  }\\n  // allow configuration using `createMuiTheme`\\n  interface ThemeOptions {\\n    appDrawer?: {\\n      width?: React.CSSProperties['width']\\n      breakpoint?: Breakpoint\\n    }\\n  }\\n}\\n```\\n\\n\\u30ab\\u30b9\\u30bf\\u30e0\\u30c6\\u30fc\\u30de\\u30d5\\u30a1\\u30af\\u30c8\\u30ea\\u306b\\u306f\\u3001\\u8ffd\\u52a0\\u306e\\u65e2\\u5b9a\\u306e\\u30aa\\u30d7\\u30b7\\u30e7\\u30f3\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002\\n\\n**./styles/createMyTheme**:\\n\\n```ts\\nimport { createMuiTheme, ThemeOptions } from '@material-ui/core/styles';\\n\\nexport default function createMyTheme(options: ThemeOptions) {\\n  return createMuiTheme({\\n    appDrawer: {\\n      width: 225,\\n      breakpoint: 'lg',\\n    },\\n    ...options,\\n  })\\n}\\n```\\n\\n\\u3053\\u308c\\u306f\\u6b21\\u306e\\u3088\\u3046\\u306b\\u4f7f\\u7528\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n```ts\\nimport createMyTheme from './styles/createMyTheme';\\n\\nconst theme = createMyTheme({ appDrawer: { breakpoint: 'md' }});\\n```\\n\\n## Usage of `component` prop\\n\\nMany Material-UI components allow you to replace their root node via a `component` prop, this will be detailed in the component's API documentation. For example, a Button's root node can be replaced with a React Router's Link, and any additional props that are passed to Button, such as `to`, will be spread to the Link component. For a code example concerning Button and react-router-dom checkout [these demos](/guides/composition/#routing-libraries).\\n\\nTo be able to use props of such a Material-UI component on their own, props should be used with type arguments. Otherwise, the `component` prop will not be present in the props of the Material-UI component.\\n\\nThe examples below use `TypographyProps` but the same will work for any component which has props defined with `OverrideProps`.\\n\\nThe following `CustomComponent` component has the same props as the `Typography` component.\\n\\n```ts\\nfunction CustomComponent(props: TypographyProps<'a', { component: 'a' }>) {\\n  /* ... */\\n}\\n```\\n\\nNow the `CustomComponent` can be used with a `component` prop which should be set to `'a'`. In addition, the `CustomComponent` will have all props of a `<a>` HTML element. The other props of the `Typography` component will also be present in props of the `CustomComponent`.\\n\\nIt is possible to have generic `CustomComponent` which will accept any React component, custom and HTML elements.\\n\\n```ts\\nfunction GenericCustomComponent<C extends React.ElementType>(\\n  props: TypographyProps<C, { component?: C }>,\\n) {\\n  /* ... */\\n}\\n```\\n\\nNow if the `GenericCustomComponent` will be used with a `component` prop provided, it should also have all props required by the provided component.\\n\\n```ts\\nfunction ThirdPartyComponent({ prop1 } : { prop1: string }) {\\n  return <div />\\n}\\n// ...\\n<GenericCustomComponent component={ThirdPartyComponent} prop1=\\\"some value\\\" />;\\n```\\n\\nThe `prop1` became required for the `GenericCustomComponent` as the `ThirdPartyComponent` has it as a requirement.\\n\\n\\u3059\\u3079\\u3066\\u306e\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u304c\\u3001\\u6e21\\u3059\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u30bf\\u30a4\\u30d7\\u3092\\u5b8c\\u5168\\u306b\\u30b5\\u30dd\\u30fc\\u30c8\\u3057\\u3066\\u3044\\u308b\\u308f\\u3051\\u3067\\u306f\\u3042\\u308a\\u307e\\u305b\\u3093\\u3002 If you encounter a component that rejects its `component` props in TypeScript please open an issue. \\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u30d7\\u30ed\\u30c3\\u30d7\\u3092\\u6c4e\\u7528\\u5316\\u3059\\u308b\\u3053\\u3068\\u3067\\u3001\\u3053\\u306e\\u554f\\u984c\\u3092\\u89e3\\u6c7a\\u3059\\u308b\\u305f\\u3081\\u306e\\u53d6\\u308a\\u7d44\\u307f\\u304c\\u7d9a\\u3051\\u3089\\u308c\\u3066\\u3044\\u307e\\u3059\\u3002\\n\\n## `value` \\u304a\\u3088\\u3073\\u30a4\\u30d9\\u30f3\\u30c8\\u30cf\\u30f3\\u30c9\\u30e9\\u306e\\u51e6\\u7406\\n\\n\\u30e6\\u30fc\\u30b6\\u5165\\u529b\\u306b\\u95a2\\u9023\\u3059\\u308b\\u591a\\u304f\\u306e\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306f\\u3001\\u73fe\\u5728\\u306e `value`\\u3092\\u542b\\u3080`value`\\u30d7\\u30ed\\u30d1\\u30c6\\u30a3\\u307e\\u305f\\u306f\\u30a4\\u30d9\\u30f3\\u30c8\\u30cf\\u30f3\\u30c9\\u30e9\\u3092\\u63d0\\u4f9b\\u3057\\u307e\\u3059\\u3002 \\u307b\\u3068\\u3093\\u3069\\u306e\\u5834\\u5408\\u3001`\\u5024`\\u306e\\u307f\\u304c\\u51e6\\u7406\\u3055\\u308c\\u307e\\u3059\\u3002 \\u30aa\\u30d6\\u30b8\\u30a7\\u30af\\u30c8\\u3084\\u914d\\u5217\\u306a\\u3069\\u306e\\u4efb\\u610f\\u306e\\u30bf\\u30a4\\u30d7\\u3092\\u4f7f\\u7528\\u3067\\u304d\\u307e\\u3059\\u3002\\n\\n\\u305f\\u3060\\u3057\\u3001\\u305d\\u306e\\u30bf\\u30a4\\u30d7\\u306f\\u3001\\u305f\\u3068\\u3048\\u3070`Select`\\u307e\\u305f\\u306f`RadioGroup`\\u306a\\u3069\\u3001\\u30b3\\u30f3\\u30dd\\u30fc\\u30cd\\u30f3\\u30c8\\u306e\\u5b50\\u306b\\u4f9d\\u5b58\\u3059\\u308b\\u72b6\\u6cc1\\u3067\\u306f\\u3001\\u30b3\\u30f3\\u30d1\\u30a4\\u30eb\\u6642\\u306b\\u691c\\u8a3c\\u3067\\u304d\\u307e\\u305b\\u3093\\u3002 \\u3064\\u307e\\u308a\\u3001soundest \\u30aa\\u30d7\\u30b7\\u30e7\\u30f3\\u306f\\u3001\\u305d\\u308c\\u3092`unknown`\\u3068\\u3057\\u3066\\u5165\\u529b\\u3057\\u3001\\u305d\\u306e\\u578b\\u3092\\u3069\\u306e\\u3088\\u3046\\u306b\\u7d5e\\u308a\\u8fbc\\u3080\\u304b\\u3092\\u958b\\u767a\\u8005\\u306b\\u6c7a\\u5b9a\\u3055\\u305b\\u308b\\u3053\\u3068\\u3067\\u3059\\u3002 [\\u540c\\u3058\\u7406\\u7531\\u3067` event.target` \\u306f React\\u3067\\u306f\\u4e00\\u822c\\u7684\\u3067\\u306f\\u306a\\u3044\\u305f\\u3081](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682)\\u3053\\u308c\\u3089\\u306e\\u5834\\u5408\\u306b\\u30b8\\u30a7\\u30cd\\u30ea\\u30c3\\u30af \\u30bf\\u30a4\\u30d7\\u3092\\u4f7f\\u7528\\u3059\\u308b\\u53ef\\u80fd\\u6027\\u306f\\u63d0\\u4f9b\\u3057\\u307e\\u305b\\u3093\\u3002\\n\\nThe demos include typed variants that use type casting. \\u3059\\u3079\\u3066\\u306e\\u578b\\u304c\\u5358\\u4e00\\u306e\\u30d5\\u30a1\\u30a4\\u30eb\\u5185\\u306b\\u3042\\u308a\\u3001\\u975e\\u5e38\\u306b\\u57fa\\u672c\\u7684\\u3067\\u3042\\u308b\\u305f\\u3081\\u3001\\u3053\\u308c\\u306f\\u8a31\\u5bb9\\u3067\\u304d\\u308b\\u30c8\\u30ec\\u30fc\\u30c9\\u30aa\\u30d5\\u3067\\u3059\\u3002 \\u540c\\u3058\\u30c8\\u30ec\\u30fc\\u30c9\\u30aa\\u30d5\\u304c\\u53d7\\u3051\\u5165\\u308c\\u3089\\u308c\\u308b\\u304b\\u3069\\u3046\\u304b\\u306f\\u3001\\u81ea\\u5206\\u3067\\u5224\\u65ad\\u3059\\u308b\\u5fc5\\u8981\\u304c\\u3042\\u308a\\u307e\\u3059\\u3002 The library types are be strict by default and loose via opt-in.\"},EsAO:function(e,n){function t(e){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id=\"EsAO\"},Of34:function(e,n){e.exports=\"# TypeScript\\n\\n<p class=\\\"description\\\">\\u501f\\u52a9 TypeScript\\uff0c\\u4f60\\u53ef\\u4ee5\\u4e3a JavaScript \\u6dfb\\u52a0\\u9759\\u6001\\u7c7b\\u578b\\uff0c\\u4ece\\u800c\\u63d0\\u9ad8\\u4ee3\\u7801\\u8d28\\u91cf\\u53ca\\u5f00\\u53d1\\u8005\\u7684\\u5de5\\u4f5c\\u6548\\u7387\\u3002</p>\\n\\nMaterial-UI requires a minimum version of TypeScript 3.2.\\n\\n\\u8bf7\\u67e5\\u770b\\u4e00\\u4e0b [Create React App with TypeScript](https://github.com/mui-org/material-ui/tree/master/examples/create-react-app-with-typescript) \\u7684\\u4f8b\\u5b50\\u3002\\n\\n\\u4e3a\\u4e86\\u8ba9\\u7c7b\\u578b\\u68c0\\u67e5\\u8d77\\u4f5c\\u7528\\uff0c\\u4f60\\u5fc5\\u987b\\u5728 `tsconfig.json` \\u91cc\\u542f\\u7528\\u4ee5\\u4e0b\\u9009\\u9879\\uff1a\\n\\n```json\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"lib\\\": [\\\"es6\\\", \\\"dom\\\"],\\n    \\\"noImplicitAny\\\": true,\\n    \\\"noImplicitThis\\\": true,\\n    \\\"strictNullChecks\\\": true\\n  }\\n}\\n```\\n\\n\\u5bf9\\u6bcf\\u4e2a\\u53d1\\u5e03\\u5728 `@types/` \\u547d\\u540d\\u7a7a\\u95f4\\u4e0b\\u7684\\u7c7b\\u578b\\u58f0\\u660e\\u5305\\uff0c\\u540c\\u6837\\u9700\\u8981\\u542f\\u7528\\u4e25\\u683c\\u6a21\\u5f0f\\uff08strict mode\\uff09\\u3002 \\u4f7f\\u7528\\u4e0d\\u592a\\u4e25\\u683c\\u7684 `tsconfig.json` \\u6216\\u7701\\u7565\\u67d0\\u4e9b\\u5e93\\u53ef\\u80fd\\u4f1a\\u5e26\\u6765\\u4e00\\u4e9b\\u9519\\u8bef\\u3002 \\u4e3a\\u4e86\\u6700\\u597d\\u7684\\u7c7b\\u578b\\u68c0\\u67e5\\u4f53\\u9a8c\\uff0c\\u6211\\u4eec\\u5efa\\u8bae\\u8bbe\\u7f6e `\\\"strict\\\": true` \\u3002\\n\\n## `withStyles` \\u7684\\u4f7f\\u7528\\n\\n\\u5728 TypeScript \\u4e2d\\u4f7f\\u7528 `withStyles` \\u53ef\\u80fd\\u6709\\u70b9\\u68d8\\u624b\\uff0c\\u4f46\\u6709\\u4e00\\u4e9b\\u5b9e\\u7528\\u7a0b\\u5e8f\\u53ef\\u4ee5\\u5e2e\\u52a9\\u63d0\\u9ad8\\u4f7f\\u7528\\u611f\\u53d7\\u3002\\n\\n### \\u4f7f\\u7528 `createStyles` \\u6765\\u675c\\u7edd\\u7c7b\\u578b\\u6269\\u5c55\\n\\n\\u6709\\u4e00\\u4e2a\\u9020\\u6210\\u6df7\\u6dc6\\u7684\\u5e38\\u89c1\\u539f\\u56e0\\u662f TypeScript\\u7684 [\\u7c7b\\u578b\\u6269\\u5c55](https://mariusschulz.com/blog/typescript-2-1-literal-type-widening)\\uff0c\\u56e0\\u6b64\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e0d\\u4f1a\\u50cf\\u9884\\u671f\\u90a3\\u6837\\u5de5\\u4f5c\\uff1a\\n\\n```ts\\nconst styles = {\\n  root\\uff1a {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  }\\n};\\n\\nwithStyles\\uff08styles\\uff09;\\n//         ^^^^^^\\n//        \\u5c5e\\u6027 'flexDirection' \\u7684\\u7c7b\\u578b\\u662f\\u4e0d\\u517c\\u5bb9\\u7684\\u3002\\n//           'string' \\u7c7b\\u578b\\u4e0d\\u80fd\\u8d4b\\u4e88\\u7ed9\\u8fd9\\u4e9b\\u7c7b\\u578b\\uff1a'\\\"-moz-initial\\\" | \\\"inherit\\\" | \\\"initial\\\" | \\\"revert\\\" | \\\"unset\\\" | \\\"column\\\" | \\\"column-reverse\\\" | \\\"row\\\"...'\\u3002\\n```\\n\\n\\u95ee\\u9898\\u662f `flexDirection` \\u5c5e\\u6027\\u7684\\u7c7b\\u578b\\u88ab\\u63a8\\u65ad\\u4e3a `string`\\uff0c\\u8fd9\\u6837\\u592a\\u968f\\u610f\\u4e86\\u3002 \\u8981\\u89e3\\u51b3\\u6b64\\u95ee\\u9898\\uff0c\\u60a8\\u53ef\\u4ee5\\u5c06\\u6837\\u5f0f\\u5bf9\\u8c61\\u76f4\\u63a5\\u4f20\\u9012\\u7ed9 `withStyles`\\uff1a\\n\\n```ts\\nwithStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n```\\n\\n\\u7136\\u800c\\uff0c\\u5982\\u679c\\u60a8\\u5c1d\\u8bd5\\u8ba9\\u6837\\u5f0f\\u968f\\u4e3b\\u9898\\u800c\\u53d8\\u5316\\uff0c\\u7c7b\\u578b\\u6269\\u5c55\\u4f1a\\u518d\\u6b21\\u663e\\u793a\\u5176\\u4e0d\\u600e\\u4e48\\u96c5\\u89c2\\u7684\\u90e8\\u5206\\uff1a\\n\\n```ts\\nwithStyles(({ palette, spacing }) => ({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n}));\\n```\\n\\n\\u8fd9\\u662f\\u56e0\\u4e3a TypeScript [\\u6269\\u5c55\\u4e86\\u51fd\\u6570\\u8868\\u8fbe\\u5f0f](https://github.com/Microsoft/TypeScript/issues/241)\\u7684\\u8fd4\\u56de\\u7c7b\\u578b\\u3002\\n\\n\\u56e0\\u6b64\\uff0c\\u6211\\u4eec\\u5efa\\u8bae\\u4f7f\\u7528\\u6211\\u4eec\\u7684 `createStyles` \\u5e2e\\u52a9\\u51fd\\u6570\\u6765\\u6784\\u9020\\u6837\\u5f0f\\u89c4\\u5219\\u5bf9\\u8c61\\uff1a\\n\\n```ts\\n// \\u4e0d\\u4f9d\\u8d56\\u4e8e\\u4e3b\\u9898\\u7684\\u6837\\u5f0f\\nconst styles = createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n\\n// \\u4f9d\\u8d56\\u4e8e\\u4e3b\\u9898\\u7684\\u6837\\u5f0f\\nconst styles = ({ palette, spacing }: Theme) => createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n});\\n```\\n\\n`createStyles` \\u53ea\\u662f\\u8eab\\u4efd\\u51fd\\u6570\\uff1b\\u5b83\\u4e0d\\u4f1a\\u5728\\u8fd0\\u884c\\u65f6\\u201c\\u505a\\u4efb\\u4f55\\u4e8b\\u60c5\\u201d\\uff0c\\u53ea\\u662f\\u5728\\u7f16\\u8bd1\\u65f6\\u6307\\u5bfc\\u7c7b\\u578b\\u63a8\\u65ad\\u3002\\n\\n### Media queries\\uff08\\u5a92\\u4f53\\u67e5\\u8be2\\uff09\\n\\n`withStyles` \\u5141\\u8bb8\\u6837\\u5f0f\\u5bf9\\u8c61\\u5177\\u6709\\u9876\\u7ea7\\u5a92\\u4f53\\u67e5\\u8be2\\u7684\\u6743\\u9650\\uff0c\\u5982\\u4e0b\\u6240\\u793a\\uff1a\\n\\n```ts\\nconst styles = createStyles({\\n  root: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    root: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\n\\u4f46\\u662f\\uff0c\\u4e3a\\u4e86\\u5141\\u8bb8\\u8fd9\\u4e9b\\u6837\\u5f0f\\u4f20\\u9012 TypeScript\\uff0c\\u9274\\u4e8eCSS \\u7c7b\\u7684\\u540d\\u79f0\\u548c\\u5b9e\\u9645\\u7684 CSS \\u5c5e\\u6027\\u540d\\u79f0\\u4e0d\\u4e00\\u81f4\\uff0c\\u5b9a\\u4e49\\u5fc5\\u987b\\u662f\\u6a21\\u7cca\\u7684\\u3002 \\u7531\\u4e8e\\u7c7b\\u540d\\u79f0\\u5e94\\u4e0e CSS \\u5c5e\\u6027\\u76f8\\u540c\\uff0c\\u56e0\\u6b64\\u5e94\\u907f\\u514d\\u4f7f\\u7528\\u3002\\n\\n```ts\\n// \\u8fd9\\u6837\\u662f\\u9519\\u8bef\\u7684\\uff0c\\u7531\\u4e8e TypeScript \\u8ba4\\u4e3a `@media (min-width: 960px)` \\u662f\\u4e00\\u4e2a\\u7c7b\\u540d\\n// \\u5e76\\u4e14 `content` \\u662f css \\u5c5e\\u6027\\nconst ambiguousStyles = createStyles({\\n  content: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    content: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n\\n// \\u8fd9\\u6837\\u5b9a\\u4e49\\u5c31\\u53ef\\u4ee5\\nconst ambiguousStyles = createStyles({\\n  contentClass: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    contentClass: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\n### \\u4f7f\\u7528 `WithStyles` \\u6765\\u6269\\u5145\\u4f60\\u7684\\u5c5e\\u6027\\n\\n\\u7531\\u4e8e\\u7528 `withStyles(styles)` \\u88c5\\u9970\\u7684\\u7ec4\\u4ef6\\u88ab\\u6ce8\\u5165\\u4e86\\u4e00\\u4e2a\\u7279\\u6b8a\\u7684 `classes` \\u5c5e\\u6027\\uff0c\\u60a8\\u9700\\u8981\\u76f8\\u5e94\\u5730\\u5b9a\\u4e49\\u5176\\u5c5e\\u6027\\uff1a\\n\\n```ts\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props {\\n  // \\u672a\\u88ab\\u6ce8\\u5165\\u6837\\u5f0f\\u7684\\u5c5e\\u6027\\n  foo: number;\\n  bar: boolean;\\n  // \\u88ab\\u6ce8\\u5165\\u6837\\u5f0f\\u7684\\u5c5e\\u6027\\n  classes: {\\n    root: string;\\n    paper: string;\\n    button: string;\\n  };\\n}\\n```\\n\\n\\u7136\\u800c\\uff0c\\u8fd9\\u662f\\u4e0d\\u662f\\u5f88 [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) \\uff0c\\u56e0\\u4e3a\\u5b83\\u9700\\u8981\\u4f60\\u5728\\u4e24\\u4e2a\\u4e0d\\u540c\\u7684\\u5730\\u65b9\\u4fdd\\u6301\\u7c7b\\u540d\\uff08`'root'`\\uff0c `'paper'`\\uff0c `'button'`\\uff0c...\\uff09\\u3002 \\u6211\\u4eec\\u63d0\\u4f9b\\u4e86\\u4e00\\u4e2a\\u7c7b\\u578b\\u64cd\\u4f5c\\u7b26 `WithStyles` \\u6765\\u5e2e\\u52a9\\u89e3\\u51b3\\u8fd9\\u4e2a\\u95ee\\u9898\\uff0c\\u56e0\\u6b64\\u60a8\\u53ef\\u4ee5\\u76f4\\u63a5\\u5199\\u5165\\uff1a:\\n\\n```ts\\nimport { WithStyles, createStyles } from '@material-ui/core';\\n\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props extends WithStyles<typeof styles> {\\n  foo: number;\\n  bar: boolean;\\n}\\n```\\n\\n### \\u88c5\\u9970\\u7ec4\\u4ef6\\n\\n\\u5c06 `withStyles(styles)` \\u4f5c\\u4e3a\\u51fd\\u6570\\u6765\\u5982\\u671f\\u4f7f\\u7528\\uff1a\\n\\n```tsx\\nconst DecoratedSFC = withStyles(styles)(({ text, type, color, classes }: Props) => (\\n  <Typography variant={type} color={color} classes={classes}>\\n    {text}\\n  </Typography>\\n));\\n\\nconst DecoratedClass = withStyles(styles)(\\n  class extends React.Component<Props> {\\n    render() {\\n      const { text, type, color, classes } = this.props\\n      return (\\n        <Typography variant={type} color={color} classes={classes}>\\n          {text}\\n        </Typography>\\n      );\\n    }\\n  }\\n);\\n```\\n\\n\\u4e0d\\u5e78\\u7684\\u662f\\uff0c\\u7531\\u4e8e[TypeScript \\u88c5\\u9970\\u5668\\u73b0\\u6709\\u7684\\u9650\\u5236 ](https://github.com/Microsoft/TypeScript/issues/4881)\\uff0c `withStyles(styles)` \\u4e0d\\u80fd\\u7528\\u5728 TypeScript \\u4e2d\\u4f5c\\u4e3a\\u4e00\\u4e2a\\u88c5\\u9970\\u5668\\u3002\\n\\n## \\u81ea\\u5b9a\\u4e49 `\\u4e3b\\u9898`\\n\\n\\u5c06\\u81ea\\u5b9a\\u4e49\\u5c5e\\u6027\\u6dfb\\u52a0\\u5230`\\u4e3b\\u9898`\\u4e2d\\u65f6\\uff0c\\u60a8\\u53ef\\u4ee5\\u901a\\u8fc7\\u4ee5\\u5f3a\\u7c7b\\u578b\\u7684\\u65b9\\u5f0f\\u5b9e\\u73b0 [TypeScript \\u7684\\u6a21\\u5757\\u6269\\u5145](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation)\\u800c\\u7ee7\\u7eed\\u4f7f\\u7528\\u5b83 \\u3002\\n\\n\\u4ee5\\u4e0b\\u793a\\u4f8b\\u6dfb\\u52a0\\u4e86\\u4e00\\u4e2a `appDrawer` \\u5c5e\\u6027\\uff0c\\u5e76\\u5c06\\u5176\\u5408\\u5e76\\u5230\\u7531 `material-ui` \\u63d0\\u4f9b\\u7684\\u5c5e\\u6027\\u4e2d\\uff1a\\n\\n```ts\\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\\n\\ndeclare module '@material-ui/core/styles/createMuiTheme' {\\n  interface Theme {\\n    appDrawer: {\\n      width: React.CSSProperties['width']\\n      breakpoint: Breakpoint\\n    }\\n  }\\n  // \\u4f7f\\u7528 `createMuiTheme` \\u6765\\u914d\\u7f6e\\n  interface ThemeOptions {\\n    appDrawer?: {\\n      width?: React.CSSProperties['width']\\n      breakpoint?: Breakpoint\\n    }\\n  }\\n}\\n```\\n\\n\\u4ee5\\u53ca\\u4e00\\u4e2a\\u5e26\\u6709\\u5176\\u4ed6\\u9ed8\\u8ba4\\u9009\\u9879\\u7684\\u81ea\\u5b9a\\u4e49\\u4e3b\\u9898\\u4ed3\\u5e93\\uff1a\\n\\n**./styles/createMyTheme**:\\n\\n```ts\\nimport { createMuiTheme, ThemeOptions } from '@material-ui/core/styles';\\n\\nexport default function createMyTheme(options: ThemeOptions) {\\n  return createMuiTheme({\\n    appDrawer: {\\n      width: 225,\\n      breakpoint: 'lg',\\n    },\\n    ...options,\\n  })\\n}\\n```\\n\\n\\u4e5f\\u53ef\\u4ee5\\u8fd9\\u6837\\u4f7f\\u7528\\uff1a\\n\\n```ts\\nimport createMyTheme from './styles/createMyTheme';\\n\\nconst theme = createMyTheme({ appDrawer: { breakpoint: 'md' }});\\n```\\n\\n## `component` \\u5c5e\\u6027\\u7528\\u6cd5\\n\\nMaterial-UI \\u7684\\u8bb8\\u591a\\u7ec4\\u4ef6\\u5141\\u8bb8\\u4f60\\u901a\\u8fc7 `component` \\u5c5e\\u6027\\u66ff\\u6362\\u5b83\\u4eec\\u7684\\u6839\\u8282\\u70b9\\uff0c\\u8fd9\\u5c06\\u5728\\u7ec4\\u4ef6\\u7684 API \\u6587\\u6863\\u4e2d\\u8be6\\u7ec6\\u8bf4\\u660e\\u3002 \\u4f8b\\u5982\\uff0c\\u4e00\\u4e2a\\u6309\\u94ae\\uff08Button\\uff09\\u7684\\u6839\\u8282\\u70b9\\u53ef\\u4ee5\\u88ab\\u66ff\\u6362\\u6210\\u4e00\\u4e2a React Router \\u7684\\u94fe\\u63a5\\uff08Link\\uff09\\uff0c\\u5e76\\u4e14\\u4f20\\u5165\\u6309\\u94ae\\uff08Button\\uff09\\u7684\\u4efb\\u4f55\\u989d\\u5916\\u7684\\u5c5e\\u6027\\uff0c\\u4f8b\\u5982 `to` \\uff0c\\u4f1a\\u88ab\\u4f20\\u9012\\u5230\\u94fe\\u63a5\\uff08Link\\uff09\\u7ec4\\u4ef6\\u3002 \\u5173\\u4e8e\\u6309\\u94ae\\u548c react-router-dom \\u7684\\u4ee3\\u7801\\u793a\\u4f8b\\u67e5\\u770b[\\u8fd9\\u4e9b\\u793a\\u4f8b](/guides/composition/#routing-libraries)\\u3002\\n\\nTo be able to use props of such a Material-UI component on their own, props should be used with type arguments. Otherwise, the `component` prop will not be present in the props of the Material-UI component.\\n\\nThe examples below use `TypographyProps` but the same will work for any component which has props defined with `OverrideProps`.\\n\\nThe following `CustomComponent` component has the same props as the `Typography` component.\\n\\n```ts\\nfunction CustomComponent(props: TypographyProps<'a', { component: 'a' }>) {\\n  /* ... */\\n}\\n```\\n\\nNow the `CustomComponent` can be used with a `component` prop which should be set to `'a'`. In addition, the `CustomComponent` will have all props of a `<a>` HTML element. The other props of the `Typography` component will also be present in props of the `CustomComponent`.\\n\\nIt is possible to have generic `CustomComponent` which will accept any React component, custom and HTML elements.\\n\\n```ts\\nfunction GenericCustomComponent<C extends React.ElementType>(\\n  props: TypographyProps<C, { component?: C }>,\\n) {\\n  /* ... */\\n}\\n```\\n\\nNow if the `GenericCustomComponent` will be used with a `component` prop provided, it should also have all props required by the provided component.\\n\\n```ts\\nfunction ThirdPartyComponent({ prop1 } : { prop1: string }) {\\n  return <div />\\n}\\n// ...\\n<GenericCustomComponent component={ThirdPartyComponent} prop1=\\\"some value\\\" />;\\n```\\n\\nThe `prop1` became required for the `GenericCustomComponent` as the `ThirdPartyComponent` has it as a requirement.\\n\\n\\u4f46\\u662f\\uff0c\\u5e76\\u4e0d\\u662f\\u6bcf\\u4e2a\\u7ec4\\u4ef6\\u90fd\\u5b8c\\u5168\\u652f\\u6301\\u60a8\\u4f20\\u5165\\u7684\\u4efb\\u4f55\\u7ec4\\u4ef6\\u7c7b\\u578b\\u3002 \\u5982\\u679c\\u60a8\\u5728 TypeScript \\u4e2d\\u9047\\u5230\\u4e00\\u4e2a\\u4e0d\\u63a5\\u53d7\\u5176 `component` \\u5c5e\\u6027\\u7684\\u7ec4\\u4ef6\\uff0c\\u8bf7\\u63d0\\u8d77\\u4e00\\u4e2a issue\\u3002 \\u901a\\u8fc7\\u4f7f\\u7ec4\\u4ef6\\u9053\\u5177\\u5177\\u6709\\u901a\\u7528\\u6027\\uff0c\\u4e00\\u76f4\\u5728\\u52aa\\u529b\\u89e3\\u51b3\\u8fd9\\u4e2a\\u95ee\\u9898\\u3002\\n\\n## \\u5904\\u7406`\\u503c`\\u548c\\u4e8b\\u4ef6\\u5904\\u7406\\u5668\\n\\n\\u5f88\\u591a\\u4e0e\\u7528\\u6237\\u8f93\\u5165\\u6709\\u5173\\u7684\\u7ec4\\u4ef6\\u4f1a\\u63d0\\u4f9b\\u4e00\\u4e2a `value` \\u5c5e\\u6027\\u6216\\u8005\\u5305\\u542b\\u5f53\\u524d`\\u503c`\\u7684\\u4e8b\\u4ef6\\u5904\\u7406\\u5668\\u3002 \\u5927\\u591a\\u6570\\u60c5\\u51b5\\u4e0b`\\u503c`\\u53ea\\u5728 React \\u5185\\u88ab\\u5904\\u7406\\uff0c\\u8fd9\\u6837\\u7684\\u8bdd\\u5b83\\u80fd\\u591f\\u662f\\u4efb\\u4f55\\u7c7b\\u578b\\uff0c\\u8b6c\\u5982 objects \\u6216\\u8005 arrays\\u3002\\n\\n\\u7136\\u800c\\uff0c\\u5982\\u679c\\u662f\\u5b83\\u4f9d\\u8d56\\u4e8e\\u7ec4\\u4ef6\\u5b50\\u9879\\u7684\\u60c5\\u51b5\\uff0c\\u6b64\\u7c7b\\u578b\\u65e0\\u6cd5\\u5728\\u7f16\\u8bd1\\u65f6\\u88ab\\u9a8c\\u8bc1\\uff0c\\u4f8b\\u5982\\u5bf9\\u4e8e `Select` \\u6216\\u8005 `RadioGroup` \\u6765\\u8bf4\\u3002 \\u8fd9\\u610f\\u5473\\u7740\\u7559\\u7ed9\\u6211\\u4eec\\u7684\\u6700\\u5408\\u9002\\u7684\\u9009\\u9879\\u662f\\u5c06\\u5176\\u8f93\\u5165\\u4e3a `unknown` \\u5e76\\u8ba9\\u5f00\\u53d1\\u8005\\u81ea\\u884c\\u51b3\\u5b9a\\u5982\\u4f55\\u6765\\u7f29\\u5c0f\\u8be5\\u7c7b\\u578b\\u3002 \\u4e0e [`event.target` \\u5728 React \\u4e2d\\u5e76\\u4e0d\\u901a\\u7528\\u7684\\u539f\\u56e0](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682)\\u76f8\\u540c\\uff0c\\u6211\\u4eec\\u5e76\\u4e0d\\u63a8\\u8350\\u60a8\\u5728\\u8fd9\\u4e9b\\u6848\\u4f8b\\u4e2d\\u5c1d\\u8bd5\\u4f7f\\u7528\\u4e00\\u4e2a\\u901a\\u7528\\u7684\\u7c7b\\u578b\\u3002\\n\\nThe demos include typed variants that use type casting. \\u9274\\u4e8e\\u6240\\u6709\\u7684\\u7c7b\\u578b\\u90fd\\u4f4d\\u4e8e\\u4e00\\u4e2a\\u6587\\u4ef6\\u4e2d\\uff0c\\u5e76\\u4e14\\u90fd\\u662f\\u975e\\u5e38\\u57fa\\u672c\\u7684\\uff0c\\u8fd9\\u6837\\u7684\\u6298\\u8877\\u53ef\\u4ee5\\u63a5\\u53d7\\u3002 \\u60a8\\u5fc5\\u987b\\u81ea\\u884c\\u51b3\\u5b9a\\u662f\\u5426\\u80fd\\u591f\\u63a5\\u53d7\\u540c\\u6837\\u7684\\u6298\\u8877\\u3002 The library types are be strict by default and loose via opt-in.\"},PQBq:function(e,n){e.exports=\"# TypeScript\\n\\n<p class=\\\"description\\\">Vous pouvez ajouter du typage statique \\xe0 JavaScript pour am\\xe9liorer la productivit\\xe9 des d\\xe9veloppeurs et la qualit\\xe9 du code gr\\xe2ce \\xe0 TypeScript.</p>\\n\\nMaterial-UI requires a minimum version of TypeScript 3.2.\\n\\nHave a look at the [Create React App with TypeScript](https://github.com/mui-org/material-ui/tree/master/examples/create-react-app-with-typescript) example.\\n\\nIn order for types to work, you have to at least have the following options enabled in your `tsconfig.json`:\\n\\n```json\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"lib\\\": [\\\"es6\\\", \\\"dom\\\"],\\n    \\\"noImplicitAny\\\": true,\\n    \\\"noImplicitThis\\\": true,\\n    \\\"strictNullChecks\\\": true\\n  }\\n}\\n```\\n\\nThe strict mode options are the same that are required for every types package published in the `@types/` namespace. Using a less strict `tsconfig.json` or omitting some of the libraries might cause errors. To get the best type experience with the types we recommend setting `\\\"strict\\\": true`.\\n\\n## Usage of `withStyles`\\n\\nUsing `withStyles` in TypeScript can be a little tricky, but there are some utilities to make the experience as painless as possible.\\n\\n### Using `createStyles` to defeat type widening\\n\\nA frequent source of confusion is TypeScript's [type widening](https://mariusschulz.com/blog/typescript-2-1-literal-type-widening), which causes this example not to work as expected:\\n\\n```ts\\nconst styles = {\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  }\\n};\\n\\nwithStyles(styles);\\n//         ^^^^^^\\n//         Types of property 'flexDirection' are incompatible.\\n//           Type 'string' is not assignable to type '\\\"-moz-initial\\\" | \\\"inherit\\\" | \\\"initial\\\" | \\\"revert\\\" | \\\"unset\\\" | \\\"column\\\" | \\\"column-reverse\\\" | \\\"row\\\"...'.\\n```\\n\\nThe problem is that the type of the `flexDirection` property is inferred as `string`, which is too arbitrary. To fix this, you can pass the styles object directly to `withStyles`:\\n\\n```ts\\nwithStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n```\\n\\nHowever type widening rears its ugly head once more if you try to make the styles depend on the theme:\\n\\n```ts\\nwithStyles(({ palette, spacing }) => ({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n}));\\n```\\n\\nThis is because TypeScript [widens the return types of function expressions](https://github.com/Microsoft/TypeScript/issues/241).\\n\\nBecause of this, using the `createStyles` helper function to construct your style rules object is recommended:\\n\\n```ts\\n// Non-dependent styles\\nconst styles = createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n\\n// Theme-dependent styles\\nconst styles = ({ palette, spacing }: Theme) => createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n});\\n```\\n\\n`createStyles` is just the identity function; it doesn't \\\"do anything\\\" at runtime, just helps guide type inference at compile time.\\n\\n### Media queries\\n\\n`withStyles` allows a styles object with top level media-queries like so:\\n\\n```ts\\nconst styles = createStyles({\\n  root: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    root: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\nHowever to allow these styles to pass TypeScript, the definitions have to be ambiguous concerning names for CSS classes and actual CSS property names. Due to this class names that are equal to CSS properties should be avoided.\\n\\n```ts\\n// error because TypeScript thinks `@media (min-width: 960px)` is a class name\\n// and `content` is the css property\\nconst ambiguousStyles = createStyles({\\n  content: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    content: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n\\n// works just fine\\nconst ambiguousStyles = createStyles({\\n  contentClass: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    contentClass: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\n### Augmenting your props using `WithStyles`\\n\\nSince a component decorated with `withStyles(styles)` gets a special `classes` prop injected, you will want to define its props accordingly:\\n\\n```ts\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props {\\n  // non-style props\\n  foo: number;\\n  bar: boolean;\\n  // injected style props\\n  classes: {\\n    root: string;\\n    paper: string;\\n    button: string;\\n  };\\n}\\n```\\n\\nHowever this isn't very [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) because it requires you to maintain the class names (`'root'`, `'paper'`, `'button'`, ...) in two different places. We provide a type operator `WithStyles` to help with this, so that you can just write:\\n\\n```ts\\nimport { WithStyles, createStyles } from '@material-ui/core';\\n\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props extends WithStyles<typeof styles> {\\n  foo: number;\\n  bar: boolean;\\n}\\n```\\n\\n### Decorating components\\n\\nApplying `withStyles(styles)` as a function works as expected:\\n\\n```tsx\\nconst DecoratedSFC = withStyles(styles)(({ text, type, color, classes }: Props) => (\\n  <Typography variant={type} color={color} classes={classes}>\\n    {text}\\n  </Typography>\\n));\\n\\nconst DecoratedClass = withStyles(styles)(\\n  class extends React.Component<Props> {\\n    render() {\\n      const { text, type, color, classes } = this.props\\n      return (\\n        <Typography variant={type} color={color} classes={classes}>\\n          {text}\\n        </Typography>\\n      );\\n    }\\n  }\\n);\\n```\\n\\nUnfortunately due to a [current limitation of TypeScript decorators](https://github.com/Microsoft/TypeScript/issues/4881), `withStyles(styles)` can't be used as a decorator in TypeScript.\\n\\n## Customization of `Theme`\\n\\nWhen adding custom properties to the `Theme`, you may continue to use it in a strongly typed way by exploiting [TypeScript's module augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation).\\n\\nThe following example adds an `appDrawer` property that is merged into the one exported by `material-ui`:\\n\\n```ts\\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\\n\\ndeclare module '@material-ui/core/styles/createMuiTheme' {\\n  interface Theme {\\n    appDrawer: {\\n      width: React.CSSProperties['width']\\n      breakpoint: Breakpoint\\n    }\\n  }\\n  // allow configuration using `createMuiTheme`\\n  interface ThemeOptions {\\n    appDrawer?: {\\n      width?: React.CSSProperties['width']\\n      breakpoint?: Breakpoint\\n    }\\n  }\\n}\\n```\\n\\nAnd a custom theme factory with additional defaulted options:\\n\\n**./styles/createMyTheme**:\\n\\n```ts\\nimport { createMuiTheme, ThemeOptions } from '@material-ui/core/styles';\\n\\nexport default function createMyTheme(options: ThemeOptions) {\\n  return createMuiTheme({\\n    appDrawer: {\\n      width: 225,\\n      breakpoint: 'lg',\\n    },\\n    ...options,\\n  })\\n}\\n```\\n\\nThis could be used like:\\n\\n```ts\\nimport createMyTheme from './styles/createMyTheme';\\n\\nconst theme = createMyTheme({ appDrawer: { breakpoint: 'md' }});\\n```\\n\\n## Usage of `component` prop\\n\\nMany Material-UI components allow you to replace their root node via a `component` prop, this will be detailed in the component's API documentation. For example, a Button's root node can be replaced with a React Router's Link, and any additional props that are passed to Button, such as `to`, will be spread to the Link component. For a code example concerning Button and react-router-dom checkout [these demos](/guides/composition/#routing-libraries).\\n\\nTo be able to use props of such a Material-UI component on their own, props should be used with type arguments. Otherwise, the `component` prop will not be present in the props of the Material-UI component.\\n\\nThe examples below use `TypographyProps` but the same will work for any component which has props defined with `OverrideProps`.\\n\\nThe following `CustomComponent` component has the same props as the `Typography` component.\\n\\n```ts\\nfunction CustomComponent(props: TypographyProps<'a', { component: 'a' }>) {\\n  /* ... */\\n}\\n```\\n\\nNow the `CustomComponent` can be used with a `component` prop which should be set to `'a'`. In addition, the `CustomComponent` will have all props of a `<a>` HTML element. The other props of the `Typography` component will also be present in props of the `CustomComponent`.\\n\\nIt is possible to have generic `CustomComponent` which will accept any React component, custom and HTML elements.\\n\\n```ts\\nfunction GenericCustomComponent<C extends React.ElementType>(\\n  props: TypographyProps<C, { component?: C }>,\\n) {\\n  /* ... */\\n}\\n```\\n\\nNow if the `GenericCustomComponent` will be used with a `component` prop provided, it should also have all props required by the provided component.\\n\\n```ts\\nfunction ThirdPartyComponent({ prop1 } : { prop1: string }) {\\n  return <div />\\n}\\n// ...\\n<GenericCustomComponent component={ThirdPartyComponent} prop1=\\\"some value\\\" />;\\n```\\n\\nThe `prop1` became required for the `GenericCustomComponent` as the `ThirdPartyComponent` has it as a requirement.\\n\\nNot every component fully supports any component type you pass in. If you encounter a component that rejects its `component` props in TypeScript please open an issue. There is an ongoing effort to fix this by making component props generic.\\n\\n## Handling `value` and event handlers\\n\\nMany components concerned with user input offer a `value` prop or event handlers which include the current `value`. In most situations that `value` is only handled within React which allows it be of any type, such as objects or arrays.\\n\\nHowever, that type cannot be verified at compile time in situations where it depends on the component's children e.g. for `Select` or `RadioGroup`. This means that the soundest option is to type it as `unknown` and let the developer decide how they want to narrow that type down. We do not offer the possibility to use a generic type in those cases for [the same reasons `event.target` is not generic in React](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682).\\n\\nThe demos include typed variants that use type casting. It is an acceptable tradeoff because the types are all located in a single file and are very basic. You have to decide for yourself if the same tradeoff is acceptable for you. The library types are be strict by default and loose via opt-in.\"},SRRV:function(e,n){e.exports=\"# TypeScript\\n\\n<p class=\\\"description\\\">Voc\\xea pode adicionar tipagem est\\xe1tica para o JavaScript para melhorar a produtividade do desenvolvimento e a qualidade do c\\xf3digo gra\\xe7as ao TypeScript.</p>\\n\\nMaterial-UI requires a minimum version of TypeScript 3.2.\\n\\nD\\xea uma olhada no exemplo [Create React App com TypeScript](https://github.com/mui-org/material-ui/tree/master/examples/create-react-app-with-typescript).\\n\\nPara que os tipos funcionem, voc\\xea tem que pelo menos ter as seguintes op\\xe7\\xf5es habilitadas no seu `tsconfig.json`:\\n\\n```json\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"lib\\\": [\\\"es6\\\", \\\"dom\\\"],\\n    \\\"noImplicitAny\\\": true,\\n    \\\"noImplicitThis\\\": true,\\n    \\\"strictNullChecks\\\": true\\n  }\\n}\\n```\\n\\nAs op\\xe7\\xf5es de modo strict s\\xe3o as mesmas que s\\xe3o necess\\xe1rias para todos os tipos de pacote publicados no namespace `@types/`. Usando uma `tsconfig.json` menos rigorosa ou omitindo algumas das bibliotecas podem causar erros. Para obter a melhor experi\\xeancia com os tipos, recomendamos configurar `\\\"strict\\\": true`.\\n\\n## Uso de `withStyles`\\n\\nUtilizando `withStyles` no TypeScript pode ser um pouco complicado, mas h\\xe1 alguns utilit\\xe1rios que tornam a experi\\xeancia menos dolorosa poss\\xedvel.\\n\\n### Utilizando `createStyles` para evitar a amplia\\xe7\\xe3o de tipo (type widening)\\n\\nUma fonte frequente de confus\\xe3o \\xe9 a amplia\\xe7\\xe3o de tipos ([type widening](https://mariusschulz.com/blog/typescript-2-1-literal-type-widening)) do TypeScript, que faz com que este exemplo n\\xe3o funcione como o esperado:\\n\\n```ts\\nconst styles = {\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  }\\n};\\n\\nwithStyles(styles);\\n//         ^^^^^^\\n//         Os tipos de propriedade 'flexDirection' s\\xe3o incompat\\xedveis.\\n//           Tipo 'string' n\\xe3o pode ser atribu\\xeddo para o tipo '\\\"-moz-initial\\\" | \\\"inherit\\\" | \\\"initial\\\" | \\\"revert\\\" | \\\"unset\\\" | \\\"column\\\" | \\\"column-reverse\\\" | \\\"row\\\"...'.\\n```\\n\\nO problema \\xe9 que o tipo da propriedade `flexDirection` \\xe9 convertido como `string`, no qual \\xe9 o tipo mais conveniente. Para corrigir isto, voc\\xea pode passar o objeto de estilos diretamente para `withStyles`:\\n\\n```ts\\nwithStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n```\\n\\nNo entanto, a amplia\\xe7\\xe3o de tipos continuar\\xe1 a causar dores de cabe\\xe7a se voc\\xea tentar fazer com que os estilos dependam do tema:\\n\\n```ts\\nwithStyles(({ palette, spacing }) => ({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n}));\\n```\\n\\nIsso ocorre pois o TypeScript [amplia o retorno de tipos de express\\xf5es de fun\\xe7\\xe3o](https://github.com/Microsoft/TypeScript/issues/241).\\n\\nPor causa disso, \\xe9 recomendado usar a fun\\xe7\\xe3o auxiliar `createStyles` para construir seu objeto de regras de estilo:\\n\\n```ts\\n// Estilos sem depend\\xeancia\\nconst styles = createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n\\n// Estilos com depend\\xeancia do tema\\nconst styles = ({ palette, spacing }: Theme) => createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n});\\n```\\n\\n`createStyles` \\xe9 apenas a identidade da fun\\xe7\\xe3o; ela n\\xe3o \\\"faz nada\\\" em tempo de execu\\xe7\\xe3o, apenas auxilia a infer\\xeancia de tipos em tempo de compila\\xe7\\xe3o.\\n\\n### Consultas de M\\xeddia (Media queries)\\n\\n`withStyles` permite utilizar um objeto de estilos de n\\xedvel superior com consultas de m\\xeddia assim:\\n\\n```ts\\nconst styles = createStyles({\\n  root: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    root: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\nNo entanto, para permitir que estes estilos passem pelo TypeScript, as defini\\xe7\\xf5es devem ser amb\\xedguas em rela\\xe7\\xe3o aos nomes de classes CSS e nomes de propriedades CSS. Devido a isso, evite utilizar nomes de classes iguais a propriedades do CSS.\\n\\n```ts\\n// erro porque TypeScript acha que `@media (min-width: 960px)` \\xe9 o nome da classe\\n// e `content` \\xe9 a propriedade css\\nconst ambiguousStyles = createStyles({\\n  content: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    content: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n\\n// funciona corretamente\\nconst ambiguousStyles = createStyles({\\n  contentClass: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    contentClass: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\n### Incrementando suas propriedades utilizando `WithStyles`\\n\\nDesde que um componente seja decorado com `withStyles(styles)`, ele recebe uma propriedade injetada `classes`, voc\\xea pode querer definir estas propriedades de acordo com:\\n\\n```ts\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props {\\n  // non-style props\\n  foo: number;\\n  bar: boolean;\\n  // injected style props\\n  classes: {\\n    root: string;\\n    paper: string;\\n    button: string;\\n  };\\n}\\n```\\n\\nNo entanto isto n\\xe3o \\xe9 muito elegante de acordo com o princ\\xedpio de software [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself), porque requer que voc\\xea mantenha os nomes das classes (`'root'`, `'paper'`, `'button'`, ...) em dois locais diferentes. N\\xf3s fornecemos um operador de tipo `WithStyles` para ajudar com isso, assim voc\\xea pode apenas escrever:\\n\\n```ts\\nimport { WithStyles, createStyles } from '@material-ui/core';\\n\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props extends WithStyles<typeof styles> {\\n  foo: number;\\n  bar: boolean;\\n}\\n```\\n\\n### Decorando componentes\\n\\nAplicando `withStyles(styles)` como uma fun\\xe7\\xe3o, nos d\\xe1 o resultado como o esperado:\\n\\n```tsx\\nconst DecoratedSFC = withStyles(styles)(({ text, type, color, classes }: Props) => (\\n  <Typography variant={type} color={color} classes={classes}>\\n    {text}\\n  </Typography>\\n));\\n\\nconst DecoratedClass = withStyles(styles)(\\n  class extends React.Component<Props> {\\n    render() {\\n      const { text, type, color, classes } = this.props\\n      return (\\n        <Typography variant={type} color={color} classes={classes}>\\n          {text}\\n        </Typography>\\n      );\\n    }\\n  }\\n);\\n```\\n\\nInfelizmente devido a uma [limita\\xe7\\xe3o atual dos decoradores do TypeScript](https://github.com/Microsoft/TypeScript/issues/4881), `withStyles(styles)` n\\xe3o pode ser usado como decorador no TypeScript.\\n\\n## Customiza\\xe7\\xe3o de tema\\n\\nAo adicionar propriedades customizadas ao `Theme`, voc\\xea pode continuar a utiliz\\xe1-lo de uma maneira fortemente tipada, explorando o conceito de extens\\xe3o de m\\xf3dulos do TypeScript ([TypeScript's module augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation)).\\n\\nO exemplo a seguir adiciona uma propriedade `appDrawer` que \\xe9 mesclada na que foi exportada pelo `material-ui`:\\n\\n```ts\\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\\n\\ndeclare module '@material-ui/core/styles/createMuiTheme' {\\n  interface Theme {\\n    appDrawer: {\\n      width: React.CSSProperties['width']\\n      breakpoint: Breakpoint\\n    }\\n  }\\n  // permitir configura\\xe7\\xe3o usando `createMuiTheme`\\n  interface ThemeOptions {\\n    appDrawer?: {\\n      width?: React.CSSProperties['width']\\n      breakpoint?: Breakpoint\\n    }\\n  }\\n}\\n```\\n\\nE uma f\\xe1brica customizada de temas com op\\xe7\\xf5es padr\\xe3o adicionais:\\n\\n**./styles/createMyTheme**:\\n\\n```ts\\nimport { createMuiTheme, ThemeOptions } from '@material-ui/core/styles';\\n\\nexport default function createMyTheme(options: ThemeOptions) {\\n  return createMuiTheme({\\n    appDrawer: {\\n      width: 225,\\n      breakpoint: 'lg',\\n    },\\n    ...options,\\n  })\\n}\\n```\\n\\nIsso poderia ser usado como:\\n\\n```ts\\nimport createMyTheme from './styles/createMyTheme';\\n\\nconst theme = createMyTheme({ appDrawer: { breakpoint: 'md' }});\\n```\\n\\n## Uso da propriedade `component`\\n\\nMuitos componentes do Material-UI permitem que voc\\xea substitua seu n\\xf3 raiz atrav\\xe9s de uma propriedade `component`, isto ser\\xe1 detalhado na documenta\\xe7\\xe3o da API do componente. Por exemplo, o n\\xf3 raiz de um Button pode ser substitu\\xeddo por um Link do React Router, e quaisquer propriedades adicionais que s\\xe3o passados para o Button, como `to`, ser\\xe3o propagadas para o componente Link. Para um exemplo de c\\xf3digo relativo ao Button e o react-router-dom veja [estas demonstra\\xe7\\xf5es](/guides/composition/#routing-libraries).\\n\\nPara poder usar propriedades de determinado componente Material-UI no seu componente pr\\xf3prio, as propriedades devem ser usadas com argumentos de tipo. Caso contr\\xe1rio, a propriedade `component` n\\xe3o estar\\xe1 presente nas propriedades do componente Material-UI.\\n\\nOs exemplos abaixo usam `TypographyProps` mas o mesmo funcionar\\xe1 para qualquer componente que tenha propriedades definidas com `OverrideProps`.\\n\\nO componente `CustomComponent` a seguir tem as mesmas propriedades que o componente `Typography`.\\n\\n```ts\\nfunction CustomComponent(props: TypographyProps<'a', { component: 'a' }>) {\\n  /* ... */\\n}\\n```\\n\\nAgora o `CustomComponent` pode ser usado com uma propriedade `component` que deve ser definida para `'a'`. Al\\xe9m disso, o `CustomComponent` ter\\xe1 todas as propriedades de um elemento HTML `<a>`. As outras propriedades do componente `Typography` tamb\\xe9m estar\\xe3o presentes nas propriedades do `CustomComponent`.\\n\\n\\xc9 poss\\xedvel ter um componente gen\\xe9rico `CustomComponent` que aceitar\\xe1 qualquer componente React, customizado e elementos HTML.\\n\\n```ts\\nfunction GenericCustomComponent<C extends React.ElementType>(\\n  props: TypographyProps<C, { component?: C }>,\\n) {\\n  /* ... */\\n}\\n```\\n\\nAgora se o `GenericCustomComponent` ser usado com uma propriedade `component`, ele tamb\\xe9m deve ter todas as propriedades exigidas pelo componente fornecido.\\n\\n```ts\\nfunction ThirdPartyComponent({ prop1 } : { prop1: string }) {\\n  return <div />\\n}\\n// ...\\n<GenericCustomComponent component={ThirdPartyComponent} prop1=\\\"algum valor\\\" />;\\n```\\n\\nA `prop1` tornou-se necess\\xe1ria para o `GenericCustomComponent` como o `ThirdPartyComponent` tem ela como um requisito.\\n\\nNem todos os componentes suportam totalmente qualquer tipo de componente que voc\\xea passe. Se voc\\xea encontrar um componente que rejeita sua propriedade `component` no TypeScript por favor abra um issue. H\\xe1 um esfor\\xe7o cont\\xednuo para corrigir isso fazendo com que a propriedade component seja gen\\xe9rica.\\n\\n## Manipulando `value` e manipuladores de eventos\\n\\nMuitos componentes preocupados com a entrada do usu\\xe1rio oferecem uma propriedade `value` ou manipuladores de eventos que incluem o valor atual em `value`. Na maioria das situa\\xe7\\xf5es, `value` s\\xf3 \\xe9 manipulado dentro do React, o que permite que seja de qualquer tipo, como objetos ou matrizes.\\n\\nNo entanto, esse tipo n\\xe3o pode ser verificado em tempo de compila\\xe7\\xe3o em situa\\xe7\\xf5es em que depende de n\\xf3s filhos do componente, por exemplo, para `Select` ou `RadioGroup`. Isso significa que a op\\xe7\\xe3o mais segura \\xe9 tipando como `unknown` e deixar que o desenvolvedor decida como deseja restringir esse tipo. N\\xe3o oferecemos a possibilidade de usar um tipo gen\\xe9rico nesses casos, devido [as mesmas raz\\xf5es que `event.target` n\\xe3o \\xe9 gen\\xe9rico no React](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682).\\n\\nAs demonstra\\xe7\\xf5es incluem variantes tipadas que usam convers\\xe3o de tipo. \\xc9 uma troca aceit\\xe1vel porque os tipos est\\xe3o todos localizados em um \\xfanico arquivo e s\\xe3o muito b\\xe1sicos. Voc\\xea tem que decidir por si mesmo se a mesma troca \\xe9 aceit\\xe1vel para voc\\xea. A biblioteca de tipos s\\xe3o strict por padr\\xe3o e loose por meio de opt-in.\"},XVFo:function(e,n,t){var o={\"./typescript-aa.md\":\"2pEA\",\"./typescript-de.md\":\"kIX9\",\"./typescript-es.md\":\"nDPL\",\"./typescript-fr.md\":\"PQBq\",\"./typescript-ja.md\":\"9qM0\",\"./typescript-pt.md\":\"SRRV\",\"./typescript-ru.md\":\"jxVO\",\"./typescript-zh.md\":\"Of34\",\"./typescript.md\":\"sovB\"};function s(e){var n=i(e);return t(n)}function i(e){if(!t.o(o,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return o[e]}s.keys=function(){return Object.keys(o)},s.resolve=i,e.exports=s,s.id=\"XVFo\"},eavs:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return l}));var o=t(\"mXGw\"),s=t.n(o),i=t(\"e+1t\"),r=t(\"kVtE\"),a=s.a.createElement,p=t(\"EsAO\"),c=t(\"XVFo\");function l(e){var n=e.demos,t=e.docs;return a(i.a,{demos:n,docs:t,requireDemo:p})}l.getInitialProps=function(){var e=Object(r.a)({pageFilename:\"guides/typescript\",requireRaw:c});return{demos:e.demos,docs:e.docs}}},jxVO:function(e,n){e.exports=\"# TypeScript\\n\\n<p class=\\\"description\\\">You can add static typing to JavaScript to improve developer productivity and code quality thanks to TypeScript.</p>\\n\\nMaterial-UI requires a minimum version of TypeScript 3.2.\\n\\nHave a look at the [Create React App with TypeScript](https://github.com/mui-org/material-ui/tree/master/examples/create-react-app-with-typescript) example.\\n\\nIn order for types to work, you have to at least have the following options enabled in your `tsconfig.json`:\\n\\n```json\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"lib\\\": [\\\"es6\\\", \\\"dom\\\"],\\n    \\\"noImplicitAny\\\": true,\\n    \\\"noImplicitThis\\\": true,\\n    \\\"strictNullChecks\\\": true\\n  }\\n}\\n```\\n\\nThe strict mode options are the same that are required for every types package published in the `@types/` namespace. Using a less strict `tsconfig.json` or omitting some of the libraries might cause errors. To get the best type experience with the types we recommend setting `\\\"strict\\\": true`.\\n\\n## Usage of `withStyles`\\n\\nUsing `withStyles` in TypeScript can be a little tricky, but there are some utilities to make the experience as painless as possible.\\n\\n### Using `createStyles` to defeat type widening\\n\\nA frequent source of confusion is TypeScript's [type widening](https://mariusschulz.com/blog/typescript-2-1-literal-type-widening), which causes this example not to work as expected:\\n\\n```ts\\nconst styles = {\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  }\\n};\\n\\nwithStyles(styles);\\n//         ^^^^^^\\n//         Types of property 'flexDirection' are incompatible.\\n//           Type 'string' is not assignable to type '\\\"-moz-initial\\\" | \\\"inherit\\\" | \\\"initial\\\" | \\\"revert\\\" | \\\"unset\\\" | \\\"column\\\" | \\\"column-reverse\\\" | \\\"row\\\"...'.\\n```\\n\\nThe problem is that the type of the `flexDirection` property is inferred as `string`, which is too arbitrary. To fix this, you can pass the styles object directly to `withStyles`:\\n\\n```ts\\nwithStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n```\\n\\nHowever type widening rears its ugly head once more if you try to make the styles depend on the theme:\\n\\n```ts\\nwithStyles(({ palette, spacing }) => ({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n}));\\n```\\n\\nThis is because TypeScript [widens the return types of function expressions](https://github.com/Microsoft/TypeScript/issues/241).\\n\\nBecause of this, using the `createStyles` helper function to construct your style rules object is recommended:\\n\\n```ts\\n// Non-dependent styles\\nconst styles = createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n\\n// Theme-dependent styles\\nconst styles = ({ palette, spacing }: Theme) => createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n});\\n```\\n\\n`createStyles` is just the identity function; it doesn't \\\"do anything\\\" at runtime, just helps guide type inference at compile time.\\n\\n### Media queries\\n\\n`withStyles` allows a styles object with top level media-queries like so:\\n\\n```ts\\nconst styles = createStyles({\\n  root: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    root: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\nHowever to allow these styles to pass TypeScript, the definitions have to be ambiguous concerning names for CSS classes and actual CSS property names. Due to this class names that are equal to CSS properties should be avoided.\\n\\n```ts\\n// error because TypeScript thinks `@media (min-width: 960px)` is a class name\\n// and `content` is the css property\\nconst ambiguousStyles = createStyles({\\n  content: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    content: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n\\n// works just fine\\nconst ambiguousStyles = createStyles({\\n  contentClass: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    contentClass: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\n### Augmenting your props using `WithStyles`\\n\\nSince a component decorated with `withStyles(styles)` gets a special `classes` prop injected, you will want to define its props accordingly:\\n\\n```ts\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props {\\n  // non-style props\\n  foo: number;\\n  bar: boolean;\\n  // injected style props\\n  classes: {\\n    root: string;\\n    paper: string;\\n    button: string;\\n  };\\n}\\n```\\n\\nHowever this isn't very [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) because it requires you to maintain the class names (`'root'`, `'paper'`, `'button'`, ...) in two different places. We provide a type operator `WithStyles` to help with this, so that you can just write:\\n\\n```ts\\nimport { WithStyles, createStyles } from '@material-ui/core';\\n\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props extends WithStyles<typeof styles> {\\n  foo: number;\\n  bar: boolean;\\n}\\n```\\n\\n### Decorating components\\n\\nApplying `withStyles(styles)` as a function works as expected:\\n\\n```tsx\\nconst DecoratedSFC = withStyles(styles)(({ text, type, color, classes }: Props) => (\\n  <Typography variant={type} color={color} classes={classes}>\\n    {text}\\n  </Typography>\\n));\\n\\nconst DecoratedClass = withStyles(styles)(\\n  class extends React.Component<Props> {\\n    render() {\\n      const { text, type, color, classes } = this.props\\n      return (\\n        <Typography variant={type} color={color} classes={classes}>\\n          {text}\\n        </Typography>\\n      );\\n    }\\n  }\\n);\\n```\\n\\nUnfortunately due to a [current limitation of TypeScript decorators](https://github.com/Microsoft/TypeScript/issues/4881), `withStyles(styles)` can't be used as a decorator in TypeScript.\\n\\n## Customization of `Theme`\\n\\nWhen adding custom properties to the `Theme`, you may continue to use it in a strongly typed way by exploiting [TypeScript's module augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation).\\n\\nThe following example adds an `appDrawer` property that is merged into the one exported by `material-ui`:\\n\\n```ts\\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\\n\\ndeclare module '@material-ui/core/styles/createMuiTheme' {\\n  interface Theme {\\n    appDrawer: {\\n      width: React.CSSProperties['width']\\n      breakpoint: Breakpoint\\n    }\\n  }\\n  // allow configuration using `createMuiTheme`\\n  interface ThemeOptions {\\n    appDrawer?: {\\n      width?: React.CSSProperties['width']\\n      breakpoint?: Breakpoint\\n    }\\n  }\\n}\\n```\\n\\nAnd a custom theme factory with additional defaulted options:\\n\\n**./styles/createMyTheme**:\\n\\n```ts\\nimport { createMuiTheme, ThemeOptions } from '@material-ui/core/styles';\\n\\nexport default function createMyTheme(options: ThemeOptions) {\\n  return createMuiTheme({\\n    appDrawer: {\\n      width: 225,\\n      breakpoint: 'lg',\\n    },\\n    ...options,\\n  })\\n}\\n```\\n\\nThis could be used like:\\n\\n```ts\\nimport createMyTheme from './styles/createMyTheme';\\n\\nconst theme = createMyTheme({ appDrawer: { breakpoint: 'md' }});\\n```\\n\\n## Usage of `component` prop\\n\\nMany Material-UI components allow you to replace their root node via a `component` prop, this will be detailed in the component's API documentation. For example, a Button's root node can be replaced with a React Router's Link, and any additional props that are passed to Button, such as `to`, will be spread to the Link component. For a code example concerning Button and react-router-dom checkout [these demos](/guides/composition/#routing-libraries).\\n\\nTo be able to use props of such a Material-UI component on their own, props should be used with type arguments. Otherwise, the `component` prop will not be present in the props of the Material-UI component.\\n\\nThe examples below use `TypographyProps` but the same will work for any component which has props defined with `OverrideProps`.\\n\\nThe following `CustomComponent` component has the same props as the `Typography` component.\\n\\n```ts\\nfunction CustomComponent(props: TypographyProps<'a', { component: 'a' }>) {\\n  /* ... */\\n}\\n```\\n\\nNow the `CustomComponent` can be used with a `component` prop which should be set to `'a'`. In addition, the `CustomComponent` will have all props of a `<a>` HTML element. The other props of the `Typography` component will also be present in props of the `CustomComponent`.\\n\\nIt is possible to have generic `CustomComponent` which will accept any React component, custom and HTML elements.\\n\\n```ts\\nfunction GenericCustomComponent<C extends React.ElementType>(\\n  props: TypographyProps<C, { component?: C }>,\\n) {\\n  /* ... */\\n}\\n```\\n\\nNow if the `GenericCustomComponent` will be used with a `component` prop provided, it should also have all props required by the provided component.\\n\\n```ts\\nfunction ThirdPartyComponent({ prop1 } : { prop1: string }) {\\n  return <div />\\n}\\n// ...\\n<GenericCustomComponent component={ThirdPartyComponent} prop1=\\\"some value\\\" />;\\n```\\n\\nThe `prop1` became required for the `GenericCustomComponent` as the `ThirdPartyComponent` has it as a requirement.\\n\\nNot every component fully supports any component type you pass in. If you encounter a component that rejects its `component` props in TypeScript please open an issue. There is an ongoing effort to fix this by making component props generic.\\n\\n## Handling `value` and event handlers\\n\\nMany components concerned with user input offer a `value` prop or event handlers which include the current `value`. In most situations that `value` is only handled within React which allows it be of any type, such as objects or arrays.\\n\\nHowever, that type cannot be verified at compile time in situations where it depends on the component's children e.g. for `Select` or `RadioGroup`. This means that the soundest option is to type it as `unknown` and let the developer decide how they want to narrow that type down. We do not offer the possibility to use a generic type in those cases for [the same reasons `event.target` is not generic in React](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682).\\n\\nThe demos include typed variants that use type casting. It is an acceptable tradeoff because the types are all located in a single file and are very basic. You have to decide for yourself if the same tradeoff is acceptable for you. The library types are be strict by default and loose via opt-in.\"},kIX9:function(e,n){e.exports=\"# TypeScript\\n\\n<p class=\\\"description\\\">Sie k\\xf6nnen statische Typisierung zu JavaScript hinzuf\\xfcgen, um die Produktivit\\xe4t und die Codequalit\\xe4t dank TypeScript zu verbessern.</p>\\n\\nMaterial-UI requires a minimum version of TypeScript 3.2.\\n\\nSchauen Sie sich das [Create React App mit TypeScript](https://github.com/mui-org/material-ui/tree/master/examples/create-react-app-with-typescript) Beispiel an.\\n\\nIn order for types to work, you have to at least have the following options enabled in your `tsconfig.json`:\\n\\n```json\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"lib\\\": [\\\"es6\\\", \\\"dom\\\"],\\n    \\\"noImplicitAny\\\": true,\\n    \\\"noImplicitThis\\\": true,\\n    \\\"strictNullChecks\\\": true\\n  }\\n}\\n```\\n\\nThe strict mode options are the same that are required for every types package published in the `@types/` namespace. Verwendung einer weniger strengen `tsconfig.json` oder das Weglassen einiger Bibliotheken kann zu Fehlern f\\xfchren. To get the best type experience with the types we recommend setting `\\\"strict\\\": true`.\\n\\n## Verwendung von `withStyles`\\n\\nVerwenden von `withStyles` in TypeScript kann es etwas kniffelig sein, aber es gibt einige Hilfsprogramme, um die Erfahrung so schmerzlos wie m\\xf6glich zu gestalten.\\n\\n### Verwenden von `CreateStyles`, um die Typerweiterung zu besiegen\\n\\nEine h\\xe4ufige Quelle der Verwirrung ist die [Erweiterung der Typen](https://mariusschulz.com/blog/typescript-2-1-literal-type-widening) von TypeScript, was dazu f\\xfchrt, dass dieses Beispiel nicht wie erwartet funktioniert:\\n\\n```ts\\nconst styles = {\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  }\\n};\\n\\nwithStyles(styles);\\n//         ^^^^^^\\n//         Typen der Eigenschaft  'flexDirection' sind nicht kompatibel.\\n// Der Typ 'string' kann dem Typ '\\\"-moz-initial\\\" | \\\"inherit\\\" | \\\"initial\\\" |\\n// \\\"revert\\\" | \\\"unset\\\" | \\\"column\\\" | \\\"column-reverse\\\" | \\\"row\\\"...'\\n// nicht zugewiesen werden.\\n```\\n\\nDas Problem ist, dass der Typ der `flexDirection` als `string` interpretiert wird, was zu ungenau ist. Um dies zu beheben, k\\xf6nnen Sie das Styles-Objekt direkt an `withStyles`: \\xfcbergeben:\\n\\n```ts\\nwithStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n```\\n\\nWenn Sie jedoch versuchen, die Stile von dem Thema abh\\xe4ngig zu machen, macht Ihnen die Typenerweiterung wieder eine Strich durch die Rechnung:\\n\\n```ts\\nwithStyles(({ palette, spacing }) => ({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n}));\\n```\\n\\nDies liegt daran, dass TypeScript [die R\\xfcckgabetypen von Funktionsausdr\\xfccken ](https://github.com/Microsoft/TypeScript/issues/241) erweitert.\\n\\nBecause of this, using the `createStyles` helper function to construct your style rules object is recommended:\\n\\n```ts\\n// Non-dependent styles\\nconst styles = createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n\\n// Theme-dependent styles\\nconst styles = ({ palette, spacing }: Theme) => createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n});\\n```\\n\\n`createStyles` ist nur die Identit\\xe4tsfunktion; es \\\"tut\\\" nichts zur Laufzeit, es hilft nur die Typen zur Kompilierzeit festzulegen.\\n\\n### Media-Anfragen\\n\\n`withStyles` erlaubt ein Styles-Objekt mit Top-Level-Media-Abfragen wie:\\n\\n```ts\\nconst styles = createStyles({\\n  root: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    root: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\nDamit diese Stile an TypeScript \\xfcbergeben werden k\\xf6nnen, m\\xfcssen die Definitionen hinsichtlich der Namen der CSS-Klassen und der tats\\xe4chlichen CSS-Eigenschaftsnamen mehrdeutig sein. Aus diesem Grund sollten Klassennamen, die den CSS-Eigenschaften entsprechen, vermieden werden.\\n\\n```ts\\n// Fehler, da TypeScript denkte, dass `@media (min-width: 960px)` ein Klassen-\\n// name und `content` eine css Eigenschaft ist\\nconst ambiguousStyles = createStyles({\\n  content: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    content: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n\\n// Dies funktioniert\\nconst ambiguousStyles = createStyles({\\n  contentClass: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    contentClass: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\n### Erweitern Sie Ihre Eigenschaften mit `WithStyles`\\n\\nDa, wenn eine Komponente mit `withStyles(styles)` dekoriert ist, eine spezielle `classes` Eigenschaft injiziert bekommt, m\\xf6chten Sie die Eigenschaften entsprechend definieren:\\n\\n```ts\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props {\\n  // Nicht style Eigenschaften\\n  foo: number;\\n  bar: boolean;\\n  // Injizierte Style Eigenschaften\\n  classes: {\\n    root: string;\\n    paper: string;\\n    button: string;\\n  };\\n}\\n```\\n\\nDies ist jedoch nicht sehr [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) weil Sie die Klassennamen (`'root'`, `'paper'`, `'button'`, ...) an zwei verschiedenen Stellen pflegen m\\xfcssen. Wir stellen einen Typoperator `WithStyles` bereit, um damit zu helfen. So kannst du einfach schreiben:\\n\\n```ts\\nimport { WithStyles, createStyles } from '@material-ui/core';\\n\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props extends WithStyles<typeof styles> {\\n  foo: number;\\n  bar: boolean;\\n}\\n```\\n\\n### Komponenten dekorieren\\n\\nAnwenden von `withStyles(styles)` als Funktion funktioniert wie erwartet:\\n\\n```tsx\\nconst DecoratedSFC = withStyles(styles)(({ text, type, color, classes }: Props) => (\\n  <Typography variant={type} color={color} classes={classes}>\\n    {text}\\n  </Typography>\\n));\\n\\nconst DecoratedClass = withStyles(styles)(\\n  class extends React.Component<Props> {\\n    render() {\\n      const { text, type, color, classes } = this.props\\n      return (\\n        <Typography variant={type} color={color} classes={classes}>\\n          {text}\\n        </Typography>\\n      );\\n    }\\n  }\\n);\\n```\\n\\nAufgrund einer [aktuellen Einschr\\xe4nkung der TypeScript-Dekorateure](https://github.com/Microsoft/TypeScript/issues/4881), kann `withStyles(styles)` leider nicht als Dekorator in TypeScript verwendet werden.\\n\\n## Anpassung des `Theme`\\n\\nBeim Hinzuf\\xfcgen benutzerdefinierter Eigenschaften zum `Theme` k\\xf6nnen Sie es weiterhin in stark typisierter Weise verwenden, indem Sie die [Modulerweiterung von TypeScript](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) nutzen.\\n\\nIm folgenden Beispiel wird eine `appDrawer` Eigenschaft hinzugef\\xfcgt, welche in das von `material-ui` exportierte Theme eingef\\xfcgt wird:\\n\\n```ts\\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\\n\\ndeclare module '@material-ui/core/styles/createMuiTheme' {\\n  interface Theme {\\n    appDrawer: {\\n      width: React.CSSProperties['width']\\n      breakpoint: Breakpoint\\n    }\\n  }\\n  // allow configuration using `createMuiTheme`\\n  interface ThemeOptions {\\n    appDrawer?: {\\n      width?: React.CSSProperties['width']\\n      breakpoint?: Breakpoint\\n    }\\n  }\\n}\\n```\\n\\nUnd eine benutzerdefinierte Theme Generierung mit zus\\xe4tzlichen Standardoptionen:\\n\\n**./styles/createMyTheme**:\\n\\n```ts\\nimport { createMuiTheme, ThemeOptions } from '@material-ui/core/styles';\\n\\nexport default function createMyTheme(options: ThemeOptions) {\\n  return createMuiTheme({\\n    appDrawer: {\\n      width: 225,\\n      breakpoint: 'lg',\\n    },\\n    ...options,\\n  })\\n}\\n```\\n\\nDies k\\xf6nnte wie folgt verwendet werden:\\n\\n```ts\\nimport createMyTheme from './styles/createMyTheme';\\n\\nconst theme = createMyTheme({ appDrawer: { breakpoint: 'md' }});\\n```\\n\\n## Usage of `component` prop\\n\\nMany Material-UI components allow you to replace their root node via a `component` prop, this will be detailed in the component's API documentation. For example, a Button's root node can be replaced with a React Router's Link, and any additional props that are passed to Button, such as `to`, will be spread to the Link component. For a code example concerning Button and react-router-dom checkout [these demos](/guides/composition/#routing-libraries).\\n\\nTo be able to use props of such a Material-UI component on their own, props should be used with type arguments. Otherwise, the `component` prop will not be present in the props of the Material-UI component.\\n\\nThe examples below use `TypographyProps` but the same will work for any component which has props defined with `OverrideProps`.\\n\\nThe following `CustomComponent` component has the same props as the `Typography` component.\\n\\n```ts\\nfunction CustomComponent(props: TypographyProps<'a', { component: 'a' }>) {\\n  /* ... */\\n}\\n```\\n\\nNow the `CustomComponent` can be used with a `component` prop which should be set to `'a'`. In addition, the `CustomComponent` will have all props of a `<a>` HTML element. The other props of the `Typography` component will also be present in props of the `CustomComponent`.\\n\\nIt is possible to have generic `CustomComponent` which will accept any React component, custom and HTML elements.\\n\\n```ts\\nfunction GenericCustomComponent<C extends React.ElementType>(\\n  props: TypographyProps<C, { component?: C }>,\\n) {\\n  /* ... */\\n}\\n```\\n\\nNow if the `GenericCustomComponent` will be used with a `component` prop provided, it should also have all props required by the provided component.\\n\\n```ts\\nfunction ThirdPartyComponent({ prop1 } : { prop1: string }) {\\n  return <div />\\n}\\n// ...\\n<GenericCustomComponent component={ThirdPartyComponent} prop1=\\\"some value\\\" />;\\n```\\n\\nThe `prop1` became required for the `GenericCustomComponent` as the `ThirdPartyComponent` has it as a requirement.\\n\\nNicht jede Komponente unterst\\xfctzt vollst\\xe4ndig jeden \\xfcbergebenen Komponententyp. If you encounter a component that rejects its `component` props in TypeScript please open an issue. Es besteht ein st\\xe4ndiger Aufwand, um dies zu beheben, indem Komponentenst\\xfctzen generisch gemacht werden.\\n\\n## Handling `value` and event handlers\\n\\nMany components concerned with user input offer a `value` prop or event handlers which include the current `value`. In most situations that `value` is only handled within React which allows it be of any type, such as objects or arrays.\\n\\nHowever, that type cannot be verified at compile time in situations where it depends on the component's children e.g. for `Select` or `RadioGroup`. This means that the soundest option is to type it as `unknown` and let the developer decide how they want to narrow that type down. We do not offer the possibility to use a generic type in those cases for [the same reasons `event.target` is not generic in React](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682).\\n\\nThe demos include typed variants that use type casting. It is an acceptable tradeoff because the types are all located in a single file and are very basic. You have to decide for yourself if the same tradeoff is acceptable for you. The library types are be strict by default and loose via opt-in.\"},nDPL:function(e,n){e.exports=\"# TypeScript\\n\\n<p class=\\\"description\\\">You can add static typing to JavaScript to improve developer productivity and code quality thanks to TypeScript.</p>\\n\\nMaterial-UI requires a minimum version of TypeScript 3.2.\\n\\nHave a look at the [Create React App with TypeScript](https://github.com/mui-org/material-ui/tree/master/examples/create-react-app-with-typescript) example.\\n\\nIn order for types to work, you have to at least have the following options enabled in your `tsconfig.json`:\\n\\n```json\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"lib\\\": [\\\"es6\\\", \\\"dom\\\"],\\n    \\\"noImplicitAny\\\": true,\\n    \\\"noImplicitThis\\\": true,\\n    \\\"strictNullChecks\\\": true\\n  }\\n}\\n```\\n\\nThe strict mode options are the same that are required for every types package published in the `@types/` namespace. Using a less strict `tsconfig.json` or omitting some of the libraries might cause errors. To get the best type experience with the types we recommend setting `\\\"strict\\\": true`.\\n\\n## Usage of `withStyles`\\n\\nUsing `withStyles` in TypeScript can be a little tricky, but there are some utilities to make the experience as painless as possible.\\n\\n### Using `createStyles` to defeat type widening\\n\\nA frequent source of confusion is TypeScript's [type widening](https://mariusschulz.com/blog/typescript-2-1-literal-type-widening), which causes this example not to work as expected:\\n\\n```ts\\nconst styles = {\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  }\\n};\\n\\nwithStyles(styles);\\n//         ^^^^^^\\n//         Types of property 'flexDirection' are incompatible.\\n//           Type 'string' is not assignable to type '\\\"-moz-initial\\\" | \\\"inherit\\\" | \\\"initial\\\" | \\\"revert\\\" | \\\"unset\\\" | \\\"column\\\" | \\\"column-reverse\\\" | \\\"row\\\"...'.\\n```\\n\\nThe problem is that the type of the `flexDirection` property is inferred as `string`, which is too arbitrary. To fix this, you can pass the styles object directly to `withStyles`:\\n\\n```ts\\nwithStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n```\\n\\nHowever type widening rears its ugly head once more if you try to make the styles depend on the theme:\\n\\n```ts\\nwithStyles(({ palette, spacing }) => ({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n}));\\n```\\n\\nThis is because TypeScript [widens the return types of function expressions](https://github.com/Microsoft/TypeScript/issues/241).\\n\\nBecause of this, using the `createStyles` helper function to construct your style rules object is recommended:\\n\\n```ts\\n// Non-dependent styles\\nconst styles = createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n\\n// Theme-dependent styles\\nconst styles = ({ palette, spacing }: Theme) => createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n});\\n```\\n\\n`createStyles` is just the identity function; it doesn't \\\"do anything\\\" at runtime, just helps guide type inference at compile time.\\n\\n### Media queries\\n\\n`withStyles` allows a styles object with top level media-queries like so:\\n\\n```ts\\nconst styles = createStyles({\\n  root: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    root: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\nHowever to allow these styles to pass TypeScript, the definitions have to be ambiguous concerning names for CSS classes and actual CSS property names. Due to this class names that are equal to CSS properties should be avoided.\\n\\n```ts\\n// error because TypeScript thinks `@media (min-width: 960px)` is a class name\\n// and `content` is the css property\\nconst ambiguousStyles = createStyles({\\n  content: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    content: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n\\n// works just fine\\nconst ambiguousStyles = createStyles({\\n  contentClass: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    contentClass: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\n### Augmenting your props using `WithStyles`\\n\\nSince a component decorated with `withStyles(styles)` gets a special `classes` prop injected, you will want to define its props accordingly:\\n\\n```ts\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props {\\n  // non-style props\\n  foo: number;\\n  bar: boolean;\\n  // injected style props\\n  classes: {\\n    root: string;\\n    paper: string;\\n    button: string;\\n  };\\n}\\n```\\n\\nHowever this isn't very [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) because it requires you to maintain the class names (`'root'`, `'paper'`, `'button'`, ...) in two different places. We provide a type operator `WithStyles` to help with this, so that you can just write:\\n\\n```ts\\nimport { WithStyles, createStyles } from '@material-ui/core';\\n\\nconst styles = (theme: Theme) => createStyles({\\n  root: { /* ... */ },\\n  paper: { /* ... */ },\\n  button: { /* ... */ },\\n});\\n\\ninterface Props extends WithStyles<typeof styles> {\\n  foo: number;\\n  bar: boolean;\\n}\\n```\\n\\n### Decorating components\\n\\nApplying `withStyles(styles)` as a function works as expected:\\n\\n```tsx\\nconst DecoratedSFC = withStyles(styles)(({ text, type, color, classes }: Props) => (\\n  <Typography variant={type} color={color} classes={classes}>\\n    {text}\\n  </Typography>\\n));\\n\\nconst DecoratedClass = withStyles(styles)(\\n  class extends React.Component<Props> {\\n    render() {\\n      const { text, type, color, classes } = this.props\\n      return (\\n        <Typography variant={type} color={color} classes={classes}>\\n          {text}\\n        </Typography>\\n      );\\n    }\\n  }\\n);\\n```\\n\\nUnfortunately due to a [current limitation of TypeScript decorators](https://github.com/Microsoft/TypeScript/issues/4881), `withStyles(styles)` can't be used as a decorator in TypeScript.\\n\\n## Customization of `Theme`\\n\\nWhen adding custom properties to the `Theme`, you may continue to use it in a strongly typed way by exploiting [TypeScript's module augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation).\\n\\nThe following example adds an `appDrawer` property that is merged into the one exported by `material-ui`:\\n\\n```ts\\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\\n\\ndeclare module '@material-ui/core/styles/createMuiTheme' {\\n  interface Theme {\\n    appDrawer: {\\n      width: React.CSSProperties['width']\\n      breakpoint: Breakpoint\\n    }\\n  }\\n  // allow configuration using `createMuiTheme`\\n  interface ThemeOptions {\\n    appDrawer?: {\\n      width?: React.CSSProperties['width']\\n      breakpoint?: Breakpoint\\n    }\\n  }\\n}\\n```\\n\\nAnd a custom theme factory with additional defaulted options:\\n\\n**./styles/createMyTheme**:\\n\\n```ts\\nimport { createMuiTheme, ThemeOptions } from '@material-ui/core/styles';\\n\\nexport default function createMyTheme(options: ThemeOptions) {\\n  return createMuiTheme({\\n    appDrawer: {\\n      width: 225,\\n      breakpoint: 'lg',\\n    },\\n    ...options,\\n  })\\n}\\n```\\n\\nThis could be used like:\\n\\n```ts\\nimport createMyTheme from './styles/createMyTheme';\\n\\nconst theme = createMyTheme({ appDrawer: { breakpoint: 'md' }});\\n```\\n\\n## Usage of `component` prop\\n\\nMany Material-UI components allow you to replace their root node via a `component` prop, this will be detailed in the component's API documentation. For example, a Button's root node can be replaced with a React Router's Link, and any additional props that are passed to Button, such as `to`, will be spread to the Link component. For a code example concerning Button and react-router-dom checkout [these demos](/guides/composition/#routing-libraries).\\n\\nTo be able to use props of such a Material-UI component on their own, props should be used with type arguments. Otherwise, the `component` prop will not be present in the props of the Material-UI component.\\n\\nThe examples below use `TypographyProps` but the same will work for any component which has props defined with `OverrideProps`.\\n\\nThe following `CustomComponent` component has the same props as the `Typography` component.\\n\\n```ts\\nfunction CustomComponent(props: TypographyProps<'a', { component: 'a' }>) {\\n  /* ... */\\n}\\n```\\n\\nNow the `CustomComponent` can be used with a `component` prop which should be set to `'a'`. In addition, the `CustomComponent` will have all props of a `<a>` HTML element. The other props of the `Typography` component will also be present in props of the `CustomComponent`.\\n\\nIt is possible to have generic `CustomComponent` which will accept any React component, custom and HTML elements.\\n\\n```ts\\nfunction GenericCustomComponent<C extends React.ElementType>(\\n  props: TypographyProps<C, { component?: C }>,\\n) {\\n  /* ... */\\n}\\n```\\n\\nNow if the `GenericCustomComponent` will be used with a `component` prop provided, it should also have all props required by the provided component.\\n\\n```ts\\nfunction ThirdPartyComponent({ prop1 } : { prop1: string }) {\\n  return <div />\\n}\\n// ...\\n<GenericCustomComponent component={ThirdPartyComponent} prop1=\\\"some value\\\" />;\\n```\\n\\nThe `prop1` became required for the `GenericCustomComponent` as the `ThirdPartyComponent` has it as a requirement.\\n\\nNot every component fully supports any component type you pass in. If you encounter a component that rejects its `component` props in TypeScript please open an issue. There is an ongoing effort to fix this by making component props generic.\\n\\n## Handling `value` and event handlers\\n\\nMany components concerned with user input offer a `value` prop or event handlers which include the current `value`. In most situations that `value` is only handled within React which allows it be of any type, such as objects or arrays.\\n\\nHowever, that type cannot be verified at compile time in situations where it depends on the component's children e.g. for `Select` or `RadioGroup`. This means that the soundest option is to type it as `unknown` and let the developer decide how they want to narrow that type down. We do not offer the possibility to use a generic type in those cases for [the same reasons `event.target` is not generic in React](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682).\\n\\nThe demos include typed variants that use type casting. It is an acceptable tradeoff because the types are all located in a single file and are very basic. You have to decide for yourself if the same tradeoff is acceptable for you. The library types are be strict by default and loose via opt-in.\"},sovB:function(e,n){e.exports=\"# TypeScript\\n\\n<p class=\\\"description\\\">You can add static typing to JavaScript to improve developer productivity and code quality thanks to TypeScript.</p>\\n\\nMaterial-UI requires a minimum version of TypeScript 3.2.\\n\\nHave a look at the [Create React App with TypeScript](https://github.com/mui-org/material-ui/tree/master/examples/create-react-app-with-typescript) example.\\n\\nIn order for types to work, you have to at least have the following options enabled\\nin your `tsconfig.json`:\\n\\n```json\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"lib\\\": [\\\"es6\\\", \\\"dom\\\"],\\n    \\\"noImplicitAny\\\": true,\\n    \\\"noImplicitThis\\\": true,\\n    \\\"strictNullChecks\\\": true\\n  }\\n}\\n```\\n\\nThe strict mode options are the same that are required for every types package\\npublished in the `@types/` namespace. Using a less strict `tsconfig.json` or omitting some of the libraries might cause errors. To get the best type experience with the types we recommend\\nsetting `\\\"strict\\\": true`.\\n\\n## Usage of `withStyles`\\n\\nUsing `withStyles` in TypeScript can be a little tricky, but there are some utilities to make the experience as painless as possible.\\n\\n### Using `createStyles` to defeat type widening\\n\\nA frequent source of confusion is TypeScript's [type widening](https://mariusschulz.com/blog/typescript-2-1-literal-type-widening), which causes this example not to work as expected:\\n\\n```ts\\nconst styles = {\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n};\\n\\nwithStyles(styles);\\n//         ^^^^^^\\n//         Types of property 'flexDirection' are incompatible.\\n//           Type 'string' is not assignable to type '\\\"-moz-initial\\\" | \\\"inherit\\\" | \\\"initial\\\" | \\\"revert\\\" | \\\"unset\\\" | \\\"column\\\" | \\\"column-reverse\\\" | \\\"row\\\"...'.\\n```\\n\\nThe problem is that the type of the `flexDirection` property is inferred as `string`, which is too arbitrary. To fix this, you can pass the styles object directly to `withStyles`:\\n\\n```ts\\nwithStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n```\\n\\nHowever type widening rears its ugly head once more if you try to make the styles depend on the theme:\\n\\n```ts\\nwithStyles(({ palette, spacing }) => ({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    padding: spacing.unit,\\n    backgroundColor: palette.background.default,\\n    color: palette.primary.main,\\n  },\\n}));\\n```\\n\\nThis is because TypeScript [widens the return types of function expressions](https://github.com/Microsoft/TypeScript/issues/241).\\n\\nBecause of this, using the `createStyles` helper function to construct your style rules object is recommended:\\n\\n```ts\\n// Non-dependent styles\\nconst styles = createStyles({\\n  root: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n  },\\n});\\n\\n// Theme-dependent styles\\nconst styles = ({ palette, spacing }: Theme) =>\\n  createStyles({\\n    root: {\\n      display: 'flex',\\n      flexDirection: 'column',\\n      padding: spacing.unit,\\n      backgroundColor: palette.background.default,\\n      color: palette.primary.main,\\n    },\\n  });\\n```\\n\\n`createStyles` is just the identity function; it doesn't \\\"do anything\\\" at runtime, just helps guide type inference at compile time.\\n\\n### Media queries\\n\\n`withStyles` allows a styles object with top level media-queries like so:\\n\\n```ts\\nconst styles = createStyles({\\n  root: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    root: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\nHowever to allow these styles to pass TypeScript, the definitions have to be ambiguous concerning names for CSS classes and actual CSS property names. Due to this class names that are equal to CSS properties should be avoided.\\n\\n```ts\\n// error because TypeScript thinks `@media (min-width: 960px)` is a class name\\n// and `content` is the css property\\nconst ambiguousStyles = createStyles({\\n  content: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    content: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n\\n// works just fine\\nconst ambiguousStyles = createStyles({\\n  contentClass: {\\n    minHeight: '100vh',\\n  },\\n  '@media (min-width: 960px)': {\\n    contentClass: {\\n      display: 'flex',\\n    },\\n  },\\n});\\n```\\n\\n### Augmenting your props using `WithStyles`\\n\\nSince a component decorated with `withStyles(styles)` gets a special `classes` prop injected, you will want to define its props accordingly:\\n\\n```ts\\nconst styles = (theme: Theme) =>\\n  createStyles({\\n    root: {\\n      /* ... */\\n    },\\n    paper: {\\n      /* ... */\\n    },\\n    button: {\\n      /* ... */\\n    },\\n  });\\n\\ninterface Props {\\n  // non-style props\\n  foo: number;\\n  bar: boolean;\\n  // injected style props\\n  classes: {\\n    root: string;\\n    paper: string;\\n    button: string;\\n  };\\n}\\n```\\n\\nHowever this isn't very [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) because it requires you to maintain the class names (`'root'`, `'paper'`, `'button'`, ...) in two different places. We provide a type operator `WithStyles` to help with this, so that you can just write:\\n\\n```ts\\nimport { WithStyles, createStyles } from '@material-ui/core';\\n\\nconst styles = (theme: Theme) =>\\n  createStyles({\\n    root: {\\n      /* ... */\\n    },\\n    paper: {\\n      /* ... */\\n    },\\n    button: {\\n      /* ... */\\n    },\\n  });\\n\\ninterface Props extends WithStyles<typeof styles> {\\n  foo: number;\\n  bar: boolean;\\n}\\n```\\n\\n### Decorating components\\n\\nApplying `withStyles(styles)` as a function works as expected:\\n\\n```tsx\\nconst DecoratedSFC = withStyles(styles)(\\n  ({ text, type, color, classes }: Props) => (\\n    <Typography variant={type} color={color} classes={classes}>\\n      {text}\\n    </Typography>\\n  ),\\n);\\n\\nconst DecoratedClass = withStyles(styles)(\\n  class extends React.Component<Props> {\\n    render() {\\n      const { text, type, color, classes } = this.props;\\n      return (\\n        <Typography variant={type} color={color} classes={classes}>\\n          {text}\\n        </Typography>\\n      );\\n    }\\n  },\\n);\\n```\\n\\nUnfortunately due to a [current limitation of TypeScript decorators](https://github.com/Microsoft/TypeScript/issues/4881), `withStyles(styles)` can't be used as a decorator in TypeScript.\\n\\n## Customization of `Theme`\\n\\nWhen adding custom properties to the `Theme`, you may continue to use it in a strongly typed way by exploiting\\n[TypeScript's module augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation).\\n\\nThe following example adds an `appDrawer` property that is merged into the one exported by `material-ui`:\\n\\n```ts\\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\\n\\ndeclare module '@material-ui/core/styles/createMuiTheme' {\\n  interface Theme {\\n    appDrawer: {\\n      width: React.CSSProperties['width'];\\n      breakpoint: Breakpoint;\\n    };\\n  }\\n  // allow configuration using `createMuiTheme`\\n  interface ThemeOptions {\\n    appDrawer?: {\\n      width?: React.CSSProperties['width'];\\n      breakpoint?: Breakpoint;\\n    };\\n  }\\n}\\n```\\n\\nAnd a custom theme factory with additional defaulted options:\\n\\n**./styles/createMyTheme**:\\n\\n```ts\\nimport { createMuiTheme, ThemeOptions } from '@material-ui/core/styles';\\n\\nexport default function createMyTheme(options: ThemeOptions) {\\n  return createMuiTheme({\\n    appDrawer: {\\n      width: 225,\\n      breakpoint: 'lg',\\n    },\\n    ...options,\\n  });\\n}\\n```\\n\\nThis could be used like:\\n\\n```ts\\nimport createMyTheme from './styles/createMyTheme';\\n\\nconst theme = createMyTheme({\\n  appDrawer: { breakpoint: 'md' },\\n});\\n```\\n\\n## Usage of `component` prop\\n\\nMany Material-UI components allow you to replace their root node via a `component`\\nprop, this will be detailed in the component's API documentation.\\nFor example, a Button's root node can be replaced with a React Router's Link, and any additional props that are passed to Button, such as `to`, will be spread to the Link component.\\nFor a code example concerning Button and react-router-dom checkout [these demos](/guides/composition/#routing-libraries).\\n\\nTo be able to use props of such a Material-UI component on their own, props should be used with type arguments. Otherwise, the `component` prop will not be present in the props of the Material-UI component.\\n\\nThe examples below use `TypographyProps` but the same will work for any component which has props defined with `OverrideProps`.\\n\\nThe following `CustomComponent` component has the same props as the `Typography` component.\\n\\n```ts\\nfunction CustomComponent(props: TypographyProps<'a', { component: 'a' }>) {\\n  /* ... */\\n}\\n```\\n\\nNow the `CustomComponent` can be used with a `component` prop which should be set to `'a'`. In addition, the `CustomComponent` will have all props of a `<a>` HTML element. The other props of the `Typography` component will also be present in props of the `CustomComponent`.\\n\\nIt is possible to have generic `CustomComponent` which will accept any React component, custom and HTML elements.\\n\\n```ts\\nfunction GenericCustomComponent<C extends React.ElementType>(\\n  props: TypographyProps<C, { component?: C }>,\\n) {\\n  /* ... */\\n}\\n```\\n\\nNow if the `GenericCustomComponent` will be used with a `component` prop provided, it should also have all props required by the provided component.\\n\\n```ts\\nfunction ThirdPartyComponent({ prop1 }: { prop1: string }) {\\n  return <div />;\\n}\\n// ...\\n<GenericCustomComponent component={ThirdPartyComponent} prop1=\\\"some value\\\" />;\\n```\\n\\nThe `prop1` became required for the `GenericCustomComponent` as the `ThirdPartyComponent` has it as a requirement.\\n\\nNot every component fully supports any component type you pass in. If you encounter a component that rejects its `component` props in TypeScript please open an issue.\\nThere is an ongoing effort to fix this by making component props generic.\\n\\n## Handling `value` and event handlers\\n\\nMany components concerned with user input offer a `value` prop or event handlers\\nwhich include the current `value`. In most situations that `value` is only handled\\nwithin React which allows it be of any type, such as objects or arrays.\\n\\nHowever, that type cannot be verified at compile time in situations where it depends\\non the component's children e.g. for `Select` or `RadioGroup`. This means that\\nthe soundest option is to type it as `unknown` and let the developer decide\\nhow they want to narrow that type down. We do not offer the possibility to use a generic\\ntype in those cases for [the same reasons `event.target` is not generic in React](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682).\\n\\nThe demos include typed variants that use type casting. It is an acceptable tradeoff\\nbecause the types are all located in a single file and are very basic. You have to decide for yourself\\nif the same tradeoff is acceptable for you. The library types are be strict\\nby default and loose via opt-in.\\n\"}},[[\"2SP1\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}