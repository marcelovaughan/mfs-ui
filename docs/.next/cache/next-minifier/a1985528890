{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{E32s:function(e,n,s){var o={\"./form-label.md\":\"j5XG\"};function a(e){var n=t(e);return s(n)}function t(e){if(!s.o(o,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return o[e]}a.keys=function(){return Object.keys(o)},a.resolve=t,e.exports=a,a.id=\"E32s\"},KEoV:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/api-docs/form-label\",function(){return s(\"yFOX\")}])},j5XG:function(e,n){e.exports='---\\nfilename: /packages/material-ui/src/FormLabel/FormLabel.js\\n---\\n\\n\\x3c!--- This documentation is automatically generated, do not try to edit it. --\\x3e\\n\\n# FormLabel API\\n\\n<p class=\"description\">The API documentation of the FormLabel React component. Learn more about the props and the CSS customization points.</p>\\n\\n## Import\\n\\n```js\\nimport FormLabel from \\'@material-ui/core/FormLabel\\';\\n// or\\nimport { FormLabel } from \\'@material-ui/core\\';\\n```\\n\\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\\n\\n\\n\\n## Component name\\n\\nThe `MuiFormLabel` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\\n\\n## Props\\n\\n| Name | Type | Default | Description |\\n|:-----|:-----|:--------|:------------|\\n| <span class=\"prop-name\">children</span> | <span class=\"prop-type\">node</span> |  | The content of the component. |\\n| <span class=\"prop-name\">classes</span> | <span class=\"prop-type\">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\\n| <span class=\"prop-name\">color</span> | <span class=\"prop-type\">\\'primary\\'<br>&#124;&nbsp;\\'secondary\\'</span> |  | The color of the component. It supports those theme colors that make sense for this component. |\\n| <span class=\"prop-name\">component</span> | <span class=\"prop-type\">elementType</span> | <span class=\"prop-default\">\\'label\\'</span> | The component used for the root node. Either a string to use a HTML element or a component. |\\n| <span class=\"prop-name\">disabled</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the label should be displayed in a disabled state. |\\n| <span class=\"prop-name\">error</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the label should be displayed in an error state. |\\n| <span class=\"prop-name\">filled</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the label should use filled classes key. |\\n| <span class=\"prop-name\">focused</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the input of this label is focused (used by `FormGroup` components). |\\n| <span class=\"prop-name\">required</span> | <span class=\"prop-type\">bool</span> |  | If `true`, the label will indicate that the input is required. |\\n\\nThe `ref` is forwarded to the root element.\\n\\nAny other props supplied will be provided to the root element (native element).\\n\\n## CSS\\n\\n| Rule name | Global class | Description |\\n|:-----|:-------------|:------------|\\n| <span class=\"prop-name\">root</span> | <span class=\"prop-name\">.MuiFormLabel-root</span> | Styles applied to the root element.\\n| <span class=\"prop-name\">colorSecondary</span> | <span class=\"prop-name\">.MuiFormLabel-colorSecondary</span> | Styles applied to the root element if the color is secondary.\\n| <span class=\"prop-name\">focused</span> | <span class=\"prop-name\">.Mui-focused</span> | Pseudo-class applied to the root element if `focused={true}`.\\n| <span class=\"prop-name\">disabled</span> | <span class=\"prop-name\">.Mui-disabled</span> | Pseudo-class applied to the root element if `disabled={true}`.\\n| <span class=\"prop-name\">error</span> | <span class=\"prop-name\">.Mui-error</span> | Pseudo-class applied to the root element if `error={true}`.\\n| <span class=\"prop-name\">filled</span> | <span class=\"prop-name\">.MuiFormLabel-filled</span> | Pseudo-class applied to the root element if `filled={true}`.\\n| <span class=\"prop-name\">required</span> | <span class=\"prop-name\">.Mui-required</span> | Pseudo-class applied to the root element if `required={true}`.\\n| <span class=\"prop-name\">asterisk</span> | <span class=\"prop-name\">.MuiFormLabel-asterisk</span> | Styles applied to the asterisk element.\\n\\nYou can override the style of the component thanks to one of these customization points:\\n\\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\\n- With a theme and an [`overrides` property](/customization/globals/#css).\\n\\nIf that\\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/FormLabel/FormLabel.js) for more detail.\\n\\n## Demos\\n\\n- [Checkboxes](/components/checkboxes/)\\n- [Radio Buttons](/components/radio-buttons/)\\n- [Switches](/components/switches/)\\n\\n'},yFOX:function(e,n,s){\"use strict\";s.r(n),s.d(n,\"default\",(function(){return i}));var o=s(\"mXGw\"),a=s.n(o),t=s(\"e+1t\"),p=s(\"kVtE\"),r=a.a.createElement,l=s(\"E32s\");function i(e){var n=e.docs;return r(t.a,{docs:n})}i.getInitialProps=function(){var e=Object(p.a)({pageFilename:\"api/form-label\",requireRaw:l});return{demos:e.demos,docs:e.docs}}}},[[\"KEoV\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}