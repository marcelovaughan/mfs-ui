{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{\"7oZm\":function(e,n,a){var s={\"./table-pagination.md\":\"BxE9\"};function o(e){var n=t(e);return a(n)}function t(e){if(!a.o(s,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return s[e]}o.keys=function(){return Object.keys(s)},o.resolve=t,e.exports=o,o.id=\"7oZm\"},BxE9:function(e,n){e.exports='---\\nfilename: /packages/material-ui/src/TablePagination/TablePagination.js\\n---\\n\\n\\x3c!--- This documentation is automatically generated, do not try to edit it. --\\x3e\\n\\n# TablePagination API\\n\\n<p class=\"description\">The API documentation of the TablePagination React component. Learn more about the props and the CSS customization points.</p>\\n\\n## Import\\n\\n```js\\nimport TablePagination from \\'@material-ui/core/TablePagination\\';\\n// or\\nimport { TablePagination } from \\'@material-ui/core\\';\\n```\\n\\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\\n\\nA `TableCell` based component for placing inside `TableFooter` for pagination.\\n\\n## Component name\\n\\nThe `MuiTablePagination` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\\n\\n## Props\\n\\n| Name | Type | Default | Description |\\n|:-----|:-----|:--------|:------------|\\n| <span class=\"prop-name\">ActionsComponent</span> | <span class=\"prop-type\">elementType</span> | <span class=\"prop-default\">TablePaginationActions</span> | The component used for displaying the actions. Either a string to use a HTML element or a component. |\\n| <span class=\"prop-name\">backIconButtonProps</span> | <span class=\"prop-type\">object</span> |  | Props applied to the back arrow [`IconButton`](/api/icon-button/) component. |\\n| <span class=\"prop-name\">classes</span> | <span class=\"prop-type\">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\\n| <span class=\"prop-name\">component</span> | <span class=\"prop-type\">elementType</span> | <span class=\"prop-default\">TableCell</span> | The component used for the root node. Either a string to use a HTML element or a component. |\\n| <span class=\"prop-name required\">count<abbr title=\"required\">*</abbr></span> | <span class=\"prop-type\">number</span> |  | The total number of rows.<br>To enable server side pagination for an unknown number of items, provide -1. |\\n| <span class=\"prop-name\">getItemAriaLabel</span> | <span class=\"prop-type\">func</span> | <span class=\"prop-default\">function defaultGetAriaLabel(type) {  return `Go to ${type} page`;}</span> | Accepts a function which returns a string value that provides a user-friendly name for the current page.<br>For localization purposes, you can use the provided [translations](/guides/localization/).<br><br>**Signature:**<br>`function(type: string) => string`<br>*type:* The link or button type to format (\\'first\\' | \\'last\\' | \\'next\\' | \\'previous\\'). |\\n| <span class=\"prop-name\">labelDisplayedRows</span> | <span class=\"prop-type\">func</span> | <span class=\"prop-default\">function defaultLabelDisplayedRows({ from, to, count }) {  return `${from}-${to} of ${count !== -1 ? count : `more than ${to}`}`;}</span> | Customize the displayed rows label. Invoked with a `{ from, to, count, page }` object.<br>For localization purposes, you can use the provided [translations](/guides/localization/). |\\n| <span class=\"prop-name\">labelRowsPerPage</span> | <span class=\"prop-type\">node</span> | <span class=\"prop-default\">\\'Rows per page:\\'</span> | Customize the rows per page label.<br>For localization purposes, you can use the provided [translations](/guides/localization/). |\\n| <span class=\"prop-name\">nextIconButtonProps</span> | <span class=\"prop-type\">object</span> |  | Props applied to the next arrow [`IconButton`](/api/icon-button/) element. |\\n| <span class=\"prop-name required\">onChangePage<abbr title=\"required\">*</abbr></span> | <span class=\"prop-type\">func</span> |  | Callback fired when the page is changed.<br><br>**Signature:**<br>`function(event: object, page: number) => void`<br>*event:* The event source of the callback.<br>*page:* The page selected. |\\n| <span class=\"prop-name\">onChangeRowsPerPage</span> | <span class=\"prop-type\">func</span> |  | Callback fired when the number of rows per page is changed.<br><br>**Signature:**<br>`function(event: object) => void`<br>*event:* The event source of the callback. |\\n| <span class=\"prop-name required\">page<abbr title=\"required\">*</abbr></span> | <span class=\"prop-type\">number</span> |  | The zero-based index of the current page. |\\n| <span class=\"prop-name required\">rowsPerPage<abbr title=\"required\">*</abbr></span> | <span class=\"prop-type\">number</span> |  | The number of rows per page. |\\n| <span class=\"prop-name\">rowsPerPageOptions</span> | <span class=\"prop-type\">array</span> | <span class=\"prop-default\">[10, 25, 50, 100]</span> | Customizes the options of the rows per page select field. If less than two options are available, no select field will be displayed. |\\n| <span class=\"prop-name\">SelectProps</span> | <span class=\"prop-type\">object</span> | <span class=\"prop-default\">{}</span> | Props applied to the rows per page [`Select`](/api/select/) element. |\\n| <span class=\"prop-name\">showFirstButton</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, show the first-page button. |\\n| <span class=\"prop-name\">showLastButton</span> | <span class=\"prop-type\">bool</span> | <span class=\"prop-default\">false</span> | If `true`, show the last-page button. |\\n\\nThe `ref` is forwarded to the root element.\\n\\nAny other props supplied will be provided to the root element ([TableCell](/api/table-cell/)).\\n\\n## CSS\\n\\n| Rule name | Global class | Description |\\n|:-----|:-------------|:------------|\\n| <span class=\"prop-name\">root</span> | <span class=\"prop-name\">.MuiTablePagination-root</span> | Styles applied to the root element.\\n| <span class=\"prop-name\">toolbar</span> | <span class=\"prop-name\">.MuiTablePagination-toolbar</span> | Styles applied to the Toolbar component.\\n| <span class=\"prop-name\">spacer</span> | <span class=\"prop-name\">.MuiTablePagination-spacer</span> | Styles applied to the spacer element.\\n| <span class=\"prop-name\">caption</span> | <span class=\"prop-name\">.MuiTablePagination-caption</span> | Styles applied to the caption Typography components if `variant=\"caption\"`.\\n| <span class=\"prop-name\">selectRoot</span> | <span class=\"prop-name\">.MuiTablePagination-selectRoot</span> | Styles applied to the Select component root element.\\n| <span class=\"prop-name\">select</span> | <span class=\"prop-name\">.MuiTablePagination-select</span> | Styles applied to the Select component `select` class.\\n| <span class=\"prop-name\">selectIcon</span> | <span class=\"prop-name\">.MuiTablePagination-selectIcon</span> | Styles applied to the Select component `icon` class.\\n| <span class=\"prop-name\">input</span> | <span class=\"prop-name\">.MuiTablePagination-input</span> | Styles applied to the `InputBase` component.\\n| <span class=\"prop-name\">menuItem</span> | <span class=\"prop-name\">.MuiTablePagination-menuItem</span> | Styles applied to the MenuItem component.\\n| <span class=\"prop-name\">actions</span> | <span class=\"prop-name\">.MuiTablePagination-actions</span> | Styles applied to the internal `TablePaginationActions` component.\\n\\nYou can override the style of the component thanks to one of these customization points:\\n\\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\\n- With a theme and an [`overrides` property](/customization/globals/#css).\\n\\nIf that\\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/TablePagination/TablePagination.js) for more detail.\\n\\n## Inheritance\\n\\nThe props of the [TableCell](/api/table-cell/) component are also available.\\nYou can take advantage of this behavior to [target nested components](/guides/api/#spread).\\n\\n## Demos\\n\\n- [Tables](/components/tables/)\\n\\n'},Ps15:function(e,n,a){\"use strict\";a.r(n),a.d(n,\"default\",(function(){return l}));var s=a(\"mXGw\"),o=a.n(s),t=a(\"e+1t\"),p=a(\"kVtE\"),r=o.a.createElement,i=a(\"7oZm\");function l(e){var n=e.docs;return r(t.a,{docs:n})}l.getInitialProps=function(){var e=Object(p.a)({pageFilename:\"api/table-pagination\",requireRaw:i});return{demos:e.demos,docs:e.docs}}},xB47:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/api-docs/table-pagination\",function(){return a(\"Ps15\")}])}},[[\"xB47\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}