{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[311],{\"+jEb\":function(e,n){e.exports=\"# R\\xe9duire la taille du bundle\\n\\n<p class=\\\"description\\\">En savoir plus sur les outils que vous pouvez utiliser pour r\\xe9duire la taille du bundle.</p>\\n\\n## La taille du bundle compte\\n\\nThe bundle size of Material-UI is taken very seriously. Size snapshots are taken on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). Combined with [dangerJS](https://danger.systems/js/) we can inspect [detailed bundle size changes](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) on every Pull Request.\\n\\n## When and how to use tree-shaking?\\n\\nTree-shaking of Material-UI works out of the box in modern frameworks. Material-UI exposes its full API on the top-level `material-ui` import. If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and still get an optimised bundle size automatically:\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\n\\u26a0\\ufe0f The following instructions are only needed if you want to optimize your development startup times or if you are using an older bundler that doesn't support tree-shaking.\\n\\n## Development environment\\n\\nDevelopment bundles can contain the full library which can lead to **slower startup times**. This is especially noticeable if you import from `@material-ui/icons`. Startup times can be approximately 6x slower than without named imports from the top-level API.\\n\\nIf this is an issue for you, you have various options:\\n\\n### Option 1\\n\\nYou can use path imports to avoid pulling in unused modules. For instance, use:\\n\\n```js\\n// \\ud83d\\ude80 Fast\\nimport Button from '@material-ui/core/Button';\\nimport TextField from '@material-ui/core/TextField';\\n```\\n\\ninstead of top level imports (without a Babel plugin):\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nThis is the option we document in all the demos, since it requires no configuration. It is encouraged for library authors extending the components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\\n\\nWhile importing directly in this manner doesn't use the exports in [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js), this file can serve as a handy reference as to which modules are public.\\n\\nBe aware that we only support first and second level imports. Anything deeper is considered private and can cause issues, such as module duplication in your bundle.\\n\\n```js\\n// \\u2705 OK\\nimport { Add as AddIcon } from '@material-ui/icons';\\nimport { Tabs } from '@material-ui/core';\\n//                                 ^^^^ 1st or top-level\\n\\n// \\u2705 OK\\nimport AddIcon from '@material-ui/icons/Add';\\nimport Tabs from '@material-ui/core/Tabs';\\n//                                  ^^^^ 2nd level\\n\\n// \\u274c NOT OK\\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\\n//                                               ^^^^^^^^^^^^ 3rd level\\n```\\n\\nIf you're using `eslint` you can catch problematic imports with the [`no-restricted-imports` rule](https://eslint.org/docs/rules/no-restricted-imports). The following `.eslintrc` configuration will highlight problematic imports from `@material-ui` packages:\\n\\n```json\\n{\\n  \\\"rules\\\": {\\n    \\\"no-restricted-imports\\\": [\\n      \\\"error\\\",\\n      {\\n        \\\"patterns\\\": [\\\"@material-ui/*/*/*\\\", \\\"!@material-ui/core/test-utils/*\\\"]\\n      }\\n    ]\\n  }\\n}\\n```\\n\\n### Option 2\\n\\nThis option provides the best User Experience and Developer Experience:\\n\\n- UX: The Babel plugin enables top level tree-shaking even if your bundler doesn't support it.\\n- DX: The Babel plugin makes startup time in dev mode as fast as Option 1.\\n- DX: This syntax reduces the duplication of code, requiring only a single import for multiple modules. Overall, the code is easier to read, and you are less likely to make a mistake when importing a new module.\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nHowever, you need to apply the two following steps correctly.\\n\\n#### 1. Configure Babel\\n\\nPick one of the following plugins:\\n\\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\\n\\n  `yarn add -D babel-plugin-import`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/core',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'core'\\n    ],\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/icons',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'icons'\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\\n\\n  `yarn add -D babel-plugin-transform-imports`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-transform-imports',\\n      {\\n        '@material-ui/core': {\\n          // Use \\\"transform: '@material-ui/core/${member}',\\\" if your bundler does not support ES modules\\n          'transform': '@material-ui/core/esm/${member}',\\n          'preventFullImport': true\\n        },\\n        '@material-ui/icons': {\\n          // Use \\\"transform: '@material-ui/icons/${member}',\\\" if your bundler does not support ES modules\\n          'transform': '@material-ui/icons/esm/${member}',\\n          'preventFullImport': true\\n        }\\n      }\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\\n\\n  `yarn add -D react-app-rewired customize-cra`\\n\\n  Create a `config-overrides.js` file in the root directory:\\n\\n  ```js\\n  /* config-overrides.js */\\n  const { useBabelRc, override } = require('customize-cra')\\n\\n  module.exports = override(\\n    useBabelRc()\\n  );\\n  ```\\n\\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\\n\\n  Modify your `package.json` start command:\\n\\n```diff\\n  \\\"scripts\\\": {\\n-  \\\"start\\\": \\\"react-scripts start\\\"\\n+  \\\"start\\\": \\\"react-app-rewired start\\\"\\n  }\\n```\\n\\n  Note: You may run into errors like these:\\n\\n  > Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\\n\\n  This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\\n\\n  You have an import like this in your code:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core';\\n  ```\\n\\n  The fix is simple, define the import separately:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core/styles';\\n  ```\\n\\n  Enjoy significantly faster start times.\\n\\n#### 2. Convert all your imports\\n\\nFinally, you can convert your existing codebase to this option with this [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod. It will perform the following diffs:\\n\\n```diff\\n-import Button from '@material-ui/core/Button';\\n-import TextField from '@material-ui/core/TextField';\\n+import { Button, TextField } from '@material-ui/core';\\n```\\n\\n## ECMAScript\\n\\nThe package published on npm is **transpiled**, with [Babel](https://github.com/babel/babel), to take into account the [supported platforms](/getting-started/supported-platforms/).\\n\\nA second version of the components is also published, which you can find under the [`/es` folder](https://unpkg.com/@material-ui/core/es/). All the non-official syntax is transpiled to the [ECMA-262 standard](https://www.ecma-international.org/publications/standards/Ecma-262.htm), nothing more. This can be used to make separate bundles targeting different browsers. Older browsers will require more JavaScript features to be transpiled, which increases the size of the bundle. No polyfills are included for ES2015 runtime features. IE11+ and evergreen browsers support all the necessary features. If you need support for other browsers, consider using [`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill).\\n\\n\\u26a0\\ufe0f In order to minimize duplication of code in users' bundles, library authors are **strongly discouraged** from using the `/es` folder.\\n\"},\"14MD\":function(e,n){e.exports=\"# Minimizando el tama\\xf1o del paquete\\n\\n<p class=\\\"description\\\">Learn more about the tools you can leverage to reduce the bundle size.</p>\\n\\n## Bundle size matters\\n\\nThe bundle size of Material-UI is taken very seriously. Size snapshots are taken on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). Combined with [dangerJS](https://danger.systems/js/) we can inspect [detailed bundle size changes](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) on every Pull Request.\\n\\n## When and how to use tree-shaking?\\n\\nTree-shaking of Material-UI works out of the box in modern frameworks. Material-UI exposes its full API on the top-level `material-ui` import. If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and still get an optimised bundle size automatically:\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\n\\u26a0\\ufe0f The following instructions are only needed if you want to optimize your development startup times or if you are using an older bundler that doesn't support tree-shaking.\\n\\n## Development environment\\n\\nDevelopment bundles can contain the full library which can lead to **slower startup times**. This is especially noticeable if you import from `@material-ui/icons`. Startup times can be approximately 6x slower than without named imports from the top-level API.\\n\\nIf this is an issue for you, you have various options:\\n\\n### Option 1\\n\\nYou can use path imports to avoid pulling in unused modules. For instance, use:\\n\\n```js\\n// \\ud83d\\ude80 Fast\\nimport Button from '@material-ui/core/Button';\\nimport TextField from '@material-ui/core/TextField';\\n```\\n\\ninstead of top level imports (without a Babel plugin):\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nThis is the option we document in all the demos, since it requires no configuration. It is encouraged for library authors extending the components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\\n\\nWhile importing directly in this manner doesn't use the exports in [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js), this file can serve as a handy reference as to which modules are public.\\n\\nBe aware that we only support first and second level imports. Anything deeper is considered private and can cause issues, such as module duplication in your bundle.\\n\\n```js\\n// \\u2705 OK\\nimport { Add as AddIcon } from '@material-ui/icons';\\nimport { Tabs } from '@material-ui/core';\\n//                                 ^^^^ 1st or top-level\\n\\n// \\u2705 OK\\nimport AddIcon from '@material-ui/icons/Add';\\nimport Tabs from '@material-ui/core/Tabs';\\n//                                  ^^^^ 2nd level\\n\\n// \\u274c NOT OK\\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\\n//                                               ^^^^^^^^^^^^ 3rd level\\n```\\n\\nIf you're using `eslint` you can catch problematic imports with the [`no-restricted-imports` rule](https://eslint.org/docs/rules/no-restricted-imports). The following `.eslintrc` configuration will highlight problematic imports from `@material-ui` packages:\\n\\n```json\\n{\\n  \\\"rules\\\": {\\n    \\\"no-restricted-imports\\\": [\\n      \\\"error\\\",\\n      {\\n        \\\"patterns\\\": [\\\"@material-ui/*/*/*\\\", \\\"!@material-ui/core/test-utils/*\\\"]\\n      }\\n    ]\\n  }\\n}\\n```\\n\\n### Option 2\\n\\nThis option provides the best User Experience and Developer Experience:\\n\\n- UX: The Babel plugin enables top level tree-shaking even if your bundler doesn't support it.\\n- DX: The Babel plugin makes startup time in dev mode as fast as Option 1.\\n- DX: This syntax reduces the duplication of code, requiring only a single import for multiple modules. Overall, the code is easier to read, and you are less likely to make a mistake when importing a new module.\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nHowever, you need to apply the two following steps correctly.\\n\\n#### 1. Configure Babel\\n\\nPick one of the following plugins:\\n\\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\\n\\n  `yarn add -D babel-plugin-import`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/core',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'core'\\n    ],\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/icons',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'icons'\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\\n\\n  `yarn add -D babel-plugin-transform-imports`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-transform-imports',\\n      {\\n        '@material-ui/core': {\\n          // Use \\\"transform: '@material-ui/core/${member}',\\\" if your bundler does not support ES modules\\n          'transform': '@material-ui/core/esm/${member}',\\n          'preventFullImport': true\\n        },\\n        '@material-ui/icons': {\\n          // Use \\\"transform: '@material-ui/icons/${member}',\\\" if your bundler does not support ES modules\\n          'transform': '@material-ui/icons/esm/${member}',\\n          'preventFullImport': true\\n        }\\n      }\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\\n\\n  `yarn add -D react-app-rewired customize-cra`\\n\\n  Create a `config-overrides.js` file in the root directory:\\n\\n  ```js\\n  /* config-overrides.js */\\n  const { useBabelRc, override } = require('customize-cra')\\n\\n  module.exports = override(\\n    useBabelRc()\\n  );\\n  ```\\n\\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\\n\\n  Modify your `package.json` start command:\\n\\n```diff\\n  \\\"scripts\\\": {\\n-  \\\"start\\\": \\\"react-scripts start\\\"\\n+  \\\"start\\\": \\\"react-app-rewired start\\\"\\n  }\\n```\\n\\n  Note: You may run into errors like these:\\n\\n  > Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\\n\\n  This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\\n\\n  You have an import like this in your code:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core';\\n  ```\\n\\n  The fix is simple, define the import separately:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core/styles';\\n  ```\\n\\n  Enjoy significantly faster start times.\\n\\n#### 2. Convert all your imports\\n\\nFinally, you can convert your existing codebase to this option with this [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod. It will perform the following diffs:\\n\\n```diff\\n-import Button from '@material-ui/core/Button';\\n-import TextField from '@material-ui/core/TextField';\\n+import { Button, TextField } from '@material-ui/core';\\n```\\n\\n## ECMAScript\\n\\nThe package published on npm is **transpiled**, with [Babel](https://github.com/babel/babel), to take into account the [supported platforms](/getting-started/supported-platforms/).\\n\\nA second version of the components is also published, which you can find under the [`/es` folder](https://unpkg.com/@material-ui/core/es/). All the non-official syntax is transpiled to the [ECMA-262 standard](https://www.ecma-international.org/publications/standards/Ecma-262.htm), nothing more. This can be used to make separate bundles targeting different browsers. Older browsers will require more JavaScript features to be transpiled, which increases the size of the bundle. No polyfills are included for ES2015 runtime features. IE11+ and evergreen browsers support all the necessary features. If you need support for other browsers, consider using [`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill).\\n\\n\\u26a0\\ufe0f In order to minimize duplication of code in users' bundles, library authors are **strongly discouraged** from using the `/es` folder.\\n\"},\"3it3\":function(e,n){function t(e){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id=\"3it3\"},\"54V7\":function(e,n){e.exports=\"# Minimizing Bundle Size\\n\\n<p class=\\\"description\\\">Learn more about the tools you can leverage to reduce the bundle size.</p>\\n\\n## Bundle size matters\\n\\n\\u0420\\u0430\\u0437\\u043c\\u0435\\u0440 \\u043f\\u0430\\u043a\\u0435\\u0442\\u0430 Material-UI \\u0434\\u043e\\u0441\\u0442\\u0430\\u0442\\u043e\\u0447\\u043d\\u043e \\u0432\\u043d\\u0443\\u0448\\u0438\\u0442\\u0435\\u043b\\u0435\\u043d. Size snapshots are taken on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). Combined with [dangerJS](https://danger.systems/js/) we can inspect [detailed bundle size changes](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) on every Pull Request.\\n\\n## When and how to use tree-shaking?\\n\\nTree-shaking of Material-UI works out of the box in modern frameworks. Material-UI exposes its full API on the top-level `material-ui` import. If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and still get an optimised bundle size automatically:\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\n\\u26a0\\ufe0f The following instructions are only needed if you want to optimize your development startup times or if you are using an older bundler that doesn't support tree-shaking.\\n\\n## Development environment\\n\\nDevelopment bundles can contain the full library which can lead to **slower startup times**. This is especially noticeable if you import from `@material-ui/icons`. Startup times can be approximately 6x slower than without named imports from the top-level API.\\n\\nIf this is an issue for you, you have various options:\\n\\n### Option 1\\n\\nYou can use path imports to avoid pulling in unused modules. For instance, use:\\n\\n```js\\n// \\ud83d\\ude80 Fast\\nimport Button from '@material-ui/core/Button';\\nimport TextField from '@material-ui/core/TextField';\\n```\\n\\ninstead of top level imports (without a Babel plugin):\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nThis is the option we document in all the demos, since it requires no configuration. It is encouraged for library authors extending the components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\\n\\nWhile importing directly in this manner doesn't use the exports in [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js), this file can serve as a handy reference as to which modules are public.\\n\\nBe aware that we only support first and second level imports. Anything deeper is considered private and can cause issues, such as module duplication in your bundle.\\n\\n```js\\n// \\u2705 OK\\nimport { Add as AddIcon } from '@material-ui/icons';\\nimport { Tabs } from '@material-ui/core';\\n//                                 ^^^^ 1st or top-level\\n\\n// \\u2705 OK\\nimport AddIcon from '@material-ui/icons/Add';\\nimport Tabs from '@material-ui/core/Tabs';\\n//                                  ^^^^ 2nd level\\n\\n// \\u274c NOT OK\\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\\n//                                               ^^^^^^^^^^^^ 3rd level\\n```\\n\\nIf you're using `eslint` you can catch problematic imports with the [`no-restricted-imports` rule](https://eslint.org/docs/rules/no-restricted-imports). The following `.eslintrc` configuration will highlight problematic imports from `@material-ui` packages:\\n\\n```json\\n{\\n  \\\"rules\\\": {\\n    \\\"no-restricted-imports\\\": [\\n      \\\"error\\\",\\n      {\\n        \\\"patterns\\\": [\\\"@material-ui/*/*/*\\\", \\\"!@material-ui/core/test-utils/*\\\"]\\n      }\\n    ]\\n  }\\n}\\n```\\n\\n### Option 2\\n\\nThis option provides the best User Experience and Developer Experience:\\n\\n- UX: The Babel plugin enables top level tree-shaking even if your bundler doesn't support it.\\n- DX: The Babel plugin makes startup time in dev mode as fast as Option 1.\\n- DX: This syntax reduces the duplication of code, requiring only a single import for multiple modules. Overall, the code is easier to read, and you are less likely to make a mistake when importing a new module.\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nHowever, you need to apply the two following steps correctly.\\n\\n#### 1. Configure Babel\\n\\nPick one of the following plugins:\\n\\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\\n\\n  `yarn add -D babel-plugin-import`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/core',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'core'\\n    ],\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/icons',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'icons'\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\\n\\n  `yarn add -D babel-plugin-transform-imports`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-transform-imports',\\n      {\\n        '@material-ui/core': {\\n          // Use \\\"transform: '@material-ui/core/${member}',\\\" if your bundler does not support ES modules\\n          'transform': '@material-ui/core/esm/${member}',\\n          'preventFullImport': true\\n        },\\n        '@material-ui/icons': {\\n          // Use \\\"transform: '@material-ui/icons/${member}',\\\" if your bundler does not support ES modules\\n          'transform': '@material-ui/icons/esm/${member}',\\n          'preventFullImport': true\\n        }\\n      }\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\\n\\n  `yarn add -D react-app-rewired customize-cra`\\n\\n  Create a `config-overrides.js` file in the root directory:\\n\\n  ```js\\n  /* config-overrides.js */\\n  const { useBabelRc, override } = require('customize-cra')\\n\\n  module.exports = override(\\n    useBabelRc()\\n  );\\n  ```\\n\\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\\n\\n  Modify your `package.json` start command:\\n\\n```diff\\n  \\\"scripts\\\": {\\n-  \\\"start\\\": \\\"react-scripts start\\\"\\n+  \\\"start\\\": \\\"react-app-rewired start\\\"\\n  }\\n```\\n\\n  Note: You may run into errors like these:\\n\\n  > Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\\n\\n  This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\\n\\n  You have an import like this in your code:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core';\\n  ```\\n\\n  The fix is simple, define the import separately:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core/styles';\\n  ```\\n\\n  Enjoy significantly faster start times.\\n\\n#### 2. Convert all your imports\\n\\nFinally, you can convert your existing codebase to this option with this [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod. It will perform the following diffs:\\n\\n```diff\\n-import Button from '@material-ui/core/Button';\\n-import TextField from '@material-ui/core/TextField';\\n+import { Button, TextField } from '@material-ui/core';\\n```\\n\\n## ECMAScript\\n\\nThe package published on npm is **transpiled**, with [Babel](https://github.com/babel/babel), to take into account the [supported platforms](/getting-started/supported-platforms/).\\n\\nA second version of the components is also published, which you can find under the [`/es` folder](https://unpkg.com/@material-ui/core/es/). All the non-official syntax is transpiled to the [ECMA-262 standard](https://www.ecma-international.org/publications/standards/Ecma-262.htm), nothing more. This can be used to make separate bundles targeting different browsers. Older browsers will require more JavaScript features to be transpiled, which increases the size of the bundle. No polyfills are included for ES2015 runtime features. IE11+ and evergreen browsers support all the necessary features. If you need support for other browsers, consider using [`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill).\\n\\n\\u26a0\\ufe0f In order to minimize duplication of code in users' bundles, library authors are **strongly discouraged** from using the `/es` folder.\\n\"},\"7ldP\":function(e,n,t){\"use strict\";t.r(n),t.d(n,\"default\",(function(){return m}));var r=t(\"mXGw\"),o=t.n(r),i=t(\"e+1t\"),a=t(\"kVtE\"),s=o.a.createElement,l=t(\"3it3\"),u=t(\"jG02\");function m(e){var n=e.demos,t=e.docs;return s(i.a,{demos:n,docs:t,requireDemo:l})}m.getInitialProps=function(){var e=Object(a.a)({pageFilename:\"guides/minimizing-bundle-size\",requireRaw:u});return{demos:e.demos,docs:e.docs}}},BfDt:function(e,n){e.exports=\"# Paketgr\\xf6\\xdfe minimieren\\n\\n<p class=\\\"description\\\">Erfahren Sie mehr \\xfcber die Tools, mit denen Sie die Paketgr\\xf6\\xdfe reduzieren k\\xf6nnen.</p>\\n\\n## Paketgr\\xf6\\xdfe z\\xe4hlt\\n\\nDie Paketgr\\xf6\\xdfe von Material-UI wird sehr ernst genommen. Size snapshots are taken on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). Wir k\\xf6nnen, kombiniert mit [dangerJS](https://danger.systems/js/), [detaillierte \\xc4nderungen der B\\xfcndelgr\\xf6\\xdfe](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) bei jedem Pull Request pr\\xfcfen.\\n\\n## When and how to use tree-shaking?\\n\\nTree-shaking of Material-UI works out of the box in modern frameworks. Material-UI exposes its full API on the top-level `material-ui` import. If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and still get an optimised bundle size automatically:\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\n\\u26a0\\ufe0f The following instructions are only needed if you want to optimize your development startup times or if you are using an older bundler that doesn't support tree-shaking.\\n\\n## Development environment\\n\\nDevelopment bundles can contain the full library which can lead to **slower startup times**. This is especially noticeable if you import from `@material-ui/icons`. Die Startzeiten k\\xf6nnen ungef\\xe4hr 6-mal langsamer sein als ohne benannte Importe von der API der obersten Ebene.\\n\\nIf this is an issue for you, you have various options:\\n\\n### Option 1\\n\\nSie k\\xf6nnen Pfadimporte verwenden, um zu vermeiden, dass nicht verwendete Module abgerufen werden. For instance, use:\\n\\n```js\\n// \\ud83d\\ude80 Fast\\nimport Button from '@material-ui/core/Button';\\nimport TextField from '@material-ui/core/TextField';\\n```\\n\\ninstead of top level imports (without a Babel plugin):\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nThis is the option we document in all the demos, since it requires no configuration. It is encouraged for library authors extending the components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\\n\\nBeim direkten Importieren auf diese Weise werden die Exporte in [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js) nicht verwendet. Diese Datei kann trotzdem als praktische Referenz f\\xfcr die \\xf6ffentlichen Module dienen.\\n\\nBe aware that we only support first and second level imports. Anything deeper is considered private and can cause issues, such as module duplication in your bundle.\\n\\n```js\\n// \\u2705 OK\\nimport { Add as AddIcon } from '@material-ui/icons';\\nimport { Tabs } from '@material-ui/core';\\n//                                 ^^^^ 1st or top-level\\n\\n// \\u2705 OK\\nimport AddIcon from '@material-ui/icons/Add';\\nimport Tabs from '@material-ui/core/Tabs';\\n//                                  ^^^^ 2nd level\\n\\n// \\u274c NOT OK\\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\\n//                                               ^^^^^^^^^^^^ 3rd level\\n```\\n\\nIf you're using `eslint` you can catch problematic imports with the [`no-restricted-imports` rule](https://eslint.org/docs/rules/no-restricted-imports). The following `.eslintrc` configuration will highlight problematic imports from `@material-ui` packages:\\n\\n```json\\n{\\n  \\\"rules\\\": {\\n    \\\"no-restricted-imports\\\": [\\n      \\\"error\\\",\\n      {\\n        \\\"patterns\\\": [\\\"@material-ui/*/*/*\\\", \\\"!@material-ui/core/test-utils/*\\\"]\\n      }\\n    ]\\n  }\\n}\\n```\\n\\n### Option 2\\n\\nThis option provides the best User Experience and Developer Experience:\\n\\n- UX: The Babel plugin enables top level tree-shaking even if your bundler doesn't support it.\\n- DX: The Babel plugin makes startup time in dev mode as fast as Option 1.\\n- DX: This syntax reduces the duplication of code, requiring only a single import for multiple modules. Overall, the code is easier to read, and you are less likely to make a mistake when importing a new module.\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nHowever, you need to apply the two following steps correctly.\\n\\n#### 1. Configure Babel\\n\\nW\\xe4hlen Sie eines der folgenden Plugins:\\n\\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\\n\\n  `yarn add -D babel-plugin-import`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/core',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'core'\\n    ],\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/icons',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'icons'\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\\n\\n  `yarn add -D babel-plugin-transform-imports`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-transform-imports',\\n      {\\n        '@material-ui/core': {\\n          // Use \\\"transform: '@material-ui/core/${member}',\\\" if your bundler does not support ES modules\\n          'transform': '@material-ui/core/esm/${member}',\\n          'preventFullImport': true\\n        },\\n        '@material-ui/icons': {\\n          // Use \\\"transform: '@material-ui/icons/${member}',\\\" if your bundler does not support ES modules\\n          'transform': '@material-ui/icons/esm/${member}',\\n          'preventFullImport': true\\n        }\\n      }\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\\n\\n  `yarn add -D react-app-rewired customize-cra`\\n\\n  Create a `config-overrides.js` file in the root directory:\\n\\n  ```js\\n  /* config-overrides.js */\\n  const { useBabelRc, override } = require('customize-cra')\\n\\n  module.exports = override(\\n    useBabelRc()\\n  );\\n  ```\\n\\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\\n\\n  Modify your `package.json` start command:\\n\\n```diff\\n  \\\"scripts\\\": {\\n-  \\\"start\\\": \\\"react-scripts start\\\"\\n+  \\\"start\\\": \\\"react-app-rewired start\\\"\\n  }\\n```\\n\\n  Note: You may run into errors like these:\\n\\n  > Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\\n\\n  This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\\n\\n  You have an import like this in your code:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core';\\n  ```\\n\\n  The fix is simple, define the import separately:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core/styles';\\n  ```\\n\\n  Enjoy significantly faster start times.\\n\\n#### 2. Convert all your imports\\n\\nFinally, you can convert your existing codebase to this option with this [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod. It will perform the following diffs:\\n\\n```diff\\n-import Button from '@material-ui/core/Button';\\n-import TextField from '@material-ui/core/TextField';\\n+import { Button, TextField } from '@material-ui/core';\\n```\\n\\n## ECMAScript\\n\\nDas auf npm ver\\xf6ffentlichte Paket ist mit [Babel](https://github.com/babel/babel) **transpiliert**, um die [ unterst\\xfctzten Plattformen](/getting-started/supported-platforms/) zu ber\\xfccksichtigen.\\n\\nA second version of the components is also published, which you can find under the [`/es` folder](https://unpkg.com/@material-ui/core/es/). Die gesamte nicht offizielle Syntax wird auf den [ECMA-262 Standard](https://www.ecma-international.org/publications/standards/Ecma-262.htm) transpiliert, nichts mehr. Dies kann verwendet werden, um separate Bundles f\\xfcr verschiedene Browser zu erstellen. \\xc4ltere Browser erfordern mehr transpilierte JavaScript-Funktionen. Dies erh\\xf6ht die Gr\\xf6\\xdfe des Packets. F\\xfcr die Laufzeitfunktionen von ES2015 sind keine polyfills enthalten. IE11 + und Evergreen-Browser unterst\\xfctzen alle erforderlichen Funktionen. Wenn Sie Unterst\\xfctzung f\\xfcr andere Browser ben\\xf6tigen, sollten Sie [`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill) in Betracht ziehen.\\n\\n\\u26a0\\ufe0f In order to minimize duplication of code in users' bundles, library authors are **strongly discouraged** from using the `/es` folder.\\n\"},Lb4E:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/guides/minimizing-bundle-size\",function(){return t(\"7ldP\")}])},RxNz:function(e,n){e.exports=\"# \\u30d0\\u30f3\\u30c9\\u30eb\\u30b5\\u30a4\\u30ba\\u306e\\u6700\\u5c0f\\u5316\\n\\n<p class=\\\"description\\\">Learn more about the tools you can leverage to reduce the bundle size.</p>\\n\\n## Bundle size matters\\n\\nThe bundle size of Material-UI is taken very seriously. Size snapshots are taken on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). Combined with [dangerJS](https://danger.systems/js/) we can inspect [detailed bundle size changes](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) on every Pull Request.\\n\\n## When and how to use tree-shaking?\\n\\nTree-shaking of Material-UI works out of the box in modern frameworks. Material-UI exposes its full API on the top-level `material-ui` import. If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and still get an optimised bundle size automatically:\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\n\\u26a0\\ufe0f The following instructions are only needed if you want to optimize your development startup times or if you are using an older bundler that doesn't support tree-shaking.\\n\\n## Development environment\\n\\nDevelopment bundles can contain the full library which can lead to **slower startup times**. This is especially noticeable if you import from `@material-ui/icons`. Startup times can be approximately 6x slower than without named imports from the top-level API.\\n\\nIf this is an issue for you, you have various options:\\n\\n### Option 1\\n\\nYou can use path imports to avoid pulling in unused modules. For instance, use:\\n\\n```js\\n// \\ud83d\\ude80 Fast\\nimport Button from '@material-ui/core/Button';\\nimport TextField from '@material-ui/core/TextField';\\n```\\n\\ninstead of top level imports (without a Babel plugin):\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nThis is the option we document in all the demos, since it requires no configuration. It is encouraged for library authors extending the components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\\n\\nWhile importing directly in this manner doesn't use the exports in [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js), this file can serve as a handy reference as to which modules are public.\\n\\nBe aware that we only support first and second level imports. Anything deeper is considered private and can cause issues, such as module duplication in your bundle.\\n\\n```js\\n// \\u2705 OK\\nimport { Add as AddIcon } from '@material-ui/icons';\\nimport { Tabs } from '@material-ui/core';\\n//                                 ^^^^ 1st or top-level\\n\\n// \\u2705 OK\\nimport AddIcon from '@material-ui/icons/Add';\\nimport Tabs from '@material-ui/core/Tabs';\\n//                                  ^^^^ 2nd level\\n\\n// \\u274c NOT OK\\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\\n//                                               ^^^^^^^^^^^^ 3rd level\\n```\\n\\nIf you're using `eslint` you can catch problematic imports with the [`no-restricted-imports` rule](https://eslint.org/docs/rules/no-restricted-imports). The following `.eslintrc` configuration will highlight problematic imports from `@material-ui` packages:\\n\\n```json\\n{\\n  \\\"rules\\\": {\\n    \\\"no-restricted-imports\\\": [\\n      \\\"error\\\",\\n      {\\n        \\\"patterns\\\": [\\\"@material-ui/*/*/*\\\", \\\"!@material-ui/core/test-utils/*\\\"]\\n      }\\n    ]\\n  }\\n}\\n```\\n\\n### Option 2\\n\\nThis option provides the best User Experience and Developer Experience:\\n\\n- UX: The Babel plugin enables top level tree-shaking even if your bundler doesn't support it.\\n- DX: The Babel plugin makes startup time in dev mode as fast as Option 1.\\n- DX: This syntax reduces the duplication of code, requiring only a single import for multiple modules. Overall, the code is easier to read, and you are less likely to make a mistake when importing a new module.\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nHowever, you need to apply the two following steps correctly.\\n\\n#### 1. Configure Babel\\n\\nPick one of the following plugins:\\n\\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\\n\\n  `yarn add -D babel-plugin-import`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/core',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'core'\\n    ],\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/icons',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'icons'\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\\n\\n  `yarn add -D babel-plugin-transform-imports`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-transform-imports',\\n      {\\n        '@material-ui/core': {\\n          // Use \\\"transform: '@material-ui/core/${member}',\\\" if your bundler does not support ES modules\\n          'transform': '@material-ui/core/esm/${member}',\\n          'preventFullImport': true\\n        },\\n        '@material-ui/icons': {\\n          // Use \\\"transform: '@material-ui/icons/${member}',\\\" if your bundler does not support ES modules\\n          'transform': '@material-ui/icons/esm/${member}',\\n          'preventFullImport': true\\n        }\\n      }\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\\n\\n  `yarn add -D react-app-rewired customize-cra`\\n\\n  Create a `config-overrides.js` file in the root directory:\\n\\n  ```js\\n  /* config-overrides.js */\\n  const { useBabelRc, override } = require('customize-cra')\\n\\n  module.exports = override(\\n    useBabelRc()\\n  );\\n  ```\\n\\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\\n\\n  Modify your `package.json` start command:\\n\\n```diff\\n  \\\"scripts\\\": {\\n-  \\\"start\\\": \\\"react-scripts start\\\"\\n+  \\\"start\\\": \\\"react-app-rewired start\\\"\\n  }\\n```\\n\\n  Note: You may run into errors like these:\\n\\n  > Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\\n\\n  This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\\n\\n  You have an import like this in your code:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core';\\n  ```\\n\\n  The fix is simple, define the import separately:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core/styles';\\n  ```\\n\\n  Enjoy significantly faster start times.\\n\\n#### 2. Convert all your imports\\n\\nFinally, you can convert your existing codebase to this option with this [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod. It will perform the following diffs:\\n\\n```diff\\n-import Button from '@material-ui/core/Button';\\n-import TextField from '@material-ui/core/TextField';\\n+import { Button, TextField } from '@material-ui/core';\\n```\\n\\n## ECMAScript\\n\\nThe package published on npm is **transpiled**, with [Babel](https://github.com/babel/babel), to take into account the [supported platforms](/getting-started/supported-platforms/).\\n\\nA second version of the components is also published, which you can find under the [`/es` folder](https://unpkg.com/@material-ui/core/es/). All the non-official syntax is transpiled to the [ECMA-262 standard](https://www.ecma-international.org/publications/standards/Ecma-262.htm), nothing more. This can be used to make separate bundles targeting different browsers. Older browsers will require more JavaScript features to be transpiled, which increases the size of the bundle. No polyfills are included for ES2015 runtime features. IE11+ and evergreen browsers support all the necessary features. If you need support for other browsers, consider using [`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill).\\n\\n\\u26a0\\ufe0f In order to minimize duplication of code in users' bundles, library authors are **strongly discouraged** from using the `/es` folder.\\n\"},UGFc:function(e,n){e.exports=\"# Minimizando o tamanho do pacote\\n\\n<p class=\\\"description\\\">Saiba mais sobre as ferramentas que voc\\xea pode aproveitar para reduzir o tamanho do pacote.</p>\\n\\n## Tamanho do pacote importa\\n\\nO tamanho do pacote de Material-UI \\xe9 levado muito a s\\xe9rio. Fotos contendo o tamanho do pacote s\\xe3o feitas em cada commit e partes cr\\xedticas dos pacotes([veja a \\xfaltima foto](/size-snapshot)). Combinado com [dangerJS](https://danger.systems/js/) podemos inspecionar [altera\\xe7\\xf5es detalhadas no tamanho do pacote](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) em cada solicita\\xe7\\xe3o de Pull Request.\\n\\n## Quando e como usar tree-shaking?\\n\\nTree-shaking no Material-UI funciona de uma forma moderna. Material-UI exp\\xf5e sua API completa na importa\\xe7\\xe3o do n\\xedvel superior `material-ui`. Se voc\\xea estiver usando m\\xf3dulos ES6 e um bundler que suporta tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` com uma propriedade definida](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) voc\\xea pode usar com seguran\\xe7a importa\\xe7\\xf5es nomeadas e ainda assim, obter automaticamente um tamanho otimizado do pacote:\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\n\\u26a0\\ufe0f As instru\\xe7\\xf5es a seguir s\\xe3o somente necess\\xe1rias se voc\\xea deseja otimizar o tempo de startup em desenvolvimento ou se voc\\xea esta utilizando um bundler antigo que n\\xe3o suporte tree-shaking.\\n\\n## Ambiente de desenvolvimento\\n\\nOs pacotes de desenvolvimento podem conter a biblioteca completa que pode deixar **o tempo de inicializa\\xe7\\xe3o mais lento**. Isso \\xe9 especialmente percept\\xedvel se voc\\xea importar de `@material-ui/icons`. Os tempos de inicializa\\xe7\\xe3o podem ser aproximadamente 6 vezes mais lentos do que sem utilizar importa\\xe7\\xf5es nomeadas da API de n\\xedvel superior.\\n\\nSe isso \\xe9 um problema para voc\\xea, tem v\\xe1rias op\\xe7\\xf5es:\\n\\n### Op\\xe7\\xe3o 1\\n\\nVoc\\xea pode usar as importa\\xe7\\xf5es de caminho para evitar puxar m\\xf3dulos n\\xe3o utilizados. Por exemplo, use:\\n\\n```js\\n// \\ud83d\\ude80 R\\xe1pida\\nimport Button from '@material-ui/core/Button';\\nimport TextField from '@material-ui/core/TextField';\\n```\\n\\nem vez de importa\\xe7\\xf5es de n\\xedvel superior (sem um plugin do Babel):\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nEsta \\xe9 a op\\xe7\\xe3o que apresentamos em todas as demonstra\\xe7\\xf5es, pois n\\xe3o exige qualquer configura\\xe7\\xe3o. \\xc9 o mais recomend\\xe1vel para autores de biblioteca que estendem os componentes. V\\xe1 at\\xe9 [Op\\xe7\\xe3o 2](#option-2) para uma abordagem que produz uma melhor DX e UX.\\n\\nAo importar diretamente dessa maneira, n\\xe3o utiliza as exporta\\xe7\\xf5es em [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js), esse arquivo pode servir como uma refer\\xeancia \\xfatil para quais m\\xf3dulos s\\xe3o p\\xfablicos.\\n\\nEsteja ciente de que apenas damos suporte para as importa\\xe7\\xf5es de primeiro e segundo n\\xedvel. Qualquer coisa em n\\xedveis mais profundos \\xe9 considerado privado e pode causar problemas, como a duplica\\xe7\\xe3o de m\\xf3dulos em seu pacote.\\n\\n```js\\n// \\u2705 OK\\nimport { Add as AddIcon } from '@material-ui/icons';\\nimport { Tabs } from '@material-ui/core';\\n//                                 ^^^^ 1\\xb0 ou n\\xedvel superior\\n\\n// \\u2705 OK\\nimport AddIcon from '@material-ui/icons/Add';\\nimport Tabs from '@material-ui/core/Tabs';\\n//                                  ^^^^ 2\\xb0 n\\xedvel\\n\\n// \\u274c N\\xc3O OK\\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\\n//                                               ^^^^^^^^^^^^ 3\\xb0 n\\xedvel\\n```\\n\\nSe voc\\xea estiver usando `eslint` voc\\xea pode capturar est\\xe1 problem\\xe1tica de importa\\xe7\\xf5es com a regra [`no-restricted-imports`](https://eslint.org/docs/rules/no-restricted-imports). A configura\\xe7\\xe3o `.eslintrc` a seguir ir\\xe1 capturar as problem\\xe1ticas das importa\\xe7\\xf5es dos pacotes `@material-ui`:\\n\\n```json\\n{\\n  \\\"rules\\\": {\\n    \\\"no-restricted-imports\\\": [\\n      \\\"error\\\",\\n      {\\n        \\\"patterns\\\": [\\\"@material-ui/*/*/*\\\", \\\"!@material-ui/core/test-utils/*\\\"]\\n      }\\n    ]\\n  }\\n}\\n```\\n\\n### Op\\xe7\\xe3o 2\\n\\nEsta op\\xe7\\xe3o fornece a melhor Experi\\xeancia do Usu\\xe1rio e Experi\\xeancia do Desenvolvedor:\\n\\n- UX: O plugin Babel permite tree-shaking de n\\xedvel superior, mesmo se o seu bundler n\\xe3o suporte.\\n- DX: O plugin Babel torna o tempo de inicializa\\xe7\\xe3o no modo de desenvolvimento t\\xe3o r\\xe1pido quanto a op\\xe7\\xe3o 1.\\n- DX: Essa sintaxe reduz a duplica\\xe7\\xe3o de c\\xf3digo, exigindo apenas uma \\xfanica importa\\xe7\\xe3o para v\\xe1rios m\\xf3dulos. Em geral, o c\\xf3digo \\xe9 mais f\\xe1cil de ser lido, e \\xe9 menos prov\\xe1vel que voc\\xea cometa um erro ao importar um novo m\\xf3dulo.\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nNo entanto, voc\\xea precisa aplicar as duas etapas seguintes corretamente.\\n\\n#### 1. Configure o Babel\\n\\nEscolha um dos seguintes plugins:\\n\\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) com a seguinte configura\\xe7\\xe3o:\\n\\n  `yarn add -D babel-plugin-import`\\n\\n  Crie um arquivo `.babelrc.js` no diret\\xf3rio raiz do seu projeto:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/core',\\n        // Use \\\"'libraryDirectory': '',\\\" se o seu bundler n\\xe3o suportar m\\xf3dulos ES\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'core'\\n    ],\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/icons',\\n        // Use \\\"'libraryDirectory': '',\\\" se o seu bundler n\\xe3o suportar m\\xf3dulos ES\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'icons'\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) com a seguinte configura\\xe7\\xe3o:\\n\\n  `yarn add -D babel-plugin-transform-imports`\\n\\n  Crie um arquivo `.babelrc.js` no diret\\xf3rio raiz do seu projeto:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-transform-imports',\\n      {\\n        '@material-ui/core': {\\n          // Use \\\"transform: '@material-ui/core/${member}',\\\" se o seu bundler n\\xe3o suportar m\\xf3dulos ES\\n          'transform': '@material-ui/core/esm/${member}',\\n          'preventFullImport': true\\n        },\\n        '@material-ui/icons': {\\n          // Use \\\"transform: '@material-ui/icons/${member}',\\\" se o seu bundler n\\xe3o suportar m\\xf3dulos ES\\n          'transform': '@material-ui/icons/esm/${member}',\\n          'preventFullImport': true\\n        }\\n      }\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\nSe voc\\xea estiver usando Create React App, voc\\xea precisar\\xe1 usar alguns projetos que permitem a configura\\xe7\\xe3o por `.babelrc`, sem ejetar.\\n\\n  `yarn add -D react-app-rewired customize-cra`\\n\\n  Crie um arquivo `config-overrides.js` na pasta raiz:\\n\\n  ```js\\n  /* config-overrides.js */\\n  const { useBabelRc, override } = require('customize-cra')\\n\\n  module.exports = override(\\n    useBabelRc()\\n  );\\n  ```\\n\\n  Se voc\\xea desejar, `babel-plugin-import` pode ser configurado atrav\\xe9s de `config-overrides.js` ao inv\\xe9s de `.babelrc` usando esta [configura\\xe7\\xe3o](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\\n\\n  Modifique seu comando start no `package.json`:\\n\\n```diff\\n  \\\"scripts\\\": {\\n-  \\\"start\\\": \\\"react-scripts start\\\"\\n+  \\\"start\\\": \\\"react-app-rewired start\\\"\\n  }\\n```\\n\\n  Nota: Voc\\xea pode se deparar com erros como estes:\\n\\n  > Module not found: Can't resolve '@material-ui/core/makeStyles' in '/seu/projeto'\\n\\n  Isso acontece porque `@material-ui/styles` \\xe9 reexportado atrav\\xe9s do `core`, mas a importa\\xe7\\xe3o completa n\\xe3o \\xe9 permitida.\\n\\n  Voc\\xea tem uma importa\\xe7\\xe3o como essa no seu c\\xf3digo:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core';\\n  ```\\n\\n  A corre\\xe7\\xe3o \\xe9 simples, defina a importa\\xe7\\xe3o separadamente:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core/styles';\\n  ```\\n\\n  Desfrute do tempo de inicializa\\xe7\\xe3o significativamente mais r\\xe1pido.\\n\\n#### 2. Converta todas as suas importa\\xe7\\xf5es\\n\\nFinalmeny, voc\\xea pode converter sua base de c\\xf3digo existente com esse modificador de c\\xf3digo [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports). Ele executar\\xe1 as seguintes altera\\xe7\\xf5es:\\n\\n```diff\\n-import Button from '@material-ui/core/Button';\\n-import TextField from '@material-ui/core/TextField';\\n+import { Button, TextField } from '@material-ui/core';\\n```\\n\\n## ECMAScript\\n\\nO pacote publicado no npm \\xe9 **transpilado** com [Babel](https://github.com/babel/babel), para levar em considera\\xe7\\xe3o as [plataformas suportadas](/getting-started/supported-platforms/).\\n\\nUma segunda vers\\xe3o dos componentes \\xe9 tamb\\xe9m publicada, essa vers\\xe3o pode ser encontrada na [pasta `/es`](https://unpkg.com/@material-ui/core/es/). Toda a sintaxe n\\xe3o oficial \\xe9 transpilada para o padr\\xe3o [ECMA-262](https://www.ecma-international.org/publications/standards/Ecma-262.htm), nada mais. Isso pode ser usado para criar pacotes separados visando diferentes navegadores. Os navegadores mais antigos exigem mais recursos JavaScript para serem transpilados, o que aumenta o tamanho do pacote. Nenhum polyfill est\\xe1 inclu\\xeddo para os recursos de tempo de execu\\xe7\\xe3o do ES2015. IE11+ e navegadores evergreen suportam todos os recursos necess\\xe1rios. Se voc\\xea precisar de suporte para outros navegadores, considere usar [`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill).\\n\\n\\u26a0\\ufe0f Para minimizar a duplica\\xe7\\xe3o de c\\xf3digo nos pacotes de usu\\xe1rios, autores de bibliotecas s\\xe3o **fortemente desencorajados** de usar a pasta `/es`.\\n\"},WT65:function(e,n){e.exports='# crwdns103720:0crwdne103720:0\\n\\n<p class=\"description\">crwdns103722:0crwdne103722:0</p>\\n\\n## crwdns103724:0crwdne103724:0\\n\\ncrwdns103726:0crwdne103726:0 crwdns103728:0crwdne103728:0 crwdns103730:0crwdne103730:0\\n\\n## crwdns129996:0crwdne129996:0\\n\\ncrwdns130116:0crwdne130116:0 crwdns130118:0crwdne130118:0 crwdns130120:0crwdne130120:0\\n\\n```js\\ncrwdns103738:0{ Button, TextField }crwdne103738:0\\n```\\n\\ncrwdns130004:0crwdne130004:0\\n\\n## crwdns130006:0crwdne130006:0\\n\\ncrwdns130008:0crwdne130008:0 crwdns130010:0crwdne130010:0 crwdns130012:0crwdne130012:0\\n\\ncrwdns130014:0crwdne130014:0\\n\\n### crwdns103750:0crwdne103750:0\\n\\ncrwdns130016:0crwdne130016:0 crwdns130018:0crwdne130018:0\\n\\n```js\\ncrwdns103756:0crwdne103756:0\\n```\\n\\ncrwdns130020:0crwdne130020:0\\n\\n```js\\ncrwdns103760:0{ Button, TextField }crwdne103760:0\\n```\\n\\ncrwdns130022:0crwdne130022:0 crwdns130024:0crwdne130024:0 crwdns130026:0crwdne130026:0\\n\\ncrwdns130028:0crwdne130028:0\\n\\ncrwdns130030:0crwdne130030:0 crwdns130032:0crwdne130032:0\\n\\n```js\\ncrwdns103774:0{ Add as AddIcon }crwdnd103774:0{ Tabs }crwdne103774:0\\n```\\n\\ncrwdns132532:0crwdne132532:0 crwdns132534:0crwdne132534:0\\n\\n```json\\ncrwdns132536:0crwdne132536:0\\n```\\n\\n### crwdns103776:0crwdne103776:0\\n\\ncrwdns132538:0crwdne132538:0\\n\\n- crwdns103780:0crwdne103780:0\\n- crwdns103782:0crwdne103782:0\\n- crwdns103784:0crwdne103784:0 crwdns103786:0crwdne103786:0\\n```js\\ncrwdns132540:0{ Button, TextField }crwdne132540:0\\n```\\n\\ncrwdns132542:0crwdne132542:0\\n\\n#### crwdns103792:0crwdne103792:0 crwdns103794:0crwdne103794:0\\n\\ncrwdns132544:0crwdne132544:0\\n\\n- crwdns103798:0crwdne103798:0\\n\\n  `crwdns103800:0crwdne103800:0`\\n\\n  crwdns103802:0crwdne103802:0\\n\\n  ```js\\n  crwdns103804:0{plugins}crwdne103804:0\\n  ```\\n\\n- crwdns103806:0crwdne103806:0\\n\\n  `crwdns103808:0crwdne103808:0`\\n\\n  crwdns103810:0crwdne103810:0\\n\\n  ```js\\n  crwdns103812:0${member}crwdnd103812:0${member}crwdnd103812:0${member}crwdnd103812:0${member}crwdnd103812:0{plugins}crwdne103812:0\\n  ```\\n\\ncrwdns132546:0crwdne132546:0\\n\\n  `crwdns132548:0crwdne132548:0`\\n\\n  crwdns132550:0crwdne132550:0\\n\\n  ```js\\n  crwdns132552:0{ useBabelRc, override }crwdne132552:0\\n  ```\\n\\n  crwdns132554:0crwdne132554:0\\n\\n  crwdns132556:0crwdne132556:0\\n\\n```diff\\n  crwdns132558:0crwdne132558:0\\n```\\n\\n  crwdns132560:0crwdne132560:0\\n\\n  > crwdns104394:0crwdne104394:0\\n\\n  crwdns132562:0crwdne132562:0\\n\\n  crwdns132564:0crwdne132564:0\\n\\n  ```js\\n  crwdns132566:0{ makeStyles, createStyles }crwdne132566:0\\n  ```\\n\\n  crwdns132568:0crwdne132568:0\\n\\n  ```js\\n  crwdns132570:0{ makeStyles, createStyles }crwdne132570:0\\n  ```\\n\\n  crwdns132572:0crwdne132572:0\\n\\n#### crwdns103844:0crwdne103844:0 crwdns103846:0crwdne103846:0\\n\\ncrwdns132574:0crwdne132574:0 crwdns132576:0crwdne132576:0\\n\\n```diff\\ncrwdns132578:0{ Button, TextField }crwdne132578:0\\n```\\n\\n## crwdns130070:0crwdne130070:0\\n\\ncrwdns132580:0crwdne132580:0\\n\\ncrwdns132582:0crwdne132582:0 crwdns132584:0crwdne132584:0 crwdns132586:0crwdne132586:0 crwdns132588:0crwdne132588:0 crwdns132590:0crwdne132590:0 crwdns132592:0crwdne132592:0 crwdns132594:0crwdne132594:0\\n\\ncrwdns132596:0crwdne132596:0\\n'},XGiC:function(e,n){e.exports=\"# Minimizing Bundle Size \\u6700\\u5c0f\\u5316\\u6253\\u5305\\u6587\\u4ef6\\u5927\\u5c0f\\n\\n<p class=\\\"description\\\">\\u4e86\\u89e3\\u6709\\u5173\\u53ef\\u7528\\u4e8e\\u51cf\\u5c11\\u6253\\u5305\\u6587\\u4ef6\\u5927\\u5c0f\\u7684\\u5de5\\u5177\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\\u3002</p>\\n\\n## \\u6253\\u5305\\u6587\\u4ef6\\u7684\\u5927\\u5c0f\\u662f\\u5f88\\u91cd\\u8981\\u7684\\n\\nMaterial-UI \\u7684\\u6253\\u5305\\u6587\\u4ef6\\u5927\\u5c0f\\u81f3\\u5173\\u91cd\\u8981\\u3002 Size snapshots are taken on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). \\u7ed3\\u5408 [dangerJS](https://danger.systems/js/) \\u4e00\\u8d77\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5728\\u6bcf\\u4e2a Pull Request \\u4e2d\\u90fd\\u53ef\\u4ee5\\u67e5\\u770b[\\u8be6\\u7ec6\\u7684\\u6253\\u5305\\u6587\\u4ef6\\u7684\\u5927\\u5c0f\\u53d8\\u5316](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) \\u3002\\n\\n## When and how to use tree-shaking?\\n\\nTree-shaking of Material-UI works out of the box in modern frameworks. Material-UI exposes its full API on the top-level `material-ui` import. If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and still get an optimised bundle size automatically:\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\n\\u26a0\\ufe0f The following instructions are only needed if you want to optimize your development startup times or if you are using an older bundler that doesn't support tree-shaking.\\n\\n## Development environment\\n\\nDevelopment bundles can contain the full library which can lead to **slower startup times**. This is especially noticeable if you import from `@material-ui/icons`. \\u52a0\\u8f7d\\u65f6\\u95f4\\u4f1a\\u5927\\u7ea6\\u6bd4\\u90a3\\u4e9b\\u4ece\\u9876\\u5c42 API \\u7684\\u547d\\u540d\\u5bfc\\u5165\\u65b9\\u5f0f\\u6162\\u516d\\u500d\\u3002\\n\\n\\u5982\\u679c\\u60a8\\u89c9\\u5f97\\u8fd9\\u6837\\u4e0d\\u59a5\\uff0c\\u60a8\\u8fd8\\u6709\\u4ee5\\u4e0b\\u51e0\\u4e2a\\u9009\\u62e9\\uff1a\\n\\n### \\u9009\\u98791\\n\\n\\u60a8\\u53ef\\u4ee5\\u4f7f\\u7528\\u8def\\u5f84\\u5bfc\\u5165\\uff0c\\u8fd9\\u6837\\u53ef\\u4ee5\\u907f\\u514d\\u5bfc\\u5165\\u7528\\u4e0d\\u5230\\u7684\\u6a21\\u5757\\u3002 For instance, use:\\n\\n```js\\n// \\ud83d\\ude80 Fast\\nimport Button from '@material-ui/core/Button';\\nimport TextField from '@material-ui/core/TextField';\\n```\\n\\ninstead of top level imports (without a Babel plugin):\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nThis is the option we document in all the demos, since it requires no configuration. It is encouraged for library authors extending the components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\\n\\n\\u5c3d\\u7ba1\\u8fd9\\u6837\\u76f4\\u63a5\\u5bfc\\u5165\\u5e76\\u4e0d\\u4f1a\\u4f7f\\u7528 [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js) \\u4e2d\\u7684\\u5bfc\\u51fa\\u6a21\\u5f0f\\uff0c\\u4f46\\u662f\\u5bf9\\u4e8e\\u90a3\\u4e9b\\u516c\\u5f00\\u7684\\u6a21\\u5757\\u6765\\u8bf4\\uff0c\\u6b64\\u6587\\u4ef6\\u4ecd\\u53ef\\u4ee5\\u4f5c\\u4e3a\\u4e00\\u4e2a\\u65b9\\u4fbf\\u7684\\u53c2\\u8003\\u3002\\n\\n\\u8bf7\\u6ce8\\u610f\\uff0c\\u6211\\u4eec\\u53ea\\u652f\\u6301\\u7b2c\\u4e00\\u7ea7\\u548c\\u7b2c\\u4e8c\\u7ea7\\u7684\\u5bfc\\u5165\\u3002 Anything deeper is considered private and can cause issues, such as module duplication in your bundle.\\n\\n```js\\n// \\u2705 OK\\nimport { Add as AddIcon } from '@material-ui/icons';\\nimport { Tabs } from '@material-ui/core';\\n//                                 ^^^^ 1st or top-level\\n\\n// \\u2705 OK\\nimport AddIcon from '@material-ui/icons/Add';\\nimport Tabs from '@material-ui/core/Tabs';\\n//                                  ^^^^ 2nd level\\n\\n// \\u274c NOT OK\\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\\n//                                               ^^^^^^^^^^^^ 3rd level\\n```\\n\\nIf you're using `eslint` you can catch problematic imports with the [`no-restricted-imports` rule](https://eslint.org/docs/rules/no-restricted-imports). The following `.eslintrc` configuration will highlight problematic imports from `@material-ui` packages:\\n\\n```json\\n{\\n  \\\"rules\\\": {\\n    \\\"no-restricted-imports\\\": [\\n      \\\"error\\\",\\n      {\\n        \\\"patterns\\\": [\\\"@material-ui/*/*/*\\\", \\\"!@material-ui/core/test-utils/*\\\"]\\n      }\\n    ]\\n  }\\n}\\n```\\n\\n### \\u9009\\u98792\\n\\nThis option provides the best User Experience and Developer Experience:\\n\\n- UX: The Babel plugin enables top level tree-shaking even if your bundler doesn't support it.\\n- DX: The Babel plugin makes startup time in dev mode as fast as Option 1.\\n- DX: This syntax reduces the duplication of code, requiring only a single import for multiple modules. Overall, the code is easier to read, and you are less likely to make a mistake when importing a new module.\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nHowever, you need to apply the two following steps correctly.\\n\\n#### 1\\u3001 Configure Babel\\n\\n\\u8bf7\\u5728\\u4ee5\\u4e0b\\u63d2\\u4ef6\\u4e2d\\u9009\\u62e9\\u4e00\\u4e2a\\uff1a\\n\\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\\n\\n  `yarn add -D babel-plugin-import`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/core',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'core'\\n    ],\\n    [\\n      'babel-plugin-import',\\n      {\\n        'libraryName': '@material-ui/icons',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        'libraryDirectory': 'esm',\\n        'camel2DashComponentName': false\\n      },\\n      'icons'\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\\n\\n  `yarn add -D babel-plugin-transform-imports`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-transform-imports',\\n      {\\n        '@material-ui/core': {\\n          // Use \\\"transform: '@material-ui/core/${member}',\\\" if your bundler does not support ES modules\\n          'transform': '@material-ui/core/esm/${member}',\\n          'preventFullImport': true\\n        },\\n        '@material-ui/icons': {\\n          // Use \\\"transform: '@material-ui/icons/${member}',\\\" if your bundler does not support ES modules\\n          'transform': '@material-ui/icons/esm/${member}',\\n          'preventFullImport': true\\n        }\\n      }\\n    ]\\n  ];\\n\\n  module.exports = {plugins};\\n  ```\\n\\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\\n\\n  `yarn add -D react-app-rewired customize-cra`\\n\\n  Create a `config-overrides.js` file in the root directory:\\n\\n  ```js\\n  /* config-overrides.js */\\n  const { useBabelRc, override } = require('customize-cra')\\n\\n  module.exports = override(\\n    useBabelRc()\\n  );\\n  ```\\n\\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\\n\\n  Modify your `package.json` start command:\\n\\n```diff\\n  \\\"scripts\\\": {\\n-  \\\"start\\\": \\\"react-scripts start\\\"\\n+  \\\"start\\\": \\\"react-app-rewired start\\\"\\n  }\\n```\\n\\n  Note: You may run into errors like these:\\n\\n  > Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\\n\\n  This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\\n\\n  You have an import like this in your code:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core';\\n  ```\\n\\n  The fix is simple, define the import separately:\\n\\n  ```js\\n  import { makeStyles, createStyles } from '@material-ui/core/styles';\\n  ```\\n\\n  Enjoy significantly faster start times.\\n\\n#### 2\\u3002 Convert all your imports\\n\\nFinally, you can convert your existing codebase to this option with this [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod. It will perform the following diffs:\\n\\n```diff\\n-import Button from '@material-ui/core/Button';\\n-import TextField from '@material-ui/core/TextField';\\n+import { Button, TextField } from '@material-ui/core';\\n```\\n\\n## ECMAScript\\n\\n\\u8003\\u8651\\u5230\\u4e00\\u4e9b[\\u652f\\u6301\\u7684\\u5e73\\u53f0](/getting-started/supported-platforms/)\\uff0c\\u5728 npm \\u4e0a\\u53d1\\u5e03\\u7684\\u5305\\u662f\\u548c [Babel](https://github.com/babel/babel) \\u4e00\\u8d77\\u88ab**\\u7f16\\u8bd1**\\u7684\\u3002\\n\\nA second version of the components is also published, which you can find under the [`/es` folder](https://unpkg.com/@material-ui/core/es/). \\u6240\\u6709\\u975e\\u5b98\\u65b9\\u7684\\u8bed\\u4e49\\u90fd\\u88ab\\u7f16\\u8bd1\\u6210[ECMA-262 \\u7684\\u6807\\u51c6](https://www.ecma-international.org/publications/standards/Ecma-262.htm)\\uff0c\\u4ec5\\u6b64\\u800c\\u5df2\\u3002 \\u8fd9\\u6837\\u4e00\\u6765\\uff0c\\u9488\\u5bf9\\u4e0d\\u540c\\u7684\\u6d4f\\u89c8\\u5668\\uff0c\\u60a8\\u53ef\\u4ee5\\u7f16\\u8bd1\\u51fa\\u4e0d\\u540c\\u7684\\u6253\\u5305\\u6587\\u4ef6\\u3002 \\u4e00\\u4e9b\\u65e7\\u7684\\u6d4f\\u89c8\\u5668\\u9700\\u7f16\\u8bd1\\u4e00\\u4e9b JavaScript \\u7684\\u529f\\u80fd\\uff0c\\u8fd9\\u6837\\u4f1a\\u589e\\u52a0\\u6253\\u5305\\u6587\\u4ef6\\u7684\\u5927\\u5c0f\\u3002 ES2015 \\u8fd0\\u884c\\u7684\\u65f6\\u5019\\u7684\\u529f\\u80fd\\u4e2d\\u4e0d\\u5305\\u542b\\u57ab\\u7247\\u3002 IE11+ \\u548c\\u4e00\\u4e9b\\u957f\\u9752\\u6d4f\\u89c8\\u5668\\u4f1a\\u652f\\u6301\\u6240\\u6709\\u5fc5\\u8981\\u7684\\u529f\\u80fd\\u3002 \\u5982\\u679c\\u60a8\\u9700\\u8981\\u652f\\u6301\\u5176\\u4ed6\\u6d4f\\u89c8\\u5668\\uff0c\\u8bf7\\u8003\\u8651\\u4f7f\\u7528 [`@ babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill)\\u3002\\n\\n\\u26a0\\ufe0f In order to minimize duplication of code in users' bundles, library authors are **strongly discouraged** from using the `/es` folder.\\n\"},dams:function(e,n){e.exports=\"# Minimizing Bundle Size\\n\\n<p class=\\\"description\\\">Learn more about the tools you can leverage to reduce the bundle size.</p>\\n\\n## Bundle size matters\\n\\nThe bundle size of Material-UI is taken very seriously. Size snapshots are taken\\non every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)).\\nCombined with [dangerJS](https://danger.systems/js/) we can inspect\\n[detailed bundle size changes](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) on every Pull Request.\\n\\n## When and how to use tree-shaking?\\n\\nTree-shaking of Material-UI works out of the box in modern frameworks.\\nMaterial-UI exposes its full API on the top-level `material-ui` import.\\nIf you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and still get an optimised bundle size automatically:\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\n\\u26a0\\ufe0f The following instructions are only needed if you want to optimize your development startup times or if you are using an older bundler\\nthat doesn't support tree-shaking.\\n\\n## Development environment\\n\\nDevelopment bundles can contain the full library which can lead to **slower startup times**. This is especially noticeable if you\\nimport from `@material-ui/icons`. Startup times can be approximately 6x slower than without named imports from the top-level API.\\n\\nIf this is an issue for you, you have various options:\\n\\n### Option 1\\n\\nYou can use path imports to avoid pulling in unused modules.\\nFor instance, use:\\n\\n```js\\n// \\ud83d\\ude80 Fast\\nimport Button from '@material-ui/core/Button';\\nimport TextField from '@material-ui/core/TextField';\\n```\\n\\ninstead of top level imports (without a Babel plugin):\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nThis is the option we document in all the demos, since it requires no configuration.\\nIt is encouraged for library authors extending the components.\\nHead to [Option 2](#option-2) for the approach that yields the best DX and UX.\\n\\nWhile importing directly in this manner doesn't use the exports in [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js), this file can serve as a handy reference as to which modules are public.\\n\\nBe aware that we only support first and second level imports.\\nAnything deeper is considered private and can cause issues, such as module duplication in your bundle.\\n\\n```js\\n// \\u2705 OK\\nimport { Add as AddIcon } from '@material-ui/icons';\\nimport { Tabs } from '@material-ui/core';\\n//                                 ^^^^ 1st or top-level\\n\\n// \\u2705 OK\\nimport AddIcon from '@material-ui/icons/Add';\\nimport Tabs from '@material-ui/core/Tabs';\\n//                                  ^^^^ 2nd level\\n\\n// \\u274c NOT OK\\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\\n//                                               ^^^^^^^^^^^^ 3rd level\\n```\\n\\nIf you're using `eslint` you can catch problematic imports with the [`no-restricted-imports` rule](https://eslint.org/docs/rules/no-restricted-imports). The following `.eslintrc` configuration will highlight problematic imports from `@material-ui` packages:\\n\\n```json\\n{\\n  \\\"rules\\\": {\\n    \\\"no-restricted-imports\\\": [\\n      \\\"error\\\",\\n      {\\n        \\\"patterns\\\": [\\\"@material-ui/*/*/*\\\", \\\"!@material-ui/core/test-utils/*\\\"]\\n      }\\n    ]\\n  }\\n}\\n```\\n\\n### Option 2\\n\\nThis option provides the best User Experience and Developer Experience:\\n\\n- UX: The Babel plugin enables top level tree-shaking even if your bundler doesn't support it.\\n- DX: The Babel plugin makes startup time in dev mode as fast as Option 1.\\n- DX: This syntax reduces the duplication of code, requiring only a single import for multiple modules.\\n  Overall, the code is easier to read, and you are less likely to make a mistake when importing a new module.\\n\\n```js\\nimport { Button, TextField } from '@material-ui/core';\\n```\\n\\nHowever, you need to apply the two following steps correctly.\\n\\n#### 1. Configure Babel\\n\\nPick one of the following plugins:\\n\\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\\n\\n  `yarn add -D babel-plugin-import`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-import',\\n      {\\n        libraryName: '@material-ui/core',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        libraryDirectory: 'esm',\\n        camel2DashComponentName: false,\\n      },\\n      'core',\\n    ],\\n    [\\n      'babel-plugin-import',\\n      {\\n        libraryName: '@material-ui/icons',\\n        // Use \\\"'libraryDirectory': '',\\\" if your bundler does not support ES modules\\n        libraryDirectory: 'esm',\\n        camel2DashComponentName: false,\\n      },\\n      'icons',\\n    ],\\n  ];\\n\\n  module.exports = { plugins };\\n  ```\\n\\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\\n\\n  `yarn add -D babel-plugin-transform-imports`\\n\\n  Create a `.babelrc.js` file in the root directory of your project:\\n\\n  ```js\\n  const plugins = [\\n    [\\n      'babel-plugin-transform-imports',\\n      {\\n        '@material-ui/core': {\\n          // Use \\\"transform: '@material-ui/core/${member}',\\\" if your bundler does not support ES modules\\n          transform: '@material-ui/core/esm/${member}',\\n          preventFullImport: true,\\n        },\\n        '@material-ui/icons': {\\n          // Use \\\"transform: '@material-ui/icons/${member}',\\\" if your bundler does not support ES modules\\n          transform: '@material-ui/icons/esm/${member}',\\n          preventFullImport: true,\\n        },\\n      },\\n    ],\\n  ];\\n\\n  module.exports = { plugins };\\n  ```\\n\\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\\n\\n`yarn add -D react-app-rewired customize-cra`\\n\\nCreate a `config-overrides.js` file in the root directory:\\n\\n```js\\n/* config-overrides.js */\\nconst { useBabelRc, override } = require('customize-cra');\\n\\nmodule.exports = override(useBabelRc());\\n```\\n\\nIf you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\\n\\nModify your `package.json` start command:\\n\\n```diff\\n  \\\"scripts\\\": {\\n-  \\\"start\\\": \\\"react-scripts start\\\"\\n+  \\\"start\\\": \\\"react-app-rewired start\\\"\\n  }\\n```\\n\\nNote: You may run into errors like these:\\n\\n> Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\\n\\nThis is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\\n\\nYou have an import like this in your code:\\n\\n```js\\nimport { makeStyles, createStyles } from '@material-ui/core';\\n```\\n\\nThe fix is simple, define the import separately:\\n\\n```js\\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\\n```\\n\\nEnjoy significantly faster start times.\\n\\n#### 2. Convert all your imports\\n\\nFinally, you can convert your existing codebase to this option with this [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod.\\nIt will perform the following diffs:\\n\\n```diff\\n-import Button from '@material-ui/core/Button';\\n-import TextField from '@material-ui/core/TextField';\\n+import { Button, TextField } from '@material-ui/core';\\n```\\n\\n## ECMAScript\\n\\nThe package published on npm is **transpiled**, with [Babel](https://github.com/babel/babel), to take into account the [supported platforms](/getting-started/supported-platforms/).\\n\\nA second version of the components is also published, which\\nyou can find under the [`/es` folder](https://unpkg.com/@material-ui/core/es/).\\nAll the non-official syntax is transpiled to the [ECMA-262 standard](https://www.ecma-international.org/publications/standards/Ecma-262.htm), nothing more.\\nThis can be used to make separate bundles targeting different browsers.\\nOlder browsers will require more JavaScript features to be transpiled,\\nwhich increases the size of the bundle.\\nNo polyfills are included for ES2015 runtime features. IE11+ and evergreen browsers support all the\\nnecessary features. If you need support for other browsers, consider using\\n[`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill).\\n\\n\\u26a0\\ufe0f In order to minimize duplication of code in users' bundles, library authors are **strongly discouraged** from using the `/es` folder.\\n\"},jG02:function(e,n,t){var r={\"./minimizing-bundle-size-aa.md\":\"WT65\",\"./minimizing-bundle-size-de.md\":\"BfDt\",\"./minimizing-bundle-size-es.md\":\"14MD\",\"./minimizing-bundle-size-fr.md\":\"+jEb\",\"./minimizing-bundle-size-ja.md\":\"RxNz\",\"./minimizing-bundle-size-pt.md\":\"UGFc\",\"./minimizing-bundle-size-ru.md\":\"54V7\",\"./minimizing-bundle-size-zh.md\":\"XGiC\",\"./minimizing-bundle-size.md\":\"dams\"};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(r,e)){var n=new Error(\"Cannot find module '\"+e+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id=\"jG02\"}},[[\"Lb4E\",0,2,1,3,5,4,6,7,8,9,10,11,12,15,13,14,16,17,18]]]);"}