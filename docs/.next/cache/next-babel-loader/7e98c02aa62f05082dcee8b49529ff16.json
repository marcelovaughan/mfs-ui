{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport optionsReducer from \"./optionsReducer\";\nimport notificationsReducer from \"./notificationsReducer\";\nimport { createLogger } from 'redux-logger'; // Get the Redux DevTools extension and fallback to a no-op function\n\nlet devtools = x => x;\n\nif (false && false && window.__REDUX_DEVTOOLS_EXTENSION__) {\n  devtools = window.__REDUX_DEVTOOLS_EXTENSION__();\n}\n\nexport default function create(initialState) {\n  let middleware = [];\n\n  if (false && false && !window.__REDUX_DEVTOOLS_EXTENSION__ && // redux-logger needs this feature\n  Object.hasOwnProperty('assign')) {\n    middleware = [...middleware, createLogger()];\n  }\n\n  return createStore(combineReducers({\n    options: optionsReducer,\n    notifications: notificationsReducer\n  }), initialState, // Hydrate the store with server-side data\n  compose(applyMiddleware(...middleware), devtools));\n}","map":null,"metadata":{},"sourceType":"module"}