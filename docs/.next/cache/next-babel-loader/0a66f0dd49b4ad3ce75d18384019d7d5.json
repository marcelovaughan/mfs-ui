{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Unstable_TrapFocus/Unstable_TrapFocus.js\";\nvar __jsx = React.createElement;\n\n/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex, camelcase */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from \"../utils/ownerDocument\";\nimport useForkRef from \"../utils/useForkRef\";\nimport { exactProp } from \"../../../material-ui-utils/src\";\n/**\n * Utility component that locks focus inside the component.\n */\n\nfunction Unstable_TrapFocus(props) {\n  var children = props.children,\n      _props$disableAutoFoc = props.disableAutoFocus,\n      disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,\n      _props$disableEnforce = props.disableEnforceFocus,\n      disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,\n      _props$disableRestore = props.disableRestoreFocus,\n      disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,\n      getDoc = props.getDoc,\n      isEnabled = props.isEnabled,\n      open = props.open;\n  var ignoreNextEnforceFocus = React.useRef();\n  var sentinelStart = React.useRef(null);\n  var sentinelEnd = React.useRef(null);\n  var nodeToRestore = React.useRef();\n  var rootRef = React.useRef(null); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    rootRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef);\n  var prevOpenRef = React.useRef();\n  React.useEffect(function () {\n    prevOpenRef.current = open;\n  }, [open]);\n\n  if (!prevOpenRef.current && open && true) {\n    // WARNING: Potentially unsafe in concurrent mode.\n    // The way the read on `nodeToRestore` is setup could make this actually safe.\n    // Say we render `open={false}` -> `open={true}` but never commit.\n    // We have now written a state that wasn't committed. But no committed effect\n    // will read this wrong value. We only read from `nodeToRestore` in effects\n    // that were committed on `open={true}`\n    // WARNING: Prevents the instance from being garbage collected. Should only\n    // hold a weak ref.\n    nodeToRestore.current = getDoc().activeElement;\n  }\n\n  React.useEffect(function () {\n    if (!open) {\n      return;\n    }\n\n    var doc = ownerDocument(rootRef.current); // We might render an empty child.\n\n    if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (true) {\n          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\n        }\n\n        rootRef.current.setAttribute('tabIndex', -1);\n      }\n\n      rootRef.current.focus();\n    }\n\n    var contain = function contain() {\n      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n\n      if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n        rootRef.current.focus();\n      }\n    };\n\n    var loopFocus = function loopFocus(event) {\n      // 9 = Tab\n      if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {\n        return;\n      } // Make sure the next tab starts from the right place.\n\n\n      if (doc.activeElement === rootRef.current) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n\n        if (event.shiftKey) {\n          sentinelEnd.current.focus();\n        } else {\n          sentinelStart.current.focus();\n        }\n      }\n    };\n\n    doc.addEventListener('focus', contain, true);\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n\n    var interval = setInterval(function () {\n      contain();\n    }, 50);\n    return function () {\n      clearInterval(interval);\n      doc.removeEventListener('focus', contain, true);\n      doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()\n\n      if (!disableRestoreFocus) {\n        // In IE 11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE 11 have a focus method.\n        // Once IE 11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          nodeToRestore.current.focus();\n        }\n\n        nodeToRestore.current = null;\n      }\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    tabIndex: 0,\n    ref: sentinelStart,\n    \"data-test\": \"sentinelStart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.cloneElement(children, {\n    ref: handleRef\n  }), __jsx(\"div\", {\n    tabIndex: 0,\n    ref: sentinelEnd,\n    \"data-test\": \"sentinelEnd\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }));\n}\n\nUnstable_TrapFocus.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not restore focus to previously focused element once\n   * trap focus is hidden.\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Return the document to consider.\n   * We use it to implement the restore focus between different browser documents.\n   */\n  getDoc: PropTypes.func.isRequired,\n\n  /**\n   * Do we still want to enforce the focus?\n   * This prop helps nesting TrapFocus elements.\n   */\n  isEnabled: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, focus will be locked.\n   */\n  open: PropTypes.bool.isRequired\n};\n\nif (true) {\n  // eslint-disable-next-line\n  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);\n}\n\nexport default Unstable_TrapFocus;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Unstable_TrapFocus/Unstable_TrapFocus.js"],"names":["React","ReactDOM","PropTypes","ownerDocument","useForkRef","exactProp","Unstable_TrapFocus","props","children","disableAutoFocus","disableEnforceFocus","disableRestoreFocus","getDoc","isEnabled","open","ignoreNextEnforceFocus","useRef","sentinelStart","sentinelEnd","nodeToRestore","rootRef","handleOwnRef","useCallback","instance","current","findDOMNode","handleRef","ref","prevOpenRef","useEffect","activeElement","doc","contains","hasAttribute","console","error","join","setAttribute","focus","contain","hasFocus","loopFocus","event","keyCode","shiftKey","addEventListener","interval","setInterval","clearInterval","removeEventListener","cloneElement","propTypes","node","bool","func","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex, camelcase */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport { exactProp } from '@material-ui/utils';\n\n/**\n * Utility component that locks focus inside the component.\n */\nfunction Unstable_TrapFocus(props) {\n  const {\n    children,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableRestoreFocus = false,\n    getDoc,\n    isEnabled,\n    open,\n  } = props;\n  const ignoreNextEnforceFocus = React.useRef();\n  const sentinelStart = React.useRef(null);\n  const sentinelEnd = React.useRef(null);\n  const nodeToRestore = React.useRef();\n\n  const rootRef = React.useRef(null);\n  // can be removed once we drop support for non ref forwarding class components\n  const handleOwnRef = React.useCallback((instance) => {\n    // #StrictMode ready\n    rootRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  const handleRef = useForkRef(children.ref, handleOwnRef);\n\n  const prevOpenRef = React.useRef();\n  React.useEffect(() => {\n    prevOpenRef.current = open;\n  }, [open]);\n  if (!prevOpenRef.current && open && typeof window !== 'undefined') {\n    // WARNING: Potentially unsafe in concurrent mode.\n    // The way the read on `nodeToRestore` is setup could make this actually safe.\n    // Say we render `open={false}` -> `open={true}` but never commit.\n    // We have now written a state that wasn't committed. But no committed effect\n    // will read this wrong value. We only read from `nodeToRestore` in effects\n    // that were committed on `open={true}`\n    // WARNING: Prevents the instance from being garbage collected. Should only\n    // hold a weak ref.\n    nodeToRestore.current = getDoc().activeElement;\n  }\n\n  React.useEffect(() => {\n    if (!open) {\n      return;\n    }\n\n    const doc = ownerDocument(rootRef.current);\n\n    // We might render an empty child.\n    if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\n            [\n              'Material-UI: The modal content node does not accept focus.',\n              'For the benefit of assistive technologies, ' +\n                'the tabIndex of the node is being set to \"-1\".',\n            ].join('\\n'),\n          );\n        }\n        rootRef.current.setAttribute('tabIndex', -1);\n      }\n\n      rootRef.current.focus();\n    }\n\n    const contain = () => {\n      if (\n        !doc.hasFocus() ||\n        disableEnforceFocus ||\n        !isEnabled() ||\n        ignoreNextEnforceFocus.current\n      ) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n\n      if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n        rootRef.current.focus();\n      }\n    };\n\n    const loopFocus = (event) => {\n      // 9 = Tab\n      if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {\n        return;\n      }\n\n      // Make sure the next tab starts from the right place.\n      if (doc.activeElement === rootRef.current) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n        if (event.shiftKey) {\n          sentinelEnd.current.focus();\n        } else {\n          sentinelStart.current.focus();\n        }\n      }\n    };\n\n    doc.addEventListener('focus', contain, true);\n    doc.addEventListener('keydown', loopFocus, true);\n\n    // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n    const interval = setInterval(() => {\n      contain();\n    }, 50);\n\n    return () => {\n      clearInterval(interval);\n\n      doc.removeEventListener('focus', contain, true);\n      doc.removeEventListener('keydown', loopFocus, true);\n\n      // restoreLastFocus()\n      if (!disableRestoreFocus) {\n        // In IE 11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE 11 have a focus method.\n        // Once IE 11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          nodeToRestore.current.focus();\n        }\n\n        nodeToRestore.current = null;\n      }\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);\n\n  return (\n    <React.Fragment>\n      <div tabIndex={0} ref={sentinelStart} data-test=\"sentinelStart\" />\n      {React.cloneElement(children, { ref: handleRef })}\n      <div tabIndex={0} ref={sentinelEnd} data-test=\"sentinelEnd\" />\n    </React.Fragment>\n  );\n}\n\nUnstable_TrapFocus.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus: PropTypes.bool,\n  /**\n   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableEnforceFocus: PropTypes.bool,\n  /**\n   * If `true`, the trap focus will not restore focus to previously focused element once\n   * trap focus is hidden.\n   */\n  disableRestoreFocus: PropTypes.bool,\n  /**\n   * Return the document to consider.\n   * We use it to implement the restore focus between different browser documents.\n   */\n  getDoc: PropTypes.func.isRequired,\n  /**\n   * Do we still want to enforce the focus?\n   * This prop helps nesting TrapFocus elements.\n   */\n  isEnabled: PropTypes.func.isRequired,\n  /**\n   * If `true`, focus will be locked.\n   */\n  open: PropTypes.bool.isRequired,\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);\n}\n\nexport default Unstable_TrapFocus;\n"]},"metadata":{},"sourceType":"module"}