{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport Paper from \"../Paper\";\nimport capitalize from \"../utils/capitalize\";\nimport LinearProgress from \"../LinearProgress\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    background: theme.palette.background.default,\n    padding: 8\n  },\n\n  /* Styles applied to the root element if `position=\"bottom\"`. */\n  positionBottom: {\n    position: 'fixed',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: theme.zIndex.mobileStepper\n  },\n\n  /* Styles applied to the root element if `position=\"top\"`. */\n  positionTop: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    zIndex: theme.zIndex.mobileStepper\n  },\n\n  /* Styles applied to the root element if `position=\"static\"`. */\n  positionStatic: {},\n\n  /* Styles applied to the dots container if `variant=\"dots\"`. */\n  dots: {\n    display: 'flex',\n    flexDirection: 'row'\n  },\n\n  /* Styles applied to each dot if `variant=\"dots\"`. */\n  dot: {\n    backgroundColor: theme.palette.action.disabled,\n    borderRadius: '50%',\n    width: 8,\n    height: 8,\n    margin: '0 2px'\n  },\n\n  /* Styles applied to a dot if `variant=\"dots\"` and this is the active step. */\n  dotActive: {\n    backgroundColor: theme.palette.primary.main\n  },\n\n  /* Styles applied to the Linear Progress component if `variant=\"progress\"`. */\n  progress: {\n    width: '50%'\n  }\n});\nconst MobileStepper = /*#__PURE__*/React.forwardRef(function MobileStepper(props, ref) {\n  const {\n    activeStep = 0,\n    backButton,\n    classes,\n    className,\n    LinearProgressProps,\n    nextButton,\n    position = 'bottom',\n    steps,\n    variant = 'dots'\n  } = props,\n        other = _objectWithoutProperties(props, [\"activeStep\", \"backButton\", \"classes\", \"className\", \"LinearProgressProps\", \"nextButton\", \"position\", \"steps\", \"variant\"]);\n\n  return __jsx(Paper, _extends({\n    square: true,\n    elevation: 0,\n    className: clsx(classes.root, classes[`position${capitalize(position)}`], className),\n    ref: ref\n  }, other), backButton, variant === 'text' && __jsx(React.Fragment, null, activeStep + 1, \" / \", steps), variant === 'dots' && __jsx(\"div\", {\n    className: classes.dots\n  }, [...new Array(steps)].map((_, index) => __jsx(\"div\", {\n    key: index,\n    className: clsx(classes.dot, index === activeStep && classes.dotActive)\n  }))), variant === 'progress' && __jsx(LinearProgress, _extends({\n    className: classes.progress,\n    variant: \"determinate\",\n    value: Math.ceil(activeStep / (steps - 1) * 100)\n  }, LinearProgressProps)), nextButton);\n});\nexport default withStyles(styles, {\n  name: 'MuiMobileStepper'\n})(MobileStepper);","map":null,"metadata":{},"sourceType":"module"}