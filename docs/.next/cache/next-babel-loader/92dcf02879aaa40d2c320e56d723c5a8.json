{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ACTION_TYPES } from \"../constants\";\nconst mapping = {\n  [ACTION_TYPES.NOTIFICATIONS_CHANGE]: (state, action) => {\n    const newState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    return newState;\n  }\n};\nexport default function notificationsReducer(state = {}, action) {\n  let newState = _objectSpread({}, state);\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  return newState;\n}","map":null,"metadata":{},"sourceType":"module"}