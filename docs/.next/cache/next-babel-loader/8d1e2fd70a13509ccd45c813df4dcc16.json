{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Avatar/Avatar.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport Person from \"../internal/svg-icons/Person\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexShrink: 0,\n    width: 40,\n    height: 40,\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(20),\n    lineHeight: 1,\n    borderRadius: '50%',\n    overflow: 'hidden',\n    userSelect: 'none'\n  },\n\n  /* Styles applied to the root element if not `src` or `srcSet`. */\n  colorDefault: {\n    color: theme.palette.background.default,\n    backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n  },\n\n  /* Styles applied to the root element if `variant=\"circle\"`. */\n  circle: {},\n\n  /* Styles applied to the root element if `variant=\"rounded\"`. */\n  rounded: {\n    borderRadius: theme.shape.borderRadius\n  },\n\n  /* Styles applied to the root element if `variant=\"square\"`. */\n  square: {\n    borderRadius: 0\n  },\n\n  /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n  img: {\n    width: '100%',\n    height: '100%',\n    textAlign: 'center',\n    // Handle non-square image. The property isn't supported by IE 11.\n    objectFit: 'cover',\n    // Hide alt text.\n    color: 'transparent',\n    // Hide the image broken icon, only works on Chrome.\n    textIndent: 10000\n  },\n\n  /* Styles applied to the fallback icon */\n  fallback: {\n    width: '75%',\n    height: '75%'\n  }\n});\n\nfunction useLoaded({\n  src,\n  srcSet\n}) {\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    if (!src && !srcSet) {\n      return undefined;\n    }\n\n    setLoaded(false);\n    let active = true;\n    const image = new Image();\n    image.src = src;\n    image.srcSet = srcSet;\n\n    image.onload = () => {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('loaded');\n    };\n\n    image.onerror = () => {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('error');\n    };\n\n    return () => {\n      active = false;\n    };\n  }, [src, srcSet]);\n  return loaded;\n}\n\nconst Avatar = /*#__PURE__*/React.forwardRef(function Avatar(props, ref) {\n  const {\n    alt,\n    children: childrenProp,\n    classes,\n    className,\n    component: Component = 'div',\n    imgProps,\n    sizes,\n    src,\n    srcSet,\n    variant = 'circle'\n  } = props,\n        other = _objectWithoutProperties(props, [\"alt\", \"children\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\", \"variant\"]);\n\n  let children = null; // Use a hook instead of onError on the img element to support server-side rendering.\n\n  const loaded = useLoaded({\n    src,\n    srcSet\n  });\n  const hasImg = src || srcSet;\n  const hasImgNotFailing = hasImg && loaded !== 'error';\n\n  if (hasImgNotFailing) {\n    children = __jsx(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }));\n  } else if (childrenProp != null) {\n    children = childrenProp;\n  } else if (hasImg && alt) {\n    children = alt[0];\n  } else {\n    children = __jsx(Person, {\n      className: classes.fallback,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return __jsx(Component, _extends({\n    className: clsx(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }), children);\n});\nAvatar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Used to render icon or text elements inside the Avatar if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Attributes applied to the `img` element if the component is used to display an image.\n   * It can be used to listen for the loading error event.\n   */\n  imgProps: PropTypes.object,\n\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The `srcSet` attribute for the `img` element.\n   * Use this attribute for responsive image display.\n   */\n  srcSet: PropTypes.string,\n\n  /**\n   * The shape of the avatar.\n   */\n  variant: PropTypes.oneOf(['circle', 'rounded', 'square'])\n};\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Avatar/Avatar.js"],"names":["React","PropTypes","clsx","withStyles","Person","styles","theme","root","position","display","alignItems","justifyContent","flexShrink","width","height","fontFamily","typography","fontSize","pxToRem","lineHeight","borderRadius","overflow","userSelect","colorDefault","color","palette","background","default","backgroundColor","type","grey","circle","rounded","shape","square","img","textAlign","objectFit","textIndent","fallback","useLoaded","src","srcSet","loaded","setLoaded","useState","useEffect","undefined","active","image","Image","onload","onerror","Avatar","forwardRef","props","ref","alt","children","childrenProp","classes","className","component","Component","imgProps","sizes","variant","other","hasImg","hasImgNotFailing","system","propTypes","string","node","object","elementType","oneOf","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Person from '../internal/svg-icons/Person';\n\nexport const styles = (theme) => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexShrink: 0,\n    width: 40,\n    height: 40,\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(20),\n    lineHeight: 1,\n    borderRadius: '50%',\n    overflow: 'hidden',\n    userSelect: 'none',\n  },\n  /* Styles applied to the root element if not `src` or `srcSet`. */\n  colorDefault: {\n    color: theme.palette.background.default,\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600],\n  },\n  /* Styles applied to the root element if `variant=\"circle\"`. */\n  circle: {},\n  /* Styles applied to the root element if `variant=\"rounded\"`. */\n  rounded: {\n    borderRadius: theme.shape.borderRadius,\n  },\n  /* Styles applied to the root element if `variant=\"square\"`. */\n  square: {\n    borderRadius: 0,\n  },\n  /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n  img: {\n    width: '100%',\n    height: '100%',\n    textAlign: 'center',\n    // Handle non-square image. The property isn't supported by IE 11.\n    objectFit: 'cover',\n    // Hide alt text.\n    color: 'transparent',\n    // Hide the image broken icon, only works on Chrome.\n    textIndent: 10000,\n  },\n  /* Styles applied to the fallback icon */\n  fallback: {\n    width: '75%',\n    height: '75%',\n  },\n});\n\nfunction useLoaded({ src, srcSet }) {\n  const [loaded, setLoaded] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!src && !srcSet) {\n      return undefined;\n    }\n\n    setLoaded(false);\n\n    let active = true;\n    const image = new Image();\n    image.src = src;\n    image.srcSet = srcSet;\n    image.onload = () => {\n      if (!active) {\n        return;\n      }\n      setLoaded('loaded');\n    };\n    image.onerror = () => {\n      if (!active) {\n        return;\n      }\n      setLoaded('error');\n    };\n\n    return () => {\n      active = false;\n    };\n  }, [src, srcSet]);\n\n  return loaded;\n}\n\nconst Avatar = React.forwardRef(function Avatar(props, ref) {\n  const {\n    alt,\n    children: childrenProp,\n    classes,\n    className,\n    component: Component = 'div',\n    imgProps,\n    sizes,\n    src,\n    srcSet,\n    variant = 'circle',\n    ...other\n  } = props;\n\n  let children = null;\n\n  // Use a hook instead of onError on the img element to support server-side rendering.\n  const loaded = useLoaded({ src, srcSet });\n  const hasImg = src || srcSet;\n  const hasImgNotFailing = hasImg && loaded !== 'error';\n\n  if (hasImgNotFailing) {\n    children = (\n      <img\n        alt={alt}\n        src={src}\n        srcSet={srcSet}\n        sizes={sizes}\n        className={classes.img}\n        {...imgProps}\n      />\n    );\n  } else if (childrenProp != null) {\n    children = childrenProp;\n  } else if (hasImg && alt) {\n    children = alt[0];\n  } else {\n    children = <Person className={classes.fallback} />;\n  }\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        classes.system,\n        classes[variant],\n        {\n          [classes.colorDefault]: !hasImgNotFailing,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {children}\n    </Component>\n  );\n});\n\nAvatar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n  /**\n   * Used to render icon or text elements inside the Avatar if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes /* @typescript-to-proptypes-ignore */.elementType,\n  /**\n   * Attributes applied to the `img` element if the component is used to display an image.\n   * It can be used to listen for the loading error event.\n   */\n  imgProps: PropTypes.object,\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n  /**\n   * The `srcSet` attribute for the `img` element.\n   * Use this attribute for responsive image display.\n   */\n  srcSet: PropTypes.string,\n  /**\n   * The shape of the avatar.\n   */\n  variant: PropTypes.oneOf(['circle', 'rounded', 'square']),\n};\n\nexport default withStyles(styles, { name: 'MuiAvatar' })(Avatar);\n"]},"metadata":{},"sourceType":"module"}