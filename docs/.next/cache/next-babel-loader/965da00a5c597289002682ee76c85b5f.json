{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/MenuList/MenuList.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport ownerDocument from \"../utils/ownerDocument\";\nimport List from \"../List\";\nimport getScrollbarSize from \"../utils/getScrollbarSize\";\nimport useForkRef from \"../utils/useForkRef\";\n\nfunction nextItem(list, item, disableListWrap) {\n  if (list === item) {\n    return list.firstChild;\n  }\n\n  if (item && item.nextElementSibling) {\n    return item.nextElementSibling;\n  }\n\n  return disableListWrap ? null : list.firstChild;\n}\n\nfunction previousItem(list, item, disableListWrap) {\n  if (list === item) {\n    return disableListWrap ? list.firstChild : list.lastChild;\n  }\n\n  if (item && item.previousElementSibling) {\n    return item.previousElementSibling;\n  }\n\n  return disableListWrap ? null : list.lastChild;\n}\n\nfunction textCriteriaMatches(nextFocus, textCriteria) {\n  if (textCriteria === undefined) {\n    return true;\n  }\n\n  let text = nextFocus.innerText;\n\n  if (text === undefined) {\n    // jsdom doesn't support innerText\n    text = nextFocus.textContent;\n  }\n\n  text = text.trim().toLowerCase();\n\n  if (text.length === 0) {\n    return false;\n  }\n\n  if (textCriteria.repeating) {\n    return text[0] === textCriteria.keys[0];\n  }\n\n  return text.indexOf(textCriteria.keys.join('')) === 0;\n}\n\nfunction moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {\n  let wrappedOnce = false;\n  let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);\n\n  while (nextFocus) {\n    // Prevent infinite loop.\n    if (nextFocus === list.firstChild) {\n      if (wrappedOnce) {\n        return;\n      }\n\n      wrappedOnce = true;\n    } // Same logic as useAutocomplete.js\n\n\n    const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';\n\n    if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {\n      // Move to the next element.\n      nextFocus = traversalFunction(list, nextFocus, disableListWrap);\n    } else {\n      nextFocus.focus();\n      return;\n    }\n  }\n}\n\nconst useEnhancedEffect = true ? React.useEffect : React.useLayoutEffect;\n/**\n * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.\n * It's exposed to help customization of the [`Menu`](/api/menu/) component. If you\n * use it separately you need to move focus into the component manually. Once\n * the focus is placed inside the component it is fully keyboard accessible.\n */\n\nconst MenuList = /*#__PURE__*/React.forwardRef(function MenuList(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    autoFocus = false,\n    autoFocusItem = false,\n    children,\n    className,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    onKeyDown,\n    variant = 'selectedMenu'\n  } = props,\n        other = _objectWithoutProperties(props, [\"actions\", \"autoFocus\", \"autoFocusItem\", \"children\", \"className\", \"disabledItemsFocusable\", \"disableListWrap\", \"onKeyDown\", \"variant\"]);\n\n  const listRef = React.useRef(null);\n  const textCriteriaRef = React.useRef({\n    keys: [],\n    repeating: true,\n    previousKeyMatched: true,\n    lastTime: null\n  });\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      listRef.current.focus();\n    }\n  }, [autoFocus]);\n  React.useImperativeHandle(actions, () => ({\n    adjustStyleForScrollbar: (containerElement, theme) => {\n      // Let's ignore that piece of logic if users are already overriding the width\n      // of the menu.\n      const noExplicitWidth = !listRef.current.style.width;\n\n      if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {\n        const scrollbarSize = `${getScrollbarSize(true)}px`;\n        listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;\n        listRef.current.style.width = `calc(100% + ${scrollbarSize})`;\n      }\n\n      return listRef.current;\n    }\n  }), []);\n\n  const handleKeyDown = event => {\n    const list = listRef.current;\n    const key = event.key;\n    /**\n     * @type {Element} - will always be defined since we are in a keydown handler\n     * attached to an element. A keydown event is either dispatched to the activeElement\n     * or document.body or document.documentElement. Only the first case will\n     * trigger this specific handler.\n     */\n\n    const currentFocus = ownerDocument(list).activeElement;\n\n    if (key === 'ArrowDown') {\n      // Prevent scroll of the page\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);\n    } else if (key === 'ArrowUp') {\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);\n    } else if (key === 'Home') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);\n    } else if (key === 'End') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);\n    } else if (key.length === 1) {\n      const criteria = textCriteriaRef.current;\n      const lowerKey = key.toLowerCase();\n      const currTime = performance.now();\n\n      if (criteria.keys.length > 0) {\n        // Reset\n        if (currTime - criteria.lastTime > 500) {\n          criteria.keys = [];\n          criteria.repeating = true;\n          criteria.previousKeyMatched = true;\n        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {\n          criteria.repeating = false;\n        }\n      }\n\n      criteria.lastTime = currTime;\n      criteria.keys.push(lowerKey);\n      const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);\n\n      if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {\n        event.preventDefault();\n      } else {\n        criteria.previousKeyMatched = false;\n      }\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  const handleOwnRef = React.useCallback(instance => {\n    // #StrictMode ready\n    listRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  const handleRef = useForkRef(handleOwnRef, ref);\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n\n  let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n\n  React.Children.forEach(children, (child, index) => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n\n    if (true) {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant === 'selectedMenu' && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n  const items = React.Children.map(children, (child, index) => {\n    if (index === activeItemIndex) {\n      const newChildProps = {};\n\n      if (autoFocusItem) {\n        newChildProps.autoFocus = true;\n      }\n\n      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {\n        newChildProps.tabIndex = 0;\n      }\n\n      return /*#__PURE__*/React.cloneElement(child, newChildProps);\n    }\n\n    return child;\n  });\n  return __jsx(List, _extends({\n    role: \"menu\",\n    ref: handleRef,\n    className: className,\n    onKeyDown: handleKeyDown,\n    tabIndex: autoFocus ? 0 : -1\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 5\n    }\n  }), items);\n});\nMenuList.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, will focus the `[role=\"menu\"]` container and move into tab order.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\n   * if `variant=\"selectedMenu\"`.\n   */\n  autoFocusItem: PropTypes.bool,\n\n  /**\n   * MenuList contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the menu items will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n};\nexport default MenuList;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/MenuList/MenuList.js"],"names":["React","isFragment","PropTypes","ReactDOM","ownerDocument","List","getScrollbarSize","useForkRef","nextItem","list","item","disableListWrap","firstChild","nextElementSibling","previousItem","lastChild","previousElementSibling","textCriteriaMatches","nextFocus","textCriteria","undefined","text","innerText","textContent","trim","toLowerCase","length","repeating","keys","indexOf","join","moveFocus","currentFocus","disabledItemsFocusable","traversalFunction","wrappedOnce","nextFocusDisabled","disabled","getAttribute","hasAttribute","focus","useEnhancedEffect","useEffect","useLayoutEffect","MenuList","forwardRef","props","ref","actions","autoFocus","autoFocusItem","children","className","onKeyDown","variant","other","listRef","useRef","textCriteriaRef","previousKeyMatched","lastTime","current","useImperativeHandle","adjustStyleForScrollbar","containerElement","theme","noExplicitWidth","style","width","clientHeight","scrollbarSize","direction","handleKeyDown","event","key","activeElement","preventDefault","criteria","lowerKey","currTime","performance","now","push","keepFocusOnCurrent","handleOwnRef","useCallback","instance","findDOMNode","handleRef","activeItemIndex","Children","forEach","child","index","isValidElement","console","error","selected","items","map","newChildProps","tabIndex","cloneElement","propTypes","bool","node","string","func","oneOf"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport ownerDocument from '../utils/ownerDocument';\nimport List from '../List';\nimport getScrollbarSize from '../utils/getScrollbarSize';\nimport useForkRef from '../utils/useForkRef';\n\nfunction nextItem(list, item, disableListWrap) {\n  if (list === item) {\n    return list.firstChild;\n  }\n  if (item && item.nextElementSibling) {\n    return item.nextElementSibling;\n  }\n  return disableListWrap ? null : list.firstChild;\n}\n\nfunction previousItem(list, item, disableListWrap) {\n  if (list === item) {\n    return disableListWrap ? list.firstChild : list.lastChild;\n  }\n  if (item && item.previousElementSibling) {\n    return item.previousElementSibling;\n  }\n  return disableListWrap ? null : list.lastChild;\n}\n\nfunction textCriteriaMatches(nextFocus, textCriteria) {\n  if (textCriteria === undefined) {\n    return true;\n  }\n  let text = nextFocus.innerText;\n  if (text === undefined) {\n    // jsdom doesn't support innerText\n    text = nextFocus.textContent;\n  }\n  text = text.trim().toLowerCase();\n  if (text.length === 0) {\n    return false;\n  }\n  if (textCriteria.repeating) {\n    return text[0] === textCriteria.keys[0];\n  }\n  return text.indexOf(textCriteria.keys.join('')) === 0;\n}\n\nfunction moveFocus(\n  list,\n  currentFocus,\n  disableListWrap,\n  disabledItemsFocusable,\n  traversalFunction,\n  textCriteria,\n) {\n  let wrappedOnce = false;\n  let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);\n\n  while (nextFocus) {\n    // Prevent infinite loop.\n    if (nextFocus === list.firstChild) {\n      if (wrappedOnce) {\n        return;\n      }\n      wrappedOnce = true;\n    }\n\n    // Same logic as useAutocomplete.js\n    const nextFocusDisabled = disabledItemsFocusable\n      ? false\n      : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';\n\n    if (\n      !nextFocus.hasAttribute('tabindex') ||\n      !textCriteriaMatches(nextFocus, textCriteria) ||\n      nextFocusDisabled\n    ) {\n      // Move to the next element.\n      nextFocus = traversalFunction(list, nextFocus, disableListWrap);\n    } else {\n      nextFocus.focus();\n      return;\n    }\n  }\n}\n\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n\n/**\n * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.\n * It's exposed to help customization of the [`Menu`](/api/menu/) component. If you\n * use it separately you need to move focus into the component manually. Once\n * the focus is placed inside the component it is fully keyboard accessible.\n */\nconst MenuList = React.forwardRef(function MenuList(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    autoFocus = false,\n    autoFocusItem = false,\n    children,\n    className,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    onKeyDown,\n    variant = 'selectedMenu',\n    ...other\n  } = props;\n  const listRef = React.useRef(null);\n  const textCriteriaRef = React.useRef({\n    keys: [],\n    repeating: true,\n    previousKeyMatched: true,\n    lastTime: null,\n  });\n\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      listRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  React.useImperativeHandle(\n    actions,\n    () => ({\n      adjustStyleForScrollbar: (containerElement, theme) => {\n        // Let's ignore that piece of logic if users are already overriding the width\n        // of the menu.\n        const noExplicitWidth = !listRef.current.style.width;\n        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {\n          const scrollbarSize = `${getScrollbarSize(true)}px`;\n          listRef.current.style[\n            theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'\n          ] = scrollbarSize;\n          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;\n        }\n        return listRef.current;\n      },\n    }),\n    [],\n  );\n\n  const handleKeyDown = (event) => {\n    const list = listRef.current;\n    const key = event.key;\n    /**\n     * @type {Element} - will always be defined since we are in a keydown handler\n     * attached to an element. A keydown event is either dispatched to the activeElement\n     * or document.body or document.documentElement. Only the first case will\n     * trigger this specific handler.\n     */\n    const currentFocus = ownerDocument(list).activeElement;\n\n    if (key === 'ArrowDown') {\n      // Prevent scroll of the page\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);\n    } else if (key === 'ArrowUp') {\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);\n    } else if (key === 'Home') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);\n    } else if (key === 'End') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);\n    } else if (key.length === 1) {\n      const criteria = textCriteriaRef.current;\n      const lowerKey = key.toLowerCase();\n      const currTime = performance.now();\n      if (criteria.keys.length > 0) {\n        // Reset\n        if (currTime - criteria.lastTime > 500) {\n          criteria.keys = [];\n          criteria.repeating = true;\n          criteria.previousKeyMatched = true;\n        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {\n          criteria.repeating = false;\n        }\n      }\n      criteria.lastTime = currTime;\n      criteria.keys.push(lowerKey);\n      const keepFocusOnCurrent =\n        currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);\n      if (\n        criteria.previousKeyMatched &&\n        (keepFocusOnCurrent ||\n          moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))\n      ) {\n        event.preventDefault();\n      } else {\n        criteria.previousKeyMatched = false;\n      }\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  const handleOwnRef = React.useCallback((instance) => {\n    // #StrictMode ready\n    listRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  const handleRef = useForkRef(handleOwnRef, ref);\n\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n  let activeItemIndex = -1;\n  // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n  React.Children.forEach(children, (child, index) => {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error(\n          [\n            \"Material-UI: The Menu component doesn't accept a Fragment as a child.\",\n            'Consider providing an array instead.',\n          ].join('\\n'),\n        );\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant === 'selectedMenu' && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n\n  const items = React.Children.map(children, (child, index) => {\n    if (index === activeItemIndex) {\n      const newChildProps = {};\n      if (autoFocusItem) {\n        newChildProps.autoFocus = true;\n      }\n      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {\n        newChildProps.tabIndex = 0;\n      }\n\n      return React.cloneElement(child, newChildProps);\n    }\n\n    return child;\n  });\n\n  return (\n    <List\n      role=\"menu\"\n      ref={handleRef}\n      className={className}\n      onKeyDown={handleKeyDown}\n      tabIndex={autoFocus ? 0 : -1}\n      {...other}\n    >\n      {items}\n    </List>\n  );\n});\n\nMenuList.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, will focus the `[role=\"menu\"]` container and move into tab order.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\n   * if `variant=\"selectedMenu\"`.\n   */\n  autoFocusItem: PropTypes.bool,\n  /**\n   * MenuList contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, will allow focus on disabled items.\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the menu items will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu']),\n};\n\nexport default MenuList;\n"]},"metadata":{},"sourceType":"module"}