{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { getThemeProps, useTheme } from \"../../../material-ui-styles/src\";\nexport default function useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var theme = useTheme();\n  var props = getThemeProps({\n    theme: theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n\n  if (true) {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  var supportMatchMedia = true && typeof window.matchMedia !== 'undefined';\n\n  var _props$options = _objectSpread(_objectSpread({}, props), options),\n      _props$options$defaul = _props$options.defaultMatches,\n      defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul,\n      _props$options$matchM = _props$options.matchMedia,\n      matchMedia = _props$options$matchM === void 0 ? supportMatchMedia ? window.matchMedia : null : _props$options$matchM,\n      _props$options$noSsr = _props$options.noSsr,\n      noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr,\n      _props$options$ssrMat = _props$options.ssrMatchMedia,\n      ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;\n\n  var _React$useState = React.useState(function () {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n      match = _React$useState[0],\n      setMatch = _React$useState[1];\n\n  React.useEffect(function () {\n    var active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    var queryList = matchMedia(query);\n\n    var updateMatch = function updateMatch() {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return function () {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (true) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query: query,\n      match: match\n    });\n  }\n\n  return match;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/useMediaQuery/useMediaQuery.js"],"names":["React","getThemeProps","useTheme","useMediaQuery","queryInput","options","theme","props","name","console","error","join","query","replace","supportMatchMedia","window","matchMedia","defaultMatches","noSsr","ssrMatchMedia","useState","matches","match","setMatch","useEffect","active","undefined","queryList","updateMatch","addListener","removeListener","useDebugValue"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,QAAxB;AAEA,eAAe,SAASC,aAAT,CAAuBC,UAAvB,EAAiD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC9D,MAAMC,KAAK,GAAGJ,QAAQ,EAAtB;AACA,MAAMK,KAAK,GAAGN,aAAa,CAAC;AAC1BK,IAAAA,KAAK,EAALA,KAD0B;AAE1BE,IAAAA,IAAI,EAAE,kBAFoB;AAG1BD,IAAAA,KAAK,EAAE;AAHmB,GAAD,CAA3B;;AAMA,YAA2C;AACzC,QAAI,OAAOH,UAAP,KAAsB,UAAtB,IAAoCE,KAAK,KAAK,IAAlD,EAAwD;AACtDG,MAAAA,OAAO,CAACC,KAAR,CACE,CACE,wDADF,EAEE,8DAFF,EAGE,0DAHF,EAIEC,IAJF,CAIO,IAJP,CADF;AAOD;AACF;;AAED,MAAIC,KAAK,GAAG,OAAOR,UAAP,KAAsB,UAAtB,GAAmCA,UAAU,CAACE,KAAD,CAA7C,GAAuDF,UAAnE;AACAQ,EAAAA,KAAK,GAAGA,KAAK,CAACC,OAAN,CAAc,cAAd,EAA8B,EAA9B,CAAR,CArB8D,CAuB9D;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GACrB,QAAiC,OAAOC,MAAM,CAACC,UAAd,KAA6B,WADhE;;AA3B8D,uDAoCzDT,KApCyD,GAqCzDF,OArCyD;AAAA,6CA+B5DY,cA/B4D;AAAA,MA+B5DA,cA/B4D,sCA+B3C,KA/B2C;AAAA,6CAgC5DD,UAhC4D;AAAA,MAgC5DA,UAhC4D,sCAgC/CF,iBAAiB,GAAGC,MAAM,CAACC,UAAV,GAAuB,IAhCO;AAAA,4CAiC5DE,KAjC4D;AAAA,MAiC5DA,KAjC4D,qCAiCpD,KAjCoD;AAAA,6CAkC5DC,aAlC4D;AAAA,MAkC5DA,aAlC4D,sCAkC5C,IAlC4C;;AAAA,wBAwCpCnB,KAAK,CAACoB,QAAN,CAAe,YAAM;AAC7C,QAAIF,KAAK,IAAIJ,iBAAb,EAAgC;AAC9B,aAAOE,UAAU,CAACJ,KAAD,CAAV,CAAkBS,OAAzB;AACD;;AACD,QAAIF,aAAJ,EAAmB;AACjB,aAAOA,aAAa,CAACP,KAAD,CAAb,CAAqBS,OAA5B;AACD,KAN4C,CAQ7C;AACA;;;AACA,WAAOJ,cAAP;AACD,GAXyB,CAxCoC;AAAA,MAwCvDK,KAxCuD;AAAA,MAwChDC,QAxCgD;;AAqD9DvB,EAAAA,KAAK,CAACwB,SAAN,CAAgB,YAAM;AACpB,QAAIC,MAAM,GAAG,IAAb;;AAEA,QAAI,CAACX,iBAAL,EAAwB;AACtB,aAAOY,SAAP;AACD;;AAED,QAAMC,SAAS,GAAGX,UAAU,CAACJ,KAAD,CAA5B;;AACA,QAAMgB,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB;AACA;AACA;AACA,UAAIH,MAAJ,EAAY;AACVF,QAAAA,QAAQ,CAACI,SAAS,CAACN,OAAX,CAAR;AACD;AACF,KAPD;;AAQAO,IAAAA,WAAW;AACXD,IAAAA,SAAS,CAACE,WAAV,CAAsBD,WAAtB;AACA,WAAO,YAAM;AACXH,MAAAA,MAAM,GAAG,KAAT;AACAE,MAAAA,SAAS,CAACG,cAAV,CAAyBF,WAAzB;AACD,KAHD;AAID,GAtBD,EAsBG,CAAChB,KAAD,EAAQI,UAAR,EAAoBF,iBAApB,CAtBH;;AAwBA,YAA2C;AACzC;AACAd,IAAAA,KAAK,CAAC+B,aAAN,CAAoB;AAAEnB,MAAAA,KAAK,EAALA,KAAF;AAASU,MAAAA,KAAK,EAALA;AAAT,KAApB;AACD;;AAED,SAAOA,KAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\n\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    theme,\n    name: 'MuiUseMediaQuery',\n    props: {},\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(\n        [\n          'Material-UI: The `query` argument provided is invalid.',\n          'You are providing a function without a theme in the context.',\n          'One of the parent elements needs to use a ThemeProvider.',\n        ].join('\\n'),\n      );\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n\n  // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n  const supportMatchMedia =\n    typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    noSsr = false,\n    ssrMatchMedia = null,\n  } = {\n    ...props,\n    ...options,\n  };\n\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    }\n\n    // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n    return defaultMatches;\n  });\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({ query, match });\n  }\n\n  return match;\n}\n"]},"metadata":{},"sourceType":"module"}