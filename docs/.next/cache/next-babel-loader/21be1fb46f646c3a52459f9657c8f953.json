{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\n// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves\n// to learn the context in which each easing should be used.\nexport var easing = {\n  // This is the most common easing curve.\n  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',\n  // Objects enter the screen at full velocity from off-screen and\n  // slowly decelerate to a resting point.\n  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',\n  // Objects leave the screen at full velocity. They do not decelerate when off-screen.\n  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',\n  // The sharp curve is used by objects that may return to the screen at any time.\n  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'\n}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations\n// to learn when use what timing\n\nexport var duration = {\n  shortest: 150,\n  shorter: 200,\n  \"short\": 250,\n  // most basic recommended timing\n  standard: 300,\n  // this is to be used in complex animations\n  complex: 375,\n  // recommended when something is entering screen\n  enteringScreen: 225,\n  // recommended when something is leaving screen\n  leavingScreen: 195\n};\n\nfunction formatMs(milliseconds) {\n  return \"\".concat(Math.round(milliseconds), \"ms\");\n}\n/**\n * @param {string|Array} props\n * @param {object} param\n * @param {string} param.prop\n * @param {number} param.duration\n * @param {string} param.easing\n * @param {number} param.delay\n */\n\n\nexport default {\n  easing: easing,\n  duration: duration,\n  create: function create() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['all'];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _options$duration = options.duration,\n        durationOption = _options$duration === void 0 ? duration.standard : _options$duration,\n        _options$easing = options.easing,\n        easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing,\n        _options$delay = options.delay,\n        delay = _options$delay === void 0 ? 0 : _options$delay,\n        other = _objectWithoutProperties(options, [\"duration\", \"easing\", \"delay\"]);\n\n    if (true) {\n      var isString = function isString(value) {\n        return typeof value === 'string';\n      };\n\n      var isNumber = function isNumber(value) {\n        return !isNaN(_parseFloat(value));\n      };\n\n      if (!isString(props) && !_Array$isArray(props)) {\n        console.error('Material-UI: Argument \"props\" must be a string or Array.');\n      }\n\n      if (!isNumber(durationOption) && !isString(durationOption)) {\n        console.error(\"Material-UI: Argument \\\"duration\\\" must be a number or a string but found \".concat(durationOption, \".\"));\n      }\n\n      if (!isString(easingOption)) {\n        console.error('Material-UI: Argument \"easing\" must be a string.');\n      }\n\n      if (!isNumber(delay) && !isString(delay)) {\n        console.error('Material-UI: Argument \"delay\" must be a number or a string.');\n      }\n\n      if (_Object$keys(other).length !== 0) {\n        console.error(\"Material-UI: Unrecognized argument(s) [\".concat(_Object$keys(other).join(','), \"].\"));\n      }\n    }\n\n    return (_Array$isArray(props) ? props : [props]).map(function (animatedProp) {\n      return \"\".concat(animatedProp, \" \").concat(typeof durationOption === 'string' ? durationOption : formatMs(durationOption), \" \").concat(easingOption, \" \").concat(typeof delay === 'string' ? delay : formatMs(delay));\n    }).join(',');\n  },\n  getAutoHeightDuration: function getAutoHeightDuration(height) {\n    if (!height) {\n      return 0;\n    }\n\n    var constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10\n\n    return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);\n  }\n};","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/styles/transitions.js"],"names":["easing","easeInOut","easeOut","easeIn","sharp","duration","shortest","shorter","standard","complex","enteringScreen","leavingScreen","formatMs","milliseconds","Math","round","create","props","options","durationOption","easingOption","delay","other","isString","value","isNumber","isNaN","console","error","length","join","map","animatedProp","getAutoHeightDuration","height","constant"],"mappings":"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","sourcesContent":["// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves\n// to learn the context in which each easing should be used.\nexport const easing = {\n  // This is the most common easing curve.\n  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',\n  // Objects enter the screen at full velocity from off-screen and\n  // slowly decelerate to a resting point.\n  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',\n  // Objects leave the screen at full velocity. They do not decelerate when off-screen.\n  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',\n  // The sharp curve is used by objects that may return to the screen at any time.\n  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)',\n};\n\n// Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations\n// to learn when use what timing\nexport const duration = {\n  shortest: 150,\n  shorter: 200,\n  short: 250,\n  // most basic recommended timing\n  standard: 300,\n  // this is to be used in complex animations\n  complex: 375,\n  // recommended when something is entering screen\n  enteringScreen: 225,\n  // recommended when something is leaving screen\n  leavingScreen: 195,\n};\n\nfunction formatMs(milliseconds) {\n  return `${Math.round(milliseconds)}ms`;\n}\n\n/**\n * @param {string|Array} props\n * @param {object} param\n * @param {string} param.prop\n * @param {number} param.duration\n * @param {string} param.easing\n * @param {number} param.delay\n */\nexport default {\n  easing,\n  duration,\n  create: (props = ['all'], options = {}) => {\n    const {\n      duration: durationOption = duration.standard,\n      easing: easingOption = easing.easeInOut,\n      delay = 0,\n      ...other\n    } = options;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const isString = (value) => typeof value === 'string';\n      const isNumber = (value) => !isNaN(parseFloat(value));\n      if (!isString(props) && !Array.isArray(props)) {\n        console.error('Material-UI: Argument \"props\" must be a string or Array.');\n      }\n\n      if (!isNumber(durationOption) && !isString(durationOption)) {\n        console.error(\n          `Material-UI: Argument \"duration\" must be a number or a string but found ${durationOption}.`,\n        );\n      }\n\n      if (!isString(easingOption)) {\n        console.error('Material-UI: Argument \"easing\" must be a string.');\n      }\n\n      if (!isNumber(delay) && !isString(delay)) {\n        console.error('Material-UI: Argument \"delay\" must be a number or a string.');\n      }\n\n      if (Object.keys(other).length !== 0) {\n        console.error(`Material-UI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);\n      }\n    }\n\n    return (Array.isArray(props) ? props : [props])\n      .map(\n        (animatedProp) =>\n          `${animatedProp} ${\n            typeof durationOption === 'string' ? durationOption : formatMs(durationOption)\n          } ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`,\n      )\n      .join(',');\n  },\n  getAutoHeightDuration(height) {\n    if (!height) {\n      return 0;\n    }\n\n    const constant = height / 36;\n\n    // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10\n    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}