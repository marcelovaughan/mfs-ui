{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nconst upperFirst = require('lodash/upperFirst');\n\nconst camelCase = require('lodash/camelCase');\n\nconst {\n  CODE_VARIANTS,\n  LANGUAGES\n} = require(\"../constants\");\n\nfunction titleize(string) {\n  if (false) {\n    if (typeof string !== 'string' || string.length <= 0) {\n      console.error('titleize(string) expects a non empty string argument.');\n    }\n  }\n\n  return string.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n}\n\nfunction pageToTitle(page) {\n  if (page.title === false) {\n    return null;\n  }\n\n  if (page.title) {\n    return page.title;\n  }\n\n  const path = page.subheader || page.pathname;\n  const name = path.replace(/.*\\//, '');\n\n  if (path.indexOf('/api/') !== -1) {\n    return upperFirst(camelCase(name));\n  }\n\n  return titleize(name);\n}\n\nfunction pageToTitleI18n(page, t) {\n  const path = page.subheader || page.pathname;\n  return t(`pages.${path}`, {\n    ignoreWarning: true\n  }) || pageToTitle(page);\n}\n/**\n * @var\n * set of packages that ship their own typings instead of using @types/ namespace\n * Array because Set([iterable]) is not supported in IE11\n */\n\n\nconst packagesWithBundledTypes = ['@material-ui/core', '@material-ui/lab'];\n/**\n * WARNING: Always uses `latest` typings.\n *\n * Adds dependencies to @types packages only for packages that are not listed\n * in packagesWithBundledTypes\n *\n * @see packagesWithBundledTypes in this module namespace\n *\n * @param {Record<string, string>} deps - list of dependency as `name => version`\n */\n\nfunction addTypeDeps(deps) {\n  const packagesWithDTPackage = Object.keys(deps).filter(name => packagesWithBundledTypes.indexOf(name) === -1);\n  packagesWithDTPackage.forEach(name => {\n    let resolvedName = name; // scoped package?\n\n    if (name.startsWith('@')) {\n      // https://github.com/DefinitelyTyped/DefinitelyTyped#what-about-scoped-packages\n      resolvedName = name.slice(1).replace('/', '__');\n    }\n\n    deps[`@types/${resolvedName}`] = 'latest';\n  });\n}\n\nfunction includePeerDependencies(deps, versions) {\n  _extends(deps, {\n    'react-dom': versions['react-dom'],\n    react: versions.react\n  });\n\n  if (deps['@material-ui/lab'] && !deps['@material-ui/core']) {\n    deps['@material-ui/core'] = versions['@material-ui/core'];\n  }\n}\n/**\n * @param {string} raw - ES6 source with es module imports\n * @param {objects} options\n * @param {'JS' | 'TS'} options.codeLanguage\n * @param {'next' | 'latest'} options.reactVersion\n * @returns {Record<string, 'latest'>} map of packages with their required version\n */\n\n\nfunction getDependencies(raw, options = {}) {\n  const {\n    codeLanguage = CODE_VARIANTS.JS,\n    reactVersion = 'latest'\n  } = options;\n  const deps = {};\n  const versions = {\n    'react-dom': reactVersion,\n    react: reactVersion,\n    '@material-ui/core': 'latest',\n    '@material-ui/icons': 'latest',\n    '@material-ui/lab': 'latest',\n    '@material-ui/styles': 'latest',\n    '@material-ui/system': 'latest',\n    '@material-ui/utils': 'latest',\n    // TODO: remove once @material-ui/pickers v4 is released.\n    '@date-io/date-fns': 'v1'\n  };\n  const re = /^import\\s'([^']+)'|import\\s[\\s\\S]*?\\sfrom\\s+'([^']+)/gm;\n  let m; // eslint-disable-next-line no-cond-assign\n\n  while (m = re.exec(raw)) {\n    let name;\n\n    if (m[2]) {\n      // full import\n      // handle scope names\n      name = m[2].charAt(0) === '@' ? m[2].split('/', 2).join('/') : m[2].split('/', 1)[0];\n    } else {\n      name = m[1];\n    }\n\n    if (!deps[name]) {\n      deps[name] = versions[name] ? versions[name] : 'latest';\n    }\n  }\n\n  includePeerDependencies(deps, versions);\n\n  if (codeLanguage === CODE_VARIANTS.TS) {\n    addTypeDeps(deps);\n    deps.typescript = 'latest';\n  }\n\n  return deps;\n}\n\nfunction getCookie(name) {\n  const regex = new RegExp(`(?:(?:^|.*;*)${name}*=*([^;]*).*$)|^.*$`);\n  return document.cookie.replace(regex, '$1');\n}\n\nfunction pathnameToLanguage(pathname) {\n  const userLanguage = pathname.substring(1, 3);\n\n  if (LANGUAGES.indexOf(userLanguage) !== -1 && pathname.indexOf(`/${userLanguage}/`) === 0) {\n    return {\n      userLanguage,\n      canonical: userLanguage === 'en' ? pathname : pathname.substring(3)\n    };\n  }\n\n  return {\n    userLanguage: 'en',\n    canonical: pathname\n  };\n}\n\nmodule.exports = {\n  titleize,\n  pageToTitle,\n  pageToTitleI18n,\n  getDependencies,\n  getCookie,\n  pathnameToLanguage\n};","map":null,"metadata":{},"sourceType":"script"}