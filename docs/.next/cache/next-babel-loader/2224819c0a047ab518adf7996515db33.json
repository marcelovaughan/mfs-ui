{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { chainPropTypes } from \"../../../material-ui-utils/src\";\nimport { useTheme, withStyles } from \"../../../material-ui/src/styles\";\nimport { capitalize, useForkRef, useIsFocusVisible, useControlled, unstable_useId as useId } from \"../../../material-ui/src/utils\";\nimport { visuallyHidden } from \"../../../material-ui-system/src\";\nimport Star from \"../internal/svg-icons/Star\";\n\nfunction clamp(value, min, max) {\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n\nfunction getDecimalPrecision(num) {\n  const decimalPart = num.toString().split('.')[1];\n  return decimalPart ? decimalPart.length : 0;\n}\n\nfunction roundValueToPrecision(value, precision) {\n  if (value == null) {\n    return value;\n  }\n\n  const nearest = Math.round(value / precision) * precision;\n  return Number(nearest.toFixed(getDecimalPrecision(precision)));\n}\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    position: 'relative',\n    fontSize: theme.typography.pxToRem(24),\n    color: '#ffb400',\n    cursor: 'pointer',\n    textAlign: 'left',\n    WebkitTapHighlightColor: 'transparent',\n    '&$disabled': {\n      opacity: 0.5,\n      pointerEvents: 'none'\n    },\n    '&$focusVisible $iconActive': {\n      outline: '1px solid #999'\n    }\n  },\n\n  /* Styles applied to the root element if `size=\"small\"`. */\n  sizeSmall: {\n    fontSize: theme.typography.pxToRem(18)\n  },\n\n  /* Styles applied to the root element if `size=\"large\"`. */\n  sizeLarge: {\n    fontSize: theme.typography.pxToRem(30)\n  },\n\n  /* Styles applied to the root element if `readOnly={true}`. */\n  readOnly: {\n    pointerEvents: 'none'\n  },\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Pseudo-class applied to the root element if keyboard focused. */\n  focusVisible: {},\n\n  /* Visually hide an element. */\n  visuallyHidden,\n\n  /* Styles applied to the pristine label. */\n  pristine: {\n    'input:focus + &': {\n      top: 0,\n      bottom: 0,\n      position: 'absolute',\n      outline: '1px solid #999',\n      width: '100%'\n    }\n  },\n\n  /* Styles applied to the label elements. */\n  label: {\n    cursor: 'inherit'\n  },\n\n  /* Styles applied to the icon wrapping elements. */\n  icon: {\n    display: 'flex',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest\n    }),\n    // Fix mouseLeave issue.\n    // https://github.com/facebook/react/issues/4492\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied to the icon wrapping elements when empty. */\n  iconEmpty: {\n    color: theme.palette.action.disabled\n  },\n\n  /* Styles applied to the icon wrapping elements when filled. */\n  iconFilled: {},\n\n  /* Styles applied to the icon wrapping elements when hover. */\n  iconHover: {},\n\n  /* Styles applied to the icon wrapping elements when focus. */\n  iconFocus: {},\n\n  /* Styles applied to the icon wrapping elements when active. */\n  iconActive: {\n    transform: 'scale(1.2)'\n  },\n\n  /* Styles applied to the icon wrapping elements when decimals are necessary. */\n  decimal: {\n    position: 'relative'\n  }\n});\n\nfunction IconContainer(props) {\n  const {\n    value\n  } = props,\n        other = _objectWithoutProperties(props, [\"value\"]);\n\n  return __jsx(\"span\", other);\n}\n\nconst defaultIcon = __jsx(Star, {\n  fontSize: \"inherit\"\n});\n\nfunction defaultLabelText(value) {\n  return `${value} Star${value !== 1 ? 's' : ''}`;\n}\n\nconst Rating = /*#__PURE__*/React.forwardRef(function Rating(props, ref) {\n  const {\n    classes,\n    className,\n    defaultValue = null,\n    disabled = false,\n    emptyIcon,\n    emptyLabelText = 'Empty',\n    getLabelText = defaultLabelText,\n    icon = defaultIcon,\n    IconContainerComponent = IconContainer,\n    max = 5,\n    name: nameProp,\n    onChange,\n    onChangeActive,\n    onMouseLeave,\n    onMouseMove,\n    precision = 1,\n    readOnly = false,\n    size = 'medium',\n    value: valueProp\n  } = props,\n        other = _objectWithoutProperties(props, [\"classes\", \"className\", \"defaultValue\", \"disabled\", \"emptyIcon\", \"emptyLabelText\", \"getLabelText\", \"icon\", \"IconContainerComponent\", \"max\", \"name\", \"onChange\", \"onChangeActive\", \"onMouseLeave\", \"onMouseMove\", \"precision\", \"readOnly\", \"size\", \"value\"]);\n\n  const name = useId(nameProp);\n  const [valueDerived, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'Rating'\n  });\n  const valueRounded = roundValueToPrecision(valueDerived, precision);\n  const theme = useTheme();\n  const [{\n    hover,\n    focus\n  }, setState] = React.useState({\n    hover: -1,\n    focus: -1\n  });\n  let value = valueRounded;\n\n  if (hover !== -1) {\n    value = hover;\n  }\n\n  if (focus !== -1) {\n    value = focus;\n  }\n\n  const {\n    isFocusVisible,\n    onBlurVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const rootRef = React.useRef();\n  const handleFocusRef = useForkRef(focusVisibleRef, rootRef);\n  const handleRef = useForkRef(handleFocusRef, ref);\n\n  const handleMouseMove = event => {\n    if (onMouseMove) {\n      onMouseMove(event);\n    }\n\n    const rootNode = rootRef.current;\n    const {\n      right,\n      left\n    } = rootNode.getBoundingClientRect();\n    const {\n      width\n    } = rootNode.firstChild.getBoundingClientRect();\n    let percent;\n\n    if (theme.direction === 'rtl') {\n      percent = (right - event.clientX) / (width * max);\n    } else {\n      percent = (event.clientX - left) / (width * max);\n    }\n\n    let newHover = roundValueToPrecision(max * percent + precision / 2, precision);\n    newHover = clamp(newHover, precision, max);\n    setState(prev => prev.hover === newHover && prev.focus === newHover ? prev : {\n      hover: newHover,\n      focus: newHover\n    });\n    setFocusVisible(false);\n\n    if (onChangeActive && hover !== newHover) {\n      onChangeActive(event, newHover);\n    }\n  };\n\n  const handleMouseLeave = event => {\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n\n    const newHover = -1;\n    setState({\n      hover: newHover,\n      focus: newHover\n    });\n\n    if (onChangeActive && hover !== newHover) {\n      onChangeActive(event, newHover);\n    }\n  };\n\n  const handleChange = event => {\n    const newValue = parseFloat(event.target.value);\n    setValueState(newValue);\n\n    if (onChange) {\n      onChange(event, newValue);\n    }\n  };\n\n  const handleClear = event => {\n    // Ignore keyboard events\n    // https://github.com/facebook/react/issues/7407\n    if (event.clientX === 0 && event.clientY === 0) {\n      return;\n    }\n\n    setState({\n      hover: -1,\n      focus: -1\n    });\n    setValueState(null);\n\n    if (onChange && parseFloat(event.target.value) === valueRounded) {\n      onChange(event, null);\n    }\n  };\n\n  const handleFocus = event => {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    const newFocus = parseFloat(event.target.value);\n    setState(prev => ({\n      hover: prev.hover,\n      focus: newFocus\n    }));\n\n    if (onChangeActive && focus !== newFocus) {\n      onChangeActive(event, newFocus);\n    }\n  };\n\n  const handleBlur = event => {\n    if (hover !== -1) {\n      return;\n    }\n\n    if (focusVisible !== false) {\n      setFocusVisible(false);\n      onBlurVisible();\n    }\n\n    const newFocus = -1;\n    setState(prev => ({\n      hover: prev.hover,\n      focus: newFocus\n    }));\n\n    if (onChangeActive && focus !== newFocus) {\n      onChangeActive(event, newFocus);\n    }\n  };\n\n  const item = (state, labelProps) => {\n    const id = `${name}-${String(state.value).replace('.', '-')}`;\n\n    const container = __jsx(IconContainerComponent, {\n      value: state.value,\n      className: clsx(classes.icon, state.filled ? classes.iconFilled : classes.iconEmpty, state.hover && classes.iconHover, state.focus && classes.iconFocus, state.active && classes.iconActive)\n    }, emptyIcon && !state.filled ? emptyIcon : icon);\n\n    if (readOnly) {\n      return __jsx(\"span\", _extends({\n        key: state.value\n      }, labelProps), container);\n    }\n\n    return __jsx(React.Fragment, {\n      key: state.value\n    }, __jsx(\"label\", _extends({\n      className: classes.label,\n      htmlFor: id\n    }, labelProps), container, __jsx(\"span\", {\n      className: classes.visuallyHidden\n    }, getLabelText(state.value))), __jsx(\"input\", {\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      onClick: handleClear,\n      disabled: disabled,\n      value: state.value,\n      id: id,\n      type: \"radio\",\n      name: name,\n      checked: state.checked,\n      className: classes.visuallyHidden\n    }));\n  };\n\n  return __jsx(\"span\", _extends({\n    ref: handleRef,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    className: clsx(classes.root, className, size !== 'medium' && classes[`size${capitalize(size)}`], disabled && classes.disabled, focusVisible && classes.focusVisible, readOnly && classes.readOnly),\n    role: readOnly ? 'img' : null,\n    \"aria-label\": readOnly ? getLabelText(value) : null\n  }, other), Array.from(new Array(max)).map((_, index) => {\n    const itemValue = index + 1;\n\n    if (precision < 1) {\n      const items = Array.from(new Array(1 / precision));\n      return __jsx(\"span\", {\n        key: itemValue,\n        className: clsx(classes.decimal, itemValue === Math.ceil(value) && (hover !== -1 || focus !== -1) && classes.iconActive)\n      }, items.map(($, indexDecimal) => {\n        const itemDecimalValue = roundValueToPrecision(itemValue - 1 + (indexDecimal + 1) * precision, precision);\n        return item({\n          value: itemDecimalValue,\n          filled: itemDecimalValue <= value,\n          hover: itemDecimalValue <= hover,\n          focus: itemDecimalValue <= focus,\n          checked: itemDecimalValue === valueRounded\n        }, {\n          style: items.length - 1 === indexDecimal ? {} : {\n            width: itemDecimalValue === value ? `${(indexDecimal + 1) * precision * 100}%` : '0%',\n            overflow: 'hidden',\n            zIndex: 1,\n            position: 'absolute'\n          }\n        });\n      }));\n    }\n\n    return item({\n      value: itemValue,\n      active: itemValue === value && (hover !== -1 || focus !== -1),\n      filled: itemValue <= value,\n      hover: itemValue <= hover,\n      focus: itemValue <= focus,\n      checked: itemValue === valueRounded\n    });\n  }), !readOnly && !disabled && valueRounded == null && __jsx(React.Fragment, null, __jsx(\"input\", {\n    value: \"\",\n    id: `${name}-empty`,\n    type: \"radio\",\n    name: name,\n    defaultChecked: true,\n    className: classes.visuallyHidden\n  }), __jsx(\"label\", {\n    className: classes.pristine,\n    htmlFor: `${name}-empty`\n  }, __jsx(\"span\", {\n    className: classes.visuallyHidden\n  }, emptyLabelText))));\n});\nexport default withStyles(styles, {\n  name: 'MuiRating'\n})(Rating);","map":null,"metadata":{},"sourceType":"module"}