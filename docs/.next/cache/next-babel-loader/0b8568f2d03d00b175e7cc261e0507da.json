{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport { withStyles, useTheme } from \"../../../../../packages/material-ui/src/styles\";\nimport * as colors from \"../../../../../packages/material-ui/src/colors\";\nconst mainColors = ['Red', 'Pink', 'Purple', 'Deep Purple', 'Indigo', 'Blue', 'Light Blue', 'Cyan', 'Teal', 'Green', 'Light Green', 'Lime', 'Yellow', 'Amber', 'Orange', 'Deep Orange'];\nconst neutralColors = ['Brown', 'Grey', 'Blue Grey'];\nconst mainPalette = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\nconst altPalette = ['A100', 'A200', 'A400', 'A700'];\nexport const styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  name: {\n    marginBottom: 60\n  },\n  blockSpace: {\n    height: 4\n  },\n  colorContainer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  colorGroup: {\n    padding: 0,\n    margin: theme.spacing(0, 2, 2, 0),\n    flexGrow: 1,\n    [theme.breakpoints.up('sm')]: {\n      flexGrow: 0,\n      width: '30%'\n    }\n  },\n  colorValue: _objectSpread(_objectSpread({}, theme.typography.caption), {}, {\n    color: 'inherit',\n    fontWeight: 'inherit'\n  }),\n  body2: theme.typography.body2\n});\n\nfunction getColorBlock(classes, theme, colorName, colorValue, colorTitle) {\n  const bgColor = colors[colorName][colorValue];\n  const fgColor = theme.palette.getContrastText(bgColor);\n  let blockTitle;\n\n  if (colorTitle) {\n    blockTitle = __jsx(\"div\", {\n      className: classes.name\n    }, colorName);\n  }\n\n  let rowStyle = {\n    backgroundColor: bgColor,\n    color: fgColor,\n    listStyle: 'none',\n    padding: 15\n  };\n\n  if (colorValue.toString().indexOf('A1') === 0) {\n    rowStyle = _objectSpread(_objectSpread({}, rowStyle), {}, {\n      marginTop: 4\n    });\n  }\n\n  return __jsx(\"li\", {\n    style: rowStyle,\n    key: colorValue,\n    className: classes.body2\n  }, blockTitle, __jsx(\"div\", {\n    className: classes.colorContainer\n  }, __jsx(\"span\", null, colorValue), __jsx(\"span\", {\n    className: classes.colorValue\n  }, bgColor)));\n}\n\nfunction getColorGroup(options) {\n  const {\n    classes,\n    theme,\n    color,\n    showAltPalette\n  } = options;\n  const cssColor = color.replace(' ', '').replace(color.charAt(0), color.charAt(0).toLowerCase());\n  let colorsList = [];\n  colorsList = mainPalette.map(mainValue => getColorBlock(classes, theme, cssColor, mainValue));\n\n  if (showAltPalette) {\n    altPalette.forEach(altValue => {\n      colorsList.push(getColorBlock(classes, theme, cssColor, altValue));\n    });\n  }\n\n  return __jsx(\"ul\", {\n    className: classes.colorGroup,\n    key: cssColor\n  }, getColorBlock(classes, theme, cssColor, 500, true), __jsx(\"div\", {\n    className: classes.blockSpace\n  }), colorsList);\n}\n\nfunction Color(props) {\n  const {\n    classes\n  } = props;\n  const theme = useTheme();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, mainColors.map(mainColor => getColorGroup({\n    classes,\n    theme,\n    color: mainColor,\n    showAltPalette: true\n  })), neutralColors.map(neutralColor => getColorGroup({\n    classes,\n    theme,\n    color: neutralColor,\n    showAltPalette: false\n  })));\n}\n\nexport default withStyles(styles)(Color);","map":null,"metadata":{},"sourceType":"module"}