{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nexport function isPlainObject(item) {\n  return item && typeof item === 'object' && item.constructor === Object;\n}\nexport default function deepmerge(target, source) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    clone: true\n  };\n  var output = options.clone ? _objectSpread({}, target) : target;\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    _Object$keys(source).forEach(function (key) {\n      // Avoid prototype pollution\n      if (key === '__proto__') {\n        return;\n      }\n\n      if (isPlainObject(source[key]) && key in target) {\n        output[key] = deepmerge(target[key], source[key], options);\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-utils/src/deepmerge.js"],"names":["isPlainObject","item","constructor","Object","deepmerge","target","source","options","clone","output","forEach","key"],"mappings":";;AAAA,OAAO,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,SAAOA,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,IAAoCA,IAAI,CAACC,WAAL,KAAqBC,MAAhE;AACD;AAED,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,MAA3B,EAA8D;AAAA,MAA3BC,OAA2B,uEAAjB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAiB;AAC3E,MAAMC,MAAM,GAAGF,OAAO,CAACC,KAAR,qBAAqBH,MAArB,IAAgCA,MAA/C;;AAEA,MAAIL,aAAa,CAACK,MAAD,CAAb,IAAyBL,aAAa,CAACM,MAAD,CAA1C,EAAoD;AAClD,iBAAYA,MAAZ,EAAoBI,OAApB,CAA4B,UAACC,GAAD,EAAS;AACnC;AACA,UAAIA,GAAG,KAAK,WAAZ,EAAyB;AACvB;AACD;;AAED,UAAIX,aAAa,CAACM,MAAM,CAACK,GAAD,CAAP,CAAb,IAA8BA,GAAG,IAAIN,MAAzC,EAAiD;AAC/CI,QAAAA,MAAM,CAACE,GAAD,CAAN,GAAcP,SAAS,CAACC,MAAM,CAACM,GAAD,CAAP,EAAcL,MAAM,CAACK,GAAD,CAApB,EAA2BJ,OAA3B,CAAvB;AACD,OAFD,MAEO;AACLE,QAAAA,MAAM,CAACE,GAAD,CAAN,GAAcL,MAAM,CAACK,GAAD,CAApB;AACD;AACF,KAXD;AAYD;;AAED,SAAOF,MAAP;AACD","sourcesContent":["export function isPlainObject(item) {\n  return item && typeof item === 'object' && item.constructor === Object;\n}\n\nexport default function deepmerge(target, source, options = { clone: true }) {\n  const output = options.clone ? { ...target } : target;\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach((key) => {\n      // Avoid prototype pollution\n      if (key === '__proto__') {\n        return;\n      }\n\n      if (isPlainObject(source[key]) && key in target) {\n        output[key] = deepmerge(target[key], source[key], options);\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n\n  return output;\n}\n"]},"metadata":{},"sourceType":"module"}