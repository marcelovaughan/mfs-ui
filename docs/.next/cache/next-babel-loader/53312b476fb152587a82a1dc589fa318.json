{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport url from 'url';\nimport ExpandIcon from \"../../../../../packages/material-ui-icons/src/ExpandMore\";\nimport CollapseIcon from \"../../../../../packages/material-ui-icons/src/ChevronRight\";\nimport TreeView from \"../../../../../packages/material-ui-lab/src/TreeView\";\nimport TreeItem from \"../../../../../packages/material-ui-lab/src/TreeItem\";\nimport clsx from 'clsx';\nimport { makeStyles, withStyles, createMuiTheme, lighten } from \"../../../../../packages/material-ui/src/styles\";\nimport FormControlLabel from \"../../../../../packages/material-ui/src/FormControlLabel\";\nimport Switch from \"../../../../../packages/material-ui/src/Switch\";\n/**\n * @param {unknown} value\n */\n\nfunction getType(value) {\n  if (Array.isArray(value)) {\n    return 'array';\n  }\n\n  if (/^(#|rgb|rgba|hsl|hsla)/.test(value)) {\n    return 'color';\n  }\n\n  if (value === null) {\n    return 'null';\n  }\n\n  return typeof value;\n}\n/**\n *\n * @param {unknown} value\n * @param {ReturnType<typeof getType>} type\n */\n\n\nfunction getLabel(value, type) {\n  switch (type) {\n    case 'array':\n      return `Array(${value.length})`;\n\n    case 'null':\n      return 'null';\n\n    case 'undefined':\n      return 'undefined';\n\n    case 'function':\n      return `f ${value.name}()`;\n\n    case 'object':\n      return 'Object';\n\n    case 'string':\n      return `\"${value}\"`;\n\n    case 'symbol':\n      return `Symbol(${String(value)})`;\n\n    case 'bigint':\n    case 'boolean':\n    case 'number':\n    default:\n      return String(value);\n  }\n}\n\nfunction getTokenType(type) {\n  switch (type) {\n    case 'color':\n      return 'string';\n\n    case 'object':\n    case 'array':\n      return 'comment';\n\n    default:\n      return type;\n  }\n}\n\nconst useObjectEntryLabelStyles = makeStyles(theme => ({\n  color: {\n    backgroundColor: '#fff',\n    display: 'inline-block',\n    marginBottom: -1,\n    marginRight: theme.spacing(0.5),\n    border: '1px solid',\n    backgroundImage: 'url(\"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%202%202%22%3E%3Cpath%20d%3D%22M1%202V0h1v1H0v1z%22%20fill-opacity%3D%22.2%22%2F%3E%3C%2Fsvg%3E\")'\n  },\n  colorInner: {\n    display: 'block',\n    width: 11,\n    height: 11\n  }\n}));\n\nfunction ObjectEntryLabel(props) {\n  const {\n    objectKey,\n    objectValue\n  } = props;\n  const type = getType(objectValue);\n  const label = getLabel(objectValue, type);\n  const tokenType = getTokenType(type);\n  const classes = useObjectEntryLabelStyles();\n  return __jsx(React.Fragment, null, `${objectKey}: `, type === 'color' ? __jsx(\"span\", {\n    className: classes.color,\n    style: {\n      borderColor: lighten(label, 0.7)\n    }\n  }, __jsx(\"span\", {\n    className: classes.colorInner,\n    style: {\n      backgroundColor: label\n    }\n  })) : null, __jsx(\"span\", {\n    className: clsx('token', tokenType)\n  }, label));\n}\n\nconst useObjectEntryStyles = makeStyles({\n  treeItem: {\n    '&:focus > $treeItemContent': {\n      backgroundColor: lighten('#333', 0.08),\n      outline: `2px dashed ${lighten('#333', 0.3)}`\n    }\n  },\n  treeItemContent: {\n    '&:hover': {\n      backgroundColor: lighten('#333', 0.08)\n    }\n  }\n});\n\nfunction ObjectEntry(props) {\n  const {\n    nodeId,\n    objectKey,\n    objectValue\n  } = props;\n  const keyPrefix = nodeId;\n  let children = null;\n\n  if (objectValue !== null && typeof objectValue === 'object' || typeof objectValue === 'function') {\n    children = Object.keys(objectValue).length === 0 ? undefined : Object.keys(objectValue).map(key => {\n      return __jsx(ObjectEntry, {\n        key: key,\n        nodeId: `${keyPrefix}.${key}`,\n        objectKey: key,\n        objectValue: objectValue[key]\n      });\n    });\n  }\n\n  const classes = useObjectEntryStyles();\n  return __jsx(TreeItem, {\n    classes: {\n      root: classes.treeItem,\n      content: classes.treeItemContent\n    },\n    nodeId: nodeId,\n    label: __jsx(ObjectEntryLabel, {\n      objectKey: objectKey,\n      objectValue: objectValue\n    })\n  }, children);\n}\n\nvar _ref = __jsx(ExpandIcon, null);\n\nvar _ref2 = __jsx(CollapseIcon, null);\n\nfunction Inspector(props) {\n  const {\n    data,\n    expandPaths\n  } = props,\n        other = _objectWithoutProperties(props, [\"data\", \"expandPaths\"]);\n\n  const keyPrefix = '$ROOT';\n  const defaultExpanded = React.useMemo(() => {\n    return Array.isArray(expandPaths) ? expandPaths.map(expandPath => `${keyPrefix}.${expandPath}`) : [];\n  }, [keyPrefix, expandPaths]); // for default*  to take effect we need to remount\n\n  const key = React.useMemo(() => defaultExpanded.join(''), [defaultExpanded]);\n  return __jsx(TreeView, _extends({\n    key: key,\n    defaultCollapseIcon: _ref,\n    defaultEndIcon: __jsx(\"div\", {\n      style: {\n        width: 24\n      }\n    }),\n    defaultExpanded: defaultExpanded,\n    defaultExpandIcon: _ref2\n  }, other), Object.keys(data).map(objectKey => {\n    return __jsx(ObjectEntry, {\n      key: objectKey,\n      nodeId: `${keyPrefix}.${objectKey}`,\n      objectKey: objectKey,\n      objectValue: data[objectKey]\n    });\n  }));\n}\n\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  },\n  inspector: {\n    backgroundColor: '#333',\n    color: '#fff',\n    borderRadius: theme.shape.borderRadius,\n    padding: theme.spacing(1)\n  },\n  switch: {\n    paddingBottom: theme.spacing(1)\n  }\n});\n\nfunction computeNodeIds(object, prefix) {\n  if (object !== null && typeof object === 'object' || typeof object === 'function') {\n    const ids = [];\n    Object.keys(object).forEach(key => {\n      ids.push(`${prefix}${key}`, ...computeNodeIds(object[key], `${prefix}${key}.`));\n    });\n    return ids;\n  }\n\n  return [];\n}\n\nfunction useNodeIdsLazy(object) {\n  const [allNodeIds, setAllNodeIds] = React.useState([]); // technically we want to compute them lazily until we need them (expand all)\n  // yielding is good enough. technically we want to schedule the computation\n  // with low pri  and upgrade the priority later\n\n  React.useEffect(() => {\n    setAllNodeIds(computeNodeIds(object, ''));\n  }, [object]);\n  return allNodeIds;\n}\n\nfunction DefaultTheme(props) {\n  const {\n    classes\n  } = props;\n  const [checked, setChecked] = React.useState(false);\n  const [expandPaths, setExpandPaths] = React.useState(null);\n  const t = useSelector(state => state.options.t);\n  const [darkTheme, setDarkTheme] = React.useState(false);\n  React.useEffect(() => {\n    const URL = url.parse(document.location.href, true); // 'expend-path' is for backwards compatibility of any external links with a prior typo.\n\n    const expandPath = URL.query['expand-path'] || URL.query['expend-path'];\n\n    if (!expandPath) {\n      return;\n    }\n\n    setExpandPaths(expandPath.replace('$.', '').split('.').reduce((acc, path) => {\n      const last = acc.length > 0 ? `${acc[acc.length - 1]}.` : '';\n      acc.push(last + path);\n      return acc;\n    }, []));\n  }, []);\n  const data = React.useMemo(() => {\n    return createMuiTheme({\n      palette: {\n        type: darkTheme ? 'dark' : 'light'\n      }\n    });\n  }, [darkTheme]);\n  const allNodeIds = useNodeIdsLazy(data);\n  React.useDebugValue(allNodeIds);\n  React.useEffect(() => {\n    if (checked) {\n      // in case during the event handler allNodeIds wasn't computed yet\n      setExpandPaths(allNodeIds);\n    }\n  }, [checked, allNodeIds]);\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(FormControlLabel, {\n    className: classes.switch,\n    control: __jsx(Switch, {\n      checked: checked,\n      onChange: (event, newChecked) => {\n        setChecked(newChecked);\n        setExpandPaths(newChecked ? allNodeIds : []);\n      }\n    }),\n    label: t('expandAll')\n  }), __jsx(FormControlLabel, {\n    className: classes.switch,\n    control: __jsx(Switch, {\n      checked: darkTheme,\n      onChange: (event, newValue) => {\n        setDarkTheme(newValue);\n      }\n    }),\n    label: t('useDarkTheme')\n  }), __jsx(Inspector, {\n    className: classes.inspector,\n    data: data,\n    expandPaths: expandPaths\n  }));\n}\n\nexport default withStyles(styles)(DefaultTheme);","map":null,"metadata":{},"sourceType":"module"}