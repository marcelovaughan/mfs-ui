{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Input/Input.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from \"../../../material-ui-utils/src\";\nimport InputBase from \"../InputBase\";\nimport withStyles from \"../styles/withStyles\";\nexport const styles = theme => {\n  const light = theme.palette.type === 'light';\n  const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative'\n    },\n\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {\n      'label + &': {\n        marginTop: 16\n      }\n    },\n\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if color secondary. */\n    colorSecondary: {\n      '&$underline:after': {\n        borderBottomColor: theme.palette.secondary.main\n      }\n    },\n\n    /* Styles applied to the root element if `disableUnderline={false}`. */\n    underline: {\n      '&:after': {\n        borderBottom: `2px solid ${theme.palette.primary.main}`,\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE 11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\"',\n        position: 'absolute',\n        right: 0,\n        transform: 'scaleX(0)',\n        transition: theme.transitions.create('transform', {\n          duration: theme.transitions.duration.shorter,\n          easing: theme.transitions.easing.easeOut\n        }),\n        pointerEvents: 'none' // Transparent to the hover style.\n\n      },\n      '&$focused:after': {\n        transform: 'scaleX(1)'\n      },\n      '&$error:after': {\n        borderBottomColor: theme.palette.error.main,\n        transform: 'scaleX(1)' // error is always underlined in red\n\n      },\n      '&:before': {\n        borderBottom: `1px solid ${bottomLineColor}`,\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE 11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\\\\00a0\"',\n        position: 'absolute',\n        right: 0,\n        transition: theme.transitions.create('border-bottom-color', {\n          duration: theme.transitions.duration.shorter\n        }),\n        pointerEvents: 'none' // Transparent to the hover style.\n\n      },\n      '&:hover:not($disabled):before': {\n        borderBottom: `2px solid ${theme.palette.text.primary}`,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          borderBottom: `1px solid ${bottomLineColor}`\n        }\n      },\n      '&$disabled:before': {\n        borderBottomStyle: 'dotted'\n      }\n    },\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    marginDense: {},\n\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {},\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {},\n\n    /* Styles applied to the `input` element. */\n    input: {},\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {},\n\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {},\n\n    /* Styles applied to the `input` element if `type=\"search\"`. */\n    inputTypeSearch: {}\n  };\n};\nconst Input = /*#__PURE__*/React.forwardRef(function Input(props, ref) {\n  const {\n    disableUnderline,\n    classes,\n    fullWidth = false,\n    inputComponent = 'input',\n    multiline = false,\n    type = 'text'\n  } = props,\n        other = _objectWithoutProperties(props, [\"disableUnderline\", \"classes\", \"fullWidth\", \"inputComponent\", \"multiline\", \"type\"]);\n\n  return __jsx(InputBase, _extends({\n    classes: _objectSpread(_objectSpread({}, classes), {}, {\n      root: clsx(classes.root, !disableUnderline && classes.underline),\n      underline: null\n    }),\n    fullWidth: fullWidth,\n    inputComponent: inputComponent,\n    multiline: multiline,\n    ref: ref,\n    type: type\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }));\n});\nInput.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the input will not have an underline.\n   */\n  disableUnderline: PropTypes.bool,\n\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The component used for the `input` element.\n   * Either a string to use a HTML element or a component.\n   */\n  inputComponent: PropTypes.elementType,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any\n};\nInput.muiName = 'Input';\nexport default withStyles(styles, {\n  name: 'MuiInput'\n})(Input);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Input/Input.js"],"names":["React","PropTypes","clsx","refType","InputBase","withStyles","styles","theme","light","palette","type","bottomLineColor","root","position","formControl","marginTop","focused","disabled","colorSecondary","borderBottomColor","secondary","main","underline","borderBottom","primary","left","bottom","content","right","transform","transition","transitions","create","duration","shorter","easing","easeOut","pointerEvents","error","text","borderBottomStyle","marginDense","multiline","fullWidth","input","inputMarginDense","inputMultiline","inputTypeSearch","Input","forwardRef","props","ref","disableUnderline","classes","inputComponent","other","propTypes","autoComplete","string","autoFocus","bool","object","color","oneOf","defaultValue","any","endAdornment","node","id","elementType","inputProps","inputRef","margin","name","onChange","func","placeholder","readOnly","required","rows","oneOfType","number","rowsMax","startAdornment","value","muiName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport InputBase from '../InputBase';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = (theme) => {\n  const light = theme.palette.type === 'light';\n  const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n    },\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {\n      'label + &': {\n        marginTop: 16,\n      },\n    },\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n    /* Styles applied to the root element if color secondary. */\n    colorSecondary: {\n      '&$underline:after': {\n        borderBottomColor: theme.palette.secondary.main,\n      },\n    },\n    /* Styles applied to the root element if `disableUnderline={false}`. */\n    underline: {\n      '&:after': {\n        borderBottom: `2px solid ${theme.palette.primary.main}`,\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE 11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\"',\n        position: 'absolute',\n        right: 0,\n        transform: 'scaleX(0)',\n        transition: theme.transitions.create('transform', {\n          duration: theme.transitions.duration.shorter,\n          easing: theme.transitions.easing.easeOut,\n        }),\n        pointerEvents: 'none', // Transparent to the hover style.\n      },\n      '&$focused:after': {\n        transform: 'scaleX(1)',\n      },\n      '&$error:after': {\n        borderBottomColor: theme.palette.error.main,\n        transform: 'scaleX(1)', // error is always underlined in red\n      },\n      '&:before': {\n        borderBottom: `1px solid ${bottomLineColor}`,\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE 11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\\\\00a0\"',\n        position: 'absolute',\n        right: 0,\n        transition: theme.transitions.create('border-bottom-color', {\n          duration: theme.transitions.duration.shorter,\n        }),\n        pointerEvents: 'none', // Transparent to the hover style.\n      },\n      '&:hover:not($disabled):before': {\n        borderBottom: `2px solid ${theme.palette.text.primary}`,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          borderBottom: `1px solid ${bottomLineColor}`,\n        },\n      },\n      '&$disabled:before': {\n        borderBottomStyle: 'dotted',\n      },\n    },\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    marginDense: {},\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {},\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {},\n    /* Styles applied to the `input` element. */\n    input: {},\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {},\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {},\n    /* Styles applied to the `input` element if `type=\"search\"`. */\n    inputTypeSearch: {},\n  };\n};\n\nconst Input = React.forwardRef(function Input(props, ref) {\n  const {\n    disableUnderline,\n    classes,\n    fullWidth = false,\n    inputComponent = 'input',\n    multiline = false,\n    type = 'text',\n    ...other\n  } = props;\n\n  return (\n    <InputBase\n      classes={{\n        ...classes,\n        root: clsx(classes.root, {\n          [classes.underline]: !disableUnderline,\n        }),\n        underline: null,\n      }}\n      fullWidth={fullWidth}\n      inputComponent={inputComponent}\n      multiline={multiline}\n      ref={ref}\n      type={type}\n      {...other}\n    />\n  );\n});\n\nInput.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the input will not have an underline.\n   */\n  disableUnderline: PropTypes.bool,\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * The component used for the `input` element.\n   * Either a string to use a HTML element or a component.\n   */\n  inputComponent: PropTypes.elementType,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n};\n\nInput.muiName = 'Input';\n\nexport default withStyles(styles, { name: 'MuiInput' })(Input);\n"]},"metadata":{},"sourceType":"module"}