{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { ACTION_TYPES, CODE_VARIANTS } from \"../constants\";\nimport memoize from \"../../../../packages/material-ui-system/src/memoize\";\nimport mapTranslations from \"../utils/mapTranslations\";\n\nconst req = require.context(\"../../../translations\", false, /translations.*\\.json$/);\n\nconst translations = mapTranslations(req, 'json');\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);\n}\n\nconst warnOnce = {};\nconst getT = memoize(userLanguage => (key, options = {}) => {\n  const {\n    ignoreWarning = false\n  } = options;\n  const wordings = translations[userLanguage];\n\n  if (!wordings) {\n    console.error(`Missing language: ${userLanguage}.`);\n    return '…';\n  }\n\n  const translation = getPath(wordings, key);\n\n  if (!translation) {\n    const fullKey = `${userLanguage}:${key}`; // No warnings in CI env\n\n    if (!ignoreWarning && !warnOnce[fullKey] && false) {\n      console.error(`Missing translation for ${fullKey}.`);\n      warnOnce[fullKey] = true;\n    }\n\n    return getPath(translations.en, key);\n  }\n\n  return translation;\n});\nconst mapping = {\n  [ACTION_TYPES.OPTIONS_CHANGE]: (state, action) => {\n    const newState = {\n      codeVariant: action.payload.codeVariant || state.codeVariant,\n      userLanguage: action.payload.userLanguage || state.userLanguage\n    };\n    return newState;\n  }\n};\nexport default function optionsReducer(state = {}, action) {\n  let newState = _objectSpread({}, state);\n\n  if (!newState.codeVariant) {\n    newState.codeVariant = CODE_VARIANTS.JS;\n  }\n\n  if (!newState.userLanguage) {\n    newState.userLanguage = 'en';\n  }\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  newState.t = getT(newState.userLanguage);\n  return newState;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/redux/optionsReducer.js"],"names":["req","require","translations","mapTranslations","path","acc","warnOnce","getT","memoize","userLanguage","options","ignoreWarning","wordings","console","translation","getPath","fullKey","key","mapping","ACTION_TYPES","newState","codeVariant","action","state","CODE_VARIANTS"],"mappings":"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","sourcesContent":["import { ACTION_TYPES, CODE_VARIANTS } from 'docs/src/modules/constants';\nimport memoize from '@material-ui/system/memoize';\nimport mapTranslations from 'docs/src/modules/utils/mapTranslations';\n\nconst req = require.context('docs/translations', false, /translations.*\\.json$/);\nconst translations = mapTranslations(req, 'json');\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce((acc, item) => (acc && acc[item] ? acc[item] : null), obj);\n}\n\nconst warnOnce = {};\n\nconst getT = memoize((userLanguage) => (key, options = {}) => {\n  const { ignoreWarning = false } = options;\n  const wordings = translations[userLanguage];\n\n  if (!wordings) {\n    console.error(`Missing language: ${userLanguage}.`);\n    return '…';\n  }\n\n  const translation = getPath(wordings, key);\n\n  if (!translation) {\n    const fullKey = `${userLanguage}:${key}`;\n    // No warnings in CI env\n    if (!ignoreWarning && !warnOnce[fullKey] && typeof window !== 'undefined') {\n      console.error(`Missing translation for ${fullKey}.`);\n      warnOnce[fullKey] = true;\n    }\n    return getPath(translations.en, key);\n  }\n\n  return translation;\n});\n\nconst mapping = {\n  [ACTION_TYPES.OPTIONS_CHANGE]: (state, action) => {\n    const newState = {\n      codeVariant: action.payload.codeVariant || state.codeVariant,\n      userLanguage: action.payload.userLanguage || state.userLanguage,\n    };\n    return newState;\n  },\n};\n\nexport default function optionsReducer(state = {}, action) {\n  let newState = { ...state };\n\n  if (!newState.codeVariant) {\n    newState.codeVariant = CODE_VARIANTS.JS;\n  }\n  if (!newState.userLanguage) {\n    newState.userLanguage = 'en';\n  }\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  newState.t = getT(newState.userLanguage);\n\n  return newState;\n}\n"]},"metadata":{},"sourceType":"module"}