{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport Paper from \"../../../../../packages/material-ui/src/Paper\";\nimport clsx from 'clsx';\nimport InputBase from \"../../../../../packages/material-ui/src/InputBase\";\nimport Typography from \"../../../../../packages/material-ui/src/Typography\";\nimport debounce from 'lodash/debounce';\nimport Grid from \"../../../../../packages/material-ui/src/Grid\";\nimport Dialog from \"../../../../../packages/material-ui/src/Dialog\";\nimport HighlightedCode from \"../../../modules/components/HighlightedCode\";\nimport DialogActions from \"../../../../../packages/material-ui/src/DialogActions\";\nimport DialogContent from \"../../../../../packages/material-ui/src/DialogContent\";\nimport DialogTitle from \"../../../../../packages/material-ui/src/DialogTitle\";\nimport IconButton from \"../../../../../packages/material-ui/src/IconButton\";\nimport Tooltip from \"../../../../../packages/material-ui/src/Tooltip\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport FlexSearch from 'flexsearch';\nimport SearchIcon from \"../../../../../packages/material-ui-icons/src/Search\";\nimport FormControlLabel from \"../../../../../packages/material-ui/src/FormControlLabel\";\nimport RadioGroup from \"../../../../../packages/material-ui/src/RadioGroup\";\nimport Radio from \"../../../../../packages/material-ui/src/Radio\";\nimport Link from \"../../../modules/components/Link\";\nimport * as mui from \"../../../../../packages/material-ui-icons/src\";\nimport synonyms from \"./synonyms\";\n\nif (false) {\n  Object.keys(synonyms).forEach(icon => {\n    if (!mui[icon]) {\n      throw new Error(`The icon ${icon} does no longer exist.`);\n    }\n  });\n} // Working on the logic? Uncomment these imports.\n// It will be x10 faster than working with all of the icons.\n// import Menu from '@material-ui/icons/Menu';\n// import MenuOutlined from '@material-ui/icons/MenuOutlined';\n// import MenuRounded from '@material-ui/icons/MenuRounded';\n// import MenuTwoTone from '@material-ui/icons/MenuTwoTone';\n// import MenuSharp from '@material-ui/icons/MenuSharp';\n// import ExitToApp from '@material-ui/icons/ExitToApp';\n// import ExitToAppOutlined from '@material-ui/icons/ExitToAppOutlined';\n// import ExitToAppRounded from '@material-ui/icons/ExitToAppRounded';\n// import ExitToAppTwoTone from '@material-ui/icons/ExitToAppTwoTone';\n// import ExitToAppSharp from '@material-ui/icons/ExitToAppSharp';\n// import Delete from '@material-ui/icons/Delete';\n// import DeleteOutlined from '@material-ui/icons/DeleteOutlined';\n// import DeleteRounded from '@material-ui/icons/DeleteRounded';\n// import DeleteTwoTone from '@material-ui/icons/DeleteTwoTone';\n// import DeleteSharp from '@material-ui/icons/DeleteSharp';\n// import DeleteForever from '@material-ui/icons/DeleteForever';\n// import DeleteForeverOutlined from '@material-ui/icons/DeleteForeverOutlined';\n// import DeleteForeverRounded from '@material-ui/icons/DeleteForeverRounded';\n// import DeleteForeverTwoTone from '@material-ui/icons/DeleteForeverTwoTone';\n// import DeleteForeverSharp from '@material-ui/icons/DeleteForeverSharp';\n// const mui = {\n//   ExitToApp,\n//   ExitToAppOutlined,\n//   ExitToAppRounded,\n//   ExitToAppTwoTone,\n//   ExitToAppSharp,\n//   Menu,\n//   MenuOutlined,\n//   MenuRounded,\n//   MenuTwoTone,\n//   MenuSharp,\n//   Delete,\n//   DeleteOutlined,\n//   DeleteRounded,\n//   DeleteTwoTone,\n//   DeleteSharp,\n//   DeleteForever,\n//   DeleteForeverOutlined,\n//   DeleteForeverRounded,\n//   DeleteForeverTwoTone,\n//   DeleteForeverSharp,\n// };\n\n\nfunction selectNode(node) {\n  // Clear any current selection\n  const selection = window.getSelection();\n  selection.removeAllRanges(); // Select code\n\n  const range = document.createRange();\n  range.selectNodeContents(node);\n  selection.addRange(range);\n}\n\nlet Icons = props => {\n  const {\n    icons,\n    classes,\n    handleClickOpen\n  } = props;\n\n  const handleClick = event => {\n    selectNode(event.currentTarget);\n  };\n\n  return __jsx(\"div\", null, icons.map(icon => {\n    return __jsx(\"span\", {\n      key: icon.key,\n      className: clsx('markdown-body', classes.icon)\n    }, __jsx(icon.Icon, {\n      tabIndex: -1,\n      onClick: handleClickOpen,\n      title: icon.key,\n      className: classes.iconSvg,\n      \"data-ga-event-category\": \"material-icons\",\n      \"data-ga-event-action\": \"click\",\n      \"data-ga-event-label\": icon.key\n    }), __jsx(\"p\", {\n      onClick: handleClick\n    }, icon.key));\n  }));\n};\n\nIcons = /*#__PURE__*/React.memo(Icons);\nconst useDialogStyles = makeStyles(theme => ({\n  markdown: {\n    '& pre': {\n      borderRadius: 0,\n      margin: 0\n    }\n  },\n  import: {\n    textAlign: 'right',\n    padding: theme.spacing(0.5, 1)\n  },\n  container: {\n    marginBottom: theme.spacing(5)\n  },\n  canvas: {\n    fontSize: 210,\n    marginTop: theme.spacing(2),\n    color: theme.palette.primary.dark,\n    backgroundSize: '30px 30px',\n    backgroundColor: '#fff',\n    backgroundPosition: '0 0, 0 15px, 15px -15px, -15px 0',\n    backgroundImage: 'linear-gradient(45deg, #f4f4f4 25%, transparent 25%), linear-gradient(-45deg, #f4f4f4 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #f4f4f4 75%), linear-gradient(-45deg, transparent 75%, #f4f4f4 75%)'\n  },\n  fontSize: {\n    margin: theme.spacing(2)\n  },\n  context: {\n    margin: theme.spacing(0.5),\n    padding: theme.spacing(1, 2),\n    borderRadius: theme.shape.borderRadius,\n    boxSizing: 'content-box'\n  },\n  contextPrimary: {\n    color: theme.palette.primary.main\n  },\n  contextPrimaryInverse: {\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main\n  },\n  contextTextPrimary: {\n    color: theme.palette.text.primary\n  },\n  contextTextPrimaryInverse: {\n    color: theme.palette.background.paper,\n    backgroundColor: theme.palette.text.primary\n  },\n  contextTextSecondary: {\n    color: theme.palette.text.secondary\n  },\n  contextTextSecondaryInverse: {\n    color: theme.palette.background.paper,\n    backgroundColor: theme.palette.text.secondary\n  }\n}));\n\nvar _ref = __jsx(\"div\", null);\n\nlet DialogDetails = props => {\n  const classes = useDialogStyles();\n  const {\n    open,\n    selectedIcon,\n    handleClose\n  } = props;\n\n  const handleClick = event => {\n    selectNode(event.currentTarget);\n  };\n\n  return __jsx(Dialog, {\n    fullWidth: true,\n    maxWidth: \"sm\",\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"icon-dialog-title\"\n  }, selectedIcon ? __jsx(React.Fragment, null, __jsx(DialogTitle, {\n    id: \"icon-dialog-title\",\n    onClick: handleClick\n  }, selectedIcon.key), __jsx(HighlightedCode, {\n    className: classes.markdown,\n    onClick: handleClick,\n    code: `import ${selectedIcon.key}Icon from '@material-ui/icons/${selectedIcon.key}';`,\n    language: \"js\"\n  }), __jsx(Link, {\n    className: classes.import,\n    color: \"textSecondary\",\n    href: \"/components/icons/\",\n    variant: \"caption\"\n  }, \"Learn more about the import\"), __jsx(DialogContent, null, __jsx(Grid, {\n    container: true,\n    className: classes.container\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: \"auto\"\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"center\"\n  }, __jsx(selectedIcon.Icon, {\n    className: classes.canvas\n  }))), __jsx(Grid, {\n    item: true,\n    xs: true\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"flex-end\",\n    justify: \"center\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Tooltip, {\n    title: \"fontSize small\"\n  }, __jsx(selectedIcon.Icon, {\n    className: classes.fontSize,\n    fontSize: \"small\"\n  }))), __jsx(Grid, {\n    item: true\n  }, __jsx(Tooltip, {\n    title: \"fontSize medium\"\n  }, __jsx(selectedIcon.Icon, {\n    className: classes.fontSize\n  }))), __jsx(Grid, {\n    item: true\n  }, __jsx(Tooltip, {\n    title: \"fontSize large\"\n  }, __jsx(selectedIcon.Icon, {\n    className: classes.fontSize,\n    fontSize: \"large\"\n  })))), __jsx(Grid, {\n    container: true,\n    justify: \"center\"\n  }, __jsx(selectedIcon.Icon, {\n    className: clsx(classes.context, classes.contextPrimary)\n  }), __jsx(selectedIcon.Icon, {\n    className: clsx(classes.context, classes.contextPrimaryInverse)\n  })), __jsx(Grid, {\n    container: true,\n    justify: \"center\"\n  }, __jsx(selectedIcon.Icon, {\n    className: clsx(classes.context, classes.contextTextPrimary)\n  }), __jsx(selectedIcon.Icon, {\n    className: clsx(classes.context, classes.contextTextPrimaryInverse)\n  })), __jsx(Grid, {\n    container: true,\n    justify: \"center\"\n  }, __jsx(selectedIcon.Icon, {\n    className: clsx(classes.context, classes.contextTextSecondary)\n  }), __jsx(selectedIcon.Icon, {\n    className: clsx(classes.context, classes.contextTextSecondaryInverse)\n  }))))), __jsx(DialogActions, null, __jsx(Button, {\n    onClick: handleClose,\n    color: \"primary\"\n  }, \"Close\"))) : _ref);\n};\n\nDialogDetails = /*#__PURE__*/React.memo(DialogDetails);\nconst useStyles = makeStyles(theme => ({\n  root: {\n    minHeight: 500\n  },\n  form: {\n    margin: theme.spacing(2, 0)\n  },\n  paper: {\n    position: 'sticky',\n    top: 80,\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2),\n    width: '100%'\n  },\n  input: {\n    marginLeft: 8,\n    flex: 1\n  },\n  iconButton: {\n    padding: 10\n  },\n  icon: {\n    display: 'inline-block',\n    width: 86,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    margin: '0 4px',\n    fontSize: 12,\n    '& p': {\n      margin: 0,\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    }\n  },\n  iconSvg: {\n    boxSizing: 'content-box',\n    cursor: 'pointer',\n    color: theme.palette.text.primary,\n    borderRadius: theme.shape.borderRadius,\n    transition: theme.transitions.create(['background-color', 'box-shadow'], {\n      duration: theme.transitions.duration.shortest\n    }),\n    fontSize: 40,\n    padding: theme.spacing(2),\n    margin: theme.spacing(0.5, 0),\n    '&:hover': {\n      backgroundColor: theme.palette.background.paper,\n      boxShadow: theme.shadows[1]\n    }\n  },\n  results: {\n    marginBottom: theme.spacing(1)\n  }\n}));\nconst searchIndex = FlexSearch.create({\n  async: true,\n  tokenize: 'full'\n});\nconst allIconsMap = {};\nconst allIcons = Object.keys(mui).sort().map(key => {\n  let tag;\n\n  if (key.indexOf('Outlined') !== -1) {\n    tag = 'Outlined';\n  } else if (key.indexOf('TwoTone') !== -1) {\n    tag = 'Two tone';\n  } else if (key.indexOf('Rounded') !== -1) {\n    tag = 'Rounded';\n  } else if (key.indexOf('Sharp') !== -1) {\n    tag = 'Sharp';\n  } else {\n    tag = 'Filled';\n  }\n\n  let searchable = key.replace(/(Outlined|TwoTone|Rounded|Sharp)$/, '');\n\n  if (synonyms[searchable]) {\n    searchable += ` ${synonyms[searchable]}`;\n  }\n\n  searchIndex.add(key, searchable);\n  const icon = {\n    key,\n    tag,\n    Icon: mui[key]\n  };\n  allIconsMap[key] = icon;\n  return icon;\n});\n\nvar _ref2 = __jsx(SearchIcon, null);\n\nexport default function SearchIcons() {\n  const classes = useStyles();\n  const [tag, setTag] = React.useState('Filled');\n  const [keys, setKeys] = React.useState(null);\n  const [open, setOpen] = React.useState(false);\n  const [selectedIcon, setSelectedIcon] = React.useState(null);\n  const handleClickOpen = React.useCallback(event => {\n    setSelectedIcon(allIconsMap[event.currentTarget.getAttribute('title')]);\n    setOpen(true);\n  }, []);\n  const handleClose = React.useCallback(() => {\n    setOpen(false);\n  }, []);\n  const isMounted = React.useRef(false);\n  React.useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const handleChange = React.useMemo(() => debounce(value => {\n    if (!isMounted.current) {\n      return;\n    }\n\n    if (value === '') {\n      setKeys(null);\n    } else {\n      searchIndex.search(value).then(results => {\n        setKeys(results); // Keep track of the no results so we can add synonyms in the future.\n\n        if (value.length >= 4 && results.length === 0) {\n          window.ga('send', {\n            hitType: 'event',\n            eventCategory: 'material-icons',\n            eventAction: 'no-results',\n            eventLabel: value\n          });\n        }\n      });\n    }\n  }, 220), []);\n  const icons = React.useMemo(() => (keys === null ? allIcons : keys.map(key => allIconsMap[key])).filter(icon => tag === icon.tag), [tag, keys]);\n  return __jsx(Grid, {\n    container: true,\n    className: classes.root\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 3\n  }, __jsx(\"form\", {\n    className: classes.form\n  }, __jsx(RadioGroup, null, ['Filled', 'Outlined', 'Rounded', 'Two tone', 'Sharp'].map(key => {\n    return __jsx(FormControlLabel, {\n      key: key,\n      control: __jsx(Radio, {\n        checked: tag === key,\n        onChange: () => setTag(key),\n        value: key\n      }),\n      label: key\n    });\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 9\n  }, __jsx(Paper, {\n    className: classes.paper\n  }, __jsx(IconButton, {\n    className: classes.iconButton,\n    \"aria-label\": \"search\"\n  }, _ref2), __jsx(InputBase, {\n    autoFocus: true,\n    onChange: event => {\n      handleChange(event.target.value);\n    },\n    className: classes.input,\n    placeholder: \"Search icons\\u2026\",\n    inputProps: {\n      'aria-label': 'search icons'\n    }\n  })), __jsx(Typography, {\n    className: classes.results\n  }, `${icons.length} matching results`), __jsx(Icons, {\n    icons: icons,\n    classes: classes,\n    handleClickOpen: handleClickOpen\n  })), __jsx(DialogDetails, {\n    open: open,\n    selectedIcon: selectedIcon,\n    handleClose: handleClose\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}