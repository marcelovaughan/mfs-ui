{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport optionsReducer from \"./optionsReducer\";\nimport notificationsReducer from \"./notificationsReducer\";\nimport { createLogger } from 'redux-logger'; // Get the Redux DevTools extension and fallback to a no-op function\n\nlet devtools = x => x;\n\nif (true && false && window.__REDUX_DEVTOOLS_EXTENSION__) {\n  devtools = window.__REDUX_DEVTOOLS_EXTENSION__();\n}\n\nexport default function create(initialState) {\n  let middleware = [];\n\n  if (true && false && !window.__REDUX_DEVTOOLS_EXTENSION__ && // redux-logger needs this feature\n  Object.hasOwnProperty('assign')) {\n    middleware = [...middleware, createLogger()];\n  }\n\n  return createStore(combineReducers({\n    options: optionsReducer,\n    notifications: notificationsReducer\n  }), initialState, // Hydrate the store with server-side data\n  compose(applyMiddleware(...middleware), devtools));\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/redux/initRedux.js"],"names":["devtools","x","window","middleware","Object","createLogger","createStore","combineReducers","options","notifications","notificationsReducer","compose","applyMiddleware"],"mappings":"AAAA;AACA,SAAA,WAAA,EAAA,eAAA,EAAA,eAAA,EAAA,OAAA,QAAA,OAAA;AACA,OAAA,cAAA;AACA,OAAA,oBAAA;AACA,SAAA,YAAA,QAAA,cAAA,C,CAEA;;AACA,IAAIA,QAAQ,GAAIC,CAAD,IAAf,CAAA;;AAEA,IACE,QAAA,KAAA,IAEAC,MAAM,CAHR,4BAAA,EAIE;AACAF,EAAAA,QAAQ,GAAGE,MAAM,CAAjBF,4BAAWE,EAAXF;AACD;;AAED,eAAe,SAAA,MAAA,CAAA,YAAA,EAA8B;AAC3C,MAAIG,UAAU,GAAd,EAAA;;AAEA,MACE,QAAA,KAAA,IAEA,CAACD,MAAM,CAFP,4BAAA,IAGA;AACAE,EAAAA,MAAM,CAANA,cAAAA,CALF,QAKEA,CALF,EAME;AACAD,IAAAA,UAAU,GAAG,CAAC,GAAD,UAAA,EAAgBE,YAA7BF,EAAa,CAAbA;AACD;;AAED,SAAOG,WAAW,CAChBC,eAAe,CAAC;AACdC,IAAAA,OAAO,EADO,cAAA;AAEdC,IAAAA,aAAa,EAAEC;AAFD,GAAD,CADC,EAAA,YAAA,EAKF;AACdC,EAAAA,OAAO,CAACC,eAAe,CAAC,GAAjB,UAAgB,CAAhB,EANT,QAMS,CANS,CAAlB;AAQD","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport optionsReducer from 'docs/src/modules/redux/optionsReducer';\nimport notificationsReducer from 'docs/src/modules/redux/notificationsReducer';\nimport { createLogger } from 'redux-logger';\n\n// Get the Redux DevTools extension and fallback to a no-op function\nlet devtools = (x) => x;\n\nif (\n  process.env.NODE_ENV !== 'production' &&\n  process.browser &&\n  window.__REDUX_DEVTOOLS_EXTENSION__\n) {\n  devtools = window.__REDUX_DEVTOOLS_EXTENSION__();\n}\n\nexport default function create(initialState) {\n  let middleware = [];\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    process.browser &&\n    !window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    // redux-logger needs this feature\n    Object.hasOwnProperty('assign')\n  ) {\n    middleware = [...middleware, createLogger()];\n  }\n\n  return createStore(\n    combineReducers({\n      options: optionsReducer,\n      notifications: notificationsReducer,\n    }),\n    initialState, // Hydrate the store with server-side data\n    compose(applyMiddleware(...middleware), devtools),\n  );\n}\n"]},"metadata":{},"sourceType":"module"}