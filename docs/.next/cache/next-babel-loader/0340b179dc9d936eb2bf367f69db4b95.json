{"ast":null,"code":"import responsivePropType from \"./responsivePropType\";\nimport { handleBreakpoints } from \"./breakpoints\";\nimport merge from \"./merge\";\nimport memoize from \"./memoize\";\nconst properties = {\n  m: 'margin',\n  p: 'padding'\n};\nconst directions = {\n  t: 'Top',\n  r: 'Right',\n  b: 'Bottom',\n  l: 'Left',\n  x: ['Left', 'Right'],\n  y: ['Top', 'Bottom']\n};\nconst aliases = {\n  marginX: 'mx',\n  marginY: 'my',\n  paddingX: 'px',\n  paddingY: 'py'\n}; // memoize() impact:\n// From 300,000 ops/sec\n// To 350,000 ops/sec\n\nconst getCssProperties = memoize(prop => {\n  // It's not a shorthand notation.\n  if (prop.length > 2) {\n    if (aliases[prop]) {\n      prop = aliases[prop];\n    } else {\n      return [prop];\n    }\n  }\n\n  const [a, b] = prop.split('');\n  const property = properties[a];\n  const direction = directions[b] || '';\n  return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];\n});\nconst spacingKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY'];\nexport function createUnarySpacing(theme) {\n  const themeSpacing = theme.spacing || 8;\n\n  if (typeof themeSpacing === 'number') {\n    return abs => {\n      if (true) {\n        if (typeof abs !== 'number') {\n          console.error(`Material-UI: Expected spacing argument to be a number, got ${abs}.`);\n        }\n      }\n\n      return themeSpacing * abs;\n    };\n  }\n\n  if (Array.isArray(themeSpacing)) {\n    return abs => {\n      if (true) {\n        if (abs > themeSpacing.length - 1) {\n          console.error([`Material-UI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join('\\n'));\n        }\n      }\n\n      return themeSpacing[abs];\n    };\n  }\n\n  if (typeof themeSpacing === 'function') {\n    return themeSpacing;\n  }\n\n  if (true) {\n    console.error([`Material-UI: The \\`theme.spacing\\` value (${themeSpacing}) is invalid.`, 'It should be a number, an array or a function.'].join('\\n'));\n  }\n\n  return () => undefined;\n}\n\nfunction getValue(transformer, propValue) {\n  if (typeof propValue === 'string') {\n    return propValue;\n  }\n\n  const abs = Math.abs(propValue);\n  const transformed = transformer(abs);\n\n  if (propValue >= 0) {\n    return transformed;\n  }\n\n  if (typeof transformed === 'number') {\n    return -transformed;\n  }\n\n  return `-${transformed}`;\n}\n\nfunction getStyleFromPropValue(cssProperties, transformer) {\n  return propValue => cssProperties.reduce((acc, cssProperty) => {\n    acc[cssProperty] = getValue(transformer, propValue);\n    return acc;\n  }, {});\n}\n\nfunction spacing(props) {\n  const theme = props.theme;\n  const transformer = createUnarySpacing(theme);\n  return Object.keys(props).map(prop => {\n    // Using a hash computation over an array iteration could be faster, but with only 28 items,\n    // it's doesn't worth the bundle size.\n    if (spacingKeys.indexOf(prop) === -1) {\n      return null;\n    }\n\n    const cssProperties = getCssProperties(prop);\n    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);\n    const propValue = props[prop];\n    return handleBreakpoints(props, propValue, styleFromPropValue);\n  }).reduce(merge, {});\n}\n\nspacing.propTypes = true ? spacingKeys.reduce((obj, key) => {\n  obj[key] = responsivePropType;\n  return obj;\n}, {}) : {};\nspacing.filterProps = spacingKeys;\nexport default spacing;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-system/src/spacing.js"],"names":["responsivePropType","handleBreakpoints","merge","memoize","properties","m","p","directions","t","r","b","l","x","y","aliases","marginX","marginY","paddingX","paddingY","getCssProperties","prop","length","a","split","property","direction","Array","isArray","map","dir","spacingKeys","createUnarySpacing","theme","themeSpacing","spacing","abs","console","error","JSON","stringify","join","undefined","getValue","transformer","propValue","Math","transformed","getStyleFromPropValue","cssProperties","reduce","acc","cssProperty","props","Object","keys","indexOf","styleFromPropValue","propTypes","obj","key","filterProps"],"mappings":"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","sourcesContent":["import responsivePropType from './responsivePropType';\nimport { handleBreakpoints } from './breakpoints';\nimport merge from './merge';\nimport memoize from './memoize';\n\nconst properties = {\n  m: 'margin',\n  p: 'padding',\n};\n\nconst directions = {\n  t: 'Top',\n  r: 'Right',\n  b: 'Bottom',\n  l: 'Left',\n  x: ['Left', 'Right'],\n  y: ['Top', 'Bottom'],\n};\n\nconst aliases = {\n  marginX: 'mx',\n  marginY: 'my',\n  paddingX: 'px',\n  paddingY: 'py',\n};\n\n// memoize() impact:\n// From 300,000 ops/sec\n// To 350,000 ops/sec\nconst getCssProperties = memoize((prop) => {\n  // It's not a shorthand notation.\n  if (prop.length > 2) {\n    if (aliases[prop]) {\n      prop = aliases[prop];\n    } else {\n      return [prop];\n    }\n  }\n\n  const [a, b] = prop.split('');\n  const property = properties[a];\n  const direction = directions[b] || '';\n  return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];\n});\n\nconst spacingKeys = [\n  'm',\n  'mt',\n  'mr',\n  'mb',\n  'ml',\n  'mx',\n  'my',\n  'p',\n  'pt',\n  'pr',\n  'pb',\n  'pl',\n  'px',\n  'py',\n  'margin',\n  'marginTop',\n  'marginRight',\n  'marginBottom',\n  'marginLeft',\n  'marginX',\n  'marginY',\n  'padding',\n  'paddingTop',\n  'paddingRight',\n  'paddingBottom',\n  'paddingLeft',\n  'paddingX',\n  'paddingY',\n];\n\nexport function createUnarySpacing(theme) {\n  const themeSpacing = theme.spacing || 8;\n\n  if (typeof themeSpacing === 'number') {\n    return (abs) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof abs !== 'number') {\n          console.error(`Material-UI: Expected spacing argument to be a number, got ${abs}.`);\n        }\n      }\n      return themeSpacing * abs;\n    };\n  }\n\n  if (Array.isArray(themeSpacing)) {\n    return (abs) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (abs > themeSpacing.length - 1) {\n          console.error(\n            [\n              `Material-UI: The value provided (${abs}) overflows.`,\n              `The supported values are: ${JSON.stringify(themeSpacing)}.`,\n              `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`,\n            ].join('\\n'),\n          );\n        }\n      }\n\n      return themeSpacing[abs];\n    };\n  }\n\n  if (typeof themeSpacing === 'function') {\n    return themeSpacing;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    console.error(\n      [\n        `Material-UI: The \\`theme.spacing\\` value (${themeSpacing}) is invalid.`,\n        'It should be a number, an array or a function.',\n      ].join('\\n'),\n    );\n  }\n\n  return () => undefined;\n}\n\nfunction getValue(transformer, propValue) {\n  if (typeof propValue === 'string') {\n    return propValue;\n  }\n\n  const abs = Math.abs(propValue);\n  const transformed = transformer(abs);\n\n  if (propValue >= 0) {\n    return transformed;\n  }\n\n  if (typeof transformed === 'number') {\n    return -transformed;\n  }\n\n  return `-${transformed}`;\n}\n\nfunction getStyleFromPropValue(cssProperties, transformer) {\n  return (propValue) =>\n    cssProperties.reduce((acc, cssProperty) => {\n      acc[cssProperty] = getValue(transformer, propValue);\n      return acc;\n    }, {});\n}\n\nfunction spacing(props) {\n  const theme = props.theme;\n  const transformer = createUnarySpacing(theme);\n\n  return Object.keys(props)\n    .map((prop) => {\n      // Using a hash computation over an array iteration could be faster, but with only 28 items,\n      // it's doesn't worth the bundle size.\n      if (spacingKeys.indexOf(prop) === -1) {\n        return null;\n      }\n\n      const cssProperties = getCssProperties(prop);\n      const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);\n\n      const propValue = props[prop];\n      return handleBreakpoints(props, propValue, styleFromPropValue);\n    })\n    .reduce(merge, {});\n}\n\nspacing.propTypes =\n  process.env.NODE_ENV !== 'production'\n    ? spacingKeys.reduce((obj, key) => {\n        obj[key] = responsivePropType;\n        return obj;\n      }, {})\n    : {};\n\nspacing.filterProps = spacingKeys;\n\nexport default spacing;\n"]},"metadata":{},"sourceType":"module"}