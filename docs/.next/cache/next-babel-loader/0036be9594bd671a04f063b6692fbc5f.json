{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport TableCell from \"../../../../../packages/material-ui/src/TableCell\";\nimport Paper from \"../../../../../packages/material-ui/src/Paper\";\nimport { AutoSizer, Column, Table } from 'react-virtualized';\n\nconst styles = theme => ({\n  flexContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    boxSizing: 'border-box'\n  },\n  table: {\n    // temporary right-to-left patch, waiting for\n    // https://github.com/bvaughn/react-virtualized/issues/454\n    '& .ReactVirtualized__Table__headerRow': {\n      flip: false,\n      paddingRight: theme.direction === 'rtl' ? '0 !important' : undefined\n    }\n  },\n  tableRow: {\n    cursor: 'pointer'\n  },\n  tableRowHover: {\n    '&:hover': {\n      backgroundColor: theme.palette.grey[200]\n    }\n  },\n  tableCell: {\n    flex: 1\n  },\n  noClick: {\n    cursor: 'initial'\n  }\n});\n\nclass MuiVirtualizedTable extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"getRowClassName\", ({\n      index\n    }) => {\n      const {\n        classes,\n        onRowClick\n      } = this.props;\n      return clsx(classes.tableRow, classes.flexContainer, index !== -1 && onRowClick != null && classes.tableRowHover);\n    });\n\n    _defineProperty(this, \"cellRenderer\", ({\n      cellData,\n      columnIndex\n    }) => {\n      const {\n        columns,\n        classes,\n        rowHeight,\n        onRowClick\n      } = this.props;\n      return __jsx(TableCell, {\n        component: \"div\",\n        className: clsx(classes.tableCell, classes.flexContainer, onRowClick == null && classes.noClick),\n        variant: \"body\",\n        style: {\n          height: rowHeight\n        },\n        align: columnIndex != null && columns[columnIndex].numeric || false ? 'right' : 'left'\n      }, cellData);\n    });\n\n    _defineProperty(this, \"headerRenderer\", ({\n      label,\n      columnIndex\n    }) => {\n      const {\n        headerHeight,\n        columns,\n        classes\n      } = this.props;\n      return __jsx(TableCell, {\n        component: \"div\",\n        className: clsx(classes.tableCell, classes.flexContainer, classes.noClick),\n        variant: \"head\",\n        style: {\n          height: headerHeight\n        },\n        align: columns[columnIndex].numeric || false ? 'right' : 'left'\n      }, __jsx(\"span\", null, label));\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      classes,\n      columns,\n      rowHeight,\n      headerHeight\n    } = _this$props,\n          tableProps = _objectWithoutProperties(_this$props, [\"classes\", \"columns\", \"rowHeight\", \"headerHeight\"]);\n\n    return __jsx(AutoSizer, null, ({\n      height,\n      width\n    }) => __jsx(Table, _extends({\n      height: height,\n      width: width,\n      rowHeight: rowHeight,\n      gridStyle: {\n        direction: 'inherit'\n      },\n      headerHeight: headerHeight,\n      className: classes.table\n    }, tableProps, {\n      rowClassName: this.getRowClassName\n    }), columns.map((_ref, index) => {\n      let {\n        dataKey\n      } = _ref,\n          other = _objectWithoutProperties(_ref, [\"dataKey\"]);\n\n      return __jsx(Column, _extends({\n        key: dataKey,\n        headerRenderer: headerProps => this.headerRenderer(_objectSpread(_objectSpread({}, headerProps), {}, {\n          columnIndex: index\n        })),\n        className: classes.flexContainer,\n        cellRenderer: this.cellRenderer,\n        dataKey: dataKey\n      }, other));\n    })));\n  }\n\n}\n\n_defineProperty(MuiVirtualizedTable, \"defaultProps\", {\n  headerHeight: 48,\n  rowHeight: 48\n});\n\nconst VirtualizedTable = withStyles(styles)(MuiVirtualizedTable); // ---\n\nconst sample = [['Frozen yoghurt', 159, 6.0, 24, 4.0], ['Ice cream sandwich', 237, 9.0, 37, 4.3], ['Eclair', 262, 16.0, 24, 6.0], ['Cupcake', 305, 3.7, 67, 4.3], ['Gingerbread', 356, 16.0, 49, 3.9]];\n\nfunction createData(id, dessert, calories, fat, carbs, protein) {\n  return {\n    id,\n    dessert,\n    calories,\n    fat,\n    carbs,\n    protein\n  };\n}\n\nconst rows = [];\n\nfor (let i = 0; i < 200; i += 1) {\n  const randomSelection = sample[Math.floor(Math.random() * sample.length)];\n  rows.push(createData(i, ...randomSelection));\n}\n\nexport default function ReactVirtualizedTable() {\n  return __jsx(Paper, {\n    style: {\n      height: 400,\n      width: '100%'\n    }\n  }, __jsx(VirtualizedTable, {\n    rowCount: rows.length,\n    rowGetter: ({\n      index\n    }) => rows[index],\n    columns: [{\n      width: 200,\n      label: 'Dessert',\n      dataKey: 'dessert'\n    }, {\n      width: 120,\n      label: 'Calories\\u00A0(g)',\n      dataKey: 'calories',\n      numeric: true\n    }, {\n      width: 120,\n      label: 'Fat\\u00A0(g)',\n      dataKey: 'fat',\n      numeric: true\n    }, {\n      width: 120,\n      label: 'Carbs\\u00A0(g)',\n      dataKey: 'carbs',\n      numeric: true\n    }, {\n      width: 120,\n      label: 'Protein\\u00A0(g)',\n      dataKey: 'protein',\n      numeric: true\n    }]\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}