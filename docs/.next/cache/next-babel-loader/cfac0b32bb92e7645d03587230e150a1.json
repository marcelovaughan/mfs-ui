{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport { getDisplayName } from \"../../../material-ui-utils/src\";\nexport default function mergeClasses() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var baseClasses = options.baseClasses,\n      newClasses = options.newClasses,\n      Component = options.Component;\n\n  if (!newClasses) {\n    return baseClasses;\n  }\n\n  var nextClasses = _objectSpread({}, baseClasses);\n\n  if (true) {\n    if (typeof newClasses === 'string') {\n      console.error([\"Material-UI: The value `\".concat(newClasses, \"` \") + \"provided to the classes prop of \".concat(getDisplayName(Component), \" is incorrect.\"), 'You might want to use the className prop instead.'].join('\\n'));\n      return baseClasses;\n    }\n  }\n\n  _Object$keys(newClasses).forEach(function (key) {\n    if (true) {\n      if (!baseClasses[key] && newClasses[key]) {\n        console.error([\"Material-UI: The key `\".concat(key, \"` \") + \"provided to the classes prop is not implemented in \".concat(getDisplayName(Component), \".\"), \"You can only override one of the following: \".concat(_Object$keys(baseClasses).join(','), \".\")].join('\\n'));\n      }\n\n      if (newClasses[key] && typeof newClasses[key] !== 'string') {\n        console.error([\"Material-UI: The key `\".concat(key, \"` \") + \"provided to the classes prop is not valid for \".concat(getDisplayName(Component), \".\"), \"You need to provide a non empty string instead of: \".concat(newClasses[key], \".\")].join('\\n'));\n      }\n    }\n\n    if (newClasses[key]) {\n      nextClasses[key] = \"\".concat(baseClasses[key], \" \").concat(newClasses[key]);\n    }\n  });\n\n  return nextClasses;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-styles/src/mergeClasses/mergeClasses.js"],"names":["getDisplayName","mergeClasses","options","baseClasses","newClasses","Component","nextClasses","console","error","join","forEach","key"],"mappings":";;AAAA,SAASA,cAAT;AAEA,eAAe,SAASC,YAAT,GAAoC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAAA,MACzCC,WADyC,GACFD,OADE,CACzCC,WADyC;AAAA,MAC5BC,UAD4B,GACFF,OADE,CAC5BE,UAD4B;AAAA,MAChBC,SADgB,GACFH,OADE,CAChBG,SADgB;;AAGjD,MAAI,CAACD,UAAL,EAAiB;AACf,WAAOD,WAAP;AACD;;AAED,MAAMG,WAAW,qBAAQH,WAAR,CAAjB;;AAEA,YAA2C;AACzC,QAAI,OAAOC,UAAP,KAAsB,QAA1B,EAAoC;AAClCG,MAAAA,OAAO,CAACC,KAAR,CACE,CACE,kCAA4BJ,UAA5B,oDACqCJ,cAAc,CAACK,SAAD,CADnD,mBADF,EAGE,mDAHF,EAIEI,IAJF,CAIO,IAJP,CADF;AAQA,aAAON,WAAP;AACD;AACF;;AAED,eAAYC,UAAZ,EAAwBM,OAAxB,CAAgC,UAACC,GAAD,EAAS;AACvC,cAA2C;AACzC,UAAI,CAACR,WAAW,CAACQ,GAAD,CAAZ,IAAqBP,UAAU,CAACO,GAAD,CAAnC,EAA0C;AACxCJ,QAAAA,OAAO,CAACC,KAAR,CACE,CACE,gCAA0BG,GAA1B,uEACwDX,cAAc,CAACK,SAAD,CADtE,MADF,wDAGiD,aAAYF,WAAZ,EAAyBM,IAAzB,CAA8B,GAA9B,CAHjD,QAIEA,IAJF,CAIO,IAJP,CADF;AAOD;;AAED,UAAIL,UAAU,CAACO,GAAD,CAAV,IAAmB,OAAOP,UAAU,CAACO,GAAD,CAAjB,KAA2B,QAAlD,EAA4D;AAC1DJ,QAAAA,OAAO,CAACC,KAAR,CACE,CACE,gCAA0BG,GAA1B,kEACmDX,cAAc,CAACK,SAAD,CADjE,MADF,+DAGwDD,UAAU,CAACO,GAAD,CAHlE,QAIEF,IAJF,CAIO,IAJP,CADF;AAOD;AACF;;AAED,QAAIL,UAAU,CAACO,GAAD,CAAd,EAAqB;AACnBL,MAAAA,WAAW,CAACK,GAAD,CAAX,aAAsBR,WAAW,CAACQ,GAAD,CAAjC,cAA0CP,UAAU,CAACO,GAAD,CAApD;AACD;AACF,GA1BD;;AA4BA,SAAOL,WAAP;AACD","sourcesContent":["import { getDisplayName } from '@material-ui/utils';\n\nexport default function mergeClasses(options = {}) {\n  const { baseClasses, newClasses, Component } = options;\n\n  if (!newClasses) {\n    return baseClasses;\n  }\n\n  const nextClasses = { ...baseClasses };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof newClasses === 'string') {\n      console.error(\n        [\n          `Material-UI: The value \\`${newClasses}\\` ` +\n            `provided to the classes prop of ${getDisplayName(Component)} is incorrect.`,\n          'You might want to use the className prop instead.',\n        ].join('\\n'),\n      );\n\n      return baseClasses;\n    }\n  }\n\n  Object.keys(newClasses).forEach((key) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!baseClasses[key] && newClasses[key]) {\n        console.error(\n          [\n            `Material-UI: The key \\`${key}\\` ` +\n              `provided to the classes prop is not implemented in ${getDisplayName(Component)}.`,\n            `You can only override one of the following: ${Object.keys(baseClasses).join(',')}.`,\n          ].join('\\n'),\n        );\n      }\n\n      if (newClasses[key] && typeof newClasses[key] !== 'string') {\n        console.error(\n          [\n            `Material-UI: The key \\`${key}\\` ` +\n              `provided to the classes prop is not valid for ${getDisplayName(Component)}.`,\n            `You need to provide a non empty string instead of: ${newClasses[key]}.`,\n          ].join('\\n'),\n        );\n      }\n    }\n\n    if (newClasses[key]) {\n      nextClasses[key] = `${baseClasses[key]} ${newClasses[key]}`;\n    }\n  });\n\n  return nextClasses;\n}\n"]},"metadata":{},"sourceType":"module"}