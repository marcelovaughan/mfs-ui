{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Modal/Modal.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { getThemeProps, useTheme } from \"../../../material-ui-styles/src\";\nimport { elementAcceptingRef, HTMLElementType } from \"../../../material-ui-utils/src\";\nimport ownerDocument from \"../utils/ownerDocument\";\nimport Portal from \"../Portal\";\nimport createChainedFunction from \"../utils/createChainedFunction\";\nimport useForkRef from \"../utils/useForkRef\";\nimport useEventCallback from \"../utils/useEventCallback\";\nimport zIndex from \"../styles/zIndex\";\nimport ModalManager, { ariaHidden } from \"./ModalManager\";\nimport TrapFocus from \"../Unstable_TrapFocus\";\nimport SimpleBackdrop from \"./SimpleBackdrop\";\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container;\n  return ReactDOM.findDOMNode(container);\n}\n\nfunction getHasTransition(props) {\n  return props.children ? props.children.props.hasOwnProperty('in') : false;\n} // A modal manager used to track and manage the state of open Modals.\n// Modals don't open on the server so this won't conflict with concurrent requests.\n\n\nconst defaultManager = new ModalManager();\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'fixed',\n    zIndex: theme.zIndex.modal,\n    right: 0,\n    bottom: 0,\n    top: 0,\n    left: 0\n  },\n\n  /* Styles applied to the root element if the `Modal` has exited. */\n  hidden: {\n    visibility: 'hidden'\n  }\n});\n/**\n * Modal is a lower-level construct that is leveraged by the following components:\n *\n * - [Dialog](/api/dialog/)\n * - [Drawer](/api/drawer/)\n * - [Menu](/api/menu/)\n * - [Popover](/api/popover/)\n *\n * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component\n * rather than directly using Modal.\n *\n * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\n */\n\nconst Modal = /*#__PURE__*/React.forwardRef(function Modal(inProps, ref) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    name: 'MuiModal',\n    props: _objectSpread({}, inProps),\n    theme\n  });\n\n  const {\n    BackdropComponent = SimpleBackdrop,\n    BackdropProps,\n    children,\n    closeAfterTransition = false,\n    container,\n    disableAutoFocus = false,\n    disableBackdropClick = false,\n    disableEnforceFocus = false,\n    disableEscapeKeyDown = false,\n    disablePortal = false,\n    disableRestoreFocus = false,\n    disableScrollLock = false,\n    hideBackdrop = false,\n    keepMounted = false,\n    manager = defaultManager,\n    onBackdropClick,\n    onClose,\n    onEscapeKeyDown,\n    onRendered,\n    open\n  } = props,\n        other = _objectWithoutProperties(props, [\"BackdropComponent\", \"BackdropProps\", \"children\", \"closeAfterTransition\", \"container\", \"disableAutoFocus\", \"disableBackdropClick\", \"disableEnforceFocus\", \"disableEscapeKeyDown\", \"disablePortal\", \"disableRestoreFocus\", \"disableScrollLock\", \"hideBackdrop\", \"keepMounted\", \"manager\", \"onBackdropClick\", \"onClose\", \"onEscapeKeyDown\", \"onRendered\", \"open\"]);\n\n  const [exited, setExited] = React.useState(true);\n  const modal = React.useRef({});\n  const mountNodeRef = React.useRef(null);\n  const modalRef = React.useRef(null);\n  const handleRef = useForkRef(modalRef, ref);\n  const hasTransition = getHasTransition(props);\n\n  const getDoc = () => ownerDocument(mountNodeRef.current);\n\n  const getModal = () => {\n    modal.current.modalRef = modalRef.current;\n    modal.current.mountNode = mountNodeRef.current;\n    return modal.current;\n  };\n\n  const handleMounted = () => {\n    manager.mount(getModal(), {\n      disableScrollLock\n    }); // Fix a bug on Chrome where the scroll isn't initially 0.\n\n    modalRef.current.scrollTop = 0;\n  };\n\n  const handleOpen = useEventCallback(() => {\n    const resolvedContainer = getContainer(container) || getDoc().body;\n    manager.add(getModal(), resolvedContainer); // The element was already mounted.\n\n    if (modalRef.current) {\n      handleMounted();\n    }\n  });\n  const isTopModal = React.useCallback(() => manager.isTopModal(getModal()), [manager]);\n  const handlePortalRef = useEventCallback(node => {\n    mountNodeRef.current = node;\n\n    if (!node) {\n      return;\n    }\n\n    if (onRendered) {\n      onRendered();\n    }\n\n    if (open && isTopModal()) {\n      handleMounted();\n    } else {\n      ariaHidden(modalRef.current, true);\n    }\n  });\n  const handleClose = React.useCallback(() => {\n    manager.remove(getModal());\n  }, [manager]);\n  React.useEffect(() => {\n    return () => {\n      handleClose();\n    };\n  }, [handleClose]);\n  React.useEffect(() => {\n    if (open) {\n      handleOpen();\n    } else if (!hasTransition || !closeAfterTransition) {\n      handleClose();\n    }\n  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);\n\n  if (!keepMounted && !open && (!hasTransition || exited)) {\n    return null;\n  }\n\n  const handleEnter = () => {\n    setExited(false);\n  };\n\n  const handleExited = () => {\n    setExited(true);\n\n    if (closeAfterTransition) {\n      handleClose();\n    }\n  };\n\n  const handleBackdropClick = event => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    if (onBackdropClick) {\n      onBackdropClick(event);\n    }\n\n    if (!disableBackdropClick && onClose) {\n      onClose(event, 'backdropClick');\n    }\n  };\n\n  const handleKeyDown = event => {\n    // The handler doesn't take event.defaultPrevented into account:\n    //\n    // event.preventDefault() is meant to stop default behaviours like\n    // clicking a checkbox to check it, hitting a button to submit a form,\n    // and hitting left arrow to move the cursor in a text input etc.\n    // Only special HTML elements have these default behaviors.\n    if (event.key !== 'Escape' || !isTopModal()) {\n      return;\n    }\n\n    if (onEscapeKeyDown) {\n      onEscapeKeyDown(event);\n    }\n\n    if (!disableEscapeKeyDown) {\n      // Swallow the event, in case someone is listening for the escape key on the body.\n      event.stopPropagation();\n\n      if (onClose) {\n        onClose(event, 'escapeKeyDown');\n      }\n    }\n  };\n\n  const inlineStyle = styles(theme || {\n    zIndex\n  });\n  const childProps = {};\n\n  if (children.props.tabIndex === undefined) {\n    childProps.tabIndex = children.props.tabIndex || '-1';\n  } // It's a Transition like component\n\n\n  if (hasTransition) {\n    childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);\n    childProps.onExited = createChainedFunction(handleExited, children.props.onExited);\n  }\n\n  return __jsx(Portal, {\n    ref: handlePortalRef,\n    container: container,\n    disablePortal: disablePortal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", _extends({\n    \"data-mui-test\": \"Modal\",\n    ref: handleRef,\n    onKeyDown: handleKeyDown,\n    role: \"presentation\"\n  }, other, {\n    style: _objectSpread(_objectSpread(_objectSpread({}, inlineStyle.root), !open && exited ? inlineStyle.hidden : {}), other.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }), hideBackdrop ? null : __jsx(BackdropComponent, _extends({\n    open: open,\n    onClick: handleBackdropClick\n  }, BackdropProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  })), __jsx(TrapFocus, {\n    disableEnforceFocus: disableEnforceFocus,\n    disableAutoFocus: disableAutoFocus,\n    disableRestoreFocus: disableRestoreFocus,\n    getDoc: getDoc,\n    isEnabled: isTopModal,\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.cloneElement(children, childProps))));\n});\nModal.propTypes = {\n  /**\n   * A backdrop component. This prop enables custom backdrop rendering.\n   */\n  BackdropComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the [`Backdrop`](/api/backdrop/) element.\n   */\n  BackdropProps: PropTypes.object,\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * When set to true the Modal waits until a nested Transition is completed before closing.\n   */\n  closeAfterTransition: PropTypes.bool,\n\n  /**\n   * A HTML element, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.instanceOf(React.Component), PropTypes.func]),\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, clicking the backdrop will not fire `onClose`.\n   */\n  disableBackdropClick: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, hitting escape will not fire `onClose`.\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden.\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Disable the scroll lock behavior.\n   */\n  disableScrollLock: PropTypes.bool,\n\n  /**\n   * If `true`, the backdrop is not rendered.\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   */\n  keepMounted: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  manager: PropTypes.object,\n\n  /**\n   * Callback fired when the backdrop is clicked.\n   */\n  onBackdropClick: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the escape key is pressed,\n   * `disableEscapeKeyDown` is false and the modal is in focus.\n   */\n  onEscapeKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   * It signals that the `open={true}` prop took effect.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func,\n\n  /**\n   * If `true`, the modal is open.\n   */\n  open: PropTypes.bool.isRequired\n};\nexport default Modal;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Modal/Modal.js"],"names":["React","ReactDOM","PropTypes","getThemeProps","useTheme","elementAcceptingRef","HTMLElementType","ownerDocument","Portal","createChainedFunction","useForkRef","useEventCallback","zIndex","ModalManager","ariaHidden","TrapFocus","SimpleBackdrop","getContainer","container","findDOMNode","getHasTransition","props","children","hasOwnProperty","defaultManager","styles","theme","root","position","modal","right","bottom","top","left","hidden","visibility","Modal","forwardRef","inProps","ref","name","BackdropComponent","BackdropProps","closeAfterTransition","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open","other","exited","setExited","useState","useRef","mountNodeRef","modalRef","handleRef","hasTransition","getDoc","current","getModal","mountNode","handleMounted","mount","scrollTop","handleOpen","resolvedContainer","body","add","isTopModal","useCallback","handlePortalRef","node","handleClose","remove","useEffect","handleEnter","handleExited","handleBackdropClick","event","target","currentTarget","handleKeyDown","key","stopPropagation","inlineStyle","childProps","tabIndex","undefined","onEnter","onExited","style","cloneElement","propTypes","elementType","object","isRequired","bool","oneOfType","instanceOf","Component","func"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\nimport { elementAcceptingRef, HTMLElementType } from '@material-ui/utils';\nimport ownerDocument from '../utils/ownerDocument';\nimport Portal from '../Portal';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport zIndex from '../styles/zIndex';\nimport ModalManager, { ariaHidden } from './ModalManager';\nimport TrapFocus from '../Unstable_TrapFocus';\nimport SimpleBackdrop from './SimpleBackdrop';\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container;\n  return ReactDOM.findDOMNode(container);\n}\n\nfunction getHasTransition(props) {\n  return props.children ? props.children.props.hasOwnProperty('in') : false;\n}\n\n// A modal manager used to track and manage the state of open Modals.\n// Modals don't open on the server so this won't conflict with concurrent requests.\nconst defaultManager = new ModalManager();\n\nexport const styles = (theme) => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'fixed',\n    zIndex: theme.zIndex.modal,\n    right: 0,\n    bottom: 0,\n    top: 0,\n    left: 0,\n  },\n  /* Styles applied to the root element if the `Modal` has exited. */\n  hidden: {\n    visibility: 'hidden',\n  },\n});\n\n/**\n * Modal is a lower-level construct that is leveraged by the following components:\n *\n * - [Dialog](/api/dialog/)\n * - [Drawer](/api/drawer/)\n * - [Menu](/api/menu/)\n * - [Popover](/api/popover/)\n *\n * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component\n * rather than directly using Modal.\n *\n * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\n */\nconst Modal = React.forwardRef(function Modal(inProps, ref) {\n  const theme = useTheme();\n  const props = getThemeProps({ name: 'MuiModal', props: { ...inProps }, theme });\n  const {\n    BackdropComponent = SimpleBackdrop,\n    BackdropProps,\n    children,\n    closeAfterTransition = false,\n    container,\n    disableAutoFocus = false,\n    disableBackdropClick = false,\n    disableEnforceFocus = false,\n    disableEscapeKeyDown = false,\n    disablePortal = false,\n    disableRestoreFocus = false,\n    disableScrollLock = false,\n    hideBackdrop = false,\n    keepMounted = false,\n    manager = defaultManager,\n    onBackdropClick,\n    onClose,\n    onEscapeKeyDown,\n    onRendered,\n    open,\n    ...other\n  } = props;\n\n  const [exited, setExited] = React.useState(true);\n  const modal = React.useRef({});\n  const mountNodeRef = React.useRef(null);\n  const modalRef = React.useRef(null);\n  const handleRef = useForkRef(modalRef, ref);\n  const hasTransition = getHasTransition(props);\n\n  const getDoc = () => ownerDocument(mountNodeRef.current);\n  const getModal = () => {\n    modal.current.modalRef = modalRef.current;\n    modal.current.mountNode = mountNodeRef.current;\n    return modal.current;\n  };\n\n  const handleMounted = () => {\n    manager.mount(getModal(), { disableScrollLock });\n\n    // Fix a bug on Chrome where the scroll isn't initially 0.\n    modalRef.current.scrollTop = 0;\n  };\n\n  const handleOpen = useEventCallback(() => {\n    const resolvedContainer = getContainer(container) || getDoc().body;\n\n    manager.add(getModal(), resolvedContainer);\n\n    // The element was already mounted.\n    if (modalRef.current) {\n      handleMounted();\n    }\n  });\n\n  const isTopModal = React.useCallback(() => manager.isTopModal(getModal()), [manager]);\n\n  const handlePortalRef = useEventCallback((node) => {\n    mountNodeRef.current = node;\n\n    if (!node) {\n      return;\n    }\n\n    if (onRendered) {\n      onRendered();\n    }\n\n    if (open && isTopModal()) {\n      handleMounted();\n    } else {\n      ariaHidden(modalRef.current, true);\n    }\n  });\n\n  const handleClose = React.useCallback(() => {\n    manager.remove(getModal());\n  }, [manager]);\n\n  React.useEffect(() => {\n    return () => {\n      handleClose();\n    };\n  }, [handleClose]);\n\n  React.useEffect(() => {\n    if (open) {\n      handleOpen();\n    } else if (!hasTransition || !closeAfterTransition) {\n      handleClose();\n    }\n  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);\n\n  if (!keepMounted && !open && (!hasTransition || exited)) {\n    return null;\n  }\n\n  const handleEnter = () => {\n    setExited(false);\n  };\n\n  const handleExited = () => {\n    setExited(true);\n\n    if (closeAfterTransition) {\n      handleClose();\n    }\n  };\n\n  const handleBackdropClick = (event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    if (onBackdropClick) {\n      onBackdropClick(event);\n    }\n\n    if (!disableBackdropClick && onClose) {\n      onClose(event, 'backdropClick');\n    }\n  };\n\n  const handleKeyDown = (event) => {\n    // The handler doesn't take event.defaultPrevented into account:\n    //\n    // event.preventDefault() is meant to stop default behaviours like\n    // clicking a checkbox to check it, hitting a button to submit a form,\n    // and hitting left arrow to move the cursor in a text input etc.\n    // Only special HTML elements have these default behaviors.\n    if (event.key !== 'Escape' || !isTopModal()) {\n      return;\n    }\n\n    if (onEscapeKeyDown) {\n      onEscapeKeyDown(event);\n    }\n\n    if (!disableEscapeKeyDown) {\n      // Swallow the event, in case someone is listening for the escape key on the body.\n      event.stopPropagation();\n\n      if (onClose) {\n        onClose(event, 'escapeKeyDown');\n      }\n    }\n  };\n\n  const inlineStyle = styles(theme || { zIndex });\n  const childProps = {};\n  if (children.props.tabIndex === undefined) {\n    childProps.tabIndex = children.props.tabIndex || '-1';\n  }\n\n  // It's a Transition like component\n  if (hasTransition) {\n    childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);\n    childProps.onExited = createChainedFunction(handleExited, children.props.onExited);\n  }\n\n  return (\n    <Portal ref={handlePortalRef} container={container} disablePortal={disablePortal}>\n      {/*\n          Marking an element with the role presentation indicates to assistive technology\n          that this element should be ignored; it exists to support the web application and\n          is not meant for humans to interact with directly.\n          https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-static-element-interactions.md\n        */}\n      <div\n        data-mui-test=\"Modal\"\n        ref={handleRef}\n        onKeyDown={handleKeyDown}\n        role=\"presentation\"\n        {...other}\n        style={{\n          ...inlineStyle.root,\n          ...(!open && exited ? inlineStyle.hidden : {}),\n          ...other.style,\n        }}\n      >\n        {hideBackdrop ? null : (\n          <BackdropComponent open={open} onClick={handleBackdropClick} {...BackdropProps} />\n        )}\n        <TrapFocus\n          disableEnforceFocus={disableEnforceFocus}\n          disableAutoFocus={disableAutoFocus}\n          disableRestoreFocus={disableRestoreFocus}\n          getDoc={getDoc}\n          isEnabled={isTopModal}\n          open={open}\n        >\n          {React.cloneElement(children, childProps)}\n        </TrapFocus>\n      </div>\n    </Portal>\n  );\n});\n\nModal.propTypes = {\n  /**\n   * A backdrop component. This prop enables custom backdrop rendering.\n   */\n  BackdropComponent: PropTypes.elementType,\n  /**\n   * Props applied to the [`Backdrop`](/api/backdrop/) element.\n   */\n  BackdropProps: PropTypes.object,\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef.isRequired,\n  /**\n   * When set to true the Modal waits until a nested Transition is completed before closing.\n   */\n  closeAfterTransition: PropTypes.bool,\n  /**\n   * A HTML element, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([\n    HTMLElementType,\n    PropTypes.instanceOf(React.Component),\n    PropTypes.func,\n  ]),\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus: PropTypes.bool,\n  /**\n   * If `true`, clicking the backdrop will not fire `onClose`.\n   */\n  disableBackdropClick: PropTypes.bool,\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableEnforceFocus: PropTypes.bool,\n  /**\n   * If `true`, hitting escape will not fire `onClose`.\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden.\n   */\n  disableRestoreFocus: PropTypes.bool,\n  /**\n   * Disable the scroll lock behavior.\n   */\n  disableScrollLock: PropTypes.bool,\n  /**\n   * If `true`, the backdrop is not rendered.\n   */\n  hideBackdrop: PropTypes.bool,\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   */\n  keepMounted: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  manager: PropTypes.object,\n  /**\n   * Callback fired when the backdrop is clicked.\n   */\n  onBackdropClick: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the escape key is pressed,\n   * `disableEscapeKeyDown` is false and the modal is in focus.\n   */\n  onEscapeKeyDown: PropTypes.func,\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   * It signals that the `open={true}` prop took effect.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func,\n  /**\n   * If `true`, the modal is open.\n   */\n  open: PropTypes.bool.isRequired,\n};\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}