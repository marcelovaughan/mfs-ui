{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/FormControlLabel/FormControlLabel.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from \"../../../material-ui-utils/src\";\nimport { useFormControl } from \"../FormControl\";\nimport withStyles from \"../styles/withStyles\";\nimport Typography from \"../Typography\";\nimport capitalize from \"../utils/capitalize\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    cursor: 'pointer',\n    // For correct alignment with the text.\n    verticalAlign: 'middle',\n    WebkitTapHighlightColor: 'transparent',\n    marginLeft: -11,\n    marginRight: 16,\n    // used for row presentation of radio/checkbox\n    '&$disabled': {\n      cursor: 'default'\n    }\n  },\n\n  /* Styles applied to the root element if `labelPlacement=\"start\"`. */\n  labelPlacementStart: {\n    flexDirection: 'row-reverse',\n    marginLeft: 16,\n    // used for row presentation of radio/checkbox\n    marginRight: -11\n  },\n\n  /* Styles applied to the root element if `labelPlacement=\"top\"`. */\n  labelPlacementTop: {\n    flexDirection: 'column-reverse',\n    marginLeft: 16\n  },\n\n  /* Styles applied to the root element if `labelPlacement=\"bottom\"`. */\n  labelPlacementBottom: {\n    flexDirection: 'column',\n    marginLeft: 16\n  },\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Styles applied to the label's Typography component. */\n  label: {\n    '&$disabled': {\n      color: theme.palette.text.disabled\n    }\n  }\n});\n/**\n * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\n\nconst FormControlLabel = /*#__PURE__*/React.forwardRef(function FormControlLabel(props, ref) {\n  const {\n    checked,\n    classes,\n    className,\n    control,\n    disabled: disabledProp,\n    inputRef,\n    label,\n    labelPlacement = 'end',\n    name,\n    onChange,\n    value\n  } = props,\n        other = _objectWithoutProperties(props, [\"checked\", \"classes\", \"className\", \"control\", \"disabled\", \"inputRef\", \"label\", \"labelPlacement\", \"name\", \"onChange\", \"value\"]);\n\n  const muiFormControl = useFormControl();\n  let disabled = disabledProp;\n\n  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {\n    disabled = control.props.disabled;\n  }\n\n  if (typeof disabled === 'undefined' && muiFormControl) {\n    disabled = muiFormControl.disabled;\n  }\n\n  const controlProps = {\n    disabled\n  };\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n  return __jsx(\"label\", _extends({\n    className: clsx(classes.root, className, labelPlacement !== 'end' && classes[`labelPlacement${capitalize(labelPlacement)}`], disabled && classes.disabled),\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.cloneElement(control, controlProps), __jsx(Typography, {\n    component: \"span\",\n    className: clsx(classes.label, disabled && classes.disabled),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, label));\n});\nFormControlLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: PropTypes.element.isRequired,\n\n  /**\n   * If `true`, the control will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The text to be used in an enclosing label element.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The position of the label.\n   */\n  labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),\n\n  /**\n   * @ignore\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n};\nexport default withStyles(styles, {\n  name: 'MuiFormControlLabel'\n})(FormControlLabel);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/FormControlLabel/FormControlLabel.js"],"names":["React","PropTypes","clsx","refType","useFormControl","withStyles","Typography","capitalize","styles","theme","root","display","alignItems","cursor","verticalAlign","WebkitTapHighlightColor","marginLeft","marginRight","labelPlacementStart","flexDirection","labelPlacementTop","labelPlacementBottom","disabled","label","color","palette","text","FormControlLabel","forwardRef","props","ref","checked","classes","className","control","disabledProp","inputRef","labelPlacement","name","onChange","value","other","muiFormControl","controlProps","forEach","key","cloneElement","propTypes","bool","object","string","element","isRequired","node","oneOf","func","any"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport { useFormControl } from '../FormControl';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = (theme) => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    cursor: 'pointer',\n    // For correct alignment with the text.\n    verticalAlign: 'middle',\n    WebkitTapHighlightColor: 'transparent',\n    marginLeft: -11,\n    marginRight: 16, // used for row presentation of radio/checkbox\n    '&$disabled': {\n      cursor: 'default',\n    },\n  },\n  /* Styles applied to the root element if `labelPlacement=\"start\"`. */\n  labelPlacementStart: {\n    flexDirection: 'row-reverse',\n    marginLeft: 16, // used for row presentation of radio/checkbox\n    marginRight: -11,\n  },\n  /* Styles applied to the root element if `labelPlacement=\"top\"`. */\n  labelPlacementTop: {\n    flexDirection: 'column-reverse',\n    marginLeft: 16,\n  },\n  /* Styles applied to the root element if `labelPlacement=\"bottom\"`. */\n  labelPlacementBottom: {\n    flexDirection: 'column',\n    marginLeft: 16,\n  },\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Styles applied to the label's Typography component. */\n  label: {\n    '&$disabled': {\n      color: theme.palette.text.disabled,\n    },\n  },\n});\n\n/**\n * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\nconst FormControlLabel = React.forwardRef(function FormControlLabel(props, ref) {\n  const {\n    checked,\n    classes,\n    className,\n    control,\n    disabled: disabledProp,\n    inputRef,\n    label,\n    labelPlacement = 'end',\n    name,\n    onChange,\n    value,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n\n  let disabled = disabledProp;\n  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {\n    disabled = control.props.disabled;\n  }\n  if (typeof disabled === 'undefined' && muiFormControl) {\n    disabled = muiFormControl.disabled;\n  }\n\n  const controlProps = {\n    disabled,\n  };\n\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach((key) => {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n\n  return (\n    <label\n      className={clsx(\n        classes.root,\n        {\n          [classes[`labelPlacement${capitalize(labelPlacement)}`]]: labelPlacement !== 'end',\n          [classes.disabled]: disabled,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {React.cloneElement(control, controlProps)}\n      <Typography\n        component=\"span\"\n        className={clsx(classes.label, { [classes.disabled]: disabled })}\n      >\n        {label}\n      </Typography>\n    </label>\n  );\n});\n\nFormControlLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: PropTypes.element.isRequired,\n  /**\n   * If `true`, the control will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The text to be used in an enclosing label element.\n   */\n  label: PropTypes.node,\n  /**\n   * The position of the label.\n   */\n  labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),\n  /**\n   * @ignore\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'MuiFormControlLabel' })(FormControlLabel);\n"]},"metadata":{},"sourceType":"module"}