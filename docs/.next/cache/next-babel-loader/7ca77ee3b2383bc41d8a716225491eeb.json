{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport clsx from 'clsx';\nimport { withStyles } from \"../../../material-ui/src/styles\";\nimport Avatar from \"../../../material-ui/src/Avatar\";\nimport { chainPropTypes } from \"../../../material-ui-utils/src\";\nconst SPACINGS = {\n  small: -16,\n  medium: null\n};\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex'\n  },\n\n  /* Styles applied to the avatar elements. */\n  avatar: {\n    border: `2px solid ${theme.palette.background.default}`,\n    marginLeft: -8,\n    '&:first-child': {\n      marginLeft: 0\n    }\n  }\n});\nconst AvatarGroup = /*#__PURE__*/React.forwardRef(function AvatarGroup(props, ref) {\n  const {\n    children: childrenProp,\n    classes,\n    className,\n    max = 5,\n    spacing = 'medium'\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"max\", \"spacing\"]);\n\n  const clampedMax = max < 2 ? 2 : max;\n  const children = React.Children.toArray(childrenProp).filter(child => {\n    if (false) {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The AvatarGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.isValidElement(child);\n  });\n  const extraAvatars = children.length > clampedMax ? children.length - clampedMax + 1 : 0;\n  const marginLeft = spacing && SPACINGS[spacing] !== undefined ? SPACINGS[spacing] : -spacing;\n  return __jsx(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), children.slice(0, children.length - extraAvatars).map((child, index) => {\n    return /*#__PURE__*/React.cloneElement(child, {\n      className: clsx(child.props.className, classes.avatar),\n      style: _objectSpread({\n        zIndex: children.length - index,\n        marginLeft: index === 0 ? undefined : marginLeft\n      }, child.props.style)\n    });\n  }), extraAvatars ? __jsx(Avatar, {\n    className: classes.avatar,\n    style: {\n      zIndex: 0,\n      marginLeft\n    }\n  }, \"+\", extraAvatars) : null);\n});\nexport default withStyles(styles, {\n  name: 'MuiAvatarGroup'\n})(AvatarGroup);","map":null,"metadata":{},"sourceType":"module"}