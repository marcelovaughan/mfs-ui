{"ast":null,"code":"var __jsx = React.createElement;\n\n/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport { useTheme, fade, makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport Popper from \"../../../../../packages/material-ui/src/Popper\";\nimport SettingsIcon from \"../../../../../packages/material-ui-icons/src/Settings\";\nimport CloseIcon from \"../../../../../packages/material-ui-icons/src/Close\";\nimport DoneIcon from \"../../../../../packages/material-ui-icons/src/Done\";\nimport Autocomplete from \"../../../../../packages/material-ui-lab/src/Autocomplete\";\nimport ButtonBase from \"../../../../../packages/material-ui/src/ButtonBase\";\nimport InputBase from \"../../../../../packages/material-ui/src/InputBase\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      width: 221,\n      fontSize: 13\n    },\n    button: {\n      fontSize: 13,\n      width: '100%',\n      textAlign: 'left',\n      paddingBottom: 8,\n      color: '#586069',\n      fontWeight: 600,\n      '&:hover,&:focus': {\n        color: '#0366d6'\n      },\n      '& span': {\n        width: '100%'\n      },\n      '& svg': {\n        width: 16,\n        height: 16\n      }\n    },\n    tag: {\n      marginTop: 3,\n      height: 20,\n      padding: '.15em 4px',\n      fontWeight: 600,\n      lineHeight: '15px',\n      borderRadius: 2\n    },\n    popper: {\n      border: '1px solid rgba(27,31,35,.15)',\n      boxShadow: '0 3px 12px rgba(27,31,35,.15)',\n      borderRadius: 3,\n      width: 300,\n      zIndex: 1,\n      fontSize: 13,\n      color: '#586069',\n      backgroundColor: '#f6f8fa'\n    },\n    header: {\n      borderBottom: '1px solid #e1e4e8',\n      padding: '8px 10px',\n      fontWeight: 600\n    },\n    inputBase: {\n      padding: 10,\n      width: '100%',\n      borderBottom: '1px solid #dfe2e5',\n      '& input': {\n        borderRadius: 4,\n        backgroundColor: theme.palette.common.white,\n        padding: 8,\n        transition: theme.transitions.create(['border-color', 'box-shadow']),\n        border: '1px solid #ced4da',\n        fontSize: 14,\n        '&:focus': {\n          boxShadow: \"\".concat(fade(theme.palette.primary.main, 0.25), \" 0 0 0 0.2rem\"),\n          borderColor: theme.palette.primary.main\n        }\n      }\n    },\n    paper: {\n      boxShadow: 'none',\n      margin: 0,\n      color: '#586069',\n      fontSize: 13\n    },\n    option: {\n      minHeight: 'auto',\n      alignItems: 'flex-start',\n      padding: 8,\n      '&[aria-selected=\"true\"]': {\n        backgroundColor: 'transparent'\n      },\n      '&[data-focus=\"true\"]': {\n        backgroundColor: theme.palette.action.hover\n      }\n    },\n    popperDisablePortal: {\n      position: 'relative'\n    },\n    iconSelected: {\n      width: 17,\n      height: 17,\n      marginRight: 5,\n      marginLeft: -2\n    },\n    color: {\n      width: 14,\n      height: 14,\n      flexShrink: 0,\n      borderRadius: 3,\n      marginRight: 8,\n      marginTop: 2\n    },\n    text: {\n      flexGrow: 1\n    },\n    close: {\n      opacity: 0.6,\n      width: 18,\n      height: 18\n    }\n  };\n});\n\nvar _ref = __jsx(\"span\", null, \"Labels\");\n\nvar _ref2 = __jsx(SettingsIcon, null);\n\nvar _ref4 = __jsx(\"br\", null);\n\nexport default function GitHubLabel() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(null),\n      anchorEl = _React$useState[0],\n      setAnchorEl = _React$useState[1];\n\n  var _React$useState2 = React.useState([labels[1], labels[11]]),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      pendingValue = _React$useState3[0],\n      setPendingValue = _React$useState3[1];\n\n  var theme = useTheme();\n\n  var handleClick = function handleClick(event) {\n    setPendingValue(value);\n    setAnchorEl(event.currentTarget);\n  };\n\n  var handleClose = function handleClose(event, reason) {\n    if (reason === 'toggleInput') {\n      return;\n    }\n\n    setValue(pendingValue);\n\n    if (anchorEl) {\n      anchorEl.focus();\n    }\n\n    setAnchorEl(null);\n  };\n\n  var open = Boolean(anchorEl);\n  var id = open ? 'github-label' : undefined;\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(ButtonBase, {\n    disableRipple: true,\n    className: classes.button,\n    \"aria-describedby\": id,\n    onClick: handleClick\n  }, _ref, _ref2), value.map(function (label) {\n    return __jsx(\"div\", {\n      key: label.name,\n      className: classes.tag,\n      style: {\n        backgroundColor: label.color,\n        color: theme.palette.getContrastText(label.color)\n      }\n    }, label.name);\n  })), __jsx(Popper, {\n    id: id,\n    open: open,\n    anchorEl: anchorEl,\n    placement: \"bottom-start\",\n    className: classes.popper\n  }, __jsx(\"div\", {\n    className: classes.header\n  }, \"Apply labels to this pull request\"), __jsx(Autocomplete, {\n    open: true,\n    onClose: handleClose,\n    multiple: true,\n    classes: {\n      paper: classes.paper,\n      option: classes.option,\n      popperDisablePortal: classes.popperDisablePortal\n    },\n    value: pendingValue,\n    onChange: function onChange(event, newValue, reason) {\n      if (event.type === 'keydown' && event.key === 'Backspace' && reason === 'remove-option') {\n        return;\n      }\n\n      setPendingValue(newValue);\n    },\n    disableCloseOnSelect: true,\n    disablePortal: true,\n    renderTags: function renderTags() {\n      return null;\n    },\n    noOptionsText: \"No labels\",\n    renderOption: function renderOption(option, _ref3) {\n      var selected = _ref3.selected;\n      return __jsx(React.Fragment, null, __jsx(DoneIcon, {\n        className: classes.iconSelected,\n        style: {\n          visibility: selected ? 'visible' : 'hidden'\n        }\n      }), __jsx(\"span\", {\n        className: classes.color,\n        style: {\n          backgroundColor: option.color\n        }\n      }), __jsx(\"div\", {\n        className: classes.text\n      }, option.name, _ref4, option.description), __jsx(CloseIcon, {\n        className: classes.close,\n        style: {\n          visibility: selected ? 'visible' : 'hidden'\n        }\n      }));\n    },\n    options: [].concat(labels).sort(function (a, b) {\n      // Display the selected labels first.\n      var ai = value.indexOf(a);\n      ai = ai === -1 ? value.length + labels.indexOf(a) : ai;\n      var bi = value.indexOf(b);\n      bi = bi === -1 ? value.length + labels.indexOf(b) : bi;\n      return ai - bi;\n    }),\n    getOptionLabel: function getOptionLabel(option) {\n      return option.name;\n    },\n    renderInput: function renderInput(params) {\n      return __jsx(InputBase, {\n        ref: params.InputProps.ref,\n        inputProps: params.inputProps,\n        autoFocus: true,\n        className: classes.inputBase\n      });\n    }\n  })));\n} // From https://github.com/abdonrd/github-labels\n\nvar labels = [{\n  name: 'good first issue',\n  color: '#7057ff',\n  description: 'Good for newcomers'\n}, {\n  name: 'help wanted',\n  color: '#008672',\n  description: 'Extra attention is needed'\n}, {\n  name: 'priority: critical',\n  color: '#b60205',\n  description: ''\n}, {\n  name: 'priority: high',\n  color: '#d93f0b',\n  description: ''\n}, {\n  name: 'priority: low',\n  color: '#0e8a16',\n  description: ''\n}, {\n  name: 'priority: medium',\n  color: '#fbca04',\n  description: ''\n}, {\n  name: \"status: can't reproduce\",\n  color: '#fec1c1',\n  description: ''\n}, {\n  name: 'status: confirmed',\n  color: '#215cea',\n  description: ''\n}, {\n  name: 'status: duplicate',\n  color: '#cfd3d7',\n  description: 'This issue or pull request already exists'\n}, {\n  name: 'status: needs information',\n  color: '#fef2c0',\n  description: ''\n}, {\n  name: 'status: wont do/fix',\n  color: '#eeeeee',\n  description: 'This will not be worked on'\n}, {\n  name: 'type: bug',\n  color: '#d73a4a',\n  description: \"Something isn't working\"\n}, {\n  name: 'type: discussion',\n  color: '#d4c5f9',\n  description: ''\n}, {\n  name: 'type: documentation',\n  color: '#006b75',\n  description: ''\n}, {\n  name: 'type: enhancement',\n  color: '#84b6eb',\n  description: ''\n}, {\n  name: 'type: epic',\n  color: '#3e4b9e',\n  description: 'A theme of work that contain sub-tasks'\n}, {\n  name: 'type: feature request',\n  color: '#fbca04',\n  description: 'New feature or request'\n}, {\n  name: 'type: question',\n  color: '#d876e3',\n  description: 'Further information is requested'\n}];","map":null,"metadata":{},"sourceType":"module"}