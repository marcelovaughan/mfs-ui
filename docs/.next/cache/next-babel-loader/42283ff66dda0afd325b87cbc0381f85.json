{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport prism from 'prismjs';\nimport 'prismjs/components/prism-css';\nimport 'prismjs/components/prism-diff';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-tsx';\nexport default function highlight(code, language) {\n  let prismLanguage;\n\n  switch (language) {\n    case 'ts':\n      prismLanguage = prism.languages.tsx;\n      break;\n\n    case 'js':\n    case 'sh':\n      prismLanguage = prism.languages.jsx;\n      break;\n\n    case 'diff':\n      prismLanguage = _objectSpread({}, prism.languages.diff); // original `/^[-<].*$/m` matches lines starting with `<` which matches\n      // <SomeComponent />\n      // we will only use `-` as the deleted marker\n\n      prismLanguage.deleted = /^[-].*$/m;\n      break;\n\n    default:\n      prismLanguage = prism.languages[language];\n      break;\n  }\n\n  if (!prismLanguage) {\n    if (language) {\n      throw new Error(`unsupported language: \"${language}\", \"${code}\"`);\n    } else {\n      prismLanguage = prism.languages.jsx;\n    }\n  }\n\n  return prism.highlight(code, prismLanguage);\n}","map":null,"metadata":{},"sourceType":"module"}