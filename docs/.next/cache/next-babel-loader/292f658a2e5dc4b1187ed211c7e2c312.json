{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from 'react';\nimport Router from 'next/router';\nimport { pathnameToLanguage } from \"../utils/helpers\";\nexport function handleEvent(_x, _x2) {\n  return _handleEvent.apply(this, arguments);\n}\n\nfunction _handleEvent() {\n  _handleEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, as) {\n    var pathname, success;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(event.defaultPrevented || event.button !== 0 || // ignore everything but left-click\n            event.metaKey || event.ctrlKey || event.altKey || event.shiftKey)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            event.preventDefault();\n            pathname = as.replace(/#(.*)$/, ''); // Add support for leading / in development mode.\n\n            if (pathname !== '/') {\n              // The leading / is only added to support static hosting (resolve /index.html).\n              // We remove it to normalize the pathname.\n              // See `rewriteUrlForNextExport` on Next.js side.\n              pathname = pathname.replace(/\\/$/, '');\n            }\n\n            pathname = pathnameToLanguage(pathname).canonical;\n            _context.next = 8;\n            return Router.push(pathname, as);\n\n          case 8:\n            success = _context.sent;\n\n            if (success) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 11:\n            window.scrollTo(0, 0);\n            document.body.focus();\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _handleEvent.apply(this, arguments);\n}\n\nfunction handleClick(event) {\n  var activeElement = document.activeElement; // Ignore non link clicks\n\n  if (activeElement.nodeName !== 'A' || activeElement.getAttribute('target') === '_blank' || activeElement.getAttribute('data-no-link') === 'true' || activeElement.getAttribute('href').indexOf('/') !== 0) {\n    return;\n  }\n\n  handleEvent(event, document.activeElement.getAttribute('href'));\n}\n\nvar bound = false;\nexport default function MarkdownLinks() {\n  React.useEffect(function () {\n    if (bound) {\n      return;\n    }\n\n    bound = true;\n    document.addEventListener('click', handleClick);\n  }, []);\n  return null;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/components/MarkdownLinks.js"],"names":["React","Router","pathnameToLanguage","handleEvent","event","as","defaultPrevented","button","metaKey","ctrlKey","altKey","shiftKey","preventDefault","pathname","replace","canonical","push","success","window","scrollTo","document","body","focus","handleClick","activeElement","nodeName","getAttribute","indexOf","bound","MarkdownLinks","useEffect","addEventListener"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,kBAAT;AAEA,gBAAsBC,WAAtB;AAAA;AAAA;;;0EAAO,iBAA2BC,KAA3B,EAAkCC,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGHD,KAAK,CAACE,gBAAN,IACAF,KAAK,CAACG,MAAN,KAAiB,CADjB,IACsB;AACtBH,YAAAA,KAAK,CAACI,OAFN,IAGAJ,KAAK,CAACK,OAHN,IAIAL,KAAK,CAACM,MAJN,IAKAN,KAAK,CAACO,QARH;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAaLP,YAAAA,KAAK,CAACQ,cAAN;AAEIC,YAAAA,QAfC,GAeUR,EAAE,CAACS,OAAH,CAAW,QAAX,EAAqB,EAArB,CAfV,EAgBL;;AACA,gBAAID,QAAQ,KAAK,GAAjB,EAAsB;AACpB;AACA;AACA;AACAA,cAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAAX;AACD;;AACDD,YAAAA,QAAQ,GAAGX,kBAAkB,CAACW,QAAD,CAAlB,CAA6BE,SAAxC;AAvBK;AAAA,mBAyBiBd,MAAM,CAACe,IAAP,CAAYH,QAAZ,EAAsBR,EAAtB,CAzBjB;;AAAA;AAyBCY,YAAAA,OAzBD;;AAAA,gBA0BAA,OA1BA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA6BLC,YAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACAC,YAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd;;AA9BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiCP,SAASC,WAAT,CAAqBnB,KAArB,EAA4B;AAC1B,MAAMoB,aAAa,GAAGJ,QAAQ,CAACI,aAA/B,CAD0B,CAG1B;;AACA,MACEA,aAAa,CAACC,QAAd,KAA2B,GAA3B,IACAD,aAAa,CAACE,YAAd,CAA2B,QAA3B,MAAyC,QADzC,IAEAF,aAAa,CAACE,YAAd,CAA2B,cAA3B,MAA+C,MAF/C,IAGAF,aAAa,CAACE,YAAd,CAA2B,MAA3B,EAAmCC,OAAnC,CAA2C,GAA3C,MAAoD,CAJtD,EAKE;AACA;AACD;;AAEDxB,EAAAA,WAAW,CAACC,KAAD,EAAQgB,QAAQ,CAACI,aAAT,CAAuBE,YAAvB,CAAoC,MAApC,CAAR,CAAX;AACD;;AAED,IAAIE,KAAK,GAAG,KAAZ;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC7B,EAAAA,KAAK,CAAC8B,SAAN,CAAgB,YAAM;AACpB,QAAIF,KAAJ,EAAW;AACT;AACD;;AACDA,IAAAA,KAAK,GAAG,IAAR;AACAR,IAAAA,QAAQ,CAACW,gBAAT,CAA0B,OAA1B,EAAmCR,WAAnC;AACD,GAND,EAMG,EANH;AAQA,SAAO,IAAP;AACD","sourcesContent":["import React from 'react';\nimport Router from 'next/router';\nimport { pathnameToLanguage } from 'docs/src/modules/utils/helpers';\n\nexport async function handleEvent(event, as) {\n  // Ignore click for new tab/new window behavior\n  if (\n    event.defaultPrevented ||\n    event.button !== 0 || // ignore everything but left-click\n    event.metaKey ||\n    event.ctrlKey ||\n    event.altKey ||\n    event.shiftKey\n  ) {\n    return;\n  }\n\n  event.preventDefault();\n\n  let pathname = as.replace(/#(.*)$/, '');\n  // Add support for leading / in development mode.\n  if (pathname !== '/') {\n    // The leading / is only added to support static hosting (resolve /index.html).\n    // We remove it to normalize the pathname.\n    // See `rewriteUrlForNextExport` on Next.js side.\n    pathname = pathname.replace(/\\/$/, '');\n  }\n  pathname = pathnameToLanguage(pathname).canonical;\n\n  const success = await Router.push(pathname, as);\n  if (!success) {\n    return;\n  }\n  window.scrollTo(0, 0);\n  document.body.focus();\n}\n\nfunction handleClick(event) {\n  const activeElement = document.activeElement;\n\n  // Ignore non link clicks\n  if (\n    activeElement.nodeName !== 'A' ||\n    activeElement.getAttribute('target') === '_blank' ||\n    activeElement.getAttribute('data-no-link') === 'true' ||\n    activeElement.getAttribute('href').indexOf('/') !== 0\n  ) {\n    return;\n  }\n\n  handleEvent(event, document.activeElement.getAttribute('href'));\n}\n\nlet bound = false;\n\nexport default function MarkdownLinks() {\n  React.useEffect(() => {\n    if (bound) {\n      return;\n    }\n    bound = true;\n    document.addEventListener('click', handleClick);\n  }, []);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}