{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto'\n  },\n\n  /* Styles applied to the root element if `orientation=\"horizontal\"`. */\n  horizontal: {},\n\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    marginLeft: 12,\n    // half icon\n    padding: '0 0 8px'\n  },\n\n  /* Styles applied to the root element if `alternativeLabel={true}`. */\n  alternativeLabel: {\n    position: 'absolute',\n    top: 8 + 4,\n    left: 'calc(-50% + 20px)',\n    right: 'calc(50% + 20px)'\n  },\n\n  /* Pseudo-class applied to the root element if `active={true}`. */\n  active: {},\n\n  /* Pseudo-class applied to the root element if `completed={true}`. */\n  completed: {},\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Styles applied to the line element. */\n  line: {\n    display: 'block',\n    borderColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n  },\n\n  /* Styles applied to the root element if `orientation=\"horizontal\"`. */\n  lineHorizontal: {\n    borderTopStyle: 'solid',\n    borderTopWidth: 1\n  },\n\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  lineVertical: {\n    borderLeftStyle: 'solid',\n    borderLeftWidth: 1,\n    minHeight: 24\n  }\n});\nconst StepConnector = /*#__PURE__*/React.forwardRef(function StepConnector(props, ref) {\n  const {\n    // eslint-disable-next-line react/prop-types\n    active,\n    // eslint-disable-next-line react/prop-types\n    alternativeLabel = false,\n    classes,\n    className,\n    // eslint-disable-next-line react/prop-types\n    completed,\n    // eslint-disable-next-line react/prop-types\n    disabled,\n    // eslint-disable-next-line react/prop-types\n    index,\n    // eslint-disable-next-line react/prop-types\n    orientation = 'horizontal'\n  } = props,\n        other = _objectWithoutProperties(props, [\"active\", \"alternativeLabel\", \"classes\", \"className\", \"completed\", \"disabled\", \"index\", \"orientation\"]);\n\n  return __jsx(\"div\", _extends({\n    className: clsx(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel, active && classes.active, completed && classes.completed, disabled && classes.disabled),\n    ref: ref\n  }, other), __jsx(\"span\", {\n    className: clsx(classes.line, {\n      'horizontal': classes.lineHorizontal,\n      'vertical': classes.lineVertical\n    }[orientation])\n  }));\n});\nexport default withStyles(styles, {\n  name: 'MuiStepConnector'\n})(StepConnector);","map":null,"metadata":{},"sourceType":"module"}