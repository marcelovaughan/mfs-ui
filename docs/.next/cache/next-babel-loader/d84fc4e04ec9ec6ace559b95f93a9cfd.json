{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/* eslint-disable react/no-danger, react-hooks/exhaustive-deps */\nimport fetch from 'cross-fetch';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from \"../../../../packages/material-ui/src/styles\";\nimport NotificationsIcon from \"../../../../packages/material-ui-icons/src/Notifications\";\nimport Tooltip from \"../../../../packages/material-ui/src/Tooltip\";\nimport CircularProgress from \"../../../../packages/material-ui/src/CircularProgress\";\nimport IconButton from \"../../../../packages/material-ui/src/IconButton\";\nimport Badge from \"../../../../packages/material-ui/src/Badge\";\nimport Typography from \"../../../../packages/material-ui/src/Typography\";\nimport Popper from \"../../../../packages/material-ui/src/Popper\";\nimport Grow from \"../../../../packages/material-ui/src/Grow\";\nimport Paper from \"../../../../packages/material-ui/src/Paper\";\nimport ClickAwayListener from \"../../../../packages/material-ui/src/ClickAwayListener\";\nimport List from \"../../../../packages/material-ui/src/List\";\nimport ListItem from \"../../../../packages/material-ui/src/ListItem\";\nimport Divider from \"../../../../packages/material-ui/src/Divider\";\nimport sleep from \"../../../../modules/waterfall/sleep\";\nimport { getCookie } from \"../utils/helpers\";\nimport { ACTION_TYPES } from \"../constants\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    transformOrigin: 'top right'\n  },\n  list: {\n    width: theme.spacing(40),\n    maxHeight: theme.spacing(40),\n    overflow: 'auto'\n  },\n  listItem: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  loading: {\n    display: 'flex',\n    justifyContent: 'center',\n    margin: theme.spacing(1, 0)\n  },\n  divider: {\n    margin: theme.spacing(1, 0)\n  }\n}));\n\nvar _ref = __jsx(NotificationsIcon, null);\n\nvar _ref2 = __jsx(CircularProgress, {\n  size: 32\n});\n\nexport default function Notifications() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [tooltipOpen, setTooltipOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const t = useSelector(state => state.options.t);\n  const dispatch = useDispatch();\n  const userLanguage = useSelector(state => state.options.userLanguage);\n  const messages = useSelector(state => state.notifications.messages);\n  const lastSeen = useSelector(state => state.notifications.lastSeen);\n  const messageList = messages ? messages.filter(message => {\n    if (message.userLanguage && message.userLanguage !== userLanguage && message.userLanguage !== navigator.language.substring(0, 2)) {\n      return false;\n    }\n\n    return true;\n  }).reverse() : null;\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen);\n    setTooltipOpen(false);\n\n    if (messageList && messageList.length > 0) {\n      dispatch({\n        type: ACTION_TYPES.NOTIFICATIONS_CHANGE,\n        payload: {\n          lastSeen: messageList[0].id\n        }\n      });\n      document.cookie = `lastSeenNotification=${messageList[0].id};path=/;max-age=31536000`;\n    }\n  };\n\n  React.useEffect(() => {\n    let active = true; // Prevent search engines from indexing the notification.\n\n    if (/glebot/.test(navigator.userAgent) || messages) {\n      return undefined;\n    }\n\n    (async () => {\n      await sleep(1500); // Soften the pressure on the main thread.\n\n      let newMessages;\n\n      try {\n        const result = await fetch('https://raw.githubusercontent.com/mui-org/material-ui/master/docs/notifications.json');\n        newMessages = await result.json();\n      } catch (err) {// Swallow the exceptions, e.g. rate limit\n      }\n\n      if (active) {\n        const seen = getCookie('lastSeenNotification');\n        const lastSeenNotification = seen === '' ? 0 : parseInt(seen, 10);\n        dispatch({\n          type: ACTION_TYPES.NOTIFICATIONS_CHANGE,\n          payload: {\n            messages: newMessages || [],\n            lastSeen: lastSeenNotification\n          }\n        });\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Tooltip, {\n    open: tooltipOpen,\n    onOpen: () => {\n      setTooltipOpen(!open);\n    },\n    onClose: () => {\n      setTooltipOpen(false);\n    },\n    title: t('toggleNotifications'),\n    enterDelay: 300\n  }, __jsx(IconButton, {\n    color: \"inherit\",\n    ref: anchorRef,\n    \"aria-controls\": open ? 'notifications-popup' : undefined,\n    \"aria-haspopup\": \"true\",\n    \"aria-label\": t('toggleNotifications'),\n    onClick: handleToggle,\n    \"data-ga-event-category\": \"AppBar\",\n    \"data-ga-event-action\": \"toggleNotifications\"\n  }, __jsx(Badge, {\n    color: \"secondary\",\n    badgeContent: messageList ? messageList.reduce((count, message) => message.id > lastSeen ? count + 1 : count, 0) : 0\n  }, _ref))), __jsx(Popper, {\n    id: \"notifications-popup\",\n    anchorEl: anchorRef.current,\n    open: open,\n    placement: \"bottom-end\",\n    transition: true,\n    disablePortal: true,\n    role: undefined\n  }, ({\n    TransitionProps\n  }) => __jsx(ClickAwayListener, {\n    onClickAway: () => {\n      setOpen(false);\n    }\n  }, __jsx(Grow, _extends({\n    in: open\n  }, TransitionProps), __jsx(Paper, {\n    className: classes.paper\n  }, __jsx(List, {\n    className: classes.list\n  }, messageList ? messageList.map((message, index) => __jsx(React.Fragment, {\n    key: message.id\n  }, __jsx(ListItem, {\n    alignItems: \"flex-start\",\n    className: classes.listItem\n  }, __jsx(Typography, {\n    gutterBottom: true\n  }, message.title), __jsx(Typography, {\n    gutterBottom: true,\n    variant: \"body2\"\n  }, __jsx(\"span\", {\n    id: \"notification-message\",\n    dangerouslySetInnerHTML: {\n      __html: message.text\n    }\n  })), message.date && __jsx(Typography, {\n    variant: \"caption\",\n    color: \"textSecondary\"\n  }, new Date(message.date).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }))), index < messageList.length - 1 ? __jsx(Divider, {\n    className: classes.divider\n  }) : null)) : __jsx(\"div\", {\n    className: classes.loading\n  }, _ref2)))))));\n}","map":null,"metadata":{},"sourceType":"module"}