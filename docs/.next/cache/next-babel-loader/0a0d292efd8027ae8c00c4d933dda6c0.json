{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getDisplayName } from \"../../../material-ui-utils/src\";\nexport default function mergeClasses(options = {}) {\n  const {\n    baseClasses,\n    newClasses,\n    Component\n  } = options;\n\n  if (!newClasses) {\n    return baseClasses;\n  }\n\n  const nextClasses = _objectSpread({}, baseClasses);\n\n  if (true) {\n    if (typeof newClasses === 'string') {\n      console.error([`Material-UI: The value \\`${newClasses}\\` ` + `provided to the classes prop of ${getDisplayName(Component)} is incorrect.`, 'You might want to use the className prop instead.'].join('\\n'));\n      return baseClasses;\n    }\n  }\n\n  Object.keys(newClasses).forEach(key => {\n    if (true) {\n      if (!baseClasses[key] && newClasses[key]) {\n        console.error([`Material-UI: The key \\`${key}\\` ` + `provided to the classes prop is not implemented in ${getDisplayName(Component)}.`, `You can only override one of the following: ${Object.keys(baseClasses).join(',')}.`].join('\\n'));\n      }\n\n      if (newClasses[key] && typeof newClasses[key] !== 'string') {\n        console.error([`Material-UI: The key \\`${key}\\` ` + `provided to the classes prop is not valid for ${getDisplayName(Component)}.`, `You need to provide a non empty string instead of: ${newClasses[key]}.`].join('\\n'));\n      }\n    }\n\n    if (newClasses[key]) {\n      nextClasses[key] = `${baseClasses[key]} ${newClasses[key]}`;\n    }\n  });\n  return nextClasses;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-styles/src/mergeClasses/mergeClasses.js"],"names":["getDisplayName","mergeClasses","options","baseClasses","newClasses","Component","nextClasses","console","error","join","Object","keys","forEach","key"],"mappings":";;;;;;AAAA,SAASA,cAAT;AAEA,eAAe,SAASC,YAAT,CAAsBC,OAAO,GAAG,EAAhC,EAAoC;AACjD,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA;AAA3B,MAAyCH,OAA/C;;AAEA,MAAI,CAACE,UAAL,EAAiB;AACf,WAAOD,WAAP;AACD;;AAED,QAAMG,WAAW,qBAAQH,WAAR,CAAjB;;AAEA,YAA2C;AACzC,QAAI,OAAOC,UAAP,KAAsB,QAA1B,EAAoC;AAClCG,MAAAA,OAAO,CAACC,KAAR,CACE,CACG,4BAA2BJ,UAAW,KAAvC,GACG,mCAAkCJ,cAAc,CAACK,SAAD,CAAY,gBAFjE,EAGE,mDAHF,EAIEI,IAJF,CAIO,IAJP,CADF;AAQA,aAAON,WAAP;AACD;AACF;;AAEDO,EAAAA,MAAM,CAACC,IAAP,CAAYP,UAAZ,EAAwBQ,OAAxB,CAAiCC,GAAD,IAAS;AACvC,cAA2C;AACzC,UAAI,CAACV,WAAW,CAACU,GAAD,CAAZ,IAAqBT,UAAU,CAACS,GAAD,CAAnC,EAA0C;AACxCN,QAAAA,OAAO,CAACC,KAAR,CACE,CACG,0BAAyBK,GAAI,KAA9B,GACG,sDAAqDb,cAAc,CAACK,SAAD,CAAY,GAFpF,EAGG,+CAA8CK,MAAM,CAACC,IAAP,CAAYR,WAAZ,EAAyBM,IAAzB,CAA8B,GAA9B,CAAmC,GAHpF,EAIEA,IAJF,CAIO,IAJP,CADF;AAOD;;AAED,UAAIL,UAAU,CAACS,GAAD,CAAV,IAAmB,OAAOT,UAAU,CAACS,GAAD,CAAjB,KAA2B,QAAlD,EAA4D;AAC1DN,QAAAA,OAAO,CAACC,KAAR,CACE,CACG,0BAAyBK,GAAI,KAA9B,GACG,iDAAgDb,cAAc,CAACK,SAAD,CAAY,GAF/E,EAGG,sDAAqDD,UAAU,CAACS,GAAD,CAAM,GAHxE,EAIEJ,IAJF,CAIO,IAJP,CADF;AAOD;AACF;;AAED,QAAIL,UAAU,CAACS,GAAD,CAAd,EAAqB;AACnBP,MAAAA,WAAW,CAACO,GAAD,CAAX,GAAoB,GAAEV,WAAW,CAACU,GAAD,CAAM,IAAGT,UAAU,CAACS,GAAD,CAAM,EAA1D;AACD;AACF,GA1BD;AA4BA,SAAOP,WAAP;AACD","sourcesContent":["import { getDisplayName } from '@material-ui/utils';\n\nexport default function mergeClasses(options = {}) {\n  const { baseClasses, newClasses, Component } = options;\n\n  if (!newClasses) {\n    return baseClasses;\n  }\n\n  const nextClasses = { ...baseClasses };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof newClasses === 'string') {\n      console.error(\n        [\n          `Material-UI: The value \\`${newClasses}\\` ` +\n            `provided to the classes prop of ${getDisplayName(Component)} is incorrect.`,\n          'You might want to use the className prop instead.',\n        ].join('\\n'),\n      );\n\n      return baseClasses;\n    }\n  }\n\n  Object.keys(newClasses).forEach((key) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!baseClasses[key] && newClasses[key]) {\n        console.error(\n          [\n            `Material-UI: The key \\`${key}\\` ` +\n              `provided to the classes prop is not implemented in ${getDisplayName(Component)}.`,\n            `You can only override one of the following: ${Object.keys(baseClasses).join(',')}.`,\n          ].join('\\n'),\n        );\n      }\n\n      if (newClasses[key] && typeof newClasses[key] !== 'string') {\n        console.error(\n          [\n            `Material-UI: The key \\`${key}\\` ` +\n              `provided to the classes prop is not valid for ${getDisplayName(Component)}.`,\n            `You need to provide a non empty string instead of: ${newClasses[key]}.`,\n          ].join('\\n'),\n        );\n      }\n    }\n\n    if (newClasses[key]) {\n      nextClasses[key] = `${baseClasses[key]} ${newClasses[key]}`;\n    }\n  });\n\n  return nextClasses;\n}\n"]},"metadata":{},"sourceType":"module"}