{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { getDependencies } from \"./helpers\";\nimport { CODE_VARIANTS } from \"../constants\";\n\nfunction jsDemo(demoData) {\n  return {\n    dependencies: getDependencies(demoData.raw),\n    files: {\n      'demo.js': demoData.raw,\n      'index.js': `\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Demo from './demo';\n\nReactDOM.render(<Demo />, document.querySelector('#root'));\n    `\n    }\n  };\n}\n\nfunction tsDemo(demoData) {\n  return {\n    dependencies: getDependencies(demoData.raw, {\n      codeLanguage: CODE_VARIANTS.TS\n    }),\n    files: {\n      'demo.tsx': demoData.raw,\n      'index.tsx': `\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Demo from './demo';\n\nReactDOM.render(<Demo />, document.querySelector('#root'));\n    `,\n      'tsconfig.json': `{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\n      \"dom\",\n      \"dom.iterable\",\n      \"esnext\"\n    ],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"preserve\"\n  },\n  \"include\": [\n    \"src\"\n  ]\n}\n      `\n    },\n    main: 'index.tsx',\n    scripts: {\n      start: 'react-scripts start'\n    }\n  };\n}\n\nfunction getLanguageConfig(demoData) {\n  switch (demoData.codeVariant) {\n    case CODE_VARIANTS.TS:\n      return tsDemo(demoData);\n\n    case CODE_VARIANTS.JS:\n      return jsDemo(demoData);\n\n    default:\n      throw new Error(`Unsupported codeVariant: ${demoData.codeVariant}`);\n  }\n}\n\nexport default function getDemo(demoData) {\n  const baseConfig = {\n    title: 'Material demo',\n    description: demoData.githubLocation,\n    files: {\n      'index.html': `\n<body>\n  <!-- Fonts to support Material Design -->\n  <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n  <!-- Icons to support Material Design -->\n  <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n  <div id=\"root\"></div>\n</body>\n      `\n    }\n  };\n  const languageConfig = getLanguageConfig(demoData);\n  return _objectSpread(_objectSpread(_objectSpread({}, baseConfig), languageConfig), {}, {\n    files: _objectSpread(_objectSpread({}, baseConfig.files), languageConfig.files)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}