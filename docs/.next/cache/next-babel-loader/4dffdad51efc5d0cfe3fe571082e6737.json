{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { makeStyles } from \"../../../../packages/material-ui/src/styles\";\nimport loadScript from \"../utils/loadScript\";\nimport adStyles from \"./ad.styles\";\nimport { adShape } from \"./AdManager\";\nconst useStyles = makeStyles(theme => {\n  const styles = adStyles(theme);\n  return {\n    '@global': {\n      '#cf': _objectSpread(_objectSpread({}, styles.root), {}, {\n        '& .cf-img-wrapper.cf-img-wrapper': styles.imgWrapper,\n        '& img': styles.img,\n        '& a, & a:hover': styles.a,\n        '& .cf-text.cf-text': styles.description,\n        '& .cf-powered-by.cf-powered-by': _objectSpread(_objectSpread({}, styles.poweredby), {}, {\n          '& em': {\n            fontStyle: 'normal'\n          }\n        }),\n        '& .cf-cta': styles.link\n      })\n    }\n  };\n});\n\nvar _ref = __jsx(\"span\", {\n  id: \"codefund\"\n});\n\nexport default function AdCodeFund() {\n  useStyles();\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    loadScript(`https://codefund.io/properties/137/funder.js?theme=unstyled${adShape === 'inline' ? '&template=horizontal' : ''}`, ref.current);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(\"span\", {\n    ref: ref\n  }), _ref);\n}","map":null,"metadata":{},"sourceType":"module"}