{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/internal/SwitchBase.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from \"../../../material-ui-utils/src\";\nimport useControlled from \"../utils/useControlled\";\nimport useFormControl from \"../FormControl/useFormControl\";\nimport withStyles from \"../styles/withStyles\";\nimport IconButton from \"../IconButton\";\nexport var styles = {\n  root: {\n    padding: 9\n  },\n  checked: {},\n  disabled: {},\n  input: {\n    cursor: 'inherit',\n    position: 'absolute',\n    opacity: 0,\n    width: '100%',\n    height: '100%',\n    top: 0,\n    left: 0,\n    margin: 0,\n    padding: 0,\n    zIndex: 1\n  }\n};\n/**\n * @ignore - internal component.\n */\n\nvar SwitchBase = /*#__PURE__*/React.forwardRef(function SwitchBase(props, ref) {\n  var autoFocus = props.autoFocus,\n      checkedProp = props.checked,\n      checkedIcon = props.checkedIcon,\n      classes = props.classes,\n      className = props.className,\n      defaultChecked = props.defaultChecked,\n      disabledProp = props.disabled,\n      icon = props.icon,\n      id = props.id,\n      inputProps = props.inputProps,\n      inputRef = props.inputRef,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      readOnly = props.readOnly,\n      required = props.required,\n      tabIndex = props.tabIndex,\n      type = props.type,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"autoFocus\", \"checked\", \"checkedIcon\", \"classes\", \"className\", \"defaultChecked\", \"disabled\", \"icon\", \"id\", \"inputProps\", \"inputRef\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"readOnly\", \"required\", \"tabIndex\", \"type\", \"value\"]);\n\n  var _useControlled = useControlled({\n    controlled: checkedProp,\n    \"default\": Boolean(defaultChecked),\n    name: 'SwitchBase',\n    state: 'checked'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      checked = _useControlled2[0],\n      setCheckedState = _useControlled2[1];\n\n  var muiFormControl = useFormControl();\n\n  var handleFocus = function handleFocus(event) {\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    if (muiFormControl && muiFormControl.onFocus) {\n      muiFormControl.onFocus(event);\n    }\n  };\n\n  var handleBlur = function handleBlur(event) {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (muiFormControl && muiFormControl.onBlur) {\n      muiFormControl.onBlur(event);\n    }\n  };\n\n  var handleInputChange = function handleInputChange(event) {\n    var newChecked = event.target.checked;\n    setCheckedState(newChecked);\n\n    if (onChange) {\n      // TODO v5: remove the second argument.\n      onChange(event, newChecked);\n    }\n  };\n\n  var disabled = disabledProp;\n\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n\n  var hasLabelFor = type === 'checkbox' || type === 'radio';\n  return __jsx(IconButton, _extends({\n    component: \"span\",\n    className: clsx(classes.root, className, checked && classes.checked, disabled && classes.disabled),\n    disabled: disabled,\n    tabIndex: null,\n    role: undefined,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }), __jsx(\"input\", _extends({\n    autoFocus: autoFocus,\n    checked: checkedProp,\n    defaultChecked: defaultChecked,\n    className: classes.input,\n    disabled: disabled,\n    id: hasLabelFor && id,\n    name: name,\n    onChange: handleInputChange,\n    readOnly: readOnly,\n    ref: inputRef,\n    required: required,\n    tabIndex: tabIndex,\n    type: type,\n    value: value\n  }, inputProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  })), checked ? checkedIcon : icon);\n}); // NB: If changed, please update Checkbox, Switch and Radio\n// so that the API documentation is updated.\n\nSwitchBase.propTypes = {\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node.isRequired,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /*\n   * @ignore\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string.isRequired,\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n};\nexport default withStyles(styles, {\n  name: 'PrivateSwitchBase'\n})(SwitchBase);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/internal/SwitchBase.js"],"names":["React","PropTypes","clsx","refType","useControlled","useFormControl","withStyles","IconButton","styles","root","padding","checked","disabled","input","cursor","position","opacity","width","height","top","left","margin","zIndex","SwitchBase","forwardRef","props","ref","autoFocus","checkedProp","checkedIcon","classes","className","defaultChecked","disabledProp","icon","id","inputProps","inputRef","name","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value","other","controlled","Boolean","state","setCheckedState","muiFormControl","handleFocus","event","handleBlur","handleInputChange","newChecked","target","hasLabelFor","undefined","propTypes","bool","node","isRequired","object","string","func","oneOfType","number","any"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport useControlled from '../utils/useControlled';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport IconButton from '../IconButton';\n\nexport const styles = {\n  root: {\n    padding: 9,\n  },\n  checked: {},\n  disabled: {},\n  input: {\n    cursor: 'inherit',\n    position: 'absolute',\n    opacity: 0,\n    width: '100%',\n    height: '100%',\n    top: 0,\n    left: 0,\n    margin: 0,\n    padding: 0,\n    zIndex: 1,\n  },\n};\n\n/**\n * @ignore - internal component.\n */\nconst SwitchBase = React.forwardRef(function SwitchBase(props, ref) {\n  const {\n    autoFocus,\n    checked: checkedProp,\n    checkedIcon,\n    classes,\n    className,\n    defaultChecked,\n    disabled: disabledProp,\n    icon,\n    id,\n    inputProps,\n    inputRef,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    readOnly,\n    required,\n    tabIndex,\n    type,\n    value,\n    ...other\n  } = props;\n  const [checked, setCheckedState] = useControlled({\n    controlled: checkedProp,\n    default: Boolean(defaultChecked),\n    name: 'SwitchBase',\n    state: 'checked',\n  });\n\n  const muiFormControl = useFormControl();\n\n  const handleFocus = (event) => {\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    if (muiFormControl && muiFormControl.onFocus) {\n      muiFormControl.onFocus(event);\n    }\n  };\n\n  const handleBlur = (event) => {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (muiFormControl && muiFormControl.onBlur) {\n      muiFormControl.onBlur(event);\n    }\n  };\n\n  const handleInputChange = (event) => {\n    const newChecked = event.target.checked;\n\n    setCheckedState(newChecked);\n\n    if (onChange) {\n      // TODO v5: remove the second argument.\n      onChange(event, newChecked);\n    }\n  };\n\n  let disabled = disabledProp;\n\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n\n  const hasLabelFor = type === 'checkbox' || type === 'radio';\n\n  return (\n    <IconButton\n      component=\"span\"\n      className={clsx(\n        classes.root,\n        {\n          [classes.checked]: checked,\n          [classes.disabled]: disabled,\n        },\n        className,\n      )}\n      disabled={disabled}\n      tabIndex={null}\n      role={undefined}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      ref={ref}\n      {...other}\n    >\n      <input\n        autoFocus={autoFocus}\n        checked={checkedProp}\n        defaultChecked={defaultChecked}\n        className={classes.input}\n        disabled={disabled}\n        id={hasLabelFor && id}\n        name={name}\n        onChange={handleInputChange}\n        readOnly={readOnly}\n        ref={inputRef}\n        required={required}\n        tabIndex={tabIndex}\n        type={type}\n        value={value}\n        {...inputProps}\n      />\n      {checked ? checkedIcon : icon}\n    </IconButton>\n  );\n});\n\n// NB: If changed, please update Checkbox, Switch and Radio\n// so that the API documentation is updated.\nSwitchBase.propTypes = {\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node.isRequired,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /*\n   * @ignore\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string.isRequired,\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'PrivateSwitchBase' })(SwitchBase);\n"]},"metadata":{},"sourceType":"module"}