{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { ACTION_TYPES, CODE_VARIANTS } from \"../constants\";\nimport memoize from \"../../../../packages/material-ui-system/src/memoize\";\nimport mapTranslations from \"../utils/mapTranslations\";\n\nvar req = require.context(\"../../../translations\", false, /translations.*\\.json$/);\n\nvar translations = mapTranslations(req, 'json');\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce(function (acc, item) {\n    return acc && acc[item] ? acc[item] : null;\n  }, obj);\n}\n\nvar warnOnce = {};\nvar getT = memoize(function (userLanguage) {\n  return function (key) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$ignoreWarnin = options.ignoreWarning,\n        ignoreWarning = _options$ignoreWarnin === void 0 ? false : _options$ignoreWarnin;\n    var wordings = translations[userLanguage];\n\n    if (!wordings) {\n      console.error(\"Missing language: \".concat(userLanguage, \".\"));\n      return '…';\n    }\n\n    var translation = getPath(wordings, key);\n\n    if (!translation) {\n      var fullKey = \"\".concat(userLanguage, \":\").concat(key); // No warnings in CI env\n\n      if (!ignoreWarning && !warnOnce[fullKey] && true) {\n        console.error(\"Missing translation for \".concat(fullKey, \".\"));\n        warnOnce[fullKey] = true;\n      }\n\n      return getPath(translations.en, key);\n    }\n\n    return translation;\n  };\n});\n\nvar mapping = _defineProperty({}, ACTION_TYPES.OPTIONS_CHANGE, function (state, action) {\n  var newState = {\n    codeVariant: action.payload.codeVariant || state.codeVariant,\n    userLanguage: action.payload.userLanguage || state.userLanguage\n  };\n  return newState;\n});\n\nexport default function optionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var newState = _objectSpread({}, state);\n\n  if (!newState.codeVariant) {\n    newState.codeVariant = CODE_VARIANTS.JS;\n  }\n\n  if (!newState.userLanguage) {\n    newState.userLanguage = 'en';\n  }\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  newState.t = getT(newState.userLanguage);\n  return newState;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/redux/optionsReducer.js"],"names":["req","require","translations","mapTranslations","acc","warnOnce","getT","memoize","options","ignoreWarning","wordings","console","translation","getPath","fullKey","mapping","ACTION_TYPES","newState","codeVariant","action","state","userLanguage","CODE_VARIANTS"],"mappings":"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","sourcesContent":["import { ACTION_TYPES, CODE_VARIANTS } from 'docs/src/modules/constants';\nimport memoize from '@material-ui/system/memoize';\nimport mapTranslations from 'docs/src/modules/utils/mapTranslations';\n\nconst req = require.context('docs/translations', false, /translations.*\\.json$/);\nconst translations = mapTranslations(req, 'json');\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce((acc, item) => (acc && acc[item] ? acc[item] : null), obj);\n}\n\nconst warnOnce = {};\n\nconst getT = memoize((userLanguage) => (key, options = {}) => {\n  const { ignoreWarning = false } = options;\n  const wordings = translations[userLanguage];\n\n  if (!wordings) {\n    console.error(`Missing language: ${userLanguage}.`);\n    return '…';\n  }\n\n  const translation = getPath(wordings, key);\n\n  if (!translation) {\n    const fullKey = `${userLanguage}:${key}`;\n    // No warnings in CI env\n    if (!ignoreWarning && !warnOnce[fullKey] && typeof window !== 'undefined') {\n      console.error(`Missing translation for ${fullKey}.`);\n      warnOnce[fullKey] = true;\n    }\n    return getPath(translations.en, key);\n  }\n\n  return translation;\n});\n\nconst mapping = {\n  [ACTION_TYPES.OPTIONS_CHANGE]: (state, action) => {\n    const newState = {\n      codeVariant: action.payload.codeVariant || state.codeVariant,\n      userLanguage: action.payload.userLanguage || state.userLanguage,\n    };\n    return newState;\n  },\n};\n\nexport default function optionsReducer(state = {}, action) {\n  let newState = { ...state };\n\n  if (!newState.codeVariant) {\n    newState.codeVariant = CODE_VARIANTS.JS;\n  }\n  if (!newState.userLanguage) {\n    newState.userLanguage = 'en';\n  }\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  newState.t = getT(newState.userLanguage);\n\n  return newState;\n}\n"]},"metadata":{},"sourceType":"module"}