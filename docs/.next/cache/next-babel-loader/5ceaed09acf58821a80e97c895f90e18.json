{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport Stepper from \"../../../../../packages/material-ui/src/Stepper\";\nimport Step from \"../../../../../packages/material-ui/src/Step\";\nimport StepButton from \"../../../../../packages/material-ui/src/StepButton\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport Typography from \"../../../../../packages/material-ui/src/Typography\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  completed: {\n    display: 'inline-block'\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nfunction getSteps() {\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Step 1: Select campaign settings...';\n\n    case 1:\n      return 'Step 2: What is an ad group anyways?';\n\n    case 2:\n      return 'Step 3: This is the bit I really care about!';\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport default function HorizontalNonLinearStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState({});\n  const steps = getSteps();\n\n  const totalSteps = () => {\n    return steps.length;\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps();\n  };\n\n  const handleNext = () => {\n    const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n    // find the first step that has been completed\n    steps.findIndex((step, i) => !(i in completed)) : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleStep = step => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setCompleted({});\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Stepper, {\n    nonLinear: true,\n    activeStep: activeStep\n  }, steps.map((label, index) => __jsx(Step, {\n    key: label\n  }, __jsx(StepButton, {\n    onClick: handleStep(index),\n    completed: completed[index]\n  }, label)))), __jsx(\"div\", null, allStepsCompleted() ? __jsx(\"div\", null, __jsx(Typography, {\n    className: classes.instructions\n  }, \"All steps completed - you're finished\"), __jsx(Button, {\n    onClick: handleReset\n  }, \"Reset\")) : __jsx(\"div\", null, __jsx(Typography, {\n    className: classes.instructions\n  }, getStepContent(activeStep)), __jsx(\"div\", null, __jsx(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.button\n  }, \"Back\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext,\n    className: classes.button\n  }, \"Next\"), activeStep !== steps.length && (completed[activeStep] ? __jsx(Typography, {\n    variant: \"caption\",\n    className: classes.completed\n  }, \"Step \", activeStep + 1, \" already completed\") : __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleComplete\n  }, completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'))))));\n}","map":null,"metadata":{},"sourceType":"module"}