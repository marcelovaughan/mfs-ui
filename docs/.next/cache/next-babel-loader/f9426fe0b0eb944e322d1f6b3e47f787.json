{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport prism from 'prismjs';\nimport 'prismjs/components/prism-css';\nimport 'prismjs/components/prism-diff';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-tsx';\nexport default function highlight(code, language) {\n  let prismLanguage;\n\n  switch (language) {\n    case 'ts':\n      prismLanguage = prism.languages.tsx;\n      break;\n\n    case 'js':\n    case 'sh':\n      prismLanguage = prism.languages.jsx;\n      break;\n\n    case 'diff':\n      prismLanguage = _objectSpread({}, prism.languages.diff); // original `/^[-<].*$/m` matches lines starting with `<` which matches\n      // <SomeComponent />\n      // we will only use `-` as the deleted marker\n\n      prismLanguage.deleted = /^[-].*$/m;\n      break;\n\n    default:\n      prismLanguage = prism.languages[language];\n      break;\n  }\n\n  if (!prismLanguage) {\n    if (language) {\n      throw new Error(`unsupported language: \"${language}\", \"${code}\"`);\n    } else {\n      prismLanguage = prism.languages.jsx;\n    }\n  }\n\n  return prism.highlight(code, prismLanguage);\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/utils/prism.js"],"names":["prism","highlight","code","language","prismLanguage","languages","tsx","jsx","diff","deleted","Error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAO,8BAAP;AACA,OAAO,+BAAP;AACA,OAAO,qCAAP;AACA,OAAO,+BAAP;AACA,OAAO,8BAAP;AACA,OAAO,iCAAP;AACA,OAAO,8BAAP;AAEA,eAAe,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,QAAzB,EAAmC;AAChD,MAAIC,aAAJ;;AACA,UAAQD,QAAR;AACE,SAAK,IAAL;AACEC,MAAAA,aAAa,GAAGJ,KAAK,CAACK,SAAN,CAAgBC,GAAhC;AACA;;AAEF,SAAK,IAAL;AACA,SAAK,IAAL;AACEF,MAAAA,aAAa,GAAGJ,KAAK,CAACK,SAAN,CAAgBE,GAAhC;AACA;;AAEF,SAAK,MAAL;AACEH,MAAAA,aAAa,qBAAQJ,KAAK,CAACK,SAAN,CAAgBG,IAAxB,CAAb,CADF,CAEE;AACA;AACA;;AACAJ,MAAAA,aAAa,CAACK,OAAd,GAAwB,UAAxB;AACA;;AAEF;AACEL,MAAAA,aAAa,GAAGJ,KAAK,CAACK,SAAN,CAAgBF,QAAhB,CAAhB;AACA;AApBJ;;AAuBA,MAAI,CAACC,aAAL,EAAoB;AAClB,QAAID,QAAJ,EAAc;AACZ,YAAM,IAAIO,KAAJ,CAAW,0BAAyBP,QAAS,OAAMD,IAAK,GAAxD,CAAN;AACD,KAFD,MAEO;AACLE,MAAAA,aAAa,GAAGJ,KAAK,CAACK,SAAN,CAAgBE,GAAhC;AACD;AACF;;AAED,SAAOP,KAAK,CAACC,SAAN,CAAgBC,IAAhB,EAAsBE,aAAtB,CAAP;AACD","sourcesContent":["import prism from 'prismjs';\nimport 'prismjs/components/prism-css';\nimport 'prismjs/components/prism-diff';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-tsx';\n\nexport default function highlight(code, language) {\n  let prismLanguage;\n  switch (language) {\n    case 'ts':\n      prismLanguage = prism.languages.tsx;\n      break;\n\n    case 'js':\n    case 'sh':\n      prismLanguage = prism.languages.jsx;\n      break;\n\n    case 'diff':\n      prismLanguage = { ...prism.languages.diff };\n      // original `/^[-<].*$/m` matches lines starting with `<` which matches\n      // <SomeComponent />\n      // we will only use `-` as the deleted marker\n      prismLanguage.deleted = /^[-].*$/m;\n      break;\n\n    default:\n      prismLanguage = prism.languages[language];\n      break;\n  }\n\n  if (!prismLanguage) {\n    if (language) {\n      throw new Error(`unsupported language: \"${language}\", \"${code}\"`);\n    } else {\n      prismLanguage = prism.languages.jsx;\n    }\n  }\n\n  return prism.highlight(code, prismLanguage);\n}\n"]},"metadata":{},"sourceType":"module"}