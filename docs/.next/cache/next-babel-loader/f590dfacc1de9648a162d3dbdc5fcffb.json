{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from \"../../../../../packages/material-ui/src/styles\";\nimport Input from \"../../../../../packages/material-ui/src/Input\";\nimport InputLabel from \"../../../../../packages/material-ui/src/InputLabel\";\nimport MenuItem from \"../../../../../packages/material-ui/src/MenuItem\";\nimport FormControl from \"../../../../../packages/material-ui/src/FormControl\";\nimport ListItemText from \"../../../../../packages/material-ui/src/ListItemText\";\nimport Select from \"../../../../../packages/material-ui/src/Select\";\nimport Checkbox from \"../../../../../packages/material-ui/src/Checkbox\";\nimport Chip from \"../../../../../packages/material-ui/src/Chip\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n      maxWidth: 300\n    },\n    chips: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    chip: {\n      margin: 2\n    },\n    noLabel: {\n      marginTop: theme.spacing(3)\n    }\n  };\n});\nvar ITEM_HEIGHT = 48;\nvar ITEM_PADDING_TOP = 8;\nvar MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\nvar names = ['Oliver Hansen', 'Van Henry', 'April Tucker', 'Ralph Hubbard', 'Omar Alexander', 'Carlos Abbott', 'Miriam Wagner', 'Bradley Wilkerson', 'Virginia Andrews', 'Kelly Snyder'];\n\nfunction getStyles(name, personName, theme) {\n  return {\n    fontWeight: personName.indexOf(name) === -1 ? theme.typography.fontWeightRegular : theme.typography.fontWeightMedium\n  };\n}\n\nvar _ref = __jsx(InputLabel, {\n  id: \"demo-multiple-name-label\"\n}, \"Name\");\n\nvar _ref2 = __jsx(Input, null);\n\nvar _ref3 = __jsx(InputLabel, {\n  id: \"demo-multiple-checkbox-label\"\n}, \"Tag\");\n\nvar _ref4 = __jsx(Input, null);\n\nvar _ref5 = __jsx(InputLabel, {\n  id: \"demo-multiple-chip-label\"\n}, \"Chip\");\n\nvar _ref6 = __jsx(Input, {\n  id: \"select-multiple-chip\"\n});\n\nvar _ref7 = __jsx(Input, null);\n\nvar _ref8 = __jsx(\"em\", null, \"Placeholder\");\n\nvar _ref9 = __jsx(MenuItem, {\n  disabled: true,\n  value: \"\"\n}, __jsx(\"em\", null, \"Placeholder\"));\n\nvar _ref10 = __jsx(InputLabel, {\n  shrink: true,\n  htmlFor: \"select-multiple-native\"\n}, \"Native\");\n\nexport default function MultipleSelect() {\n  var classes = useStyles();\n  var theme = useTheme();\n\n  var _React$useState = React.useState([]),\n      personName = _React$useState[0],\n      setPersonName = _React$useState[1];\n\n  var handleChange = function handleChange(event) {\n    setPersonName(event.target.value);\n  };\n\n  var handleChangeMultiple = function handleChangeMultiple(event) {\n    var options = event.target.options;\n    var value = [];\n\n    for (var i = 0, l = options.length; i < l; i += 1) {\n      if (options[i].selected) {\n        value.push(options[i].value);\n      }\n    }\n\n    setPersonName(value);\n  };\n\n  return __jsx(\"div\", null, __jsx(FormControl, {\n    className: classes.formControl\n  }, _ref, __jsx(Select, {\n    labelId: \"demo-multiple-name-label\",\n    id: \"demo-multiple-name\",\n    multiple: true,\n    value: personName,\n    onChange: handleChange,\n    input: _ref2,\n    MenuProps: MenuProps\n  }, names.map(function (name) {\n    return __jsx(MenuItem, {\n      key: name,\n      value: name,\n      style: getStyles(name, personName, theme)\n    }, name);\n  }))), __jsx(FormControl, {\n    className: classes.formControl\n  }, _ref3, __jsx(Select, {\n    labelId: \"demo-multiple-checkbox-label\",\n    id: \"demo-multiple-checkbox\",\n    multiple: true,\n    value: personName,\n    onChange: handleChange,\n    input: _ref4,\n    renderValue: function renderValue(selected) {\n      return selected.join(', ');\n    },\n    MenuProps: MenuProps\n  }, names.map(function (name) {\n    return __jsx(MenuItem, {\n      key: name,\n      value: name\n    }, __jsx(Checkbox, {\n      checked: personName.indexOf(name) > -1\n    }), __jsx(ListItemText, {\n      primary: name\n    }));\n  }))), __jsx(FormControl, {\n    className: classes.formControl\n  }, _ref5, __jsx(Select, {\n    labelId: \"demo-multiple-chip-label\",\n    id: \"demo-multiple-chip\",\n    multiple: true,\n    value: personName,\n    onChange: handleChange,\n    input: _ref6,\n    renderValue: function renderValue(selected) {\n      return __jsx(\"div\", {\n        className: classes.chips\n      }, selected.map(function (value) {\n        return __jsx(Chip, {\n          key: value,\n          label: value,\n          className: classes.chip\n        });\n      }));\n    },\n    MenuProps: MenuProps\n  }, names.map(function (name) {\n    return __jsx(MenuItem, {\n      key: name,\n      value: name,\n      style: getStyles(name, personName, theme)\n    }, name);\n  }))), __jsx(FormControl, {\n    className: clsx(classes.formControl, classes.noLabel)\n  }, __jsx(Select, {\n    multiple: true,\n    displayEmpty: true,\n    value: personName,\n    onChange: handleChange,\n    input: _ref7,\n    renderValue: function renderValue(selected) {\n      if (selected.length === 0) {\n        return _ref8;\n      }\n\n      return selected.join(', ');\n    },\n    MenuProps: MenuProps,\n    inputProps: {\n      'aria-label': 'Without label'\n    }\n  }, _ref9, names.map(function (name) {\n    return __jsx(MenuItem, {\n      key: name,\n      value: name,\n      style: getStyles(name, personName, theme)\n    }, name);\n  }))), __jsx(FormControl, {\n    className: classes.formControl\n  }, _ref10, __jsx(Select, {\n    multiple: true,\n    \"native\": true,\n    value: personName,\n    onChange: handleChangeMultiple,\n    inputProps: {\n      id: 'select-multiple-native'\n    }\n  }, names.map(function (name) {\n    return __jsx(\"option\", {\n      key: name,\n      value: name\n    }, name);\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}