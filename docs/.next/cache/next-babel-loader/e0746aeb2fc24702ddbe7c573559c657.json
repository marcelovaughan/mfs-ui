{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { rgbToHex, withStyles, useTheme } from \"../../../../../packages/material-ui/src/styles\";\nimport * as colors from \"../../../../../packages/material-ui/src/colors\";\nimport Grid from \"../../../../../packages/material-ui/src/Grid\";\nimport Input from \"../../../../../packages/material-ui/src/Input\";\nimport Radio from \"../../../../../packages/material-ui/src/Radio\";\nimport Tooltip from \"../../../../../packages/material-ui/src/Tooltip\";\nimport Typography from \"../../../../../packages/material-ui/src/Typography\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport CheckIcon from \"../../../../../packages/material-ui-icons/src/Check\";\nimport Slider from \"../../../../../packages/material-ui/src/Slider\";\nimport { capitalize } from \"../../../../../packages/material-ui/src/utils\";\nimport ColorDemo from \"./ColorDemo\";\nimport { DispatchContext } from \"../../../modules/components/ThemeContext\";\nconst defaults = {\n  primary: '#2196f3',\n  secondary: '#f50057'\n};\nconst hues = Object.keys(colors).slice(1, 17);\nconst shades = [900, 800, 700, 600, 500, 400, 300, 200, 100, 50, 'A700', 'A400', 'A200', 'A100'];\n\nconst styles = theme => ({\n  radio: {\n    padding: 0\n  },\n  radioIcon: {\n    width: 48,\n    height: 48\n  },\n  radioIconSelected: {\n    width: 48,\n    height: 48,\n    border: '1px solid white',\n    color: theme.palette.common.white,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  swatch: {\n    width: 192\n  },\n  sliderContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2)\n  },\n  slider: {\n    width: 'calc(100% - 80px)',\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3)\n  },\n  colorBar: {\n    marginTop: theme.spacing(2)\n  },\n  colorSquare: {\n    width: 64,\n    height: 64,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  button: {\n    marginLeft: theme.spacing(1)\n  }\n});\n\nfunction ColorTool(props) {\n  const {\n    classes\n  } = props;\n  const dispatch = React.useContext(DispatchContext);\n  const theme = useTheme();\n  const [state, setState] = React.useState({\n    primary: defaults.primary,\n    secondary: defaults.secondary,\n    primaryInput: defaults.primary,\n    secondaryInput: defaults.secondary,\n    primaryHue: 'blue',\n    secondaryHue: 'pink',\n    primaryShade: 4,\n    secondaryShade: 11\n  });\n\n  const handleChangeColor = name => event => {\n    const isRgb = string => /rgb\\([0-9]{1,3}\\s*,\\s*[0-9]{1,3}\\s*,\\s*[0-9]{1,3}\\)/i.test(string);\n\n    const isHex = string => /^#?([0-9a-f]{3})$|^#?([0-9a-f]){6}$/i.test(string);\n\n    let {\n      target: {\n        value: color\n      }\n    } = event;\n    setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      [`${name}Input`]: color\n    }));\n    let isValidColor = false;\n\n    if (isRgb(color)) {\n      isValidColor = true;\n    } else if (isHex(color)) {\n      isValidColor = true;\n\n      if (color.indexOf('#') === -1) {\n        color = `#${color}`;\n      }\n    }\n\n    if (isValidColor) {\n      setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n        [name]: color\n      }));\n    }\n  };\n\n  const handleChangeHue = name => event => {\n    const hue = event.target.value;\n    const color = colors[hue][shades[state[`${name}Shade`]]];\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      [`${name}Hue`]: hue,\n      [name]: color,\n      [`${name}Input`]: color\n    }));\n  };\n\n  const handleChangeShade = name => (event, shade) => {\n    const color = colors[state[`${name}Hue`]][shades[shade]];\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      [`${name}Shade`]: shade,\n      [name]: color,\n      [`${name}Input`]: color\n    }));\n  };\n\n  const handleChangeDocsColors = () => {\n    const paletteColors = {\n      primary: {\n        main: state.primary\n      },\n      secondary: {\n        main: state.secondary\n      }\n    };\n    dispatch({\n      type: 'CHANGE',\n      payload: {\n        paletteColors\n      }\n    });\n    document.cookie = `paletteColors=${JSON.stringify(paletteColors)};path=/;max-age=31536000`;\n  };\n\n  const handleResetDocsColors = () => {\n    dispatch({\n      type: 'RESET_COLORS'\n    });\n    document.cookie = 'paletteColors=;path=/;max-age=0';\n  };\n\n  const colorBar = color => {\n    const background = theme.palette.augmentColor({\n      main: color\n    });\n    return __jsx(Grid, {\n      container: true,\n      className: classes.colorBar\n    }, ['dark', 'main', 'light'].map(key => __jsx(\"div\", {\n      className: classes.colorSquare,\n      style: {\n        backgroundColor: background[key]\n      },\n      key: key\n    }, __jsx(Typography, {\n      variant: \"caption\",\n      style: {\n        color: theme.palette.getContrastText(background[key])\n      }\n    }, rgbToHex(background[key])))));\n  };\n\n  const colorPicker = intent => {\n    const intentInput = state[`${intent}Input`];\n    const intentShade = state[`${intent}Shade`];\n    const color = state[`${intent}`];\n    return __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 4\n    }, __jsx(Typography, {\n      component: \"label\",\n      gutterBottom: true,\n      htmlFor: intent,\n      variant: \"h6\"\n    }, capitalize(intent)), __jsx(Input, {\n      id: intent,\n      value: intentInput,\n      onChange: handleChangeColor(intent),\n      fullWidth: true\n    }), __jsx(\"div\", {\n      className: classes.sliderContainer\n    }, __jsx(Typography, {\n      id: `${intent}ShadeSliderLabel`\n    }, \"Shade:\"), __jsx(Slider, {\n      className: classes.slider,\n      value: intentShade,\n      min: 0,\n      max: 13,\n      step: 1,\n      onChange: handleChangeShade(intent),\n      \"aria-labelledby\": `${intent}ShadeSliderLabel`\n    }), __jsx(Typography, null, shades[intentShade])), __jsx(\"div\", {\n      className: classes.swatch\n    }, hues.map(hue => {\n      const shade = intent === 'primary' ? shades[state.primaryShade] : shades[state.secondaryShade];\n      const backgroundColor = colors[hue][shade];\n      return __jsx(Tooltip, {\n        placement: \"right\",\n        title: hue,\n        key: hue\n      }, __jsx(Radio, {\n        className: classes.radio,\n        color: \"default\",\n        checked: state[intent] === backgroundColor,\n        onChange: handleChangeHue(intent),\n        value: hue,\n        name: intent,\n        \"aria-labelledby\": `tooltip-${intent}-${hue}`,\n        icon: __jsx(\"div\", {\n          className: classes.radioIcon,\n          style: {\n            backgroundColor\n          }\n        }),\n        checkedIcon: __jsx(\"div\", {\n          className: classes.radioIconSelected,\n          style: {\n            backgroundColor\n          }\n        }, __jsx(CheckIcon, {\n          style: {\n            fontSize: 30\n          }\n        }))\n      }));\n    })), colorBar(color));\n  };\n\n  return __jsx(Grid, {\n    container: true,\n    spacing: 5,\n    className: classes.root\n  }, colorPicker('primary'), colorPicker('secondary'), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    md: 4\n  }, __jsx(ColorDemo, {\n    data: state\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleChangeDocsColors\n  }, \"Set Docs Colors\"), __jsx(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    onClick: handleResetDocsColors,\n    className: classes.button\n  }, \"Reset Docs Colors\")));\n}\n\nexport default withStyles(styles)(ColorTool);","map":null,"metadata":{},"sourceType":"module"}