{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { ACTION_TYPES, CODE_VARIANTS } from \"../constants\";\nimport memoize from \"../../../../packages/material-ui-system/src/memoize\";\nimport mapTranslations from \"../utils/mapTranslations\";\n\nvar req = require.context(\"../../../translations\", false, /translations.*\\.json$/);\n\nvar translations = mapTranslations(req, 'json');\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce(function (acc, item) {\n    return acc && acc[item] ? acc[item] : null;\n  }, obj);\n}\n\nvar warnOnce = {};\nvar getT = memoize(function (userLanguage) {\n  return function (key) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$ignoreWarnin = options.ignoreWarning,\n        ignoreWarning = _options$ignoreWarnin === void 0 ? false : _options$ignoreWarnin;\n    var wordings = translations[userLanguage];\n\n    if (!wordings) {\n      console.error(\"Missing language: \".concat(userLanguage, \".\"));\n      return '…';\n    }\n\n    var translation = getPath(wordings, key);\n\n    if (!translation) {\n      var fullKey = \"\".concat(userLanguage, \":\").concat(key); // No warnings in CI env\n\n      if (!ignoreWarning && !warnOnce[fullKey] && true) {\n        console.error(\"Missing translation for \".concat(fullKey, \".\"));\n        warnOnce[fullKey] = true;\n      }\n\n      return getPath(translations.en, key);\n    }\n\n    return translation;\n  };\n});\n\nvar mapping = _defineProperty({}, ACTION_TYPES.OPTIONS_CHANGE, function (state, action) {\n  var newState = {\n    codeVariant: action.payload.codeVariant || state.codeVariant,\n    userLanguage: action.payload.userLanguage || state.userLanguage\n  };\n  return newState;\n});\n\nexport default function optionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var newState = _objectSpread({}, state);\n\n  if (!newState.codeVariant) {\n    newState.codeVariant = CODE_VARIANTS.JS;\n  }\n\n  if (!newState.userLanguage) {\n    newState.userLanguage = 'en';\n  }\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  newState.t = getT(newState.userLanguage);\n  return newState;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/redux/optionsReducer.js"],"names":["ACTION_TYPES","CODE_VARIANTS","memoize","mapTranslations","req","require","context","translations","getPath","obj","path","split","reduce","acc","item","warnOnce","getT","userLanguage","key","options","ignoreWarning","wordings","console","error","translation","fullKey","en","mapping","OPTIONS_CHANGE","state","action","newState","codeVariant","payload","optionsReducer","JS","type","t"],"mappings":"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","sourcesContent":["import { ACTION_TYPES, CODE_VARIANTS } from 'docs/src/modules/constants';\nimport memoize from '@material-ui/system/memoize';\nimport mapTranslations from 'docs/src/modules/utils/mapTranslations';\n\nconst req = require.context('docs/translations', false, /translations.*\\.json$/);\nconst translations = mapTranslations(req, 'json');\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce((acc, item) => (acc && acc[item] ? acc[item] : null), obj);\n}\n\nconst warnOnce = {};\n\nconst getT = memoize((userLanguage) => (key, options = {}) => {\n  const { ignoreWarning = false } = options;\n  const wordings = translations[userLanguage];\n\n  if (!wordings) {\n    console.error(`Missing language: ${userLanguage}.`);\n    return '…';\n  }\n\n  const translation = getPath(wordings, key);\n\n  if (!translation) {\n    const fullKey = `${userLanguage}:${key}`;\n    // No warnings in CI env\n    if (!ignoreWarning && !warnOnce[fullKey] && typeof window !== 'undefined') {\n      console.error(`Missing translation for ${fullKey}.`);\n      warnOnce[fullKey] = true;\n    }\n    return getPath(translations.en, key);\n  }\n\n  return translation;\n});\n\nconst mapping = {\n  [ACTION_TYPES.OPTIONS_CHANGE]: (state, action) => {\n    const newState = {\n      codeVariant: action.payload.codeVariant || state.codeVariant,\n      userLanguage: action.payload.userLanguage || state.userLanguage,\n    };\n    return newState;\n  },\n};\n\nexport default function optionsReducer(state = {}, action) {\n  let newState = { ...state };\n\n  if (!newState.codeVariant) {\n    newState.codeVariant = CODE_VARIANTS.JS;\n  }\n  if (!newState.userLanguage) {\n    newState.userLanguage = 'en';\n  }\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  newState.t = getT(newState.userLanguage);\n\n  return newState;\n}\n"]},"metadata":{},"sourceType":"module"}