{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport { deepmerge } from \"../../../material-ui-utils/src\";\nimport noopTheme from \"./noopTheme\";\nexport default function getStylesCreator(stylesOrCreator) {\n  var themingEnabled = typeof stylesOrCreator === 'function';\n\n  if (true) {\n    if (typeof stylesOrCreator !== 'object' && !themingEnabled) {\n      console.error(['Material-UI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\\n'));\n    }\n  }\n\n  return {\n    create: function create(theme, name) {\n      var styles;\n\n      try {\n        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;\n      } catch (err) {\n        if (true) {\n          if (themingEnabled === true && theme === noopTheme) {\n            // TODO: prepend error message/name instead\n            console.error(['Material-UI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n          }\n        }\n\n        throw err;\n      }\n\n      if (!name || !theme.overrides || !theme.overrides[name]) {\n        return styles;\n      }\n\n      var overrides = theme.overrides[name];\n\n      var stylesWithOverrides = _objectSpread({}, styles);\n\n      _Object$keys(overrides).forEach(function (key) {\n        if (true) {\n          if (!stylesWithOverrides[key]) {\n            console.warn(['Material-UI: You are trying to override a style that does not exist.', \"Fix the `\".concat(key, \"` key of `theme.overrides.\").concat(name, \"`.\")].join('\\n'));\n          }\n        }\n\n        stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key], overrides[key]);\n      });\n\n      return stylesWithOverrides;\n    },\n    options: {}\n  };\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-styles/src/getStylesCreator/getStylesCreator.js"],"names":["deepmerge","noopTheme","getStylesCreator","stylesOrCreator","themingEnabled","console","error","join","create","theme","name","styles","err","overrides","stylesWithOverrides","forEach","key","warn","options"],"mappings":";;AAAA,SAASA,SAAT;AACA,OAAOC,SAAP;AAEA,eAAe,SAASC,gBAAT,CAA0BC,eAA1B,EAA2C;AACxD,MAAMC,cAAc,GAAG,OAAOD,eAAP,KAA2B,UAAlD;;AAEA,YAA2C;AACzC,QAAI,OAAOA,eAAP,KAA2B,QAA3B,IAAuC,CAACC,cAA5C,EAA4D;AAC1DC,MAAAA,OAAO,CAACC,KAAR,CACE,CACE,yDADF,EAEE,0EAFF,EAGEC,IAHF,CAGO,IAHP,CADF;AAMD;AACF;;AAED,SAAO;AACLC,IAAAA,MAAM,EAAE,gBAACC,KAAD,EAAQC,IAAR,EAAiB;AACvB,UAAIC,MAAJ;;AACA,UAAI;AACFA,QAAAA,MAAM,GAAGP,cAAc,GAAGD,eAAe,CAACM,KAAD,CAAlB,GAA4BN,eAAnD;AACD,OAFD,CAEE,OAAOS,GAAP,EAAY;AACZ,kBAA2C;AACzC,cAAIR,cAAc,KAAK,IAAnB,IAA2BK,KAAK,KAAKR,SAAzC,EAAoD;AAClD;AACAI,YAAAA,OAAO,CAACC,KAAR,CACE,CACE,yDADF,EAEE,8DAFF,EAGE,0DAHF,EAIEC,IAJF,CAIO,IAJP,CADF;AAOD;AACF;;AACD,cAAMK,GAAN;AACD;;AAED,UAAI,CAACF,IAAD,IAAS,CAACD,KAAK,CAACI,SAAhB,IAA6B,CAACJ,KAAK,CAACI,SAAN,CAAgBH,IAAhB,CAAlC,EAAyD;AACvD,eAAOC,MAAP;AACD;;AAED,UAAME,SAAS,GAAGJ,KAAK,CAACI,SAAN,CAAgBH,IAAhB,CAAlB;;AACA,UAAMI,mBAAmB,qBAAQH,MAAR,CAAzB;;AAEA,mBAAYE,SAAZ,EAAuBE,OAAvB,CAA+B,UAACC,GAAD,EAAS;AACtC,kBAA2C;AACzC,cAAI,CAACF,mBAAmB,CAACE,GAAD,CAAxB,EAA+B;AAC7BX,YAAAA,OAAO,CAACY,IAAR,CACE,CACE,sEADF,qBAEeD,GAFf,uCAEiDN,IAFjD,SAGEH,IAHF,CAGO,IAHP,CADF;AAMD;AACF;;AAEDO,QAAAA,mBAAmB,CAACE,GAAD,CAAnB,GAA2BhB,SAAS,CAACc,mBAAmB,CAACE,GAAD,CAApB,EAA2BH,SAAS,CAACG,GAAD,CAApC,CAApC;AACD,OAbD;;AAeA,aAAOF,mBAAP;AACD,KA5CI;AA6CLI,IAAAA,OAAO,EAAE;AA7CJ,GAAP;AA+CD","sourcesContent":["import { deepmerge } from '@material-ui/utils';\nimport noopTheme from './noopTheme';\n\nexport default function getStylesCreator(stylesOrCreator) {\n  const themingEnabled = typeof stylesOrCreator === 'function';\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof stylesOrCreator !== 'object' && !themingEnabled) {\n      console.error(\n        [\n          'Material-UI: The `styles` argument provided is invalid.',\n          'You need to provide a function generating the styles or a styles object.',\n        ].join('\\n'),\n      );\n    }\n  }\n\n  return {\n    create: (theme, name) => {\n      let styles;\n      try {\n        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;\n      } catch (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (themingEnabled === true && theme === noopTheme) {\n            // TODO: prepend error message/name instead\n            console.error(\n              [\n                'Material-UI: The `styles` argument provided is invalid.',\n                'You are providing a function without a theme in the context.',\n                'One of the parent elements needs to use a ThemeProvider.',\n              ].join('\\n'),\n            );\n          }\n        }\n        throw err;\n      }\n\n      if (!name || !theme.overrides || !theme.overrides[name]) {\n        return styles;\n      }\n\n      const overrides = theme.overrides[name];\n      const stylesWithOverrides = { ...styles };\n\n      Object.keys(overrides).forEach((key) => {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!stylesWithOverrides[key]) {\n            console.warn(\n              [\n                'Material-UI: You are trying to override a style that does not exist.',\n                `Fix the \\`${key}\\` key of \\`theme.overrides.${name}\\`.`,\n              ].join('\\n'),\n            );\n          }\n        }\n\n        stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key], overrides[key]);\n      });\n\n      return stylesWithOverrides;\n    },\n    options: {},\n  };\n}\n"]},"metadata":{},"sourceType":"module"}