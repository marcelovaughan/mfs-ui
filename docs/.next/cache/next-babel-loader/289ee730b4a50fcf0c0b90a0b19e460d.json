{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/SwipeableDrawer/SwipeableDrawer.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport { elementTypeAcceptingRef } from \"../../../material-ui-utils/src\";\nimport { getThemeProps } from \"../../../material-ui-styles/src\";\nimport Drawer, { getAnchor, isHorizontal } from \"../Drawer/Drawer\";\nimport ownerDocument from \"../utils/ownerDocument\";\nimport useEventCallback from \"../utils/useEventCallback\";\nimport { duration } from \"../styles/transitions\";\nimport useTheme from \"../styles/useTheme\";\nimport { getTransitionProps } from \"../transitions/utils\";\nimport NoSsr from \"../NoSsr\";\nimport SwipeArea from \"./SwipeArea\"; // This value is closed to what browsers are using internally to\n// trigger a native scroll.\n\nvar UNCERTAINTY_THRESHOLD = 3; // px\n// We can only have one node at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\n\nvar nodeThatClaimedTheSwipe = null; // Exported for test purposes.\n\nexport function reset() {\n  nodeThatClaimedTheSwipe = null;\n}\n\nfunction calculateCurrentX(anchor, touches) {\n  return anchor === 'right' ? document.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\n\nfunction calculateCurrentY(anchor, touches) {\n  return anchor === 'bottom' ? window.innerHeight - touches[0].clientY : touches[0].clientY;\n}\n\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\n\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  var domTreeShapes = [];\n\n  while (element && element !== rootNode) {\n    var style = window.getComputedStyle(element);\n\n    if ( // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {\n      domTreeShapes = [];\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n\n    element = element.parentElement;\n  }\n\n  return domTreeShapes;\n}\n\nfunction findNativeHandler(_ref) {\n  var domTreeShapes = _ref.domTreeShapes,\n      start = _ref.start,\n      current = _ref.current,\n      anchor = _ref.anchor;\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  var axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(function (shape) {\n    // Determine if we are going backward or forward.\n    var goingForward = current >= start;\n\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n\n    var axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    var scrollPosition = shape[axisProperties.scrollPosition[axis]];\n    var areNotAtStart = scrollPosition > 0;\n    var areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return shape;\n    }\n\n    return null;\n  });\n}\n\nvar iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nvar transitionDurationDefault = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\nvar useEnhancedEffect = true ? React.useLayoutEffect : React.useEffect;\nvar SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  var theme = useTheme();\n  var props = getThemeProps({\n    name: 'MuiSwipeableDrawer',\n    props: _objectSpread({}, inProps),\n    theme: theme\n  });\n  var _props$anchor = props.anchor,\n      anchor = _props$anchor === void 0 ? 'left' : _props$anchor,\n      _props$disableBackdro = props.disableBackdropTransition,\n      disableBackdropTransition = _props$disableBackdro === void 0 ? false : _props$disableBackdro,\n      _props$disableDiscove = props.disableDiscovery,\n      disableDiscovery = _props$disableDiscove === void 0 ? false : _props$disableDiscove,\n      _props$disableSwipeTo = props.disableSwipeToOpen,\n      disableSwipeToOpen = _props$disableSwipeTo === void 0 ? iOS : _props$disableSwipeTo,\n      hideBackdrop = props.hideBackdrop,\n      _props$hysteresis = props.hysteresis,\n      hysteresis = _props$hysteresis === void 0 ? 0.52 : _props$hysteresis,\n      _props$minFlingVeloci = props.minFlingVelocity,\n      minFlingVelocity = _props$minFlingVeloci === void 0 ? 450 : _props$minFlingVeloci,\n      _props$ModalProps = props.ModalProps;\n  _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;\n\n  var BackdropProps = _props$ModalProps.BackdropProps,\n      ModalPropsProp = _objectWithoutProperties(_props$ModalProps, [\"BackdropProps\"]),\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      _props$PaperProps = props.PaperProps,\n      PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,\n      SwipeAreaProps = props.SwipeAreaProps,\n      _props$swipeAreaWidth = props.swipeAreaWidth,\n      swipeAreaWidth = _props$swipeAreaWidth === void 0 ? 20 : _props$swipeAreaWidth,\n      _props$transitionDura = props.transitionDuration,\n      transitionDuration = _props$transitionDura === void 0 ? transitionDurationDefault : _props$transitionDura,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'temporary' : _props$variant,\n      other = _objectWithoutProperties(props, [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\"]);\n\n  var _React$useState = React.useState(false),\n      maybeSwiping = _React$useState[0],\n      setMaybeSwiping = _React$useState[1];\n\n  var swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  var swipeAreaRef = React.useRef();\n  var backdropRef = React.useRef();\n  var paperRef = React.useRef();\n  var touchDetected = React.useRef(false); // Ref for transition duration based on / to match swipe speed\n\n  var calculatedDurationRef = React.useRef(); // Use a ref so the open value used is always up to date inside useCallback.\n\n  useEnhancedEffect(function () {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  var setPosition = React.useCallback(function (translate) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$mode = options.mode,\n        mode = _options$mode === void 0 ? null : _options$mode,\n        _options$changeTransi = options.changeTransition,\n        changeTransition = _options$changeTransi === void 0 ? true : _options$changeTransi;\n    var anchorRtl = getAnchor(theme, anchor);\n    var rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n    var horizontalSwipe = isHorizontal(anchor);\n    var transform = horizontalSwipe ? \"translate(\".concat(rtlTranslateMultiplier * translate, \"px, 0)\") : \"translate(0, \".concat(rtlTranslateMultiplier * translate, \"px)\");\n    var drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    var transition = '';\n\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        timeout: transitionDuration\n      }, {\n        mode: mode\n      }));\n    }\n\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n\n    if (!disableBackdropTransition && !hideBackdrop) {\n      var backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  var handleBodyTouchEnd = useEventCallback(function (event) {\n    if (!touchDetected.current) {\n      return;\n    }\n\n    nodeThatClaimedTheSwipe = null;\n    touchDetected.current = false;\n    setMaybeSwiping(false); // The swipe wasn't started.\n\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n\n    swipeInstance.current.isSwiping = null;\n    var anchorRtl = getAnchor(theme, anchor);\n    var horizontal = isHorizontal(anchor);\n    var current;\n\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, event.changedTouches);\n    } else {\n      current = calculateCurrentY(anchorRtl, event.changedTouches);\n    }\n\n    var startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    var maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    var currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    var translateRatio = currentTranslate / maxTranslate;\n\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n\n      return;\n    }\n\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  var handleBodyTouchMove = useEventCallback(function (event) {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n\n\n    if (nodeThatClaimedTheSwipe != null && nodeThatClaimedTheSwipe !== swipeInstance.current) {\n      return;\n    }\n\n    var anchorRtl = getAnchor(theme, anchor);\n    var horizontalSwipe = isHorizontal(anchor);\n    var currentX = calculateCurrentX(anchorRtl, event.touches);\n    var currentY = calculateCurrentY(anchorRtl, event.touches);\n\n    if (open && paperRef.current.contains(event.target) && nodeThatClaimedTheSwipe == null) {\n      var domTreeShapes = getDomTreeShapes(event.target, paperRef.current);\n      var nativeHandler = findNativeHandler({\n        domTreeShapes: domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor: anchor\n      });\n\n      if (nativeHandler) {\n        nodeThatClaimedTheSwipe = nativeHandler;\n        return;\n      }\n\n      nodeThatClaimedTheSwipe = swipeInstance.current;\n    } // We don't know yet.\n\n\n    if (swipeInstance.current.isSwiping == null) {\n      var dx = Math.abs(currentX - swipeInstance.current.startX);\n      var dy = Math.abs(currentY - swipeInstance.current.startY); // We are likely to be swiping, let's prevent the scroll event on iOS.\n\n      if (dx > dy) {\n        if (event.cancelable) {\n          event.preventDefault();\n        }\n      }\n\n      var definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(event);\n          return;\n        } // Shift the starting point.\n\n\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.\n\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= swipeAreaWidth;\n          } else {\n            swipeInstance.current.startY -= swipeAreaWidth;\n          }\n        }\n      }\n    }\n\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n\n    var maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    var startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n\n    var translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        var paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n\n    var velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.\n\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    setPosition(translate);\n  });\n  var handleBodyTouchStart = useEventCallback(function (event) {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (event.defaultPrevented) {\n      return;\n    } // We can only have one node at the time claiming ownership for handling the swipe.\n\n\n    if (event.muiHandled) {\n      return;\n    } // At least one element clogs the drawer interaction zone.\n\n\n    if (open && !backdropRef.current.contains(event.target) && !paperRef.current.contains(event.target)) {\n      return;\n    }\n\n    var anchorRtl = getAnchor(theme, anchor);\n    var horizontalSwipe = isHorizontal(anchor);\n    var currentX = calculateCurrentX(anchorRtl, event.touches);\n    var currentY = calculateCurrentY(anchorRtl, event.touches);\n\n    if (!open) {\n      if (disableSwipeToOpen || event.target !== swipeAreaRef.current) {\n        return;\n      }\n\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n\n    event.muiHandled = true;\n    nodeThatClaimedTheSwipe = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    setMaybeSwiping(true);\n\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 20 : -swipeAreaWidth), {\n        changeTransition: false\n      });\n    }\n\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n    touchDetected.current = true;\n  });\n  React.useEffect(function () {\n    if (variant === 'temporary') {\n      var doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart);\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: false\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return function () {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: false\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n\n    return undefined;\n  }, [variant, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(function () {\n    return function () {\n      // We need to release the lock.\n      if (nodeThatClaimedTheSwipe === swipeInstance.current) {\n        nodeThatClaimedTheSwipe = null;\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  var handleBackdropRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    backdropRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 5\n    }\n  }, __jsx(Drawer, _extends({\n    open: variant === 'temporary' && maybeSwiping ? true : open,\n    variant: variant,\n    ModalProps: _objectSpread({\n      BackdropProps: _objectSpread(_objectSpread({}, BackdropProps), {}, {\n        ref: handleBackdropRef\n      })\n    }, ModalPropsProp),\n    PaperProps: _objectSpread(_objectSpread({}, PaperProps), {}, {\n      style: _objectSpread({\n        pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n      }, PaperProps.style),\n      ref: paperRef\n    }),\n    anchor: anchor,\n    transitionDuration: calculatedDurationRef.current || transitionDuration,\n    onClose: onClose,\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }\n  })), !disableSwipeToOpen && variant === 'temporary' && __jsx(NoSsr, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 9\n    }\n  }, __jsx(SwipeArea, _extends({\n    anchor: anchor,\n    ref: swipeAreaRef,\n    width: swipeAreaWidth\n  }, SwipeAreaProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 11\n    }\n  }))));\n});\nSwipeableDrawer.propTypes = {\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['left', 'top', 'right', 'bottom']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   */\n  disableBackdropTransition: PropTypes.bool,\n\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   */\n  disableDiscovery: PropTypes.bool,\n\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   */\n  disableSwipeToOpen: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Affects how far the drawer must be opened/closed to change his state.\n   * Specified as percent (0-1) of the width of the drawer\n   */\n  hysteresis: PropTypes.number,\n\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   */\n  minFlingVelocity: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes.shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, the drawer is open.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n\n  /**\n   * The width of the left most (or right most) area in pixels where the\n   * drawer can be swiped open from.\n   */\n  swipeAreaWidth: PropTypes.number,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n};\nexport default SwipeableDrawer;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/SwipeableDrawer/SwipeableDrawer.js"],"names":["React","PropTypes","ReactDOM","elementTypeAcceptingRef","getThemeProps","Drawer","getAnchor","isHorizontal","ownerDocument","useEventCallback","duration","useTheme","getTransitionProps","NoSsr","SwipeArea","UNCERTAINTY_THRESHOLD","nodeThatClaimedTheSwipe","reset","calculateCurrentX","anchor","touches","document","body","offsetWidth","pageX","calculateCurrentY","window","innerHeight","clientY","getMaxTranslate","horizontalSwipe","paperInstance","clientWidth","clientHeight","getTranslate","currentTranslate","startLocation","open","maxTranslate","Math","min","max","getDomTreeShapes","element","rootNode","domTreeShapes","style","getComputedStyle","getPropertyValue","scrollWidth","scrollHeight","push","parentElement","findNativeHandler","start","current","axisProperties","scrollPosition","x","y","scrollLength","clientLength","some","shape","goingForward","axis","areNotAtStart","areNotAtEnd","iOS","navigator","test","userAgent","transitionDurationDefault","enter","enteringScreen","exit","leavingScreen","useEnhancedEffect","useLayoutEffect","useEffect","SwipeableDrawer","forwardRef","inProps","ref","theme","props","name","disableBackdropTransition","disableDiscovery","disableSwipeToOpen","hideBackdrop","hysteresis","minFlingVelocity","ModalProps","BackdropProps","ModalPropsProp","onClose","onOpen","PaperProps","SwipeAreaProps","swipeAreaWidth","transitionDuration","variant","other","useState","maybeSwiping","setMaybeSwiping","swipeInstance","useRef","isSwiping","swipeAreaRef","backdropRef","paperRef","touchDetected","calculatedDurationRef","setPosition","useCallback","translate","options","mode","changeTransition","anchorRtl","rtlTranslateMultiplier","indexOf","transform","drawerStyle","webkitTransform","transition","transitions","create","timeout","webkitTransition","backdropStyle","opacity","handleBodyTouchEnd","event","horizontal","changedTouches","startX","startY","translateRatio","abs","velocity","handleBodyTouchMove","currentX","currentY","contains","target","nativeHandler","dx","dy","cancelable","preventDefault","definitelySwiping","paperHit","lastTranslate","lastTime","performance","now","handleBodyTouchStart","defaultPrevented","muiHandled","doc","addEventListener","passive","removeEventListener","undefined","handleBackdropRef","instance","findDOMNode","pointerEvents","propTypes","oneOf","children","node","bool","number","component","func","isRequired","object","oneOfType"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport { getThemeProps } from '@material-ui/styles';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport ownerDocument from '../utils/ownerDocument';\nimport useEventCallback from '../utils/useEventCallback';\nimport { duration } from '../styles/transitions';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport NoSsr from '../NoSsr';\nimport SwipeArea from './SwipeArea';\n\n// This value is closed to what browsers are using internally to\n// trigger a native scroll.\nconst UNCERTAINTY_THRESHOLD = 3; // px\n\n// We can only have one node at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\nlet nodeThatClaimedTheSwipe = null;\n\n// Exported for test purposes.\nexport function reset() {\n  nodeThatClaimedTheSwipe = null;\n}\n\nfunction calculateCurrentX(anchor, touches) {\n  return anchor === 'right' ? document.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\n\nfunction calculateCurrentY(anchor, touches) {\n  return anchor === 'bottom' ? window.innerHeight - touches[0].clientY : touches[0].clientY;\n}\n\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\n\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(\n    Math.max(\n      open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate,\n      0,\n    ),\n    maxTranslate,\n  );\n}\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  let domTreeShapes = [];\n\n  while (element && element !== rootNode) {\n    const style = window.getComputedStyle(element);\n\n    if (\n      // Ignore the scroll children if the element is absolute positioned.\n      style.getPropertyValue('position') === 'absolute' ||\n      // Ignore the scroll children if the element has an overflowX hidden\n      style.getPropertyValue('overflow-x') === 'hidden'\n    ) {\n      domTreeShapes = [];\n    } else if (\n      (element.clientWidth > 0 && element.scrollWidth > element.clientWidth) ||\n      (element.clientHeight > 0 && element.scrollHeight > element.clientHeight)\n    ) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n\n    element = element.parentElement;\n  }\n\n  return domTreeShapes;\n}\n\nfunction findNativeHandler({ domTreeShapes, start, current, anchor }) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop',\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight',\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight',\n    },\n  };\n\n  return domTreeShapes.some((shape) => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = shape[axisProperties.scrollPosition[axis]];\n\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd =\n      scrollPosition + shape[axisProperties.clientLength[axis]] <\n      shape[axisProperties.scrollLength[axis]];\n\n    if ((goingForward && areNotAtEnd) || (!goingForward && areNotAtStart)) {\n      return shape;\n    }\n\n    return null;\n  });\n}\n\nconst iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst transitionDurationDefault = { enter: duration.enteringScreen, exit: duration.leavingScreen };\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\nconst SwipeableDrawer = React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  const theme = useTheme();\n  const props = getThemeProps({ name: 'MuiSwipeableDrawer', props: { ...inProps }, theme });\n  const {\n    anchor = 'left',\n    disableBackdropTransition = false,\n    disableDiscovery = false,\n    disableSwipeToOpen = iOS,\n    hideBackdrop,\n    hysteresis = 0.52,\n    minFlingVelocity = 450,\n    ModalProps: { BackdropProps, ...ModalPropsProp } = {},\n    onClose,\n    onOpen,\n    open,\n    PaperProps = {},\n    SwipeAreaProps,\n    swipeAreaWidth = 20,\n    transitionDuration = transitionDurationDefault,\n    variant = 'temporary', // Mobile first.\n    ...other\n  } = props;\n\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null,\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n\n  const touchDetected = React.useRef(false);\n\n  // Ref for transition duration based on / to match swipe speed\n  const calculatedDurationRef = React.useRef();\n\n  // Use a ref so the open value used is always up to date inside useCallback.\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n\n  const setPosition = React.useCallback(\n    (translate, options = {}) => {\n      const { mode = null, changeTransition = true } = options;\n\n      const anchorRtl = getAnchor(theme, anchor);\n      const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n      const horizontalSwipe = isHorizontal(anchor);\n\n      const transform = horizontalSwipe\n        ? `translate(${rtlTranslateMultiplier * translate}px, 0)`\n        : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n      const drawerStyle = paperRef.current.style;\n      drawerStyle.webkitTransform = transform;\n      drawerStyle.transform = transform;\n\n      let transition = '';\n\n      if (mode) {\n        transition = theme.transitions.create(\n          'all',\n          getTransitionProps(\n            {\n              timeout: transitionDuration,\n            },\n            {\n              mode,\n            },\n          ),\n        );\n      }\n\n      if (changeTransition) {\n        drawerStyle.webkitTransition = transition;\n        drawerStyle.transition = transition;\n      }\n\n      if (!disableBackdropTransition && !hideBackdrop) {\n        const backdropStyle = backdropRef.current.style;\n        backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n\n        if (changeTransition) {\n          backdropStyle.webkitTransition = transition;\n          backdropStyle.transition = transition;\n        }\n      }\n    },\n    [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration],\n  );\n\n  const handleBodyTouchEnd = useEventCallback((event) => {\n    if (!touchDetected.current) {\n      return;\n    }\n    nodeThatClaimedTheSwipe = null;\n    touchDetected.current = false;\n    setMaybeSwiping(false);\n\n    // The swipe wasn't started.\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n\n    swipeInstance.current.isSwiping = null;\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, event.changedTouches);\n    } else {\n      current = calculateCurrentY(anchorRtl, event.changedTouches);\n    }\n\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current =\n        Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit',\n        });\n      }\n\n      return;\n    }\n\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter',\n      });\n    }\n  });\n\n  const handleBodyTouchMove = useEventCallback((event) => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    }\n\n    // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n    if (nodeThatClaimedTheSwipe != null && nodeThatClaimedTheSwipe !== swipeInstance.current) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n\n    const currentX = calculateCurrentX(anchorRtl, event.touches);\n    const currentY = calculateCurrentY(anchorRtl, event.touches);\n\n    if (open && paperRef.current.contains(event.target) && nodeThatClaimedTheSwipe == null) {\n      const domTreeShapes = getDomTreeShapes(event.target, paperRef.current);\n      const nativeHandler = findNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor,\n      });\n      if (nativeHandler) {\n        nodeThatClaimedTheSwipe = nativeHandler;\n        return;\n      }\n      nodeThatClaimedTheSwipe = swipeInstance.current;\n    }\n\n    // We don't know yet.\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY);\n\n      // We are likely to be swiping, let's prevent the scroll event on iOS.\n      if (dx > dy) {\n        if (event.cancelable) {\n          event.preventDefault();\n        }\n      }\n\n      const definitelySwiping = horizontalSwipe\n        ? dx > dy && dx > UNCERTAINTY_THRESHOLD\n        : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n\n      if (\n        definitelySwiping === true ||\n        (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)\n      ) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(event);\n          return;\n        }\n\n        // Shift the starting point.\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n\n        // Compensate for the part of the drawer displayed on touch start.\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= swipeAreaWidth;\n          } else {\n            swipeInstance.current.startY -= swipeAreaWidth;\n          }\n        }\n      }\n    }\n\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe\n      ? swipeInstance.current.startX\n      : swipeInstance.current.startY;\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n\n    const translate = getTranslate(\n      horizontalSwipe ? currentX : currentY,\n      startLocation,\n      open,\n      maxTranslate,\n    );\n\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n\n    const velocity =\n      ((translate - swipeInstance.current.lastTranslate) /\n        (performance.now() - swipeInstance.current.lastTime)) *\n      1e3;\n\n    // Low Pass filter.\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now();\n\n    // We are swiping, let's prevent the scroll event on iOS.\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    setPosition(translate);\n  });\n\n  const handleBodyTouchStart = useEventCallback((event) => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // We can only have one node at the time claiming ownership for handling the swipe.\n    if (event.muiHandled) {\n      return;\n    }\n\n    // At least one element clogs the drawer interaction zone.\n    if (\n      open &&\n      !backdropRef.current.contains(event.target) &&\n      !paperRef.current.contains(event.target)\n    ) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n\n    const currentX = calculateCurrentX(anchorRtl, event.touches);\n    const currentY = calculateCurrentY(anchorRtl, event.touches);\n\n    if (!open) {\n      if (disableSwipeToOpen || event.target !== swipeAreaRef.current) {\n        return;\n      }\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n\n    event.muiHandled = true;\n    nodeThatClaimedTheSwipe = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n\n    setMaybeSwiping(true);\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(\n        getMaxTranslate(horizontalSwipe, paperRef.current) +\n          (disableDiscovery ? 20 : -swipeAreaWidth),\n        {\n          changeTransition: false,\n        },\n      );\n    }\n\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n\n    touchDetected.current = true;\n  });\n\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      const doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart);\n      doc.addEventListener('touchmove', handleBodyTouchMove, { passive: false });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n\n      return () => {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, { passive: false });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n\n    return undefined;\n  }, [variant, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n\n  React.useEffect(\n    () => () => {\n      // We need to release the lock.\n      if (nodeThatClaimedTheSwipe === swipeInstance.current) {\n        nodeThatClaimedTheSwipe = null;\n      }\n    },\n    [],\n  );\n\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n\n  const handleBackdropRef = React.useCallback((instance) => {\n    // #StrictMode ready\n    backdropRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Drawer\n        open={variant === 'temporary' && maybeSwiping ? true : open}\n        variant={variant}\n        ModalProps={{\n          BackdropProps: {\n            ...BackdropProps,\n            ref: handleBackdropRef,\n          },\n          ...ModalPropsProp,\n        }}\n        PaperProps={{\n          ...PaperProps,\n          style: {\n            pointerEvents: variant === 'temporary' && !open ? 'none' : '',\n            ...PaperProps.style,\n          },\n          ref: paperRef,\n        }}\n        anchor={anchor}\n        transitionDuration={calculatedDurationRef.current || transitionDuration}\n        onClose={onClose}\n        ref={ref}\n        {...other}\n      />\n      {!disableSwipeToOpen && variant === 'temporary' && (\n        <NoSsr>\n          <SwipeArea\n            anchor={anchor}\n            ref={swipeAreaRef}\n            width={swipeAreaWidth}\n            {...SwipeAreaProps}\n          />\n        </NoSsr>\n      )}\n    </React.Fragment>\n  );\n});\n\nSwipeableDrawer.propTypes = {\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['left', 'top', 'right', 'bottom']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   */\n  disableBackdropTransition: PropTypes.bool,\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   */\n  disableDiscovery: PropTypes.bool,\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   */\n  disableSwipeToOpen: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n  /**\n   * Affects how far the drawer must be opened/closed to change his state.\n   * Specified as percent (0-1) of the width of the drawer\n   */\n  hysteresis: PropTypes.number,\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   */\n  minFlingVelocity: PropTypes.number,\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes.shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef,\n    }),\n  }),\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n  /**\n   * If `true`, the drawer is open.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object,\n  }),\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n  /**\n   * The width of the left most (or right most) area in pixels where the\n   * drawer can be swiped open from.\n   */\n  swipeAreaWidth: PropTypes.number,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n  ]),\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary']),\n};\n\nexport default SwipeableDrawer;\n"]},"metadata":{},"sourceType":"module"}