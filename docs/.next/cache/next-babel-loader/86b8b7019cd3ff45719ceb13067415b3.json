{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport TextField from \"../../../../../packages/material-ui/src/TextField\";\nimport Autocomplete from \"../../../../../packages/material-ui-lab/src/Autocomplete\";\nimport LocationOnIcon from \"../../../../../packages/material-ui-icons/src/LocationOn\";\nimport Grid from \"../../../../../packages/material-ui/src/Grid\";\nimport Typography from \"../../../../../packages/material-ui/src/Typography\";\nimport { makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  var script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nvar autocompleteService = {\n  current: null\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    icon: {\n      color: theme.palette.text.secondary,\n      marginRight: theme.spacing(2)\n    }\n  };\n});\nexport default function GoogleMaps() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(null),\n      value = _React$useState[0],\n      setValue = _React$useState[1];\n\n  var _React$useState2 = React.useState(''),\n      inputValue = _React$useState2[0],\n      setInputValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      options = _React$useState3[0],\n      setOptions = _React$useState3[1];\n\n  var loaded = React.useRef(false);\n\n  if (true && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript('https://maps.googleapis.com/maps/api/js?key=AIzaSyBwRp1e12ec1vOTtGiA4fcCt2sCUS78UYc&libraries=places', document.querySelector('head'), 'google-maps');\n    }\n\n    loaded.current = true;\n  }\n\n  var fetch = React.useMemo(function () {\n    return throttle(function (request, callback) {\n      autocompleteService.current.getPlacePredictions(request, callback);\n    }, 200);\n  }, []);\n  React.useEffect(function () {\n    var active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, function (results) {\n      if (active) {\n        var newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [].concat(_toConsumableArray(newOptions), _toConsumableArray(results));\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return function () {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  return __jsx(Autocomplete, {\n    id: \"google-map-demo\",\n    style: {\n      width: 300\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return typeof option === 'string' ? option : option.description;\n    },\n    filterOptions: function filterOptions(x) {\n      return x;\n    },\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: value,\n    onChange: function onChange(event, newValue) {\n      setOptions(newValue ? [newValue].concat(_toConsumableArray(options)) : options);\n      setValue(newValue);\n    },\n    onInputChange: function onInputChange(event, newInputValue) {\n      setInputValue(newInputValue);\n    },\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        label: \"Add a location\",\n        variant: \"outlined\",\n        fullWidth: true\n      }));\n    },\n    renderOption: function renderOption(option) {\n      var matches = option.structured_formatting.main_text_matched_substrings;\n      var parts = parse(option.structured_formatting.main_text, matches.map(function (match) {\n        return [match.offset, match.offset + match.length];\n      }));\n      return __jsx(Grid, {\n        container: true,\n        alignItems: \"center\"\n      }, __jsx(Grid, {\n        item: true\n      }, __jsx(LocationOnIcon, {\n        className: classes.icon\n      })), __jsx(Grid, {\n        item: true,\n        xs: true\n      }, parts.map(function (part, index) {\n        return __jsx(\"span\", {\n          key: index,\n          style: {\n            fontWeight: part.highlight ? 700 : 400\n          }\n        }, part.text);\n      }), __jsx(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\"\n      }, option.structured_formatting.secondary_text)));\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}