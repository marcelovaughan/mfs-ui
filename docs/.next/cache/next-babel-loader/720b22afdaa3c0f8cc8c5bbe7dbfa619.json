{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport { makeStyles } from \"../../../../../../packages/material-ui/src/styles\";\nimport Grid from \"../../../../../../packages/material-ui/src/Grid\";\nimport Typography from \"../../../../../../packages/material-ui/src/Typography\";\nimport Divider from \"../../../../../../packages/material-ui/src/Divider\";\nimport Markdown from \"./Markdown\";\nconst useStyles = makeStyles(theme => ({\n  markdown: _objectSpread(_objectSpread({}, theme.typography.body2), {}, {\n    padding: theme.spacing(3, 0)\n  })\n}));\n\nvar _ref = __jsx(Divider, null);\n\nexport default function Main(props) {\n  const classes = useStyles();\n  const {\n    posts,\n    title\n  } = props;\n  return __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 8\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    gutterBottom: true\n  }, title), _ref, posts.map(post => __jsx(Markdown, {\n    className: classes.markdown,\n    key: post.substring(0, 40)\n  }, post)));\n}","map":null,"metadata":{},"sourceType":"module"}