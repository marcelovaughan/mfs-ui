{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { fade, useTheme, withStyles } from \"../../../material-ui/src/styles\";\nimport ButtonBase from \"../../../material-ui/src/ButtonBase\";\nimport FirstPageIcon from \"../internal/svg-icons/FirstPage\";\nimport LastPageIcon from \"../internal/svg-icons/LastPage\";\nimport NavigateBeforeIcon from \"../internal/svg-icons/NavigateBefore\";\nimport NavigateNextIcon from \"../internal/svg-icons/NavigateNext\";\nimport { capitalize } from \"../../../material-ui/src/utils\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: _objectSpread(_objectSpread({}, theme.typography.body2), {}, {\n    borderRadius: 32 / 2,\n    textAlign: 'center',\n    boxSizing: 'border-box',\n    minWidth: 32,\n    height: 32,\n    padding: '0 6px',\n    margin: '0 3px',\n    color: theme.palette.text.primary\n  }),\n\n  /* Styles applied to the root element if `type=\"page\"`. */\n  page: {\n    transition: theme.transitions.create(['color', 'background-color'], {\n      duration: theme.transitions.duration.short\n    }),\n    '&:hover': {\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&$focusVisible': {\n      backgroundColor: theme.palette.action.focus\n    },\n    '&$selected': {\n      backgroundColor: theme.palette.action.selected,\n      '&:hover, &$focusVisible': {\n        backgroundColor: fade(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.action.selected\n        }\n      },\n      '&$disabled': {\n        opacity: 1,\n        color: theme.palette.action.disabled,\n        backgroundColor: theme.palette.action.selected\n      }\n    },\n    '&$disabled': {\n      opacity: theme.palette.action.disabledOpacity\n    }\n  },\n\n  /* Styles applied applied to the root element if `size=\"small\"`. */\n  sizeSmall: {\n    minWidth: 26,\n    height: 26,\n    borderRadius: 26 / 2,\n    margin: '0 1px',\n    padding: '0 4px',\n    '& $icon': {\n      fontSize: theme.typography.pxToRem(18)\n    }\n  },\n\n  /* Styles applied applied to the root element if `size=\"large\"`. */\n  sizeLarge: {\n    minWidth: 40,\n    height: 40,\n    borderRadius: 40 / 2,\n    padding: '0 10px',\n    fontSize: theme.typography.pxToRem(15),\n    '& $icon': {\n      fontSize: theme.typography.pxToRem(22)\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`. */\n  textPrimary: {\n    '&$selected': {\n      color: theme.palette.primary.contrastText,\n      backgroundColor: theme.palette.primary.main,\n      '&:hover, &$focusVisible': {\n        backgroundColor: theme.palette.primary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.primary.main\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`. */\n  textSecondary: {\n    '&$selected': {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.main,\n      '&:hover, &$focusVisible': {\n        backgroundColor: theme.palette.secondary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.secondary.main\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `outlined=\"true\"`. */\n  outlined: {\n    border: `1px solid ${theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`,\n    '&$selected': {\n      '&$disabled': {\n        border: `1px solid ${theme.palette.action.disabledBackground}`\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`. */\n  outlinedPrimary: {\n    '&$selected': {\n      color: theme.palette.primary.main,\n      border: `1px solid ${fade(theme.palette.primary.main, 0.5)}`,\n      backgroundColor: fade(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n      '&:hover, &$focusVisible': {\n        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.activatedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`. */\n  outlinedSecondary: {\n    '&$selected': {\n      color: theme.palette.secondary.main,\n      border: `1px solid ${fade(theme.palette.secondary.main, 0.5)}`,\n      backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.activatedOpacity),\n      '&:hover, &$focusVisible': {\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.activatedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `rounded=\"true\"`. */\n  rounded: {\n    borderRadius: theme.shape.borderRadius\n  },\n\n  /* Styles applied to the root element if `type=\"start-ellipsis\"` or `type=\"end-ellipsis\"`. */\n  ellipsis: {\n    height: 'auto',\n    '&$disabled': {\n      opacity: theme.palette.action.disabledOpacity\n    }\n  },\n\n  /* Pseudo-class applied to the root element if keyboard focused. */\n  focusVisible: {},\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Pseudo-class applied to the root element if `selected={true}`. */\n  selected: {},\n\n  /* Styles applied to the icon element. */\n  icon: {\n    fontSize: theme.typography.pxToRem(20),\n    margin: '0 -8px'\n  }\n});\nconst PaginationItem = /*#__PURE__*/React.forwardRef(function PaginationItem(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'standard',\n    component,\n    disabled = false,\n    page,\n    selected = false,\n    shape = 'round',\n    size = 'medium',\n    type = 'page',\n    variant = 'text'\n  } = props,\n        other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"disabled\", \"page\", \"selected\", \"shape\", \"size\", \"type\", \"variant\"]);\n\n  const theme = useTheme();\n  const normalizedIcons = theme.direction === 'rtl' ? {\n    previous: NavigateNextIcon,\n    next: NavigateBeforeIcon,\n    last: FirstPageIcon,\n    first: LastPageIcon\n  } : {\n    previous: NavigateBeforeIcon,\n    next: NavigateNextIcon,\n    first: FirstPageIcon,\n    last: LastPageIcon\n  };\n  const Icon = normalizedIcons[type];\n  return type === 'start-ellipsis' || type === 'end-ellipsis' ? __jsx(\"div\", {\n    ref: ref,\n    className: clsx(classes.root, classes.ellipsis, disabled && classes.disabled, size !== 'medium' && classes[`size${capitalize(size)}`])\n  }, \"\\u2026\") : __jsx(ButtonBase, _extends({\n    ref: ref,\n    component: component,\n    disabled: disabled,\n    focusVisibleClassName: classes.focusVisible,\n    className: clsx(classes.root, classes.page, classes[variant], classes[shape], className, color !== 'standard' && classes[`${variant}${capitalize(color)}`], disabled && classes.disabled, selected && classes.selected, size !== 'medium' && classes[`size${capitalize(size)}`])\n  }, other), type === 'page' && page, Icon ? __jsx(Icon, {\n    className: classes.icon\n  }) : null);\n});\nexport default withStyles(styles, {\n  name: 'MuiPaginationItem'\n})(PaginationItem);","map":null,"metadata":{},"sourceType":"module"}