{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport Typography from \"../Typography\";\nimport StepIcon from \"../StepIcon\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    '&$alternativeLabel': {\n      flexDirection: 'column'\n    },\n    '&$disabled': {\n      cursor: 'default'\n    }\n  },\n\n  /* Styles applied to the root element if `orientation=\"horizontal\"`. */\n  horizontal: {},\n\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    textAlign: 'left'\n  },\n\n  /* Styles applied to the `Typography` component which wraps `children`. */\n  label: {\n    '&$active': {\n      color: theme.palette.text.primary,\n      fontWeight: 500\n    },\n    '&$completed': {\n      color: theme.palette.text.primary,\n      fontWeight: 500\n    },\n    '&$alternativeLabel': {\n      textAlign: 'center',\n      marginTop: 16\n    },\n    '&$error': {\n      color: theme.palette.error.main\n    }\n  },\n\n  /* Pseudo-class applied to the `Typography` component if `active={true}`. */\n  active: {},\n\n  /* Pseudo-class applied to the `Typography` component if `completed={true}`. */\n  completed: {},\n\n  /* Pseudo-class applied to the root element and `Typography` component if `error={true}`. */\n  error: {},\n\n  /* Pseudo-class applied to the root element and `Typography` component if `disabled={true}`. */\n  disabled: {},\n\n  /* Styles applied to the `icon` container element. */\n  iconContainer: {\n    flexShrink: 0,\n    // Fix IE 11 issue\n    display: 'flex',\n    paddingRight: 8,\n    '&$alternativeLabel': {\n      paddingRight: 0\n    }\n  },\n\n  /* Pseudo-class applied to the root and icon container and `Typography` if `alternativeLabel={true}`. */\n  alternativeLabel: {},\n\n  /* Styles applied to the container element which wraps `Typography` and `optional`. */\n  labelContainer: {\n    width: '100%',\n    color: theme.palette.text.secondary\n  }\n});\nconst StepLabel = /*#__PURE__*/React.forwardRef(function StepLabel(props, ref) {\n  const {\n    // eslint-disable-next-line react/prop-types\n    active = false,\n    // eslint-disable-next-line react/prop-types\n    alternativeLabel = false,\n    children,\n    classes,\n    className,\n    // eslint-disable-next-line react/prop-types\n    completed = false,\n    disabled = false,\n    error = false,\n    // eslint-disable-next-line react/prop-types\n    expanded,\n    icon,\n    // eslint-disable-next-line react/prop-types\n    last,\n    optional,\n    // eslint-disable-next-line react/prop-types\n    orientation = 'horizontal',\n    StepIconComponent: StepIconComponentProp,\n    StepIconProps\n  } = props,\n        other = _objectWithoutProperties(props, [\"active\", \"alternativeLabel\", \"children\", \"classes\", \"className\", \"completed\", \"disabled\", \"error\", \"expanded\", \"icon\", \"last\", \"optional\", \"orientation\", \"StepIconComponent\", \"StepIconProps\"]);\n\n  let StepIconComponent = StepIconComponentProp;\n\n  if (icon && !StepIconComponent) {\n    StepIconComponent = StepIcon;\n  }\n\n  return __jsx(\"span\", _extends({\n    className: clsx(classes.root, classes[orientation], className, disabled && classes.disabled, alternativeLabel && classes.alternativeLabel, error && classes.error),\n    ref: ref\n  }, other), icon || StepIconComponent ? __jsx(\"span\", {\n    className: clsx(classes.iconContainer, alternativeLabel && classes.alternativeLabel)\n  }, __jsx(StepIconComponent, _extends({\n    completed: completed,\n    active: active,\n    error: error,\n    icon: icon\n  }, StepIconProps))) : null, __jsx(\"span\", {\n    className: classes.labelContainer\n  }, children ? __jsx(Typography, {\n    variant: \"body2\",\n    component: \"span\",\n    display: \"block\",\n    className: clsx(classes.label, alternativeLabel && classes.alternativeLabel, completed && classes.completed, active && classes.active, error && classes.error)\n  }, children) : null, optional));\n});\nStepLabel.muiName = 'StepLabel';\nexport default withStyles(styles, {\n  name: 'MuiStepLabel'\n})(StepLabel);","map":null,"metadata":{},"sourceType":"module"}