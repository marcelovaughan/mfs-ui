{"ast":null,"code":"import React from 'react';\nimport Router from 'next/router';\nimport { pathnameToLanguage } from \"../utils/helpers\";\nexport async function handleEvent(event, as) {\n  // Ignore click for new tab/new window behavior\n  if (event.defaultPrevented || event.button !== 0 || // ignore everything but left-click\n  event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) {\n    return;\n  }\n\n  event.preventDefault();\n  let pathname = as.replace(/#(.*)$/, ''); // Add support for leading / in development mode.\n\n  if (pathname !== '/') {\n    // The leading / is only added to support static hosting (resolve /index.html).\n    // We remove it to normalize the pathname.\n    // See `rewriteUrlForNextExport` on Next.js side.\n    pathname = pathname.replace(/\\/$/, '');\n  }\n\n  pathname = pathnameToLanguage(pathname).canonical;\n  const success = await Router.push(pathname, as);\n\n  if (!success) {\n    return;\n  }\n\n  window.scrollTo(0, 0);\n  document.body.focus();\n}\n\nfunction handleClick(event) {\n  const activeElement = document.activeElement; // Ignore non link clicks\n\n  if (activeElement.nodeName !== 'A' || activeElement.getAttribute('target') === '_blank' || activeElement.getAttribute('data-no-link') === 'true' || activeElement.getAttribute('href').indexOf('/') !== 0) {\n    return;\n  }\n\n  handleEvent(event, document.activeElement.getAttribute('href'));\n}\n\nlet bound = false;\nexport default function MarkdownLinks() {\n  React.useEffect(() => {\n    if (bound) {\n      return;\n    }\n\n    bound = true;\n    document.addEventListener('click', handleClick);\n  }, []);\n  return null;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/components/MarkdownLinks.js"],"names":["event","pathname","as","pathnameToLanguage","success","Router","window","document","activeElement","handleEvent","bound","React"],"mappings":"AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,MAAA,MAAA,aAAA;AACA,SAAA,kBAAA;AAEA,OAAO,eAAA,WAAA,CAAA,KAAA,EAAA,EAAA,EAAsC;AAC3C;AACA,MACEA,KAAK,CAALA,gBAAAA,IACAA,KAAK,CAALA,MAAAA,KADAA,CAAAA,IACsB;AACtBA,EAAAA,KAAK,CAFLA,OAAAA,IAGAA,KAAK,CAHLA,OAAAA,IAIAA,KAAK,CAJLA,MAAAA,IAKAA,KAAK,CANP,QAAA,EAOE;AACA;AACD;;AAEDA,EAAAA,KAAK,CAALA,cAAAA;AAEA,MAAIC,QAAQ,GAAGC,EAAE,CAAFA,OAAAA,CAAAA,QAAAA,EAf4B,EAe5BA,CAAf,CAf2C,CAgB3C;;AACA,MAAID,QAAQ,KAAZ,GAAA,EAAsB;AACpB;AACA;AACA;AACAA,IAAAA,QAAQ,GAAGA,QAAQ,CAARA,OAAAA,CAAAA,KAAAA,EAAXA,EAAWA,CAAXA;AACD;;AACDA,EAAAA,QAAQ,GAAGE,kBAAkB,CAAlBA,QAAkB,CAAlBA,CAAXF,SAAAA;AAEA,QAAMG,OAAO,GAAG,MAAMC,MAAM,CAANA,IAAAA,CAAAA,QAAAA,EAAtB,EAAsBA,CAAtB;;AACA,MAAI,CAAJ,OAAA,EAAc;AACZ;AACD;;AACDC,EAAAA,MAAM,CAANA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AACAC,EAAAA,QAAQ,CAARA,IAAAA,CAAAA,KAAAA;AACD;;AAED,SAAA,WAAA,CAAA,KAAA,EAA4B;AAC1B,QAAMC,aAAa,GAAGD,QAAQ,CADJ,aAC1B,CAD0B,CAG1B;;AACA,MACEC,aAAa,CAAbA,QAAAA,KAAAA,GAAAA,IACAA,aAAa,CAAbA,YAAAA,CAAAA,QAAAA,MADAA,QAAAA,IAEAA,aAAa,CAAbA,YAAAA,CAAAA,cAAAA,MAFAA,MAAAA,IAGAA,aAAa,CAAbA,YAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA,GAAAA,MAJF,CAAA,EAKE;AACA;AACD;;AAEDC,EAAAA,WAAW,CAAA,KAAA,EAAQF,QAAQ,CAARA,aAAAA,CAAAA,YAAAA,CAAnBE,MAAmBF,CAAR,CAAXE;AACD;;AAED,IAAIC,KAAK,GAAT,KAAA;AAEA,eAAe,SAAA,aAAA,GAAyB;AACtCC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,QAAA,KAAA,EAAW;AACT;AACD;;AACDD,IAAAA,KAAK,GAALA,IAAAA;AACAH,IAAAA,QAAQ,CAARA,gBAAAA,CAAAA,OAAAA,EAAAA,WAAAA;AALFI,GAAAA,EAAAA,EAAAA;AAQA,SAAA,IAAA;AACD","sourcesContent":["import React from 'react';\nimport Router from 'next/router';\nimport { pathnameToLanguage } from 'docs/src/modules/utils/helpers';\n\nexport async function handleEvent(event, as) {\n  // Ignore click for new tab/new window behavior\n  if (\n    event.defaultPrevented ||\n    event.button !== 0 || // ignore everything but left-click\n    event.metaKey ||\n    event.ctrlKey ||\n    event.altKey ||\n    event.shiftKey\n  ) {\n    return;\n  }\n\n  event.preventDefault();\n\n  let pathname = as.replace(/#(.*)$/, '');\n  // Add support for leading / in development mode.\n  if (pathname !== '/') {\n    // The leading / is only added to support static hosting (resolve /index.html).\n    // We remove it to normalize the pathname.\n    // See `rewriteUrlForNextExport` on Next.js side.\n    pathname = pathname.replace(/\\/$/, '');\n  }\n  pathname = pathnameToLanguage(pathname).canonical;\n\n  const success = await Router.push(pathname, as);\n  if (!success) {\n    return;\n  }\n  window.scrollTo(0, 0);\n  document.body.focus();\n}\n\nfunction handleClick(event) {\n  const activeElement = document.activeElement;\n\n  // Ignore non link clicks\n  if (\n    activeElement.nodeName !== 'A' ||\n    activeElement.getAttribute('target') === '_blank' ||\n    activeElement.getAttribute('data-no-link') === 'true' ||\n    activeElement.getAttribute('href').indexOf('/') !== 0\n  ) {\n    return;\n  }\n\n  handleEvent(event, document.activeElement.getAttribute('href'));\n}\n\nlet bound = false;\n\nexport default function MarkdownLinks() {\n  React.useEffect(() => {\n    if (bound) {\n      return;\n    }\n    bound = true;\n    document.addEventListener('click', handleClick);\n  }, []);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}