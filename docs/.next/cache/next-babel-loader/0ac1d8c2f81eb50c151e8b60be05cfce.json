{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-lab/src/ToggleButton/ToggleButton.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @inheritedComponent ButtonBase\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { fade, withStyles } from \"../../../material-ui/src/styles\";\nimport ButtonBase from \"../../../material-ui/src/ButtonBase\";\nimport { capitalize } from \"../../../material-ui/src/utils\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: _objectSpread(_objectSpread({}, theme.typography.button), {}, {\n    boxSizing: 'border-box',\n    borderRadius: theme.shape.borderRadius,\n    padding: 11,\n    border: `1px solid ${fade(theme.palette.action.active, 0.12)}`,\n    color: fade(theme.palette.action.active, 0.38),\n    '&$selected': {\n      color: theme.palette.action.active,\n      backgroundColor: fade(theme.palette.action.active, 0.12),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.action.active, 0.15)\n      },\n      '& + &': {\n        borderLeft: 0,\n        marginLeft: 0\n      }\n    },\n    '&$disabled': {\n      color: fade(theme.palette.action.disabled, 0.12)\n    },\n    '&:hover': {\n      textDecoration: 'none',\n      // Reset on mouse devices\n      backgroundColor: fade(theme.palette.text.primary, 0.05),\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      },\n      '&$disabled': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }),\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Pseudo-class applied to the root element if `selected={true}`. */\n  selected: {},\n\n  /* Styles applied to the `label` wrapper element. */\n  label: {\n    width: '100%',\n    // Ensure the correct width for iOS Safari\n    display: 'inherit',\n    alignItems: 'inherit',\n    justifyContent: 'inherit'\n  },\n\n  /* Styles applied to the root element if `size=\"small\"`. */\n  sizeSmall: {\n    padding: 7,\n    fontSize: theme.typography.pxToRem(13)\n  },\n\n  /* Styles applied to the root element if `size=\"large\"`. */\n  sizeLarge: {\n    padding: 15,\n    fontSize: theme.typography.pxToRem(15)\n  }\n});\nconst ToggleButton = /*#__PURE__*/React.forwardRef(function ToggleButton(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    disabled = false,\n    disableFocusRipple = false,\n    onChange,\n    onClick,\n    selected,\n    size = 'medium',\n    value\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disabled\", \"disableFocusRipple\", \"onChange\", \"onClick\", \"selected\", \"size\", \"value\"]);\n\n  const handleChange = event => {\n    if (onClick) {\n      onClick(event, value);\n\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n    }\n\n    if (onChange) {\n      onChange(event, value);\n    }\n  };\n\n  return __jsx(ButtonBase, _extends({\n    className: clsx(classes.root, className, disabled && classes.disabled, selected && classes.selected, size !== 'medium' && classes[`size${capitalize(size)}`]),\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    ref: ref,\n    onClick: handleChange,\n    onChange: onChange,\n    value: value,\n    \"aria-pressed\": selected\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }), __jsx(\"span\", {\n    className: classes.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, children));\n});\nToggleButton.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * If `true`, the button will be rendered in an active state.\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * The value to associate with the button when selected in a\n   * ToggleButtonGroup.\n   */\n  value: PropTypes.any.isRequired\n};\nexport default withStyles(styles, {\n  name: 'MuiToggleButton'\n})(ToggleButton);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-lab/src/ToggleButton/ToggleButton.js"],"names":["React","PropTypes","clsx","fade","withStyles","ButtonBase","capitalize","styles","theme","root","typography","button","boxSizing","borderRadius","shape","padding","border","palette","action","active","color","backgroundColor","borderLeft","marginLeft","disabled","textDecoration","text","primary","selected","label","width","display","alignItems","justifyContent","sizeSmall","fontSize","pxToRem","sizeLarge","ToggleButton","forwardRef","props","ref","children","classes","className","disableFocusRipple","onChange","onClick","size","value","other","handleChange","event","isDefaultPrevented","propTypes","node","isRequired","object","string","bool","disableRipple","func","oneOf","any","name"],"mappings":"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","sourcesContent":["// @inheritedComponent ButtonBase\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { fade, withStyles } from '@material-ui/core/styles';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport { capitalize } from '@material-ui/core/utils';\n\nexport const styles = (theme) => ({\n  /* Styles applied to the root element. */\n  root: {\n    ...theme.typography.button,\n    boxSizing: 'border-box',\n    borderRadius: theme.shape.borderRadius,\n    padding: 11,\n    border: `1px solid ${fade(theme.palette.action.active, 0.12)}`,\n    color: fade(theme.palette.action.active, 0.38),\n    '&$selected': {\n      color: theme.palette.action.active,\n      backgroundColor: fade(theme.palette.action.active, 0.12),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.action.active, 0.15),\n      },\n      '& + &': {\n        borderLeft: 0,\n        marginLeft: 0,\n      },\n    },\n    '&$disabled': {\n      color: fade(theme.palette.action.disabled, 0.12),\n    },\n    '&:hover': {\n      textDecoration: 'none',\n      // Reset on mouse devices\n      backgroundColor: fade(theme.palette.text.primary, 0.05),\n      '@media (hover: none)': {\n        backgroundColor: 'transparent',\n      },\n      '&$disabled': {\n        backgroundColor: 'transparent',\n      },\n    },\n  },\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Pseudo-class applied to the root element if `selected={true}`. */\n  selected: {},\n  /* Styles applied to the `label` wrapper element. */\n  label: {\n    width: '100%', // Ensure the correct width for iOS Safari\n    display: 'inherit',\n    alignItems: 'inherit',\n    justifyContent: 'inherit',\n  },\n  /* Styles applied to the root element if `size=\"small\"`. */\n  sizeSmall: {\n    padding: 7,\n    fontSize: theme.typography.pxToRem(13),\n  },\n  /* Styles applied to the root element if `size=\"large\"`. */\n  sizeLarge: {\n    padding: 15,\n    fontSize: theme.typography.pxToRem(15),\n  },\n});\n\nconst ToggleButton = React.forwardRef(function ToggleButton(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    disabled = false,\n    disableFocusRipple = false,\n    onChange,\n    onClick,\n    selected,\n    size = 'medium',\n    value,\n    ...other\n  } = props;\n\n  const handleChange = (event) => {\n    if (onClick) {\n      onClick(event, value);\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n    }\n\n    if (onChange) {\n      onChange(event, value);\n    }\n  };\n\n  return (\n    <ButtonBase\n      className={clsx(\n        classes.root,\n        {\n          [classes.disabled]: disabled,\n          [classes.selected]: selected,\n          [classes[`size${capitalize(size)}`]]: size !== 'medium',\n        },\n        className,\n      )}\n      disabled={disabled}\n      focusRipple={!disableFocusRipple}\n      ref={ref}\n      onClick={handleChange}\n      onChange={onChange}\n      value={value}\n      aria-pressed={selected}\n      {...other}\n    >\n      <span className={classes.label}>{children}</span>\n    </ButtonBase>\n  );\n});\n\nToggleButton.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * If `true`, the button will be rendered in an active state.\n   */\n  selected: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * The value to associate with the button when selected in a\n   * ToggleButtonGroup.\n   */\n  value: PropTypes.any.isRequired,\n};\n\nexport default withStyles(styles, { name: 'MuiToggleButton' })(ToggleButton);\n"]},"metadata":{},"sourceType":"module"}