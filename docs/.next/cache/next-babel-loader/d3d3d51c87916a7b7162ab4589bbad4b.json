{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Snackbar/Snackbar.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport { duration } from \"../styles/transitions\";\nimport ClickAwayListener from \"../ClickAwayListener\";\nimport useEventCallback from \"../utils/useEventCallback\";\nimport capitalize from \"../utils/capitalize\";\nimport createChainedFunction from \"../utils/createChainedFunction\";\nimport Grow from \"../Grow\";\nimport SnackbarContent from \"../SnackbarContent\";\nexport const styles = theme => {\n  const top1 = {\n    top: 8\n  };\n  const bottom1 = {\n    bottom: 8\n  };\n  const right = {\n    justifyContent: 'flex-end'\n  };\n  const left = {\n    justifyContent: 'flex-start'\n  };\n  const top3 = {\n    top: 24\n  };\n  const bottom3 = {\n    bottom: 24\n  };\n  const right3 = {\n    right: 24\n  };\n  const left3 = {\n    left: 24\n  };\n  const center = {\n    left: '50%',\n    right: 'auto',\n    transform: 'translateX(-50%)'\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      zIndex: theme.zIndex.snackbar,\n      position: 'fixed',\n      display: 'flex',\n      left: 8,\n      right: 8,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`. */\n    anchorOriginTopCenter: _objectSpread(_objectSpread({}, top1), {}, {\n      [theme.breakpoints.up('sm')]: _objectSpread(_objectSpread({}, top3), center)\n    }),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`. */\n    anchorOriginBottomCenter: _objectSpread(_objectSpread({}, bottom1), {}, {\n      [theme.breakpoints.up('sm')]: _objectSpread(_objectSpread({}, bottom3), center)\n    }),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`. */\n    anchorOriginTopRight: _objectSpread(_objectSpread(_objectSpread({}, top1), right), {}, {\n      [theme.breakpoints.up('sm')]: _objectSpread(_objectSpread({\n        left: 'auto'\n      }, top3), right3)\n    }),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`. */\n    anchorOriginBottomRight: _objectSpread(_objectSpread(_objectSpread({}, bottom1), right), {}, {\n      [theme.breakpoints.up('sm')]: _objectSpread(_objectSpread({\n        left: 'auto'\n      }, bottom3), right3)\n    }),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`. */\n    anchorOriginTopLeft: _objectSpread(_objectSpread(_objectSpread({}, top1), left), {}, {\n      [theme.breakpoints.up('sm')]: _objectSpread(_objectSpread({\n        right: 'auto'\n      }, top3), left3)\n    }),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`. */\n    anchorOriginBottomLeft: _objectSpread(_objectSpread(_objectSpread({}, bottom1), left), {}, {\n      [theme.breakpoints.up('sm')]: _objectSpread(_objectSpread({\n        right: 'auto'\n      }, bottom3), left3)\n    })\n  };\n};\nconst Snackbar = /*#__PURE__*/React.forwardRef(function Snackbar(props, ref) {\n  const {\n    action,\n    anchorOrigin: {\n      vertical,\n      horizontal\n    } = {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    autoHideDuration = null,\n    children,\n    classes,\n    className,\n    ClickAwayListenerProps,\n    ContentProps,\n    disableWindowBlurListener = false,\n    message,\n    onClose,\n    onEnter,\n    onEntered,\n    onEntering,\n    onExit,\n    onExited,\n    onExiting,\n    onMouseEnter,\n    onMouseLeave,\n    open,\n    resumeHideDuration,\n    TransitionComponent = Grow,\n    transitionDuration = {\n      enter: duration.enteringScreen,\n      exit: duration.leavingScreen\n    },\n    TransitionProps\n  } = props,\n        other = _objectWithoutProperties(props, [\"action\", \"anchorOrigin\", \"autoHideDuration\", \"children\", \"classes\", \"className\", \"ClickAwayListenerProps\", \"ContentProps\", \"disableWindowBlurListener\", \"message\", \"onClose\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onMouseEnter\", \"onMouseLeave\", \"open\", \"resumeHideDuration\", \"TransitionComponent\", \"transitionDuration\", \"TransitionProps\"]);\n\n  const timerAutoHide = React.useRef();\n  const [exited, setExited] = React.useState(true);\n  const handleClose = useEventCallback((...args) => {\n    if (onClose) {\n      onClose(...args);\n    }\n  });\n  const setAutoHideTimer = useEventCallback(autoHideDurationParam => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n\n    clearTimeout(timerAutoHide.current);\n    timerAutoHide.current = setTimeout(() => {\n      handleClose(null, 'timeout');\n    }, autoHideDurationParam);\n  });\n  React.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n\n    return () => {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]); // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n\n  const handlePause = () => {\n    clearTimeout(timerAutoHide.current);\n  }; // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n\n\n  const handleResume = React.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n\n  const handleMouseEnter = event => {\n    if (onMouseEnter) {\n      onMouseEnter(event);\n    }\n\n    handlePause();\n  };\n\n  const handleMouseLeave = event => {\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n\n    handleResume();\n  };\n\n  const handleClickAway = event => {\n    if (onClose) {\n      onClose(event, 'clickaway');\n    }\n  };\n\n  const handleExited = () => {\n    setExited(true);\n  };\n\n  const handleEnter = () => {\n    setExited(false);\n  };\n\n  React.useEffect(() => {\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n\n    return undefined;\n  }, [disableWindowBlurListener, handleResume, open]); // So we only render active snackbars.\n\n  if (!open && exited) {\n    return null;\n  }\n\n  return __jsx(ClickAwayListener, _extends({\n    onClickAway: handleClickAway\n  }, ClickAwayListenerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", _extends({\n    className: clsx(classes.root, classes[`anchorOrigin${capitalize(vertical)}${capitalize(horizontal)}`], className),\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }), __jsx(TransitionComponent, _extends({\n    appear: true,\n    in: open,\n    onEnter: createChainedFunction(handleEnter, onEnter),\n    onEntered: onEntered,\n    onEntering: onEntering,\n    onExit: onExit,\n    onExited: createChainedFunction(handleExited, onExited),\n    onExiting: onExiting,\n    timeout: transitionDuration,\n    direction: vertical === 'top' ? 'down' : 'up'\n  }, TransitionProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }), children || __jsx(SnackbarContent, _extends({\n    message: message,\n    action: action\n  }, ContentProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 24\n    }\n  })))));\n});\nSnackbar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the snackbar.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The anchor of the `Snackbar`.\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['center', 'left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   */\n  autoHideDuration: PropTypes.number,\n\n  /**\n   * Replace the `SnackbarContent` component.\n   */\n  children: PropTypes.element,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Props applied to the `ClickAwayListener` element.\n   */\n  ClickAwayListenerProps: PropTypes.object,\n\n  /**\n   * Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.\n   */\n  ContentProps: PropTypes.object,\n\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   */\n  disableWindowBlurListener: PropTypes.bool,\n\n  /**\n   * When displaying multiple consecutive Snackbars from a parent rendering a single\n   * <Snackbar/>, add the key prop to ensure independent treatment of each message.\n   * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\n   * features such as autoHideDuration may be canceled.\n   */\n  key: PropTypes.any,\n\n  /**\n   * The message to display.\n   */\n  message: PropTypes.node,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired before the transition is entering.\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired when the transition has entered.\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired when the transition is entering.\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired before the transition is exiting.\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired when the transition has exited.\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * Callback fired when the transition is exiting.\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * If `true`, `Snackbar` is open.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.\n   */\n  TransitionProps: PropTypes.object\n};\nexport default withStyles(styles, {\n  flip: false,\n  name: 'MuiSnackbar'\n})(Snackbar);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Snackbar/Snackbar.js"],"names":["React","PropTypes","clsx","withStyles","duration","ClickAwayListener","useEventCallback","capitalize","createChainedFunction","Grow","SnackbarContent","styles","theme","top1","top","bottom1","bottom","right","justifyContent","left","top3","bottom3","right3","left3","center","transform","root","zIndex","snackbar","position","display","alignItems","anchorOriginTopCenter","breakpoints","up","anchorOriginBottomCenter","anchorOriginTopRight","anchorOriginBottomRight","anchorOriginTopLeft","anchorOriginBottomLeft","Snackbar","forwardRef","props","ref","action","anchorOrigin","vertical","horizontal","autoHideDuration","children","classes","className","ClickAwayListenerProps","ContentProps","disableWindowBlurListener","message","onClose","onEnter","onEntered","onEntering","onExit","onExited","onExiting","onMouseEnter","onMouseLeave","open","resumeHideDuration","TransitionComponent","transitionDuration","enter","enteringScreen","exit","leavingScreen","TransitionProps","other","timerAutoHide","useRef","exited","setExited","useState","handleClose","args","setAutoHideTimer","autoHideDurationParam","clearTimeout","current","setTimeout","useEffect","handlePause","handleResume","useCallback","handleMouseEnter","event","handleMouseLeave","handleClickAway","handleExited","handleEnter","window","addEventListener","removeEventListener","undefined","propTypes","node","shape","oneOf","isRequired","number","element","object","string","bool","key","any","func","elementType","oneOfType","appear","flip","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { duration } from '../styles/transitions';\nimport ClickAwayListener from '../ClickAwayListener';\nimport useEventCallback from '../utils/useEventCallback';\nimport capitalize from '../utils/capitalize';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport Grow from '../Grow';\nimport SnackbarContent from '../SnackbarContent';\n\nexport const styles = (theme) => {\n  const top1 = { top: 8 };\n  const bottom1 = { bottom: 8 };\n  const right = { justifyContent: 'flex-end' };\n  const left = { justifyContent: 'flex-start' };\n  const top3 = { top: 24 };\n  const bottom3 = { bottom: 24 };\n  const right3 = { right: 24 };\n  const left3 = { left: 24 };\n  const center = {\n    left: '50%',\n    right: 'auto',\n    transform: 'translateX(-50%)',\n  };\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      zIndex: theme.zIndex.snackbar,\n      position: 'fixed',\n      display: 'flex',\n      left: 8,\n      right: 8,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`. */\n    anchorOriginTopCenter: {\n      ...top1,\n      [theme.breakpoints.up('sm')]: {\n        ...top3,\n        ...center,\n      },\n    },\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`. */\n    anchorOriginBottomCenter: {\n      ...bottom1,\n      [theme.breakpoints.up('sm')]: {\n        ...bottom3,\n        ...center,\n      },\n    },\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`. */\n    anchorOriginTopRight: {\n      ...top1,\n      ...right,\n      [theme.breakpoints.up('sm')]: {\n        left: 'auto',\n        ...top3,\n        ...right3,\n      },\n    },\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`. */\n    anchorOriginBottomRight: {\n      ...bottom1,\n      ...right,\n      [theme.breakpoints.up('sm')]: {\n        left: 'auto',\n        ...bottom3,\n        ...right3,\n      },\n    },\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`. */\n    anchorOriginTopLeft: {\n      ...top1,\n      ...left,\n      [theme.breakpoints.up('sm')]: {\n        right: 'auto',\n        ...top3,\n        ...left3,\n      },\n    },\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`. */\n    anchorOriginBottomLeft: {\n      ...bottom1,\n      ...left,\n      [theme.breakpoints.up('sm')]: {\n        right: 'auto',\n        ...bottom3,\n        ...left3,\n      },\n    },\n  };\n};\n\nconst Snackbar = React.forwardRef(function Snackbar(props, ref) {\n  const {\n    action,\n    anchorOrigin: { vertical, horizontal } = { vertical: 'bottom', horizontal: 'center' },\n    autoHideDuration = null,\n    children,\n    classes,\n    className,\n    ClickAwayListenerProps,\n    ContentProps,\n    disableWindowBlurListener = false,\n    message,\n    onClose,\n    onEnter,\n    onEntered,\n    onEntering,\n    onExit,\n    onExited,\n    onExiting,\n    onMouseEnter,\n    onMouseLeave,\n    open,\n    resumeHideDuration,\n    TransitionComponent = Grow,\n    transitionDuration = {\n      enter: duration.enteringScreen,\n      exit: duration.leavingScreen,\n    },\n    TransitionProps,\n    ...other\n  } = props;\n\n  const timerAutoHide = React.useRef();\n  const [exited, setExited] = React.useState(true);\n\n  const handleClose = useEventCallback((...args) => {\n    if (onClose) {\n      onClose(...args);\n    }\n  });\n\n  const setAutoHideTimer = useEventCallback((autoHideDurationParam) => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n\n    clearTimeout(timerAutoHide.current);\n    timerAutoHide.current = setTimeout(() => {\n      handleClose(null, 'timeout');\n    }, autoHideDurationParam);\n  });\n\n  React.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n\n    return () => {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]);\n\n  // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n  const handlePause = () => {\n    clearTimeout(timerAutoHide.current);\n  };\n\n  // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n  const handleResume = React.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n\n  const handleMouseEnter = (event) => {\n    if (onMouseEnter) {\n      onMouseEnter(event);\n    }\n    handlePause();\n  };\n\n  const handleMouseLeave = (event) => {\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n    handleResume();\n  };\n\n  const handleClickAway = (event) => {\n    if (onClose) {\n      onClose(event, 'clickaway');\n    }\n  };\n\n  const handleExited = () => {\n    setExited(true);\n  };\n\n  const handleEnter = () => {\n    setExited(false);\n  };\n\n  React.useEffect(() => {\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n\n    return undefined;\n  }, [disableWindowBlurListener, handleResume, open]);\n\n  // So we only render active snackbars.\n  if (!open && exited) {\n    return null;\n  }\n\n  return (\n    <ClickAwayListener onClickAway={handleClickAway} {...ClickAwayListenerProps}>\n      <div\n        className={clsx(\n          classes.root,\n          classes[`anchorOrigin${capitalize(vertical)}${capitalize(horizontal)}`],\n          className,\n        )}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        ref={ref}\n        {...other}\n      >\n        <TransitionComponent\n          appear\n          in={open}\n          onEnter={createChainedFunction(handleEnter, onEnter)}\n          onEntered={onEntered}\n          onEntering={onEntering}\n          onExit={onExit}\n          onExited={createChainedFunction(handleExited, onExited)}\n          onExiting={onExiting}\n          timeout={transitionDuration}\n          direction={vertical === 'top' ? 'down' : 'up'}\n          {...TransitionProps}\n        >\n          {children || <SnackbarContent message={message} action={action} {...ContentProps} />}\n        </TransitionComponent>\n      </div>\n    </ClickAwayListener>\n  );\n});\n\nSnackbar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The action to display. It renders after the message, at the end of the snackbar.\n   */\n  action: PropTypes.node,\n  /**\n   * The anchor of the `Snackbar`.\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['center', 'left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired,\n  }),\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   */\n  autoHideDuration: PropTypes.number,\n  /**\n   * Replace the `SnackbarContent` component.\n   */\n  children: PropTypes.element,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Props applied to the `ClickAwayListener` element.\n   */\n  ClickAwayListenerProps: PropTypes.object,\n  /**\n   * Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.\n   */\n  ContentProps: PropTypes.object,\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   */\n  disableWindowBlurListener: PropTypes.bool,\n  /**\n   * When displaying multiple consecutive Snackbars from a parent rendering a single\n   * <Snackbar/>, add the key prop to ensure independent treatment of each message.\n   * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\n   * features such as autoHideDuration may be canceled.\n   */\n  key: PropTypes.any,\n  /**\n   * The message to display.\n   */\n  message: PropTypes.node,\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired before the transition is entering.\n   */\n  onEnter: PropTypes.func,\n  /**\n   * Callback fired when the transition has entered.\n   */\n  onEntered: PropTypes.func,\n  /**\n   * Callback fired when the transition is entering.\n   */\n  onEntering: PropTypes.func,\n  /**\n   * Callback fired before the transition is exiting.\n   */\n  onExit: PropTypes.func,\n  /**\n   * Callback fired when the transition has exited.\n   */\n  onExited: PropTypes.func,\n  /**\n   * Callback fired when the transition is exiting.\n   */\n  onExiting: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseEnter: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n  /**\n   * If `true`, `Snackbar` is open.\n   */\n  open: PropTypes.bool,\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({\n      appear: PropTypes.number,\n      enter: PropTypes.number,\n      exit: PropTypes.number,\n    }),\n  ]),\n  /**\n   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.\n   */\n  TransitionProps: PropTypes.object,\n};\n\nexport default withStyles(styles, { flip: false, name: 'MuiSnackbar' })(Snackbar);\n"]},"metadata":{},"sourceType":"module"}