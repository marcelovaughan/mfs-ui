{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from \"../../../../packages/material-ui/src/styles\";\nimport NoSsr from \"../../../../packages/material-ui/src/NoSsr\";\nimport MarkdownElement from \"../../modules/components/MarkdownElement\";\nimport Container from \"../../../../packages/material-ui/src/Container\";\nimport Divider from \"../../../../packages/material-ui/src/Divider\";\nimport { prepareMarkdown } from \"../../modules/utils/parseMarkdown\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    '@global': {\n      '.anchor-link-style': {\n        position: 'absolute',\n        top: -9999,\n        left: -9999\n      }\n    },\n    root: {\n      minHeight: 600,\n      textAlign: 'center'\n    },\n    markdownElement: {\n      padding: theme.spacing(4, 0)\n    }\n  };\n}, {\n  name: 'Sponsors'\n});\n\nvar _ref2 = __jsx(Divider, null);\n\nexport default function Sponsors(_ref) {\n  var docs = _ref.docs;\n  var classes = useStyles();\n  var userLanguage = useSelector(function (state) {\n    return state.options.userLanguage;\n  });\n  var rendered = docs[userLanguage].rendered;\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(NoSsr, {\n    defer: true\n  }, __jsx(Container, {\n    maxWidth: \"md\"\n  }, _ref2, rendered.map(function (renderedMarkdown, index) {\n    return __jsx(MarkdownElement, {\n      key: index,\n      className: classes.markdownElement,\n      renderedMarkdown: renderedMarkdown\n    });\n  }))));\n}\n\nvar requireRaw = require.context(\"./\", false, /\\.md$/);\n\nexport function getInitialProps() {\n  return _getInitialProps.apply(this, arguments);\n}\n\nfunction _getInitialProps() {\n  _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _prepareMarkdown, docs;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _prepareMarkdown = prepareMarkdown({\n              pageFilename: '/',\n              requireRaw: requireRaw\n            }), docs = _prepareMarkdown.docs;\n            return _context.abrupt(\"return\", {\n              docs: docs\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getInitialProps.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}