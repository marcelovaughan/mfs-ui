{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    height: 48,\n    background: 'rgba(0, 0, 0, 0.5)',\n    display: 'flex',\n    alignItems: 'center',\n    fontFamily: theme.typography.fontFamily\n  },\n\n  /* Styles applied to the root element if `titlePosition=\"bottom\"`. */\n  titlePositionBottom: {\n    bottom: 0\n  },\n\n  /* Styles applied to the root element if `titlePosition=\"top\"`. */\n  titlePositionTop: {\n    top: 0\n  },\n\n  /* Styles applied to the root element if a `subtitle` is provided. */\n  rootSubtitle: {\n    height: 68\n  },\n\n  /* Styles applied to the title and subtitle container element. */\n  titleWrap: {\n    flexGrow: 1,\n    marginLeft: 16,\n    marginRight: 16,\n    color: theme.palette.common.white,\n    overflow: 'hidden'\n  },\n\n  /* Styles applied to the container element if `actionPosition=\"left\"`. */\n  titleWrapActionPosLeft: {\n    marginLeft: 0\n  },\n\n  /* Styles applied to the container element if `actionPosition=\"right\"`. */\n  titleWrapActionPosRight: {\n    marginRight: 0\n  },\n\n  /* Styles applied to the title container element. */\n  title: {\n    fontSize: theme.typography.pxToRem(16),\n    lineHeight: '24px',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the subtitle container element. */\n  subtitle: {\n    fontSize: theme.typography.pxToRem(12),\n    lineHeight: 1,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the actionIcon if supplied. */\n  actionIcon: {},\n\n  /* Styles applied to the actionIcon if `actionPosition=\"left\"`. */\n  actionIconActionPosLeft: {\n    order: -1\n  }\n});\nconst GridListTileBar = /*#__PURE__*/React.forwardRef(function GridListTileBar(props, ref) {\n  const {\n    actionIcon,\n    actionPosition = 'right',\n    classes,\n    className,\n    subtitle,\n    title,\n    titlePosition = 'bottom'\n  } = props,\n        other = _objectWithoutProperties(props, [\"actionIcon\", \"actionPosition\", \"classes\", \"className\", \"subtitle\", \"title\", \"titlePosition\"]);\n\n  const actionPos = actionIcon && actionPosition;\n  return __jsx(\"div\", _extends({\n    className: clsx(classes.root, className, titlePosition === 'top' ? classes.titlePositionTop : classes.titlePositionBottom, subtitle && classes.rootSubtitle),\n    ref: ref\n  }, other), __jsx(\"div\", {\n    className: clsx(classes.titleWrap, {\n      'left': classes.titleWrapActionPosLeft,\n      'right': classes.titleWrapActionPosRight\n    }[actionPos])\n  }, __jsx(\"div\", {\n    className: classes.title\n  }, title), subtitle ? __jsx(\"div\", {\n    className: classes.subtitle\n  }, subtitle) : null), actionIcon ? __jsx(\"div\", {\n    className: clsx(classes.actionIcon, actionPos === 'left' && classes.actionIconActionPosLeft)\n  }, actionIcon) : null);\n});\nexport default withStyles(styles, {\n  name: 'MuiGridListTileBar'\n})(GridListTileBar);","map":null,"metadata":{},"sourceType":"module"}