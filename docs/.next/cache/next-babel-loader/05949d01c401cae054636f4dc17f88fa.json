{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport { withStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport FormControl from \"../../../../../packages/material-ui/src/FormControl\";\nimport FormLabel from \"../../../../../packages/material-ui/src/FormLabel\";\nimport FormControlLabel from \"../../../../../packages/material-ui/src/FormControlLabel\";\nimport RadioGroup from \"../../../../../packages/material-ui/src/RadioGroup\";\nimport Radio from \"../../../../../packages/material-ui/src/Radio\";\nimport HighlightedCode from \"../../../modules/components/HighlightedCode\";\nimport Grid from \"../../../../../packages/material-ui/src/Grid\";\nimport { green } from \"../../../../../packages/material-ui/src/colors\";\nimport Typography from \"../../../../../packages/material-ui/src/Typography\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport Popover from \"../../../../../packages/material-ui/src/Popover\";\nimport Input from \"../../../../../packages/material-ui/src/Input\";\nimport InputLabel from \"../../../../../packages/material-ui/src/InputLabel\";\n\nconst styles = theme => ({\n  buttonWrapper: {\n    position: 'relative',\n    marginBottom: theme.spacing(4)\n  },\n  anchor: {\n    backgroundColor: green[500],\n    width: 10,\n    height: 10,\n    borderRadius: '50%',\n    position: 'absolute'\n  },\n  radioAnchor: {\n    color: green[600],\n    '&$checked': {\n      color: green[500]\n    }\n  },\n  checked: {},\n  typography: {\n    margin: theme.spacing(2)\n  }\n});\n\nconst inlineStyles = {\n  anchorVertical: {\n    top: {\n      top: -5\n    },\n    center: {\n      top: 'calc(50% - 5px)'\n    },\n    bottom: {\n      bottom: -5\n    }\n  },\n  anchorHorizontal: {\n    left: {\n      left: -5\n    },\n    center: {\n      left: 'calc(50% - 5px)'\n    },\n    right: {\n      right: -5\n    }\n  }\n};\n\nvar _ref = __jsx(FormLabel, {\n  component: \"legend\"\n}, \"anchorReference\");\n\nvar _ref2 = __jsx(FormControlLabel, {\n  value: \"anchorEl\",\n  control: __jsx(Radio, null),\n  label: \"anchorEl\"\n});\n\nvar _ref3 = __jsx(FormControlLabel, {\n  value: \"anchorPosition\",\n  control: __jsx(Radio, null),\n  label: \"anchorPosition\"\n});\n\nvar _ref4 = __jsx(InputLabel, {\n  htmlFor: \"position-top\"\n}, \"anchorPosition.top\");\n\nvar _ref5 = __jsx(InputLabel, {\n  htmlFor: \"position-left\"\n}, \"anchorPosition.left\");\n\nvar _ref6 = __jsx(FormLabel, {\n  component: \"legend\"\n}, \"anchorOrigin.vertical\");\n\nvar _ref7 = __jsx(FormLabel, {\n  component: \"legend\"\n}, \"transformOrigin.vertical\");\n\nvar _ref8 = __jsx(FormControlLabel, {\n  value: \"top\",\n  control: __jsx(Radio, {\n    color: \"primary\"\n  }),\n  label: \"Top\"\n});\n\nvar _ref9 = __jsx(FormControlLabel, {\n  value: \"center\",\n  control: __jsx(Radio, {\n    color: \"primary\"\n  }),\n  label: \"Center\"\n});\n\nvar _ref10 = __jsx(FormControlLabel, {\n  value: \"bottom\",\n  control: __jsx(Radio, {\n    color: \"primary\"\n  }),\n  label: \"Bottom\"\n});\n\nvar _ref11 = __jsx(FormLabel, {\n  component: \"legend\"\n}, \"anchorOrigin.horizontal\");\n\nvar _ref12 = __jsx(FormLabel, {\n  component: \"legend\"\n}, \"transformOrigin.horizontal\");\n\nvar _ref13 = __jsx(FormControlLabel, {\n  value: \"left\",\n  control: __jsx(Radio, {\n    color: \"primary\"\n  }),\n  label: \"Left\"\n});\n\nvar _ref14 = __jsx(FormControlLabel, {\n  value: \"center\",\n  control: __jsx(Radio, {\n    color: \"primary\"\n  }),\n  label: \"Center\"\n});\n\nvar _ref15 = __jsx(FormControlLabel, {\n  value: \"right\",\n  control: __jsx(Radio, {\n    color: \"primary\"\n  }),\n  label: \"Right\"\n});\n\nfunction AnchorPlayground(props) {\n  const {\n    classes\n  } = props;\n  const anchorRef = React.useRef();\n  const [state, setState] = React.useState({\n    open: false,\n    anchorOriginVertical: 'top',\n    anchorOriginHorizontal: 'left',\n    transformOriginVertical: 'top',\n    transformOriginHorizontal: 'left',\n    positionTop: 200,\n    // Just so the popover can be spotted more easily\n    positionLeft: 400,\n    // Same as above\n    anchorReference: 'anchorEl'\n  });\n  const {\n    open,\n    anchorOriginVertical,\n    anchorOriginHorizontal,\n    transformOriginVertical,\n    transformOriginHorizontal,\n    positionTop,\n    positionLeft,\n    anchorReference\n  } = state;\n\n  const handleChange = event => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const handleNumberInputChange = key => event => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      [key]: parseInt(event.target.value, 10)\n    }));\n  };\n\n  const handleClickButton = () => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      open: true\n    }));\n  };\n\n  const handleClose = () => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      open: false\n    }));\n  };\n\n  let mode = '';\n\n  if (anchorReference === 'anchorPosition') {\n    mode = `\n  anchorReference=\"${anchorReference}\"\n  anchorPosition={{ top: ${positionTop}, left: ${positionLeft} }}`;\n  }\n\n  const jsx = `\n<Popover ${mode}\n  anchorOrigin={{\n    vertical: '${anchorOriginVertical}',\n    horizontal: '${anchorOriginHorizontal}',\n  }}\n  transformOrigin={{\n    vertical: '${transformOriginVertical}',\n    horizontal: '${transformOriginHorizontal}',\n  }}\n>\n  The content of the Popover.\n</Popover>\n`;\n  const radioAnchorClasses = {\n    root: classes.radioAnchor,\n    checked: classes.checked\n  };\n  return __jsx(\"div\", null, __jsx(Grid, {\n    container: true,\n    justify: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    className: classes.buttonWrapper\n  }, __jsx(Button, {\n    ref: anchorRef,\n    variant: \"contained\",\n    onClick: handleClickButton\n  }, \"Open Popover\"), anchorReference === 'anchorEl' && __jsx(\"div\", {\n    className: classes.anchor,\n    style: _objectSpread(_objectSpread({}, inlineStyles.anchorVertical[anchorOriginVertical]), inlineStyles.anchorHorizontal[anchorOriginHorizontal])\n  }))), __jsx(Popover, {\n    open: open,\n    anchorEl: anchorRef.current,\n    anchorReference: anchorReference,\n    anchorPosition: {\n      top: positionTop,\n      left: positionLeft\n    },\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: anchorOriginVertical,\n      horizontal: anchorOriginHorizontal\n    },\n    transformOrigin: {\n      vertical: transformOriginVertical,\n      horizontal: transformOriginHorizontal\n    }\n  }, __jsx(Typography, {\n    className: classes.typography\n  }, \"The content of the Popover.\")), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(FormControl, {\n    component: \"fieldset\"\n  }, _ref, __jsx(RadioGroup, {\n    row: true,\n    \"aria-label\": \"anchor reference\",\n    name: \"anchorReference\",\n    value: anchorReference,\n    onChange: handleChange\n  }, _ref2, _ref3))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(FormControl, {\n    className: classes.formControl\n  }, _ref4, __jsx(Input, {\n    id: \"position-top\",\n    type: \"number\",\n    value: positionTop,\n    onChange: handleNumberInputChange('positionTop')\n  })), \"\\xA0\", __jsx(FormControl, {\n    className: classes.formControl\n  }, _ref5, __jsx(Input, {\n    id: \"position-left\",\n    type: \"number\",\n    value: positionLeft,\n    onChange: handleNumberInputChange('positionLeft')\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(FormControl, {\n    component: \"fieldset\"\n  }, _ref6, __jsx(RadioGroup, {\n    \"aria-label\": \"anchor origin vertical\",\n    name: \"anchorOriginVertical\",\n    value: anchorOriginVertical,\n    onChange: handleChange\n  }, __jsx(FormControlLabel, {\n    value: \"top\",\n    control: __jsx(Radio, {\n      classes: radioAnchorClasses\n    }),\n    label: \"Top\"\n  }), __jsx(FormControlLabel, {\n    value: \"center\",\n    control: __jsx(Radio, {\n      classes: radioAnchorClasses\n    }),\n    label: \"Center\"\n  }), __jsx(FormControlLabel, {\n    value: \"bottom\",\n    control: __jsx(Radio, {\n      classes: radioAnchorClasses\n    }),\n    label: \"Bottom\"\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(FormControl, {\n    component: \"fieldset\"\n  }, _ref7, __jsx(RadioGroup, {\n    \"aria-label\": \"transform origin vertical\",\n    name: \"transformOriginVertical\",\n    value: transformOriginVertical,\n    onChange: handleChange\n  }, _ref8, _ref9, _ref10))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(FormControl, {\n    component: \"fieldset\"\n  }, _ref11, __jsx(RadioGroup, {\n    row: true,\n    \"aria-label\": \"anchor origin horizontal\",\n    name: \"anchorOriginHorizontal\",\n    value: anchorOriginHorizontal,\n    onChange: handleChange\n  }, __jsx(FormControlLabel, {\n    value: \"left\",\n    control: __jsx(Radio, {\n      classes: radioAnchorClasses\n    }),\n    label: \"Left\"\n  }), __jsx(FormControlLabel, {\n    value: \"center\",\n    control: __jsx(Radio, {\n      classes: radioAnchorClasses\n    }),\n    label: \"Center\"\n  }), __jsx(FormControlLabel, {\n    value: \"right\",\n    control: __jsx(Radio, {\n      classes: radioAnchorClasses\n    }),\n    label: \"Right\"\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(FormControl, {\n    component: \"fieldset\"\n  }, _ref12, __jsx(RadioGroup, {\n    row: true,\n    \"aria-label\": \"transform origin horizontal\",\n    name: \"transformOriginHorizontal\",\n    value: transformOriginHorizontal,\n    onChange: handleChange\n  }, _ref13, _ref14, _ref15)))), __jsx(HighlightedCode, {\n    code: jsx,\n    language: \"jsx\"\n  }));\n}\n\nexport default withStyles(styles)(AnchorPlayground);","map":null,"metadata":{},"sourceType":"module"}