{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport { makeStyles } from \"../../../../packages/material-ui/src/styles\";\nimport loadScript from \"../utils/loadScript\";\nimport adStyles from \"./ad.styles\";\nimport { adShape } from \"./AdManager\";\nconst useStyles = makeStyles(theme => {\n  const styles = adStyles(theme);\n  return {\n    '@global': {\n      '#cf': _objectSpread(_objectSpread({}, styles.root), {}, {\n        '& .cf-img-wrapper.cf-img-wrapper': styles.imgWrapper,\n        '& img': styles.img,\n        '& a, & a:hover': styles.a,\n        '& .cf-text.cf-text': styles.description,\n        '& .cf-powered-by.cf-powered-by': _objectSpread(_objectSpread({}, styles.poweredby), {}, {\n          '& em': {\n            fontStyle: 'normal'\n          }\n        }),\n        '& .cf-cta': styles.link\n      })\n    }\n  };\n});\n\nvar _ref = __jsx(\"span\", {\n  id: \"codefund\"\n});\n\nexport default function AdCodeFund() {\n  useStyles();\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    loadScript(`https://codefund.io/properties/137/funder.js?theme=unstyled${adShape === 'inline' ? '&template=horizontal' : ''}`, ref.current);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(\"span\", {\n    ref: ref\n  }), _ref);\n}","map":null,"metadata":{},"sourceType":"module"}