{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-lab/src/ToggleButtonGroup/ToggleButtonGroup.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport isValueSelected from \"./isValueSelected\";\nimport { withStyles } from \"../../../material-ui/src/styles\";\nimport { capitalize } from \"../../../material-ui/src/utils\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    borderRadius: theme.shape.borderRadius\n  },\n\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    flexDirection: 'column'\n  },\n\n  /* Styles applied to the children. */\n  grouped: {},\n\n  /* Styles applied to the children if `orientation=\"horizontal\"`. */\n  groupedHorizontal: {\n    '&:not(:first-child)': {\n      marginLeft: -1,\n      borderLeft: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    },\n    '&:not(:last-child)': {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }\n  },\n\n  /* Styles applied to the children if `orientation=\"vertical\"`. */\n  groupedVertical: {\n    '&:not(:first-child)': {\n      marginTop: -1,\n      borderTop: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    },\n    '&:not(:last-child)': {\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    }\n  }\n});\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function ToggleButton(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    exclusive = false,\n    onChange,\n    orientation = 'horizontal',\n    size = 'medium',\n    value\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"exclusive\", \"onChange\", \"orientation\", \"size\", \"value\"]);\n\n  const handleChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n\n    const index = value && value.indexOf(buttonValue);\n    let newValue;\n\n    if (value && index >= 0) {\n      newValue = value.slice();\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? value.concat(buttonValue) : [buttonValue];\n    }\n\n    onChange(event, newValue);\n  };\n\n  const handleExclusiveChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n\n    onChange(event, value === buttonValue ? null : buttonValue);\n  };\n\n  return __jsx(\"div\", _extends({\n    role: \"group\",\n    className: clsx(classes.root, className, orientation === 'vertical' && classes.vertical),\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }), React.Children.map(children, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    if (true) {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The ToggleButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, {\n      className: clsx(classes.grouped, classes[`grouped${capitalize(orientation)}`], child.props.className),\n      onChange: exclusive ? handleExclusiveChange : handleChange,\n      selected: child.props.selected === undefined ? isValueSelected(child.props.value, value) : child.props.selected,\n      size: child.props.size || size\n    });\n  }));\n});\nToggleButtonGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, only allow one of the child ToggleButton values to be selected.\n   */\n  exclusive: PropTypes.bool,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {any} value of the selected buttons. When `exclusive` is true\n   * this is a single value; when false an array of selected values. If no value\n   * is selected and `exclusive` is true the value is null; when false an empty array.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The group orientation (layout flow direction).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * The size of the buttons.\n   */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n\n  /**\n   * The currently selected value within the group or an array of selected\n   * values when `exclusive` is false.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   */\n  value: PropTypes.any\n};\nexport default withStyles(styles, {\n  name: 'MuiToggleButtonGroup'\n})(ToggleButtonGroup);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-lab/src/ToggleButtonGroup/ToggleButtonGroup.js"],"names":["React","isFragment","PropTypes","clsx","isValueSelected","withStyles","capitalize","styles","theme","root","display","borderRadius","shape","vertical","flexDirection","grouped","groupedHorizontal","marginLeft","borderLeft","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","groupedVertical","marginTop","borderTop","ToggleButtonGroup","forwardRef","ToggleButton","props","ref","children","classes","className","exclusive","onChange","orientation","size","value","other","handleChange","event","buttonValue","index","indexOf","newValue","slice","splice","concat","handleExclusiveChange","Children","map","child","isValidElement","console","error","join","cloneElement","selected","undefined","propTypes","node","object","string","bool","func","oneOf","any","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport isValueSelected from './isValueSelected';\nimport { withStyles } from '@material-ui/core/styles';\nimport { capitalize } from '@material-ui/core/utils';\n\nexport const styles = (theme) => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    borderRadius: theme.shape.borderRadius,\n  },\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    flexDirection: 'column',\n  },\n  /* Styles applied to the children. */\n  grouped: {},\n  /* Styles applied to the children if `orientation=\"horizontal\"`. */\n  groupedHorizontal: {\n    '&:not(:first-child)': {\n      marginLeft: -1,\n      borderLeft: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    },\n    '&:not(:last-child)': {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n    },\n  },\n  /* Styles applied to the children if `orientation=\"vertical\"`. */\n  groupedVertical: {\n    '&:not(:first-child)': {\n      marginTop: -1,\n      borderTop: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0,\n    },\n    '&:not(:last-child)': {\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0,\n    },\n  },\n});\n\nconst ToggleButtonGroup = React.forwardRef(function ToggleButton(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    exclusive = false,\n    onChange,\n    orientation = 'horizontal',\n    size = 'medium',\n    value,\n    ...other\n  } = props;\n\n  const handleChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n\n    const index = value && value.indexOf(buttonValue);\n    let newValue;\n\n    if (value && index >= 0) {\n      newValue = value.slice();\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? value.concat(buttonValue) : [buttonValue];\n    }\n\n    onChange(event, newValue);\n  };\n\n  const handleExclusiveChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n\n    onChange(event, value === buttonValue ? null : buttonValue);\n  };\n\n  return (\n    <div\n      role=\"group\"\n      className={clsx(\n        classes.root,\n        {\n          [classes.vertical]: orientation === 'vertical',\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {React.Children.map(children, (child) => {\n        if (!React.isValidElement(child)) {\n          return null;\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (isFragment(child)) {\n            console.error(\n              [\n                \"Material-UI: The ToggleButtonGroup component doesn't accept a Fragment as a child.\",\n                'Consider providing an array instead.',\n              ].join('\\n'),\n            );\n          }\n        }\n\n        return React.cloneElement(child, {\n          className: clsx(\n            classes.grouped,\n            classes[`grouped${capitalize(orientation)}`],\n            child.props.className,\n          ),\n          onChange: exclusive ? handleExclusiveChange : handleChange,\n          selected:\n            child.props.selected === undefined\n              ? isValueSelected(child.props.value, value)\n              : child.props.selected,\n          size: child.props.size || size,\n        });\n      })}\n    </div>\n  );\n});\n\nToggleButtonGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, only allow one of the child ToggleButton values to be selected.\n   */\n  exclusive: PropTypes.bool,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {any} value of the selected buttons. When `exclusive` is true\n   * this is a single value; when false an array of selected values. If no value\n   * is selected and `exclusive` is true the value is null; when false an empty array.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The group orientation (layout flow direction).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The size of the buttons.\n   */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n  /**\n   * The currently selected value within the group or an array of selected\n   * values when `exclusive` is false.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'MuiToggleButtonGroup' })(ToggleButtonGroup);\n"]},"metadata":{},"sourceType":"module"}