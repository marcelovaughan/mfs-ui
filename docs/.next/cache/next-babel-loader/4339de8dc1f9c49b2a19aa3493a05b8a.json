{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { createStyles, makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport Snackbar from \"../../../../../packages/material-ui/src/Snackbar\";\nimport IconButton from \"../../../../../packages/material-ui/src/IconButton\";\nimport CloseIcon from \"../../../../../packages/material-ui-icons/src/Close\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    close: {\n      padding: theme.spacing(0.5)\n    }\n  });\n});\n\nvar _ref = __jsx(CloseIcon, null);\n\nexport default function ConsecutiveSnackbars() {\n  var _React$useState = React.useState([]),\n      snackPack = _React$useState[0],\n      setSnackPack = _React$useState[1];\n\n  var _React$useState2 = React.useState(false),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(undefined),\n      messageInfo = _React$useState3[0],\n      setMessageInfo = _React$useState3[1];\n\n  React.useEffect(function () {\n    if (snackPack.length && !messageInfo) {\n      // Set a new snack when we don't have an active one\n      setMessageInfo(_objectSpread({}, snackPack[0]));\n      setSnackPack(function (prev) {\n        return prev.slice(1);\n      });\n      setOpen(true);\n    } else if (snackPack.length && messageInfo && open) {\n      // Close an active snack when a new one is added\n      setOpen(false);\n    }\n  }, [snackPack, messageInfo, open]);\n\n  var handleClick = function handleClick(message) {\n    return function () {\n      setSnackPack(function (prev) {\n        return [].concat(_toConsumableArray(prev), [{\n          message: message,\n          key: new Date().getTime()\n        }]);\n      });\n    };\n  };\n\n  var handleClose = function handleClose(event, reason) {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  var handleExited = function handleExited() {\n    setMessageInfo(undefined);\n  };\n\n  var classes = useStyles();\n  return __jsx(\"div\", null, __jsx(Button, {\n    onClick: handleClick('Message A')\n  }, \"Show message A\"), __jsx(Button, {\n    onClick: handleClick('Message B')\n  }, \"Show message B\"), __jsx(Snackbar, {\n    key: messageInfo ? messageInfo.key : undefined,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'left'\n    },\n    open: open,\n    autoHideDuration: 6000,\n    onClose: handleClose,\n    onExited: handleExited,\n    message: messageInfo ? messageInfo.message : undefined,\n    action: __jsx(React.Fragment, null, __jsx(Button, {\n      color: \"secondary\",\n      size: \"small\",\n      onClick: handleClose\n    }, \"UNDO\"), __jsx(IconButton, {\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      className: classes.close,\n      onClick: handleClose\n    }, _ref))\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}