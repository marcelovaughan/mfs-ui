{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { chainPropTypes } from \"../../../material-ui-utils/src\";\nimport withStyles from \"../styles/withStyles\";\nimport capitalize from \"../utils/capitalize\";\nconst SIZE = 44;\n\nfunction getRelativeValue(value, min, max) {\n  return (Math.min(Math.max(min, value), max) - min) / (max - min);\n}\n\nfunction easeOut(t) {\n  t = getRelativeValue(t, 0, 1); // https://gist.github.com/gre/1650294\n\n  t = (t -= 1) * t * t + 1;\n  return t;\n}\n\nfunction easeIn(t) {\n  return t * t;\n}\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-block'\n  },\n\n  /* Styles applied to the root element if `variant=\"static\"`. */\n  static: {\n    transition: theme.transitions.create('transform')\n  },\n\n  /* Styles applied to the root element if `variant=\"indeterminate\"`. */\n  indeterminate: {\n    animation: '$circular-rotate 1.4s linear infinite'\n  },\n\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main\n  },\n\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main\n  },\n\n  /* Styles applied to the `svg` element. */\n  svg: {\n    display: 'block' // Keeps the progress centered\n\n  },\n\n  /* Styles applied to the `circle` svg path. */\n  circle: {\n    stroke: 'currentColor' // Use butt to follow the specification, by chance, it's already the default CSS value.\n    // strokeLinecap: 'butt',\n\n  },\n\n  /* Styles applied to the `circle` svg path if `variant=\"static\"`. */\n  circleStatic: {\n    transition: theme.transitions.create('stroke-dashoffset')\n  },\n\n  /* Styles applied to the `circle` svg path if `variant=\"indeterminate\"`. */\n  circleIndeterminate: {\n    animation: '$circular-dash 1.4s ease-in-out infinite',\n    // Some default value that looks fine waiting for the animation to kicks in.\n    strokeDasharray: '80px, 200px',\n    strokeDashoffset: '0px' // Add the unit to fix a Edge 16 and below bug.\n\n  },\n  '@keyframes circular-rotate': {\n    '0%': {\n      // Fix IE 11 wobbly\n      transformOrigin: '50% 50%'\n    },\n    '100%': {\n      transform: 'rotate(360deg)'\n    }\n  },\n  '@keyframes circular-dash': {\n    '0%': {\n      strokeDasharray: '1px, 200px',\n      strokeDashoffset: '0px'\n    },\n    '50%': {\n      strokeDasharray: '100px, 200px',\n      strokeDashoffset: '-15px'\n    },\n    '100%': {\n      strokeDasharray: '100px, 200px',\n      strokeDashoffset: '-125px'\n    }\n  },\n\n  /* Styles applied to the `circle` svg path if `disableShrink={true}`. */\n  circleDisableShrink: {\n    animation: 'none'\n  }\n});\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\n\nconst CircularProgress = /*#__PURE__*/React.forwardRef(function CircularProgress(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'primary',\n    disableShrink = false,\n    size = 40,\n    style,\n    thickness = 3.6,\n    value = 0,\n    variant = 'indeterminate'\n  } = props,\n        other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"disableShrink\", \"size\", \"style\", \"thickness\", \"value\", \"variant\"]);\n\n  const circleStyle = {};\n  const rootStyle = {};\n  const rootProps = {};\n\n  if (variant === 'determinate' || variant === 'static') {\n    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);\n    circleStyle.strokeDasharray = circumference.toFixed(3);\n    rootProps['aria-valuenow'] = Math.round(value);\n\n    if (variant === 'static') {\n      circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;\n      rootStyle.transform = 'rotate(-90deg)';\n    } else {\n      circleStyle.strokeDashoffset = `${(easeIn((100 - value) / 100) * circumference).toFixed(3)}px`;\n      rootStyle.transform = `rotate(${(easeOut(value / 70) * 270).toFixed(3)}deg)`;\n    }\n  }\n\n  return __jsx(\"div\", _extends({\n    className: clsx(classes.root, className, color !== 'inherit' && classes[`color${capitalize(color)}`], {\n      'indeterminate': classes.indeterminate,\n      'static': classes.static\n    }[variant]),\n    style: _objectSpread(_objectSpread({\n      width: size,\n      height: size\n    }, rootStyle), style),\n    ref: ref,\n    role: \"progressbar\"\n  }, rootProps, other), __jsx(\"svg\", {\n    className: classes.svg,\n    viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`\n  }, __jsx(\"circle\", {\n    className: clsx(classes.circle, disableShrink && classes.circleDisableShrink, {\n      'indeterminate': classes.circleIndeterminate,\n      'static': classes.circleStatic\n    }[variant]),\n    style: circleStyle,\n    cx: SIZE,\n    cy: SIZE,\n    r: (SIZE - thickness) / 2,\n    fill: \"none\",\n    strokeWidth: thickness\n  })));\n});\nexport default withStyles(styles, {\n  name: 'MuiCircularProgress',\n  flip: false\n})(CircularProgress);","map":null,"metadata":{},"sourceType":"module"}