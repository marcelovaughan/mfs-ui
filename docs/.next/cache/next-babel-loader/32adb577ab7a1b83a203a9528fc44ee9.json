{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport { deepmerge } from \"../../../material-ui-utils/src\";\n\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}\n\nvar caseAllCaps = {\n  textTransform: 'uppercase'\n};\nvar defaultFontFamily = '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif';\n/**\n * @see @link{https://material.io/design/typography/the-type-system.html}\n * @see @link{https://material.io/design/typography/understanding-typography.html}\n */\n\nexport default function createTypography(palette, typography) {\n  var _ref = typeof typography === 'function' ? typography(palette) : typography,\n      _ref$fontFamily = _ref.fontFamily,\n      fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,\n      _ref$fontSize = _ref.fontSize,\n      fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,\n      _ref$fontWeightLight = _ref.fontWeightLight,\n      fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,\n      _ref$fontWeightRegula = _ref.fontWeightRegular,\n      fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,\n      _ref$fontWeightMedium = _ref.fontWeightMedium,\n      fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,\n      _ref$fontWeightBold = _ref.fontWeightBold,\n      fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold,\n      _ref$htmlFontSize = _ref.htmlFontSize,\n      htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,\n      allVariants = _ref.allVariants,\n      pxToRem2 = _ref.pxToRem,\n      other = _objectWithoutProperties(_ref, [\"fontFamily\", \"fontSize\", \"fontWeightLight\", \"fontWeightRegular\", \"fontWeightMedium\", \"fontWeightBold\", \"htmlFontSize\", \"allVariants\", \"pxToRem\"]);\n\n  if (true) {\n    if (typeof fontSize !== 'number') {\n      console.error('Material-UI: `fontSize` is required to be a number.');\n    }\n\n    if (typeof htmlFontSize !== 'number') {\n      console.error('Material-UI: `htmlFontSize` is required to be a number.');\n    }\n  }\n\n  var coef = fontSize / 14;\n\n  var pxToRem = pxToRem2 || function (size) {\n    return \"\".concat(size / htmlFontSize * coef, \"rem\");\n  };\n\n  var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {\n    return _objectSpread(_objectSpread(_objectSpread({\n      fontFamily: fontFamily,\n      fontWeight: fontWeight,\n      fontSize: pxToRem(size),\n      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/\n      lineHeight: lineHeight\n    }, fontFamily === defaultFontFamily ? {\n      letterSpacing: \"\".concat(round(letterSpacing / size), \"em\")\n    } : {}), casing), allVariants);\n  };\n\n  var variants = {\n    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),\n    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),\n    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),\n    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),\n    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),\n    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),\n    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),\n    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),\n    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),\n    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),\n    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),\n    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),\n    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)\n  };\n  return deepmerge(_objectSpread({\n    htmlFontSize: htmlFontSize,\n    pxToRem: pxToRem,\n    round: round,\n    // TODO v5: remove\n    fontFamily: fontFamily,\n    fontSize: fontSize,\n    fontWeightLight: fontWeightLight,\n    fontWeightRegular: fontWeightRegular,\n    fontWeightMedium: fontWeightMedium,\n    fontWeightBold: fontWeightBold\n  }, variants), other, {\n    clone: false // No need to clone deep\n\n  });\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/styles/createTypography.js"],"names":["deepmerge","round","value","Math","caseAllCaps","textTransform","defaultFontFamily","createTypography","palette","typography","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem2","pxToRem","other","console","error","coef","size","buildVariant","fontWeight","lineHeight","letterSpacing","casing","variants","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","clone"],"mappings":"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","sourcesContent":["import { deepmerge } from '@material-ui/utils';\n\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}\n\nconst caseAllCaps = {\n  textTransform: 'uppercase',\n};\nconst defaultFontFamily = '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif';\n\n/**\n * @see @link{https://material.io/design/typography/the-type-system.html}\n * @see @link{https://material.io/design/typography/understanding-typography.html}\n */\nexport default function createTypography(palette, typography) {\n  const {\n    fontFamily = defaultFontFamily,\n    // The default font size of the Material Specification.\n    fontSize = 14, // px\n    fontWeightLight = 300,\n    fontWeightRegular = 400,\n    fontWeightMedium = 500,\n    fontWeightBold = 700,\n    // Tell Material-UI what's the font-size on the html element.\n    // 16px is the default font-size used by browsers.\n    htmlFontSize = 16,\n    // Apply the CSS properties to all the variants.\n    allVariants,\n    pxToRem: pxToRem2,\n    ...other\n  } = typeof typography === 'function' ? typography(palette) : typography;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof fontSize !== 'number') {\n      console.error('Material-UI: `fontSize` is required to be a number.');\n    }\n\n    if (typeof htmlFontSize !== 'number') {\n      console.error('Material-UI: `htmlFontSize` is required to be a number.');\n    }\n  }\n\n  const coef = fontSize / 14;\n  const pxToRem = pxToRem2 || ((size) => `${(size / htmlFontSize) * coef}rem`);\n  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => ({\n    fontFamily,\n    fontWeight,\n    fontSize: pxToRem(size),\n    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/\n    lineHeight,\n    // The letter spacing was designed for the Roboto font-family. Using the same letter-spacing\n    // across font-families can cause issues with the kerning.\n    ...(fontFamily === defaultFontFamily\n      ? { letterSpacing: `${round(letterSpacing / size)}em` }\n      : {}),\n    ...casing,\n    ...allVariants,\n  });\n\n  const variants = {\n    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),\n    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),\n    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),\n    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),\n    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),\n    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),\n    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),\n    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),\n    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),\n    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),\n    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),\n    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),\n    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),\n  };\n\n  return deepmerge(\n    {\n      htmlFontSize,\n      pxToRem,\n      round, // TODO v5: remove\n      fontFamily,\n      fontSize,\n      fontWeightLight,\n      fontWeightRegular,\n      fontWeightMedium,\n      fontWeightBold,\n      ...variants,\n    },\n    other,\n    {\n      clone: false, // No need to clone deep\n    },\n  );\n}\n"]},"metadata":{},"sourceType":"module"}