{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport ButtonBase from \"../ButtonBase\";\nimport unsupportedProp from \"../utils/unsupportedProp\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    transition: theme.transitions.create(['color', 'padding-top'], {\n      duration: theme.transitions.duration.short\n    }),\n    padding: '6px 12px 8px',\n    minWidth: 80,\n    maxWidth: 168,\n    color: theme.palette.text.secondary,\n    flex: '1',\n    '&$iconOnly': {\n      paddingTop: 16\n    },\n    '&$selected': {\n      paddingTop: 6,\n      color: theme.palette.primary.main\n    }\n  },\n\n  /* Pseudo-class applied to the root element if selected. */\n  selected: {},\n\n  /* Pseudo-class applied to the root element if `showLabel={false}` and not selected. */\n  iconOnly: {},\n\n  /* Styles applied to the span element that wraps the icon and label. */\n  wrapper: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    flexDirection: 'column'\n  },\n\n  /* Styles applied to the label's span element. */\n  label: {\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(12),\n    opacity: 1,\n    transition: 'font-size 0.2s, opacity 0.2s',\n    transitionDelay: '0.1s',\n    '&$iconOnly': {\n      opacity: 0,\n      transitionDelay: '0s'\n    },\n    '&$selected': {\n      fontSize: theme.typography.pxToRem(14)\n    }\n  }\n});\nconst BottomNavigationAction = /*#__PURE__*/React.forwardRef(function BottomNavigationAction(props, ref) {\n  const {\n    classes,\n    className,\n    icon,\n    label,\n    onChange,\n    onClick,\n    selected,\n    showLabel,\n    value\n  } = props,\n        other = _objectWithoutProperties(props, [\"classes\", \"className\", \"icon\", \"label\", \"onChange\", \"onClick\", \"selected\", \"showLabel\", \"value\"]);\n\n  const handleChange = event => {\n    if (onChange) {\n      onChange(event, value);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return __jsx(ButtonBase, _extends({\n    ref: ref,\n    className: clsx(classes.root, className, selected ? classes.selected : !showLabel && classes.iconOnly),\n    focusRipple: true,\n    onClick: handleChange\n  }, other), __jsx(\"span\", {\n    className: classes.wrapper\n  }, icon, __jsx(\"span\", {\n    className: clsx(classes.label, selected ? classes.selected : !showLabel && classes.iconOnly)\n  }, label)));\n});\nexport default withStyles(styles, {\n  name: 'MuiBottomNavigationAction'\n})(BottomNavigationAction);","map":null,"metadata":{},"sourceType":"module"}