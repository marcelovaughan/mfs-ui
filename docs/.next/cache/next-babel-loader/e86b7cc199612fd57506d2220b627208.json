{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport clsx from 'clsx';\nimport { useSelector } from 'react-redux';\nimport { withStyles } from \"../../../../packages/material-ui/src/styles\";\nimport List from \"../../../../packages/material-ui/src/List\";\nimport Drawer from \"../../../../packages/material-ui/src/Drawer\";\nimport SwipeableDrawer from \"../../../../packages/material-ui/src/SwipeableDrawer\";\nimport Divider from \"../../../../packages/material-ui/src/Divider\";\nimport Hidden from \"../../../../packages/material-ui/src/Hidden\";\nimport Box from \"../../../../packages/material-ui/src/Box\";\nimport DiamondSponsors from \"./DiamondSponsors\";\nimport AppDrawerNavItem from \"./AppDrawerNavItem\";\nimport Link from \"./Link\";\nimport { pageToTitleI18n } from \"../utils/helpers\";\nimport PageContext from \"./PageContext\";\nvar savedScrollTop = null;\n\nfunction PersistScroll(props) {\n  var children = props.children;\n  var rootRef = React.useRef();\n  React.useEffect(function () {\n    var parent = rootRef.current ? rootRef.current.parentElement : null;\n    var activeElement = document.querySelector('.drawer-active');\n\n    if (!parent || !activeElement || !activeElement.scrollIntoView) {\n      return undefined;\n    }\n\n    var activeBox = activeElement.getBoundingClientRect();\n\n    if (savedScrollTop === null || activeBox.top - savedScrollTop < 0) {\n      // Center the selected item in the list container.\n      activeElement.scrollIntoView(); // Fix a Chrome issue, reset the tabbable ring back to the top of the document.\n\n      document.body.scrollIntoView();\n    } else {\n      parent.scrollTop = savedScrollTop;\n    }\n\n    return function () {\n      savedScrollTop = parent.scrollTop;\n    };\n  }, []);\n  return __jsx(\"div\", {\n    ref: rootRef\n  }, children);\n}\n\nvar styles = function styles(theme) {\n  return {\n    paper: {\n      width: 240,\n      backgroundColor: theme.palette.background.level1\n    },\n    title: {\n      color: theme.palette.text.secondary,\n      marginBottom: theme.spacing(0.5),\n      '&:hover': {\n        color: theme.palette.primary.main\n      }\n    },\n    // https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items\n    toolbarIe11: {\n      display: 'flex'\n    },\n    toolbar: _objectSpread(_objectSpread({}, theme.mixins.toolbar), {}, {\n      paddingLeft: theme.spacing(3),\n      display: 'flex',\n      flexGrow: 1,\n      flexDirection: 'column',\n      alignItems: 'flex-start',\n      justifyContent: 'center'\n    })\n  };\n};\n\nfunction renderNavItems(options) {\n  var pages = options.pages,\n      params = _objectWithoutProperties(options, [\"pages\"]);\n\n  return __jsx(List, null, pages.reduce( // eslint-disable-next-line no-use-before-define\n  function (items, page) {\n    return reduceChildRoutes(_objectSpread({\n      items: items,\n      page: page\n    }, params));\n  }, []));\n}\n\nfunction reduceChildRoutes(_ref) {\n  var props = _ref.props,\n      activePage = _ref.activePage,\n      items = _ref.items,\n      page = _ref.page,\n      depth = _ref.depth,\n      t = _ref.t;\n\n  if (page.displayNav === false) {\n    return items;\n  }\n\n  if (page.children && page.children.length > 1) {\n    var title = pageToTitleI18n(page, t);\n    var topLevel = activePage ? activePage.pathname.indexOf(\"\".concat(page.pathname, \"/\")) === 0 : false;\n    items.push(__jsx(AppDrawerNavItem, {\n      linkProps: page.linkProps,\n      depth: depth,\n      key: title,\n      topLevel: topLevel && !page.subheader,\n      openImmediately: topLevel || Boolean(page.subheader),\n      title: title\n    }, renderNavItems({\n      props: props,\n      pages: page.children,\n      activePage: activePage,\n      depth: depth + 1,\n      t: t\n    })));\n  } else {\n    var _title = pageToTitleI18n(page, t);\n\n    page = page.children && page.children.length === 1 ? page.children[0] : page;\n    items.push(__jsx(AppDrawerNavItem, {\n      linkProps: page.linkProps,\n      depth: depth,\n      key: _title,\n      title: _title,\n      href: page.pathname,\n      onClick: props.onClose\n    }));\n  }\n\n  return items;\n} // iOS is hosted on high-end devices. We can enable the backdrop transition without\n// dropping frames. The performance will be good enough.\n// So: <SwipeableDrawer disableBackdropTransition={false} />\n\n\nvar iOS = true && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\nvar _ref2 = __jsx(Divider, null);\n\nvar _ref3 = __jsx(Box, {\n  mx: 3,\n  my: 2\n}, __jsx(DiamondSponsors, {\n  spot: \"drawer\"\n}));\n\nfunction AppDrawer(props) {\n  var classes = props.classes,\n      className = props.className,\n      disablePermanent = props.disablePermanent,\n      mobileOpen = props.mobileOpen,\n      onClose = props.onClose,\n      onOpen = props.onOpen;\n\n  var _React$useContext = React.useContext(PageContext),\n      activePage = _React$useContext.activePage,\n      pages = _React$useContext.pages;\n\n  var userLanguage = useSelector(function (state) {\n    return state.options.userLanguage;\n  });\n  var languagePrefix = userLanguage === 'en' ? '' : \"/\".concat(userLanguage);\n  var t = useSelector(function (state) {\n    return state.options.t;\n  });\n\n  var drawer = __jsx(PersistScroll, null, __jsx(\"div\", {\n    className: classes.toolbarIe11\n  }, __jsx(\"div\", {\n    className: classes.toolbar\n  }, __jsx(Link, {\n    className: classes.title,\n    href: \"/\",\n    onClick: onClose,\n    variant: \"h6\",\n    color: \"inherit\"\n  }, \"Material-UI\"), process.env.LIB_VERSION ? __jsx(Link, {\n    color: \"textSecondary\",\n    variant: \"caption\",\n    href: \"https://material-ui.com\".concat(languagePrefix, \"/versions/\"),\n    onClick: onClose\n  }, \"v\".concat(process.env.LIB_VERSION)) : null)), _ref2, _ref3, renderNavItems({\n    props: props,\n    pages: pages,\n    activePage: activePage,\n    depth: 0,\n    t: t\n  }));\n\n  return __jsx(\"nav\", {\n    className: className,\n    \"aria-label\": t('mainNavigation')\n  }, __jsx(Hidden, {\n    lgUp: !disablePermanent,\n    implementation: \"js\"\n  }, __jsx(SwipeableDrawer, {\n    classes: {\n      paper: clsx(classes.paper, 'algolia-drawer')\n    },\n    disableBackdropTransition: !iOS,\n    variant: \"temporary\",\n    open: mobileOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    ModalProps: {\n      keepMounted: true\n    }\n  }, drawer)), disablePermanent ? null : __jsx(Hidden, {\n    mdDown: true,\n    implementation: \"css\"\n  }, __jsx(Drawer, {\n    classes: {\n      paper: classes.paper\n    },\n    variant: \"permanent\",\n    open: true\n  }, drawer)));\n}\n\nexport default withStyles(styles)(AppDrawer);","map":null,"metadata":{},"sourceType":"module"}