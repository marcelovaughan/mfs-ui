{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { deepmerge } from \"../../../material-ui-utils/src\";\n\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}\n\nconst caseAllCaps = {\n  textTransform: 'uppercase'\n};\nconst defaultFontFamily = '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif';\n/**\n * @see @link{https://material.io/design/typography/the-type-system.html}\n * @see @link{https://material.io/design/typography/understanding-typography.html}\n */\n\nexport default function createTypography(palette, typography) {\n  const _ref = typeof typography === 'function' ? typography(palette) : typography,\n        {\n    fontFamily = defaultFontFamily,\n    // The default font size of the Material Specification.\n    fontSize = 14,\n    // px\n    fontWeightLight = 300,\n    fontWeightRegular = 400,\n    fontWeightMedium = 500,\n    fontWeightBold = 700,\n    // Tell Material-UI what's the font-size on the html element.\n    // 16px is the default font-size used by browsers.\n    htmlFontSize = 16,\n    // Apply the CSS properties to all the variants.\n    allVariants,\n    pxToRem: pxToRem2\n  } = _ref,\n        other = _objectWithoutProperties(_ref, [\"fontFamily\", \"fontSize\", \"fontWeightLight\", \"fontWeightRegular\", \"fontWeightMedium\", \"fontWeightBold\", \"htmlFontSize\", \"allVariants\", \"pxToRem\"]);\n\n  if (true) {\n    if (typeof fontSize !== 'number') {\n      console.error('Material-UI: `fontSize` is required to be a number.');\n    }\n\n    if (typeof htmlFontSize !== 'number') {\n      console.error('Material-UI: `htmlFontSize` is required to be a number.');\n    }\n  }\n\n  const coef = fontSize / 14;\n\n  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);\n\n  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _objectSpread(_objectSpread(_objectSpread({\n    fontFamily,\n    fontWeight,\n    fontSize: pxToRem(size),\n    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/\n    lineHeight\n  }, fontFamily === defaultFontFamily ? {\n    letterSpacing: `${round(letterSpacing / size)}em`\n  } : {}), casing), allVariants);\n\n  const variants = {\n    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),\n    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),\n    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),\n    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),\n    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),\n    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),\n    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),\n    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),\n    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),\n    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),\n    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),\n    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),\n    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)\n  };\n  return deepmerge(_objectSpread({\n    htmlFontSize,\n    pxToRem,\n    round,\n    // TODO v5: remove\n    fontFamily,\n    fontSize,\n    fontWeightLight,\n    fontWeightRegular,\n    fontWeightMedium,\n    fontWeightBold\n  }, variants), other, {\n    clone: false // No need to clone deep\n\n  });\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/styles/createTypography.js"],"names":["deepmerge","round","value","Math","caseAllCaps","textTransform","defaultFontFamily","createTypography","palette","typography","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem","pxToRem2","other","console","error","coef","size","buildVariant","fontWeight","lineHeight","letterSpacing","casing","variants","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","clone"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOC,IAAI,CAACF,KAAL,CAAWC,KAAK,GAAG,GAAnB,IAA0B,GAAjC;AACD;;AAED,MAAME,WAAW,GAAG;AAClBC,EAAAA,aAAa,EAAE;AADG,CAApB;AAGA,MAAMC,iBAAiB,GAAG,4CAA1B;AAEA;;;;;AAIA,eAAe,SAASC,gBAAT,CAA0BC,OAA1B,EAAmCC,UAAnC,EAA+C;AAC5D,eAeI,OAAOA,UAAP,KAAsB,UAAtB,GAAmCA,UAAU,CAACD,OAAD,CAA7C,GAAyDC,UAf7D;AAAA,QAAM;AACJC,IAAAA,UAAU,GAAGJ,iBADT;AAEJ;AACAK,IAAAA,QAAQ,GAAG,EAHP;AAGW;AACfC,IAAAA,eAAe,GAAG,GAJd;AAKJC,IAAAA,iBAAiB,GAAG,GALhB;AAMJC,IAAAA,gBAAgB,GAAG,GANf;AAOJC,IAAAA,cAAc,GAAG,GAPb;AAQJ;AACA;AACAC,IAAAA,YAAY,GAAG,EAVX;AAWJ;AACAC,IAAAA,WAZI;AAaJC,IAAAA,OAAO,EAAEC;AAbL,GAAN;AAAA,QAcKC,KAdL;;AAiBA,YAA2C;AACzC,QAAI,OAAOT,QAAP,KAAoB,QAAxB,EAAkC;AAChCU,MAAAA,OAAO,CAACC,KAAR,CAAc,qDAAd;AACD;;AAED,QAAI,OAAON,YAAP,KAAwB,QAA5B,EAAsC;AACpCK,MAAAA,OAAO,CAACC,KAAR,CAAc,yDAAd;AACD;AACF;;AAED,QAAMC,IAAI,GAAGZ,QAAQ,GAAG,EAAxB;;AACA,QAAMO,OAAO,GAAGC,QAAQ,KAAMK,IAAD,IAAW,GAAGA,IAAI,GAAGR,YAAR,GAAwBO,IAAK,KAA/C,CAAxB;;AACA,QAAME,YAAY,GAAG,CAACC,UAAD,EAAaF,IAAb,EAAmBG,UAAnB,EAA+BC,aAA/B,EAA8CC,MAA9C;AACnBnB,IAAAA,UADmB;AAEnBgB,IAAAA,UAFmB;AAGnBf,IAAAA,QAAQ,EAAEO,OAAO,CAACM,IAAD,CAHE;AAInB;AACAG,IAAAA;AALmB,KAQfjB,UAAU,KAAKJ,iBAAf,GACA;AAAEsB,IAAAA,aAAa,EAAG,GAAE3B,KAAK,CAAC2B,aAAa,GAAGJ,IAAjB,CAAuB;AAAhD,GADA,GAEA,EAVe,GAWhBK,MAXgB,GAYhBZ,WAZgB,CAArB;;AAeA,QAAMa,QAAQ,GAAG;AACfC,IAAAA,EAAE,EAAEN,YAAY,CAACb,eAAD,EAAkB,EAAlB,EAAsB,KAAtB,EAA6B,CAAC,GAA9B,CADD;AAEfoB,IAAAA,EAAE,EAAEP,YAAY,CAACb,eAAD,EAAkB,EAAlB,EAAsB,GAAtB,EAA2B,CAAC,GAA5B,CAFD;AAGfqB,IAAAA,EAAE,EAAER,YAAY,CAACZ,iBAAD,EAAoB,EAApB,EAAwB,KAAxB,EAA+B,CAA/B,CAHD;AAIfqB,IAAAA,EAAE,EAAET,YAAY,CAACZ,iBAAD,EAAoB,EAApB,EAAwB,KAAxB,EAA+B,IAA/B,CAJD;AAKfsB,IAAAA,EAAE,EAAEV,YAAY,CAACZ,iBAAD,EAAoB,EAApB,EAAwB,KAAxB,EAA+B,CAA/B,CALD;AAMfuB,IAAAA,EAAE,EAAEX,YAAY,CAACX,gBAAD,EAAmB,EAAnB,EAAuB,GAAvB,EAA4B,IAA5B,CAND;AAOfuB,IAAAA,SAAS,EAAEZ,YAAY,CAACZ,iBAAD,EAAoB,EAApB,EAAwB,IAAxB,EAA8B,IAA9B,CAPR;AAQfyB,IAAAA,SAAS,EAAEb,YAAY,CAACX,gBAAD,EAAmB,EAAnB,EAAuB,IAAvB,EAA6B,GAA7B,CARR;AASfyB,IAAAA,KAAK,EAAEd,YAAY,CAACZ,iBAAD,EAAoB,EAApB,EAAwB,GAAxB,EAA6B,IAA7B,CATJ;AAUf2B,IAAAA,KAAK,EAAEf,YAAY,CAACZ,iBAAD,EAAoB,EAApB,EAAwB,IAAxB,EAA8B,IAA9B,CAVJ;AAWf4B,IAAAA,MAAM,EAAEhB,YAAY,CAACX,gBAAD,EAAmB,EAAnB,EAAuB,IAAvB,EAA6B,GAA7B,EAAkCV,WAAlC,CAXL;AAYfsC,IAAAA,OAAO,EAAEjB,YAAY,CAACZ,iBAAD,EAAoB,EAApB,EAAwB,IAAxB,EAA8B,GAA9B,CAZN;AAaf8B,IAAAA,QAAQ,EAAElB,YAAY,CAACZ,iBAAD,EAAoB,EAApB,EAAwB,IAAxB,EAA8B,CAA9B,EAAiCT,WAAjC;AAbP,GAAjB;AAgBA,SAAOJ,SAAS;AAEZgB,IAAAA,YAFY;AAGZE,IAAAA,OAHY;AAIZjB,IAAAA,KAJY;AAIL;AACPS,IAAAA,UALY;AAMZC,IAAAA,QANY;AAOZC,IAAAA,eAPY;AAQZC,IAAAA,iBARY;AASZC,IAAAA,gBATY;AAUZC,IAAAA;AAVY,KAWTe,QAXS,GAadV,KAbc,EAcd;AACEwB,IAAAA,KAAK,EAAE,KADT,CACgB;;AADhB,GAdc,CAAhB;AAkBD","sourcesContent":["import { deepmerge } from '@material-ui/utils';\n\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}\n\nconst caseAllCaps = {\n  textTransform: 'uppercase',\n};\nconst defaultFontFamily = '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif';\n\n/**\n * @see @link{https://material.io/design/typography/the-type-system.html}\n * @see @link{https://material.io/design/typography/understanding-typography.html}\n */\nexport default function createTypography(palette, typography) {\n  const {\n    fontFamily = defaultFontFamily,\n    // The default font size of the Material Specification.\n    fontSize = 14, // px\n    fontWeightLight = 300,\n    fontWeightRegular = 400,\n    fontWeightMedium = 500,\n    fontWeightBold = 700,\n    // Tell Material-UI what's the font-size on the html element.\n    // 16px is the default font-size used by browsers.\n    htmlFontSize = 16,\n    // Apply the CSS properties to all the variants.\n    allVariants,\n    pxToRem: pxToRem2,\n    ...other\n  } = typeof typography === 'function' ? typography(palette) : typography;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof fontSize !== 'number') {\n      console.error('Material-UI: `fontSize` is required to be a number.');\n    }\n\n    if (typeof htmlFontSize !== 'number') {\n      console.error('Material-UI: `htmlFontSize` is required to be a number.');\n    }\n  }\n\n  const coef = fontSize / 14;\n  const pxToRem = pxToRem2 || ((size) => `${(size / htmlFontSize) * coef}rem`);\n  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => ({\n    fontFamily,\n    fontWeight,\n    fontSize: pxToRem(size),\n    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/\n    lineHeight,\n    // The letter spacing was designed for the Roboto font-family. Using the same letter-spacing\n    // across font-families can cause issues with the kerning.\n    ...(fontFamily === defaultFontFamily\n      ? { letterSpacing: `${round(letterSpacing / size)}em` }\n      : {}),\n    ...casing,\n    ...allVariants,\n  });\n\n  const variants = {\n    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),\n    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),\n    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),\n    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),\n    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),\n    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),\n    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),\n    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),\n    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),\n    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),\n    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),\n    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),\n    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),\n  };\n\n  return deepmerge(\n    {\n      htmlFontSize,\n      pxToRem,\n      round, // TODO v5: remove\n      fontFamily,\n      fontSize,\n      fontWeightLight,\n      fontWeightRegular,\n      fontWeightMedium,\n      fontWeightBold,\n      ...variants,\n    },\n    other,\n    {\n      clone: false, // No need to clone deep\n    },\n  );\n}\n"]},"metadata":{},"sourceType":"module"}