{"ast":null,"code":"import React from 'react';\nimport Router from 'next/router';\nimport { pathnameToLanguage } from \"../utils/helpers\";\nexport async function handleEvent(event, as) {\n  // Ignore click for new tab/new window behavior\n  if (event.defaultPrevented || event.button !== 0 || // ignore everything but left-click\n  event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) {\n    return;\n  }\n\n  event.preventDefault();\n  let pathname = as.replace(/#(.*)$/, ''); // Add support for leading / in development mode.\n\n  if (pathname !== '/') {\n    // The leading / is only added to support static hosting (resolve /index.html).\n    // We remove it to normalize the pathname.\n    // See `rewriteUrlForNextExport` on Next.js side.\n    pathname = pathname.replace(/\\/$/, '');\n  }\n\n  pathname = pathnameToLanguage(pathname).canonical;\n  const success = await Router.push(pathname, as);\n\n  if (!success) {\n    return;\n  }\n\n  window.scrollTo(0, 0);\n  document.body.focus();\n}\n\nfunction handleClick(event) {\n  const activeElement = document.activeElement; // Ignore non link clicks\n\n  if (activeElement.nodeName !== 'A' || activeElement.getAttribute('target') === '_blank' || activeElement.getAttribute('data-no-link') === 'true' || activeElement.getAttribute('href').indexOf('/') !== 0) {\n    return;\n  }\n\n  handleEvent(event, document.activeElement.getAttribute('href'));\n}\n\nlet bound = false;\nexport default function MarkdownLinks() {\n  React.useEffect(() => {\n    if (bound) {\n      return;\n    }\n\n    bound = true;\n    document.addEventListener('click', handleClick);\n  }, []);\n  return null;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/components/MarkdownLinks.js"],"names":["React","Router","pathnameToLanguage","handleEvent","event","as","defaultPrevented","button","metaKey","ctrlKey","altKey","shiftKey","preventDefault","pathname","replace","canonical","success","push","window","scrollTo","document","body","focus","handleClick","activeElement","nodeName","getAttribute","indexOf","bound","MarkdownLinks","useEffect","addEventListener"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,kBAAT;AAEA,OAAO,eAAeC,WAAf,CAA2BC,KAA3B,EAAkCC,EAAlC,EAAsC;AAC3C;AACA,MACED,KAAK,CAACE,gBAAN,IACAF,KAAK,CAACG,MAAN,KAAiB,CADjB,IACsB;AACtBH,EAAAA,KAAK,CAACI,OAFN,IAGAJ,KAAK,CAACK,OAHN,IAIAL,KAAK,CAACM,MAJN,IAKAN,KAAK,CAACO,QANR,EAOE;AACA;AACD;;AAEDP,EAAAA,KAAK,CAACQ,cAAN;AAEA,MAAIC,QAAQ,GAAGR,EAAE,CAACS,OAAH,CAAW,QAAX,EAAqB,EAArB,CAAf,CAf2C,CAgB3C;;AACA,MAAID,QAAQ,KAAK,GAAjB,EAAsB;AACpB;AACA;AACA;AACAA,IAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAAX;AACD;;AACDD,EAAAA,QAAQ,GAAGX,kBAAkB,CAACW,QAAD,CAAlB,CAA6BE,SAAxC;AAEA,QAAMC,OAAO,GAAG,MAAMf,MAAM,CAACgB,IAAP,CAAYJ,QAAZ,EAAsBR,EAAtB,CAAtB;;AACA,MAAI,CAACW,OAAL,EAAc;AACZ;AACD;;AACDE,EAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACAC,EAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd;AACD;;AAED,SAASC,WAAT,CAAqBnB,KAArB,EAA4B;AAC1B,QAAMoB,aAAa,GAAGJ,QAAQ,CAACI,aAA/B,CAD0B,CAG1B;;AACA,MACEA,aAAa,CAACC,QAAd,KAA2B,GAA3B,IACAD,aAAa,CAACE,YAAd,CAA2B,QAA3B,MAAyC,QADzC,IAEAF,aAAa,CAACE,YAAd,CAA2B,cAA3B,MAA+C,MAF/C,IAGAF,aAAa,CAACE,YAAd,CAA2B,MAA3B,EAAmCC,OAAnC,CAA2C,GAA3C,MAAoD,CAJtD,EAKE;AACA;AACD;;AAEDxB,EAAAA,WAAW,CAACC,KAAD,EAAQgB,QAAQ,CAACI,aAAT,CAAuBE,YAAvB,CAAoC,MAApC,CAAR,CAAX;AACD;;AAED,IAAIE,KAAK,GAAG,KAAZ;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC7B,EAAAA,KAAK,CAAC8B,SAAN,CAAgB,MAAM;AACpB,QAAIF,KAAJ,EAAW;AACT;AACD;;AACDA,IAAAA,KAAK,GAAG,IAAR;AACAR,IAAAA,QAAQ,CAACW,gBAAT,CAA0B,OAA1B,EAAmCR,WAAnC;AACD,GAND,EAMG,EANH;AAQA,SAAO,IAAP;AACD","sourcesContent":["import React from 'react';\nimport Router from 'next/router';\nimport { pathnameToLanguage } from 'docs/src/modules/utils/helpers';\n\nexport async function handleEvent(event, as) {\n  // Ignore click for new tab/new window behavior\n  if (\n    event.defaultPrevented ||\n    event.button !== 0 || // ignore everything but left-click\n    event.metaKey ||\n    event.ctrlKey ||\n    event.altKey ||\n    event.shiftKey\n  ) {\n    return;\n  }\n\n  event.preventDefault();\n\n  let pathname = as.replace(/#(.*)$/, '');\n  // Add support for leading / in development mode.\n  if (pathname !== '/') {\n    // The leading / is only added to support static hosting (resolve /index.html).\n    // We remove it to normalize the pathname.\n    // See `rewriteUrlForNextExport` on Next.js side.\n    pathname = pathname.replace(/\\/$/, '');\n  }\n  pathname = pathnameToLanguage(pathname).canonical;\n\n  const success = await Router.push(pathname, as);\n  if (!success) {\n    return;\n  }\n  window.scrollTo(0, 0);\n  document.body.focus();\n}\n\nfunction handleClick(event) {\n  const activeElement = document.activeElement;\n\n  // Ignore non link clicks\n  if (\n    activeElement.nodeName !== 'A' ||\n    activeElement.getAttribute('target') === '_blank' ||\n    activeElement.getAttribute('data-no-link') === 'true' ||\n    activeElement.getAttribute('href').indexOf('/') !== 0\n  ) {\n    return;\n  }\n\n  handleEvent(event, document.activeElement.getAttribute('href'));\n}\n\nlet bound = false;\n\nexport default function MarkdownLinks() {\n  React.useEffect(() => {\n    if (bound) {\n      return;\n    }\n    bound = true;\n    document.addEventListener('click', handleClick);\n  }, []);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}