{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport TreeView from \"../../../../../packages/material-ui-lab/src/TreeView\";\nimport ExpandMoreIcon from \"../../../../../packages/material-ui-icons/src/ExpandMore\";\nimport ChevronRightIcon from \"../../../../../packages/material-ui-icons/src/ChevronRight\";\nimport TreeItem from \"../../../../../packages/material-ui-lab/src/TreeItem\";\nvar useStyles = makeStyles({\n  root: {\n    height: 216,\n    flexGrow: 1,\n    maxWidth: 400\n  }\n});\n\nvar _ref = __jsx(ExpandMoreIcon, null);\n\nvar _ref2 = __jsx(ChevronRightIcon, null);\n\nvar _ref3 = __jsx(TreeItem, {\n  nodeId: \"1\",\n  label: \"Applications\"\n}, __jsx(TreeItem, {\n  nodeId: \"2\",\n  label: \"Calendar\"\n}), __jsx(TreeItem, {\n  nodeId: \"3\",\n  label: \"Chrome\"\n}), __jsx(TreeItem, {\n  nodeId: \"4\",\n  label: \"Webstorm\"\n}));\n\nvar _ref4 = __jsx(TreeItem, {\n  nodeId: \"5\",\n  label: \"Documents\"\n}, __jsx(TreeItem, {\n  nodeId: \"6\",\n  label: \"Material-UI\"\n}, __jsx(TreeItem, {\n  nodeId: \"7\",\n  label: \"src\"\n}, __jsx(TreeItem, {\n  nodeId: \"8\",\n  label: \"index.js\"\n}), __jsx(TreeItem, {\n  nodeId: \"9\",\n  label: \"tree-view.js\"\n}))));\n\nexport default function ControlledTreeView() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState([]),\n      expanded = _React$useState[0],\n      setExpanded = _React$useState[1];\n\n  var _React$useState2 = React.useState([]),\n      selected = _React$useState2[0],\n      setSelected = _React$useState2[1];\n\n  var handleToggle = function handleToggle(event, nodeIds) {\n    setExpanded(nodeIds);\n  };\n\n  var handleSelect = function handleSelect(event, nodeIds) {\n    setSelected(nodeIds);\n  };\n\n  return __jsx(TreeView, {\n    className: classes.root,\n    defaultCollapseIcon: _ref,\n    defaultExpandIcon: _ref2,\n    expanded: expanded,\n    selected: selected,\n    onNodeToggle: handleToggle,\n    onNodeSelect: handleSelect\n  }, _ref3, _ref4);\n}","map":null,"metadata":{},"sourceType":"module"}