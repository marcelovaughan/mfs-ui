{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport Table from \"../../../../../packages/material-ui/src/Table\";\nimport TableBody from \"../../../../../packages/material-ui/src/TableBody\";\nimport TableCell from \"../../../../../packages/material-ui/src/TableCell\";\nimport TableContainer from \"../../../../../packages/material-ui/src/TableContainer\";\nimport TableHead from \"../../../../../packages/material-ui/src/TableHead\";\nimport TablePagination from \"../../../../../packages/material-ui/src/TablePagination\";\nimport TableRow from \"../../../../../packages/material-ui/src/TableRow\";\nimport TableSortLabel from \"../../../../../packages/material-ui/src/TableSortLabel\";\nimport Toolbar from \"../../../../../packages/material-ui/src/Toolbar\";\nimport Typography from \"../../../../../packages/material-ui/src/Typography\";\nimport Paper from \"../../../../../packages/material-ui/src/Paper\";\nimport Checkbox from \"../../../../../packages/material-ui/src/Checkbox\";\nimport IconButton from \"../../../../../packages/material-ui/src/IconButton\";\nimport Tooltip from \"../../../../../packages/material-ui/src/Tooltip\";\nimport FormControlLabel from \"../../../../../packages/material-ui/src/FormControlLabel\";\nimport Switch from \"../../../../../packages/material-ui/src/Switch\";\nimport DeleteIcon from \"../../../../../packages/material-ui-icons/src/Delete\";\nimport FilterListIcon from \"../../../../../packages/material-ui-icons/src/FilterList\";\nimport { visuallyHidden } from \"../../../../../packages/material-ui-system/src\";\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {\n    name: name,\n    calories: calories,\n    fat: fat,\n    carbs: carbs,\n    protein: protein\n  };\n}\n\nvar rows = [createData('Cupcake', 305, 3.7, 67, 4.3), createData('Donut', 452, 25.0, 51, 4.9), createData('Eclair', 262, 16.0, 24, 6.0), createData('Frozen yoghurt', 159, 6.0, 24, 4.0), createData('Gingerbread', 356, 16.0, 49, 3.9), createData('Honeycomb', 408, 3.2, 87, 6.5), createData('Ice cream sandwich', 237, 9.0, 37, 4.3), createData('Jelly Bean', 375, 0.0, 94, 0.0), createData('KitKat', 518, 26.0, 65, 7.0), createData('Lollipop', 392, 0.2, 98, 0.0), createData('Marshmallow', 318, 0, 81, 2.0), createData('Nougat', 360, 19.0, 9, 37.0), createData('Oreo', 437, 18.0, 63, 4.0)];\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc' ? function (a, b) {\n    return descendingComparator(a, b, orderBy);\n  } : function (a, b) {\n    return -descendingComparator(a, b, orderBy);\n  };\n}\n\nfunction stableSort(array, comparator) {\n  var stabilizedThis = array.map(function (el, index) {\n    return [el, index];\n  });\n  stabilizedThis.sort(function (a, b) {\n    var order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(function (el) {\n    return el[0];\n  });\n}\n\nvar headCells = [{\n  id: 'name',\n  numeric: false,\n  disablePadding: true,\n  label: 'Dessert (100g serving)'\n}, {\n  id: 'calories',\n  numeric: true,\n  disablePadding: false,\n  label: 'Calories'\n}, {\n  id: 'fat',\n  numeric: true,\n  disablePadding: false,\n  label: 'Fat (g)'\n}, {\n  id: 'carbs',\n  numeric: true,\n  disablePadding: false,\n  label: 'Carbs (g)'\n}, {\n  id: 'protein',\n  numeric: true,\n  disablePadding: false,\n  label: 'Protein (g)'\n}];\n\nfunction EnhancedTableHead(props) {\n  var classes = props.classes,\n      onSelectAllClick = props.onSelectAllClick,\n      order = props.order,\n      orderBy = props.orderBy,\n      numSelected = props.numSelected,\n      rowCount = props.rowCount,\n      onRequestSort = props.onRequestSort;\n\n  var createSortHandler = function createSortHandler(property) {\n    return function (event) {\n      onRequestSort(event, property);\n    };\n  };\n\n  return __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, {\n    padding: \"checkbox\"\n  }, __jsx(Checkbox, {\n    indeterminate: numSelected > 0 && numSelected < rowCount,\n    checked: rowCount > 0 && numSelected === rowCount,\n    onChange: onSelectAllClick,\n    inputProps: {\n      'aria-label': 'select all desserts'\n    }\n  })), headCells.map(function (headCell) {\n    return __jsx(TableCell, {\n      key: headCell.id,\n      align: headCell.numeric ? 'right' : 'left',\n      padding: headCell.disablePadding ? 'none' : 'default',\n      sortDirection: orderBy === headCell.id ? order : false\n    }, __jsx(TableSortLabel, {\n      active: orderBy === headCell.id,\n      direction: orderBy === headCell.id ? order : 'asc',\n      onClick: createSortHandler(headCell.id)\n    }, headCell.label, orderBy === headCell.id ? __jsx(\"span\", {\n      className: classes.sortSpan\n    }, order !== \"asc\" ? 'sorted descending' : 'sorted ascending') : null));\n  })));\n}\n\nvar useToolbarStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(1)\n    },\n    highlight: theme.palette.type === 'light' ? {\n      color: theme.palette.secondary.main,\n      backgroundColor: lighten(theme.palette.secondary.light, 0.85)\n    } : {\n      color: theme.palette.text.primary,\n      backgroundColor: theme.palette.secondary.dark\n    },\n    title: {\n      flex: '1 1 100%'\n    }\n  };\n});\n\nvar _ref = __jsx(Tooltip, {\n  title: \"Delete\"\n}, __jsx(IconButton, {\n  \"aria-label\": \"delete\"\n}, __jsx(DeleteIcon, null)));\n\nvar _ref2 = __jsx(Tooltip, {\n  title: \"Filter list\"\n}, __jsx(IconButton, {\n  \"aria-label\": \"filter list\"\n}, __jsx(FilterListIcon, null)));\n\nvar EnhancedTableToolbar = function EnhancedTableToolbar(props) {\n  var classes = useToolbarStyles();\n  var numSelected = props.numSelected;\n  return __jsx(Toolbar, {\n    className: clsx(classes.root, numSelected > 0 && classes.highlight)\n  }, numSelected > 0 ? __jsx(Typography, {\n    className: classes.title,\n    color: \"inherit\",\n    variant: \"subtitle1\",\n    component: \"div\"\n  }, numSelected, \" selected\") : __jsx(Typography, {\n    className: classes.title,\n    variant: \"h6\",\n    id: \"tableTitle\",\n    component: \"div\"\n  }, \"Nutrition\"), numSelected > 0 ? _ref : _ref2);\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    paper: {\n      width: '100%',\n      marginBottom: theme.spacing(2)\n    },\n    table: {\n      minWidth: 750\n    },\n    // TODO fix #20379.\n    sortSpan: visuallyHidden\n  };\n});\n\nvar _ref3 = __jsx(TableCell, {\n  colSpan: 6\n});\n\nexport default function EnhancedTable() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState('asc'),\n      order = _React$useState[0],\n      setOrder = _React$useState[1];\n\n  var _React$useState2 = React.useState('calories'),\n      orderBy = _React$useState2[0],\n      setOrderBy = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      selected = _React$useState3[0],\n      setSelected = _React$useState3[1];\n\n  var _React$useState4 = React.useState(0),\n      page = _React$useState4[0],\n      setPage = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      dense = _React$useState5[0],\n      setDense = _React$useState5[1];\n\n  var _React$useState6 = React.useState(5),\n      rowsPerPage = _React$useState6[0],\n      setRowsPerPage = _React$useState6[1];\n\n  var handleRequestSort = function handleRequestSort(event, property) {\n    var isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  var handleSelectAllClick = function handleSelectAllClick(event) {\n    if (event.target.checked) {\n      var newSelecteds = rows.map(function (n) {\n        return n.name;\n      });\n      setSelected(newSelecteds);\n      return;\n    }\n\n    setSelected([]);\n  };\n\n  var handleClick = function handleClick(event, name) {\n    var selectedIndex = selected.indexOf(name);\n    var newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n    }\n\n    setSelected(newSelected);\n  };\n\n  var handleChangePage = function handleChangePage(event, newPage) {\n    setPage(newPage);\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(event) {\n    setRowsPerPage(_parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  var handleChangeDense = function handleChangeDense(event) {\n    setDense(event.target.checked);\n  };\n\n  var isSelected = function isSelected(name) {\n    return selected.indexOf(name) !== -1;\n  };\n\n  var emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Paper, {\n    className: classes.paper\n  }, __jsx(EnhancedTableToolbar, {\n    numSelected: selected.length\n  }), __jsx(TableContainer, null, __jsx(Table, {\n    className: classes.table,\n    \"aria-labelledby\": \"tableTitle\",\n    size: dense ? 'small' : 'medium',\n    \"aria-label\": \"enhanced table\"\n  }, __jsx(EnhancedTableHead, {\n    classes: classes,\n    numSelected: selected.length,\n    order: order,\n    orderBy: orderBy,\n    onSelectAllClick: handleSelectAllClick,\n    onRequestSort: handleRequestSort,\n    rowCount: rows.length\n  }), __jsx(TableBody, null, stableSort(rows, getComparator(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(function (row, index) {\n    var isItemSelected = isSelected(row.name);\n    var labelId = \"enhanced-table-checkbox-\".concat(index);\n    return __jsx(TableRow, {\n      hover: true,\n      onClick: function onClick(event) {\n        return handleClick(event, row.name);\n      },\n      role: \"checkbox\",\n      \"aria-checked\": isItemSelected,\n      tabIndex: -1,\n      key: row.name,\n      selected: isItemSelected\n    }, __jsx(TableCell, {\n      padding: \"checkbox\"\n    }, __jsx(Checkbox, {\n      checked: isItemSelected,\n      inputProps: {\n        'aria-labelledby': labelId\n      }\n    })), __jsx(TableCell, {\n      component: \"th\",\n      id: labelId,\n      scope: \"row\",\n      padding: \"none\"\n    }, row.name), __jsx(TableCell, {\n      align: \"right\"\n    }, row.calories), __jsx(TableCell, {\n      align: \"right\"\n    }, row.fat), __jsx(TableCell, {\n      align: \"right\"\n    }, row.carbs), __jsx(TableCell, {\n      align: \"right\"\n    }, row.protein));\n  }), emptyRows > 0 && __jsx(TableRow, {\n    style: {\n      height: (dense ? 33 : 53) * emptyRows\n    }\n  }, _ref3)))), __jsx(TablePagination, {\n    rowsPerPageOptions: [5, 10, 25],\n    component: \"div\",\n    count: rows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage\n  })), __jsx(FormControlLabel, {\n    control: __jsx(Switch, {\n      checked: dense,\n      onChange: handleChangeDense\n    }),\n    label: \"Dense padding\"\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}