{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { useRouter } from 'next/router';\nimport Link from \"../../../../packages/material-ui/src/Link\";\nimport Typography from \"../../../../packages/material-ui/src/Typography\";\nimport { styled } from \"../../../../packages/material-ui/src/styles\";\nimport MarkdownElement from \"../../modules/components/MarkdownElement\";\nimport { render as renderMarkdown } from \"../../modules/utils/parseMarkdown\";\nconst ErrorMessageSection = styled('div')({\n  // reset display: block from Demo\n  display: 'block'\n}); // use elevation={2}\n\nconst ErrorMessageMarkdown = styled(MarkdownElement)(({\n  theme\n}) => {\n  return {\n    boxShadow: theme.shadows['2'],\n    color: theme.palette.error.main,\n    padding: theme.spacing(1, 2)\n  };\n});\n\nvar _ref = __jsx(Typography, null, \"Loading error codes\");\n\nvar _ref2 = __jsx(Typography, {\n  color: \"error\"\n}, \"Seems like we're having some issues loading the original message. Try reloading the page. If the error persists please report this isse on our\", ' ', __jsx(Link, {\n  href: \"https://github.com/mui-org/material-ui/issues/new?template=1.bug.md\",\n  target: \"_blank\"\n}, \"issue tracker\"), \".\");\n\nvar _ref3 = __jsx(Typography, null, \"When you encounter an error, you'll receive a link to this page for that specific error and we'll show you the full error text.\");\n\nvar _ref4 = __jsx(\"p\", null, \"The original text of the error you encountered:\");\n\nexport default function ErrorDecoder() {\n  const {\n    query: {\n      code\n    }\n  } = useRouter(),\n        query = _objectWithoutProperties(useRouter().query, [\"code\"]);\n\n  const queryArgs = query['args[]'];\n  const args = React.useMemo(() => Array.isArray(queryArgs) ? queryArgs : [queryArgs], [queryArgs]);\n  const [data, dispatch] = React.useReducer((previousState, action) => {\n    switch (action.type) {\n      case 'rejected':\n        return {\n          errorCodes: null,\n          state: 'rejected'\n        };\n\n      case 'resolved':\n        return {\n          errorCodes: action.payload,\n          state: 'resolved'\n        };\n\n      default:\n        throw new Error(`We made a mistake passing an unknown action.`);\n    }\n  }, {\n    errorCodes: null,\n    state: 'loading'\n  });\n  React.useEffect(() => {\n    let cancelled = false;\n    fetch('/static/error-codes.json').then(response => {\n      return response.json();\n    }).then(json => {\n      if (cancelled === false) {\n        dispatch({\n          type: 'resolved',\n          payload: json\n        });\n      }\n    }).catch(() => {\n      dispatch({\n        type: 'rejected'\n      });\n    });\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n  const errorMessage = React.useMemo(() => {\n    var _data$errorCodes;\n\n    const rawMessage = (_data$errorCodes = data.errorCodes) === null || _data$errorCodes === void 0 ? void 0 : _data$errorCodes[code];\n\n    if (rawMessage === undefined) {\n      return undefined;\n    }\n\n    let replacementIndex = -1;\n    const readableMessage = rawMessage.replace(/%s/g, () => {\n      replacementIndex += 1;\n      const dangerousArgument = args[replacementIndex];\n\n      if (dangerousArgument === undefined) {\n        return '[missing argument]';\n      } // String will be injected into innerHTML.\n      // We need to escape first\n      // https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations\n\n\n      const div = document.createElement('div');\n      div.innerText = dangerousArgument;\n      return div.innerHTML;\n    });\n    return renderMarkdown(readableMessage);\n  }, [args, code, data.errorCodes]);\n\n  if (data.state === 'loading') {\n    return _ref;\n  }\n\n  if (data.state === 'rejected') {\n    return _ref2;\n  }\n\n  if (errorMessage === undefined) {\n    return _ref3;\n  }\n\n  return __jsx(ErrorMessageSection, null, _ref4, __jsx(ErrorMessageMarkdown, {\n    renderedMarkdown: errorMessage\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}