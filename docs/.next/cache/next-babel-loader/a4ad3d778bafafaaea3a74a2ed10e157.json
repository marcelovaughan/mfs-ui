{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useRouter } from 'next/router';\nimport Link from \"../../../../packages/material-ui/src/Link\";\nimport Typography from \"../../../../packages/material-ui/src/Typography\";\nimport { styled } from \"../../../../packages/material-ui/src/styles\";\nimport MarkdownElement from \"../../modules/components/MarkdownElement\";\nimport { render as renderMarkdown } from \"../../modules/utils/parseMarkdown\";\nvar ErrorMessageSection = styled('div')({\n  // reset display: block from Demo\n  display: 'block'\n}); // use elevation={2}\n\nvar ErrorMessageMarkdown = styled(MarkdownElement)(function (_ref) {\n  var theme = _ref.theme;\n  return {\n    boxShadow: theme.shadows['2'],\n    color: theme.palette.error.main,\n    padding: theme.spacing(1, 2)\n  };\n});\n\nvar _ref2 = __jsx(Typography, null, \"Loading error codes\");\n\nvar _ref3 = __jsx(Typography, {\n  color: \"error\"\n}, \"Seems like we're having some issues loading the original message. Try reloading the page. If the error persists please report this isse on our\", ' ', __jsx(Link, {\n  href: \"https://github.com/mui-org/material-ui/issues/new?template=1.bug.md\",\n  target: \"_blank\"\n}, \"issue tracker\"), \".\");\n\nvar _ref4 = __jsx(Typography, null, \"When you encounter an error, you'll receive a link to this page for that specific error and we'll show you the full error text.\");\n\nvar _ref5 = __jsx(\"p\", null, \"The original text of the error you encountered:\");\n\nexport default function ErrorDecoder() {\n  var _useRouter = useRouter(),\n      _useRouter$query = _useRouter.query,\n      code = _useRouter$query.code,\n      query = _objectWithoutProperties(_useRouter$query, [\"code\"]);\n\n  var queryArgs = query['args[]'];\n  var args = React.useMemo(function () {\n    return _Array$isArray(queryArgs) ? queryArgs : [queryArgs];\n  }, [queryArgs]);\n\n  var _React$useReducer = React.useReducer(function (previousState, action) {\n    switch (action.type) {\n      case 'rejected':\n        return {\n          errorCodes: null,\n          state: 'rejected'\n        };\n\n      case 'resolved':\n        return {\n          errorCodes: action.payload,\n          state: 'resolved'\n        };\n\n      default:\n        throw new Error(\"We made a mistake passing an unknown action.\");\n    }\n  }, {\n    errorCodes: null,\n    state: 'loading'\n  }),\n      data = _React$useReducer[0],\n      dispatch = _React$useReducer[1];\n\n  React.useEffect(function () {\n    var cancelled = false;\n    fetch('/static/error-codes.json').then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      if (cancelled === false) {\n        dispatch({\n          type: 'resolved',\n          payload: json\n        });\n      }\n    })[\"catch\"](function () {\n      dispatch({\n        type: 'rejected'\n      });\n    });\n    return function () {\n      cancelled = true;\n    };\n  }, []);\n  var errorMessage = React.useMemo(function () {\n    var _data$errorCodes;\n\n    var rawMessage = (_data$errorCodes = data.errorCodes) === null || _data$errorCodes === void 0 ? void 0 : _data$errorCodes[code];\n\n    if (rawMessage === undefined) {\n      return undefined;\n    }\n\n    var replacementIndex = -1;\n    var readableMessage = rawMessage.replace(/%s/g, function () {\n      replacementIndex += 1;\n      var dangerousArgument = args[replacementIndex];\n\n      if (dangerousArgument === undefined) {\n        return '[missing argument]';\n      } // String will be injected into innerHTML.\n      // We need to escape first\n      // https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations\n\n\n      var div = document.createElement('div');\n      div.innerText = dangerousArgument;\n      return div.innerHTML;\n    });\n    return renderMarkdown(readableMessage);\n  }, [args, code, data.errorCodes]);\n\n  if (data.state === 'loading') {\n    return _ref2;\n  }\n\n  if (data.state === 'rejected') {\n    return _ref3;\n  }\n\n  if (errorMessage === undefined) {\n    return _ref4;\n  }\n\n  return __jsx(ErrorMessageSection, null, _ref5, __jsx(ErrorMessageMarkdown, {\n    renderedMarkdown: errorMessage\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}