{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Paper/Paper.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from \"../../../material-ui-utils/src\";\nimport withStyles from \"../styles/withStyles\";\nexport var styles = function styles(theme) {\n  var elevations = {};\n  theme.shadows.forEach(function (shadow, index) {\n    elevations[\"elevation\".concat(index)] = {\n      boxShadow: shadow\n    };\n  });\n  return _objectSpread({\n    /* Styles applied to the root element. */\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      color: theme.palette.text.primary,\n      transition: theme.transitions.create('box-shadow')\n    },\n\n    /* Styles applied to the root element if `square={false}`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      border: \"1px solid \".concat(theme.palette.divider)\n    }\n  }, elevations);\n};\nvar Paper = /*#__PURE__*/React.forwardRef(function Paper(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$square = props.square,\n      square = _props$square === void 0 ? false : _props$square,\n      _props$elevation = props.elevation,\n      elevation = _props$elevation === void 0 ? 1 : _props$elevation,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'elevation' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"square\", \"elevation\", \"variant\"]);\n\n  return __jsx(Component, _extends({\n    className: clsx(classes.root, className, variant === 'outlined' ? classes.outlined : classes[\"elevation\".concat(elevation)], !square && classes.rounded),\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }));\n});\nPaper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Shadow depth, corresponds to `dp` in the spec.\n   * It accepts values between 0 and 24 inclusive.\n   */\n  elevation: chainPropTypes(PropTypes.number, function (props) {\n    var classes = props.classes,\n        elevation = props.elevation; // in case `withStyles` fails to inject we don't need this warning\n\n    if (classes === undefined) {\n      return null;\n    }\n\n    if (elevation != null && classes[\"elevation\".concat(elevation)] === undefined) {\n      return new Error(\"Material-UI: This elevation `\".concat(elevation, \"` is not implemented.\"));\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, rounded corners are disabled.\n   */\n  square: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['elevation', 'outlined'])\n};\nexport default withStyles(styles, {\n  name: 'MuiPaper'\n})(Paper);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Paper/Paper.js"],"names":["React","PropTypes","clsx","chainPropTypes","withStyles","styles","theme","elevations","shadows","forEach","shadow","index","boxShadow","root","backgroundColor","palette","background","paper","color","text","primary","transition","transitions","create","rounded","borderRadius","shape","outlined","border","divider","Paper","forwardRef","props","ref","classes","className","component","Component","square","elevation","variant","other","propTypes","children","node","object","string","elementType","number","undefined","Error","bool","oneOf","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = (theme) => {\n  const elevations = {};\n  theme.shadows.forEach((shadow, index) => {\n    elevations[`elevation${index}`] = {\n      boxShadow: shadow,\n    };\n  });\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      color: theme.palette.text.primary,\n      transition: theme.transitions.create('box-shadow'),\n    },\n    /* Styles applied to the root element if `square={false}`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius,\n    },\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      border: `1px solid ${theme.palette.divider}`,\n    },\n    ...elevations,\n  };\n};\n\nconst Paper = React.forwardRef(function Paper(props, ref) {\n  const {\n    classes,\n    className,\n    component: Component = 'div',\n    square = false,\n    elevation = 1,\n    variant = 'elevation',\n    ...other\n  } = props;\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        {\n          [classes.rounded]: !square,\n          [classes[`elevation${elevation}`]]: variant === 'elevation',\n          [classes.outlined]: variant === 'outlined',\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nPaper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes /* @typescript-to-proptypes-ignore */.elementType,\n  /**\n   * Shadow depth, corresponds to `dp` in the spec.\n   * It accepts values between 0 and 24 inclusive.\n   */\n  elevation: chainPropTypes(PropTypes.number, (props) => {\n    const { classes, elevation } = props;\n    // in case `withStyles` fails to inject we don't need this warning\n    if (classes === undefined) {\n      return null;\n    }\n    if (elevation != null && classes[`elevation${elevation}`] === undefined) {\n      return new Error(`Material-UI: This elevation \\`${elevation}\\` is not implemented.`);\n    }\n    return null;\n  }),\n  /**\n   * If `true`, rounded corners are disabled.\n   */\n  square: PropTypes.bool,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['elevation', 'outlined']),\n};\n\nexport default withStyles(styles, { name: 'MuiPaper' })(Paper);\n"]},"metadata":{},"sourceType":"module"}