{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from \"../../../material-ui/src/styles\";\nimport AddIcon from \"../internal/svg-icons/Add\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    height: 24\n  },\n\n  /* Styles applied to the icon component. */\n  icon: {\n    transition: theme.transitions.create(['transform', 'opacity'], {\n      duration: theme.transitions.duration.short\n    })\n  },\n\n  /* Styles applied to the icon component if `open={true}`. */\n  iconOpen: {\n    transform: 'rotate(45deg)'\n  },\n\n  /* Styles applied to the icon when an `openIcon` is provided and if `open={true}`. */\n  iconWithOpenIconOpen: {\n    opacity: 0\n  },\n\n  /* Styles applied to the `openIcon` if provided. */\n  openIcon: {\n    position: 'absolute',\n    transition: theme.transitions.create(['transform', 'opacity'], {\n      duration: theme.transitions.duration.short\n    }),\n    opacity: 0,\n    transform: 'rotate(-45deg)'\n  },\n\n  /* Styles applied to the `openIcon` if provided and if `open={true}`. */\n  openIconOpen: {\n    transform: 'rotate(0deg)',\n    opacity: 1\n  }\n});\nconst SpeedDialIcon = /*#__PURE__*/React.forwardRef(function SpeedDialIcon(props, ref) {\n  const {\n    className,\n    classes,\n    icon: iconProp,\n    open,\n    openIcon: openIconProp\n  } = props,\n        other = _objectWithoutProperties(props, [\"className\", \"classes\", \"icon\", \"open\", \"openIcon\"]);\n\n  const iconClassName = clsx(classes.icon, open && [classes.iconOpen, openIconProp && classes.iconWithOpenIconOpen]);\n  const openIconClassName = clsx(classes.openIcon, open && classes.openIconOpen);\n\n  function formatIcon(icon, newClassName) {\n    if ( /*#__PURE__*/React.isValidElement(icon)) {\n      return /*#__PURE__*/React.cloneElement(icon, {\n        className: newClassName\n      });\n    }\n\n    return icon;\n  }\n\n  return __jsx(\"span\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), openIconProp ? formatIcon(openIconProp, openIconClassName) : null, iconProp ? formatIcon(iconProp, iconClassName) : __jsx(AddIcon, {\n    className: iconClassName\n  }));\n});\nSpeedDialIcon.muiName = 'SpeedDialIcon';\nexport default withStyles(styles, {\n  name: 'MuiSpeedDialIcon'\n})(SpeedDialIcon);","map":null,"metadata":{},"sourceType":"module"}