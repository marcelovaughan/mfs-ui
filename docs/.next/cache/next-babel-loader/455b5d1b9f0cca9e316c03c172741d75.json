{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { ACTION_TYPES, CODE_VARIANTS } from \"../constants\";\nimport memoize from \"../../../../packages/material-ui-system/src/memoize\";\nimport mapTranslations from \"../utils/mapTranslations\";\n\nconst req = require.context(\"../../../translations\", false, /translations.*\\.json$/);\n\nconst translations = mapTranslations(req, 'json');\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);\n}\n\nconst warnOnce = {};\nconst getT = memoize(userLanguage => (key, options = {}) => {\n  const {\n    ignoreWarning = false\n  } = options;\n  const wordings = translations[userLanguage];\n\n  if (!wordings) {\n    console.error(`Missing language: ${userLanguage}.`);\n    return 'â€¦';\n  }\n\n  const translation = getPath(wordings, key);\n\n  if (!translation) {\n    const fullKey = `${userLanguage}:${key}`; // No warnings in CI env\n\n    if (!ignoreWarning && !warnOnce[fullKey] && false) {\n      console.error(`Missing translation for ${fullKey}.`);\n      warnOnce[fullKey] = true;\n    }\n\n    return getPath(translations.en, key);\n  }\n\n  return translation;\n});\nconst mapping = {\n  [ACTION_TYPES.OPTIONS_CHANGE]: (state, action) => {\n    const newState = {\n      codeVariant: action.payload.codeVariant || state.codeVariant,\n      userLanguage: action.payload.userLanguage || state.userLanguage\n    };\n    return newState;\n  }\n};\nexport default function optionsReducer(state = {}, action) {\n  let newState = _objectSpread({}, state);\n\n  if (!newState.codeVariant) {\n    newState.codeVariant = CODE_VARIANTS.JS;\n  }\n\n  if (!newState.userLanguage) {\n    newState.userLanguage = 'en';\n  }\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  newState.t = getT(newState.userLanguage);\n  return newState;\n}","map":null,"metadata":{},"sourceType":"module"}