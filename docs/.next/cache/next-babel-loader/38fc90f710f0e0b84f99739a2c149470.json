{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport function isPlainObject(item) {\n  return item && typeof item === 'object' && item.constructor === Object;\n}\nexport default function deepmerge(target, source, options = {\n  clone: true\n}) {\n  const output = options.clone ? _objectSpread({}, target) : target;\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      // Avoid prototype pollution\n      if (key === '__proto__') {\n        return;\n      }\n\n      if (isPlainObject(source[key]) && key in target) {\n        output[key] = deepmerge(target[key], source[key], options);\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-utils/src/deepmerge.js"],"names":["isPlainObject","item","constructor","Object","deepmerge","target","source","options","clone","output","keys","forEach","key"],"mappings":";;;;;;AAAA,OAAO,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,SAAOA,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,IAAoCA,IAAI,CAACC,WAAL,KAAqBC,MAAhE;AACD;AAED,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,OAAO,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,EAA8D;AAC3E,QAAMC,MAAM,GAAGF,OAAO,CAACC,KAAR,qBAAqBH,MAArB,IAAgCA,MAA/C;;AAEA,MAAIL,aAAa,CAACK,MAAD,CAAb,IAAyBL,aAAa,CAACM,MAAD,CAA1C,EAAoD;AAClDH,IAAAA,MAAM,CAACO,IAAP,CAAYJ,MAAZ,EAAoBK,OAApB,CAA6BC,GAAD,IAAS;AACnC;AACA,UAAIA,GAAG,KAAK,WAAZ,EAAyB;AACvB;AACD;;AAED,UAAIZ,aAAa,CAACM,MAAM,CAACM,GAAD,CAAP,CAAb,IAA8BA,GAAG,IAAIP,MAAzC,EAAiD;AAC/CI,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcR,SAAS,CAACC,MAAM,CAACO,GAAD,CAAP,EAAcN,MAAM,CAACM,GAAD,CAApB,EAA2BL,OAA3B,CAAvB;AACD,OAFD,MAEO;AACLE,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcN,MAAM,CAACM,GAAD,CAApB;AACD;AACF,KAXD;AAYD;;AAED,SAAOH,MAAP;AACD","sourcesContent":["export function isPlainObject(item) {\n  return item && typeof item === 'object' && item.constructor === Object;\n}\n\nexport default function deepmerge(target, source, options = { clone: true }) {\n  const output = options.clone ? { ...target } : target;\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach((key) => {\n      // Avoid prototype pollution\n      if (key === '__proto__') {\n        return;\n      }\n\n      if (isPlainObject(source[key]) && key in target) {\n        output[key] = deepmerge(target[key], source[key], options);\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n\n  return output;\n}\n"]},"metadata":{},"sourceType":"module"}