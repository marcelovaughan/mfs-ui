{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles, createStyles, withStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport clsx from 'clsx';\nimport Stepper from \"../../../../../packages/material-ui/src/Stepper\";\nimport Step from \"../../../../../packages/material-ui/src/Step\";\nimport StepLabel from \"../../../../../packages/material-ui/src/StepLabel\";\nimport Check from \"../../../../../packages/material-ui-icons/src/Check\";\nimport SettingsIcon from \"../../../../../packages/material-ui-icons/src/Settings\";\nimport GroupAddIcon from \"../../../../../packages/material-ui-icons/src/GroupAdd\";\nimport VideoLabelIcon from \"../../../../../packages/material-ui-icons/src/VideoLabel\";\nimport StepConnector from \"../../../../../packages/material-ui/src/StepConnector\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport Typography from \"../../../../../packages/material-ui/src/Typography\";\nvar QontoConnector = withStyles({\n  alternativeLabel: {\n    top: 10,\n    left: 'calc(-50% + 16px)',\n    right: 'calc(50% + 16px)'\n  },\n  active: {\n    '& $line': {\n      borderColor: '#784af4'\n    }\n  },\n  completed: {\n    '& $line': {\n      borderColor: '#784af4'\n    }\n  },\n  line: {\n    borderColor: '#eaeaf0',\n    borderTopWidth: 3,\n    borderRadius: 1\n  }\n})(StepConnector);\nvar useQontoStepIconStyles = makeStyles({\n  root: {\n    color: '#eaeaf0',\n    display: 'flex',\n    height: 22,\n    alignItems: 'center'\n  },\n  active: {\n    color: '#784af4'\n  },\n  circle: {\n    width: 8,\n    height: 8,\n    borderRadius: '50%',\n    backgroundColor: 'currentColor'\n  },\n  completed: {\n    color: '#784af4',\n    zIndex: 1,\n    fontSize: 18\n  }\n});\n\nfunction QontoStepIcon(props) {\n  var classes = useQontoStepIconStyles();\n  var active = props.active,\n      completed = props.completed;\n  return __jsx(\"div\", {\n    className: clsx(classes.root, active && classes.active)\n  }, completed ? __jsx(Check, {\n    className: classes.completed\n  }) : __jsx(\"div\", {\n    className: classes.circle\n  }));\n}\n\nvar ColorlibConnector = withStyles({\n  alternativeLabel: {\n    top: 22\n  },\n  active: {\n    '& $line': {\n      backgroundImage: 'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)'\n    }\n  },\n  completed: {\n    '& $line': {\n      backgroundImage: 'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)'\n    }\n  },\n  line: {\n    height: 3,\n    border: 0,\n    backgroundColor: '#eaeaf0',\n    borderRadius: 1\n  }\n})(StepConnector);\nvar useColorlibStepIconStyles = makeStyles({\n  root: {\n    backgroundColor: '#ccc',\n    zIndex: 1,\n    color: '#fff',\n    width: 50,\n    height: 50,\n    display: 'flex',\n    borderRadius: '50%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  active: {\n    backgroundImage: 'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)'\n  },\n  completed: {\n    backgroundImage: 'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)'\n  }\n});\n\nvar _ref = __jsx(SettingsIcon, null);\n\nvar _ref2 = __jsx(GroupAddIcon, null);\n\nvar _ref3 = __jsx(VideoLabelIcon, null);\n\nfunction ColorlibStepIcon(props) {\n  var classes = useColorlibStepIconStyles();\n  var active = props.active,\n      completed = props.completed;\n  var icons = {\n    1: _ref,\n    2: _ref2,\n    3: _ref3\n  };\n  return __jsx(\"div\", {\n    className: clsx(classes.root, active && classes.active, completed && classes.completed)\n  }, icons[String(props.icon)]);\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      width: '100%'\n    },\n    button: {\n      marginRight: theme.spacing(1)\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    }\n  });\n});\n\nfunction getSteps() {\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Select campaign settings...';\n\n    case 1:\n      return 'What is an ad group anyways?';\n\n    case 2:\n      return 'This is the bit I really care about!';\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nvar _ref4 = __jsx(QontoConnector, null);\n\nvar _ref5 = __jsx(ColorlibConnector, null);\n\nexport default function CustomizedSteppers() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(1),\n      activeStep = _React$useState[0],\n      setActiveStep = _React$useState[1];\n\n  var steps = getSteps();\n\n  var handleNext = function handleNext() {\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep + 1;\n    });\n  };\n\n  var handleBack = function handleBack() {\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep - 1;\n    });\n  };\n\n  var handleReset = function handleReset() {\n    setActiveStep(0);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Stepper, {\n    alternativeLabel: true,\n    activeStep: activeStep\n  }, steps.map(function (label) {\n    return __jsx(Step, {\n      key: label\n    }, __jsx(StepLabel, null, label));\n  })), __jsx(Stepper, {\n    alternativeLabel: true,\n    activeStep: activeStep,\n    connector: _ref4\n  }, steps.map(function (label) {\n    return __jsx(Step, {\n      key: label\n    }, __jsx(StepLabel, {\n      StepIconComponent: QontoStepIcon\n    }, label));\n  })), __jsx(Stepper, {\n    alternativeLabel: true,\n    activeStep: activeStep,\n    connector: _ref5\n  }, steps.map(function (label) {\n    return __jsx(Step, {\n      key: label\n    }, __jsx(StepLabel, {\n      StepIconComponent: ColorlibStepIcon\n    }, label));\n  })), __jsx(\"div\", null, activeStep === steps.length ? __jsx(\"div\", null, __jsx(Typography, {\n    className: classes.instructions\n  }, \"All steps completed - you're finished\"), __jsx(Button, {\n    onClick: handleReset,\n    className: classes.button\n  }, \"Reset\")) : __jsx(\"div\", null, __jsx(Typography, {\n    className: classes.instructions\n  }, getStepContent(activeStep)), __jsx(\"div\", null, __jsx(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.button\n  }, \"Back\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext,\n    className: classes.button\n  }, activeStep === steps.length - 1 ? 'Finish' : 'Next')))));\n}","map":null,"metadata":{},"sourceType":"module"}