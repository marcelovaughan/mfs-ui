{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from 'react';\nimport Router from 'next/router';\nimport { pathnameToLanguage } from \"../utils/helpers\";\nexport function handleEvent(_x, _x2) {\n  return _handleEvent.apply(this, arguments);\n}\n\nfunction _handleEvent() {\n  _handleEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, as) {\n    var pathname, success;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(event.defaultPrevented || event.button !== 0 || // ignore everything but left-click\n            event.metaKey || event.ctrlKey || event.altKey || event.shiftKey)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            event.preventDefault();\n            pathname = as.replace(/#(.*)$/, ''); // Add support for leading / in development mode.\n\n            if (pathname !== '/') {\n              // The leading / is only added to support static hosting (resolve /index.html).\n              // We remove it to normalize the pathname.\n              // See `rewriteUrlForNextExport` on Next.js side.\n              pathname = pathname.replace(/\\/$/, '');\n            }\n\n            pathname = pathnameToLanguage(pathname).canonical;\n            _context.next = 8;\n            return Router.push(pathname, as);\n\n          case 8:\n            success = _context.sent;\n\n            if (success) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 11:\n            window.scrollTo(0, 0);\n            document.body.focus();\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _handleEvent.apply(this, arguments);\n}\n\nfunction handleClick(event) {\n  var activeElement = document.activeElement; // Ignore non link clicks\n\n  if (activeElement.nodeName !== 'A' || activeElement.getAttribute('target') === '_blank' || activeElement.getAttribute('data-no-link') === 'true' || activeElement.getAttribute('href').indexOf('/') !== 0) {\n    return;\n  }\n\n  handleEvent(event, document.activeElement.getAttribute('href'));\n}\n\nvar bound = false;\nexport default function MarkdownLinks() {\n  React.useEffect(function () {\n    if (bound) {\n      return;\n    }\n\n    bound = true;\n    document.addEventListener('click', handleClick);\n  }, []);\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}