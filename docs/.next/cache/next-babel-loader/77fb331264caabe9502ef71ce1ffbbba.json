{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport { fade } from \"../styles/colorManipulator\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0,\n    // Reset browser default style.\n    flexShrink: 0,\n    borderWidth: 0,\n    borderStyle: 'solid',\n    borderColor: theme.palette.divider,\n    borderBottomWidth: 'thin'\n  },\n\n  /* Styles applied to the root element if `absolute={true}`. */\n  absolute: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    width: '100%'\n  },\n\n  /* Styles applied to the root element if `variant=\"inset\"`. */\n  inset: {\n    marginLeft: 72\n  },\n\n  /* Styles applied to the root element if `light={true}`. */\n  light: {\n    borderColor: fade(theme.palette.divider, 0.08)\n  },\n\n  /* Styles applied to the root element if `variant=\"middle\"`. */\n  middle: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2)\n  },\n\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    height: '100%',\n    borderBottomWidth: 0,\n    borderRightWidth: 'thin'\n  },\n\n  /* Styles applied to the root element if `flexItem={true}`. */\n  flexItem: {\n    alignSelf: 'stretch',\n    height: 'auto'\n  }\n});\nconst Divider = /*#__PURE__*/React.forwardRef(function Divider(props, ref) {\n  const {\n    absolute = false,\n    classes,\n    className,\n    component: Component = 'hr',\n    flexItem = false,\n    light = false,\n    orientation = 'horizontal',\n    role = Component !== 'hr' ? 'separator' : undefined,\n    variant = 'fullWidth'\n  } = props,\n        other = _objectWithoutProperties(props, [\"absolute\", \"classes\", \"className\", \"component\", \"flexItem\", \"light\", \"orientation\", \"role\", \"variant\"]);\n\n  return __jsx(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'fullWidth' && classes[variant], absolute && classes.absolute, flexItem && classes.flexItem, light && classes.light, orientation === 'vertical' && classes.vertical),\n    role: role,\n    ref: ref\n  }, other));\n});\nexport default withStyles(styles, {\n  name: 'MuiDivider'\n})(Divider);","map":null,"metadata":{},"sourceType":"module"}