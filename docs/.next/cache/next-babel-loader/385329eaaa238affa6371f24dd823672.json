{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport { deepmerge } from \"../../../material-ui-utils/src\";\nimport createBreakpoints from \"./createBreakpoints\";\nimport createMixins from \"./createMixins\";\nimport createPalette from \"./createPalette\";\nimport createTypography from \"./createTypography\";\nimport shadows from \"./shadows\";\nimport shape from \"./shape\";\nimport createSpacing from \"./createSpacing\";\nimport transitions from \"./transitions\";\nimport zIndex from \"./zIndex\";\n\nfunction createMuiTheme() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _options$breakpoints = options.breakpoints,\n      breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints,\n      _options$mixins = options.mixins,\n      mixinsInput = _options$mixins === void 0 ? {} : _options$mixins,\n      _options$palette = options.palette,\n      paletteInput = _options$palette === void 0 ? {} : _options$palette,\n      spacingInput = options.spacing,\n      _options$typography = options.typography,\n      typographyInput = _options$typography === void 0 ? {} : _options$typography,\n      other = _objectWithoutProperties(options, [\"breakpoints\", \"mixins\", \"palette\", \"spacing\", \"typography\"]);\n\n  var palette = createPalette(paletteInput);\n  var breakpoints = createBreakpoints(breakpointsInput);\n  var spacing = createSpacing(spacingInput);\n  var muiTheme = deepmerge({\n    breakpoints: breakpoints,\n    direction: 'ltr',\n    mixins: createMixins(breakpoints, spacing, mixinsInput),\n    overrides: {},\n    // Inject custom styles\n    palette: palette,\n    props: {},\n    // Provide default props\n    shadows: shadows,\n    typography: createTypography(palette, typographyInput),\n    spacing: spacing,\n    shape: shape,\n    transitions: transitions,\n    zIndex: zIndex\n  }, other);\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  muiTheme = args.reduce(function (acc, argument) {\n    return deepmerge(acc, argument);\n  }, muiTheme);\n\n  if (true) {\n    var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected'];\n\n    var traverse = function traverse(node, parentKey) {\n      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var key; // eslint-disable-next-line guard-for-in, no-restricted-syntax\n\n      for (key in node) {\n        var child = node[key];\n\n        if (depth === 1) {\n          if (key.indexOf('Mui') === 0 && child) {\n            traverse(child, key, depth + 1);\n          }\n        } else if (pseudoClasses.indexOf(key) !== -1 && _Object$keys(child).length > 0) {\n          if (true) {\n            console.error([\"Material-UI: The `\".concat(parentKey, \"` component increases \") + \"the CSS specificity of the `\".concat(key, \"` internal state.\"), 'You can not override it like this: ', _JSON$stringify(node, null, 2), '', 'Instead, you need to use the $ruleName syntax:', _JSON$stringify({\n              root: _defineProperty({}, \"&$\".concat(key), child)\n            }, null, 2), '', 'https://material-ui.com/r/pseudo-classes-guide'].join('\\n'));\n          } // Remove the style to prevent global conflicts.\n\n\n          node[key] = {};\n        }\n      }\n    };\n\n    traverse(muiTheme.overrides);\n  }\n\n  return muiTheme;\n}\n\nexport default createMuiTheme;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/styles/createMuiTheme.js"],"names":["deepmerge","createBreakpoints","createMixins","createPalette","createTypography","shadows","shape","createSpacing","transitions","zIndex","createMuiTheme","options","breakpoints","breakpointsInput","mixins","mixinsInput","palette","paletteInput","spacingInput","spacing","typography","typographyInput","other","muiTheme","direction","overrides","props","args","reduce","acc","argument","pseudoClasses","traverse","node","parentKey","depth","key","child","indexOf","length","console","error","root","join"],"mappings":"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","sourcesContent":["import { deepmerge } from '@material-ui/utils';\nimport createBreakpoints from './createBreakpoints';\nimport createMixins from './createMixins';\nimport createPalette from './createPalette';\nimport createTypography from './createTypography';\nimport shadows from './shadows';\nimport shape from './shape';\nimport createSpacing from './createSpacing';\nimport transitions from './transitions';\nimport zIndex from './zIndex';\n\nfunction createMuiTheme(options = {}, ...args) {\n  const {\n    breakpoints: breakpointsInput = {},\n    mixins: mixinsInput = {},\n    palette: paletteInput = {},\n    spacing: spacingInput,\n    typography: typographyInput = {},\n    ...other\n  } = options;\n\n  const palette = createPalette(paletteInput);\n  const breakpoints = createBreakpoints(breakpointsInput);\n  const spacing = createSpacing(spacingInput);\n\n  let muiTheme = deepmerge(\n    {\n      breakpoints,\n      direction: 'ltr',\n      mixins: createMixins(breakpoints, spacing, mixinsInput),\n      overrides: {}, // Inject custom styles\n      palette,\n      props: {}, // Provide default props\n      shadows,\n      typography: createTypography(palette, typographyInput),\n      spacing,\n      shape,\n      transitions,\n      zIndex,\n    },\n    other,\n  );\n\n  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);\n\n  if (process.env.NODE_ENV !== 'production') {\n    const pseudoClasses = [\n      'checked',\n      'disabled',\n      'error',\n      'focused',\n      'focusVisible',\n      'required',\n      'expanded',\n      'selected',\n    ];\n    const traverse = (node, parentKey, depth = 1) => {\n      let key;\n\n      // eslint-disable-next-line guard-for-in, no-restricted-syntax\n      for (key in node) {\n        const child = node[key];\n        if (depth === 1) {\n          if (key.indexOf('Mui') === 0 && child) {\n            traverse(child, key, depth + 1);\n          }\n        } else if (pseudoClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              [\n                `Material-UI: The \\`${parentKey}\\` component increases ` +\n                  `the CSS specificity of the \\`${key}\\` internal state.`,\n                'You can not override it like this: ',\n                JSON.stringify(node, null, 2),\n                '',\n                'Instead, you need to use the $ruleName syntax:',\n                JSON.stringify(\n                  {\n                    root: {\n                      [`&$${key}`]: child,\n                    },\n                  },\n                  null,\n                  2,\n                ),\n                '',\n                'https://material-ui.com/r/pseudo-classes-guide',\n              ].join('\\n'),\n            );\n          }\n          // Remove the style to prevent global conflicts.\n          node[key] = {};\n        }\n      }\n    };\n\n    traverse(muiTheme.overrides);\n  }\n\n  return muiTheme;\n}\n\nexport default createMuiTheme;\n"]},"metadata":{},"sourceType":"module"}