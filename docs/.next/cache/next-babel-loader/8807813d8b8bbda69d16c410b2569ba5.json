{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/SvgIcon/SvgIcon.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport capitalize from \"../utils/capitalize\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    userSelect: 'none',\n    width: '1em',\n    height: '1em',\n    display: 'inline-block',\n    fill: 'currentColor',\n    flexShrink: 0,\n    fontSize: theme.typography.pxToRem(24),\n    transition: theme.transitions.create('fill', {\n      duration: theme.transitions.duration.shorter\n    })\n  },\n\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main\n  },\n\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main\n  },\n\n  /* Styles applied to the root element if `color=\"action\"`. */\n  colorAction: {\n    color: theme.palette.action.active\n  },\n\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    color: theme.palette.error.main\n  },\n\n  /* Styles applied to the root element if `color=\"disabled\"`. */\n  colorDisabled: {\n    color: theme.palette.action.disabled\n  },\n\n  /* Styles applied to the root element if `fontSize=\"inherit\"`. */\n  fontSizeInherit: {\n    fontSize: 'inherit'\n  },\n\n  /* Styles applied to the root element if `fontSize=\"small\"`. */\n  fontSizeSmall: {\n    fontSize: theme.typography.pxToRem(20)\n  },\n\n  /* Styles applied to the root element if `fontSize=\"large\"`. */\n  fontSizeLarge: {\n    fontSize: theme.typography.pxToRem(35)\n  }\n});\nconst SvgIcon = /*#__PURE__*/React.forwardRef(function SvgIcon(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    color = 'inherit',\n    component: Component = 'svg',\n    fontSize = 'default',\n    htmlColor,\n    titleAccess,\n    viewBox = '0 0 24 24'\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"fontSize\", \"htmlColor\", \"titleAccess\", \"viewBox\"]);\n\n  return __jsx(Component, _extends({\n    className: clsx(classes.root, className, color !== 'inherit' && classes[`color${capitalize(color)}`], fontSize !== 'default' && classes[`fontSize${capitalize(fontSize)}`]),\n    focusable: \"false\",\n    viewBox: viewBox,\n    color: htmlColor,\n    \"aria-hidden\": titleAccess ? undefined : true,\n    role: titleAccess ? 'img' : undefined,\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }), children, titleAccess ? __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 22\n    }\n  }, titleAccess) : null);\n});\nSvgIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Node passed into the SVG element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n   */\n  color: PropTypes.oneOf(['action', 'disabled', 'error', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   */\n  fontSize: PropTypes.oneOf(['default', 'inherit', 'large', 'small']),\n\n  /**\n   * Applies a color attribute to the SVG element.\n   */\n  htmlColor: PropTypes.string,\n\n  /**\n   * The shape-rendering attribute. The behavior of the different options is described on the\n   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\n   * If you are having issues with blurry icons you should investigate this property.\n   */\n  shapeRendering: PropTypes.string,\n\n  /**\n   * Provides a human-readable title for the element that contains it.\n   * https://www.w3.org/TR/SVG-access/#Equivalent\n   */\n  titleAccess: PropTypes.string,\n\n  /**\n   * Allows you to redefine what the coordinates without units mean inside an SVG element.\n   * For example, if the SVG element is 500 (width) by 200 (height),\n   * and you pass viewBox=\"0 0 50 20\",\n   * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n   * to bottom right (50,20) and each unit will be worth 10px.\n   */\n  viewBox: PropTypes.string\n};\nSvgIcon.muiName = 'SvgIcon';\nexport default withStyles(styles, {\n  name: 'MuiSvgIcon'\n})(SvgIcon);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/SvgIcon/SvgIcon.js"],"names":["React","PropTypes","clsx","withStyles","capitalize","styles","theme","root","userSelect","width","height","display","fill","flexShrink","fontSize","typography","pxToRem","transition","transitions","create","duration","shorter","colorPrimary","color","palette","primary","main","colorSecondary","secondary","colorAction","action","active","colorError","error","colorDisabled","disabled","fontSizeInherit","fontSizeSmall","fontSizeLarge","SvgIcon","forwardRef","props","ref","children","classes","className","component","Component","htmlColor","titleAccess","viewBox","other","undefined","propTypes","node","object","string","oneOf","elementType","shapeRendering","muiName","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = (theme) => ({\n  /* Styles applied to the root element. */\n  root: {\n    userSelect: 'none',\n    width: '1em',\n    height: '1em',\n    display: 'inline-block',\n    fill: 'currentColor',\n    flexShrink: 0,\n    fontSize: theme.typography.pxToRem(24),\n    transition: theme.transitions.create('fill', {\n      duration: theme.transitions.duration.shorter,\n    }),\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main,\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main,\n  },\n  /* Styles applied to the root element if `color=\"action\"`. */\n  colorAction: {\n    color: theme.palette.action.active,\n  },\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    color: theme.palette.error.main,\n  },\n  /* Styles applied to the root element if `color=\"disabled\"`. */\n  colorDisabled: {\n    color: theme.palette.action.disabled,\n  },\n  /* Styles applied to the root element if `fontSize=\"inherit\"`. */\n  fontSizeInherit: {\n    fontSize: 'inherit',\n  },\n  /* Styles applied to the root element if `fontSize=\"small\"`. */\n  fontSizeSmall: {\n    fontSize: theme.typography.pxToRem(20),\n  },\n  /* Styles applied to the root element if `fontSize=\"large\"`. */\n  fontSizeLarge: {\n    fontSize: theme.typography.pxToRem(35),\n  },\n});\n\nconst SvgIcon = React.forwardRef(function SvgIcon(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    color = 'inherit',\n    component: Component = 'svg',\n    fontSize = 'default',\n    htmlColor,\n    titleAccess,\n    viewBox = '0 0 24 24',\n    ...other\n  } = props;\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        {\n          [classes[`color${capitalize(color)}`]]: color !== 'inherit',\n          [classes[`fontSize${capitalize(fontSize)}`]]: fontSize !== 'default',\n        },\n        className,\n      )}\n      focusable=\"false\"\n      viewBox={viewBox}\n      color={htmlColor}\n      aria-hidden={titleAccess ? undefined : true}\n      role={titleAccess ? 'img' : undefined}\n      ref={ref}\n      {...other}\n    >\n      {children}\n      {titleAccess ? <title>{titleAccess}</title> : null}\n    </Component>\n  );\n});\n\nSvgIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Node passed into the SVG element.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n   */\n  color: PropTypes.oneOf(['action', 'disabled', 'error', 'inherit', 'primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes /* @typescript-to-proptypes-ignore */.elementType,\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   */\n  fontSize: PropTypes.oneOf(['default', 'inherit', 'large', 'small']),\n  /**\n   * Applies a color attribute to the SVG element.\n   */\n  htmlColor: PropTypes.string,\n  /**\n   * The shape-rendering attribute. The behavior of the different options is described on the\n   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\n   * If you are having issues with blurry icons you should investigate this property.\n   */\n  shapeRendering: PropTypes.string,\n  /**\n   * Provides a human-readable title for the element that contains it.\n   * https://www.w3.org/TR/SVG-access/#Equivalent\n   */\n  titleAccess: PropTypes.string,\n  /**\n   * Allows you to redefine what the coordinates without units mean inside an SVG element.\n   * For example, if the SVG element is 500 (width) by 200 (height),\n   * and you pass viewBox=\"0 0 50 20\",\n   * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n   * to bottom right (50,20) and each unit will be worth 10px.\n   */\n  viewBox: PropTypes.string,\n};\n\nSvgIcon.muiName = 'SvgIcon';\n\nexport default withStyles(styles, { name: 'MuiSvgIcon' })(SvgIcon);\n"]},"metadata":{},"sourceType":"module"}