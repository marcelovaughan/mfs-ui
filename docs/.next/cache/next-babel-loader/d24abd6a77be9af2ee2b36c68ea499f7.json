{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable jsx-a11y/anchor-has-content */\nimport React from 'react';\nimport clsx from 'clsx';\nimport { useRouter } from 'next/router';\nimport NextLink from 'next/link';\nimport MuiLink from \"../../../../packages/material-ui/src/Link\";\nimport { useSelector } from 'react-redux';\nconst NextComposed = /*#__PURE__*/React.forwardRef(function NextComposed(props, ref) {\n  const {\n    as,\n    href\n  } = props,\n        other = _objectWithoutProperties(props, [\"as\", \"href\"]);\n\n  return __jsx(NextLink, {\n    href: href,\n    as: as\n  }, __jsx(\"a\", _extends({\n    ref: ref\n  }, other)));\n});\n\n// A styled version of the Next.js Link component:\n// https://nextjs.org/docs/#with-link\nfunction Link(props) {\n  const {\n    activeClassName = 'active',\n    className: classNameProps,\n    href: routerHref,\n    innerRef,\n    naked,\n    role: roleProp\n  } = props,\n        other = _objectWithoutProperties(props, [\"activeClassName\", \"className\", \"href\", \"innerRef\", \"naked\", \"role\"]); // apply nextjs rewrites\n\n\n  const href = routerHref.replace(/\\/api-docs\\/(.*)/, '/api/$1');\n  const router = useRouter();\n  const userLanguage = useSelector(state => state.options.userLanguage);\n  const className = clsx(classNameProps, router.pathname === routerHref && activeClassName);\n\n  if (userLanguage !== 'en' && href.indexOf('/') === 0 && href.indexOf('/blog') !== 0) {\n    other.as = `/${userLanguage}${href}`;\n  } // catch role passed from ButtonBase. This is definitely a link\n\n\n  const role = roleProp === 'button' ? undefined : roleProp;\n  const isExternal = href.indexOf('https:') === 0 || href.indexOf('mailto:') === 0;\n\n  if (isExternal) {\n    return __jsx(MuiLink, _extends({\n      className: className,\n      href: href,\n      ref: innerRef,\n      role: role\n    }, other));\n  }\n\n  if (naked) {\n    return __jsx(NextComposed, _extends({\n      className: className,\n      href: href,\n      ref: innerRef,\n      role: role\n    }, other));\n  }\n\n  return __jsx(MuiLink, _extends({\n    component: NextComposed,\n    className: className,\n    href: href,\n    ref: innerRef,\n    role: role\n  }, other));\n}\n\nexport default /*#__PURE__*/React.forwardRef((props, ref) => __jsx(Link, _extends({}, props, {\n  innerRef: ref\n})));","map":null,"metadata":{},"sourceType":"module"}