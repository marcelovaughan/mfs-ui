{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { exactProp } from \"../../../material-ui-utils/src\";\nimport withWidth, { isWidthDown, isWidthUp } from \"../withWidth\";\nimport useTheme from \"../styles/useTheme\";\n/**\n * @ignore - internal component.\n */\n\nfunction HiddenJs(props) {\n  const {\n    children,\n    only,\n    width\n  } = props;\n  const theme = useTheme();\n  let visible = true; // `only` check is faster to get out sooner if used.\n\n  if (only) {\n    if (Array.isArray(only)) {\n      for (let i = 0; i < only.length; i += 1) {\n        const breakpoint = only[i];\n\n        if (width === breakpoint) {\n          visible = false;\n          break;\n        }\n      }\n    } else if (only && width === only) {\n      visible = false;\n    }\n  } // Allow `only` to be combined with other props. If already hidden, no need to check others.\n\n\n  if (visible) {\n    // determine visibility based on the smallest size up\n    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {\n      const breakpoint = theme.breakpoints.keys[i];\n      const breakpointUp = props[`${breakpoint}Up`];\n      const breakpointDown = props[`${breakpoint}Down`];\n\n      if (breakpointUp && isWidthUp(breakpoint, width) || breakpointDown && isWidthDown(breakpoint, width)) {\n        visible = false;\n        break;\n      }\n    }\n  }\n\n  if (!visible) {\n    return null;\n  }\n\n  return children;\n}\n\nHiddenJs.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   */\n  implementation: PropTypes.oneOf(['js', 'css']),\n\n  /**\n   * You can use this prop when choosing the `js` implementation with server-side rendering.\n   *\n   * As `window.innerWidth` is unavailable on the server,\n   * we default to rendering an empty component during the first mount.\n   * You might want to use a heuristic to approximate\n   * the screen width of the client browser screen width.\n   *\n   * For instance, you could be using the user-agent or the client-hints.\n   * https://caniuse.com/#search=client%20hint\n   */\n  initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  lgDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  lgUp: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  mdDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  mdUp: PropTypes.bool,\n\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),\n\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  smDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  smUp: PropTypes.bool,\n\n  /**\n   * @ignore\n   * width prop provided by withWidth decorator.\n   */\n  width: PropTypes.string.isRequired,\n\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  xlDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  xlUp: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  xsDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  xsUp: PropTypes.bool\n};\n\nif (true) {\n  HiddenJs.propTypes = exactProp(HiddenJs.propTypes);\n}\n\nexport default withWidth()(HiddenJs);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Hidden/HiddenJs.js"],"names":["PropTypes","exactProp","withWidth","isWidthDown","isWidthUp","useTheme","HiddenJs","props","children","only","width","theme","visible","Array","isArray","i","length","breakpoint","breakpoints","keys","breakpointUp","breakpointDown","propTypes","node","className","string","implementation","oneOf","initialWidth","lgDown","bool","lgUp","mdDown","mdUp","oneOfType","arrayOf","smDown","smUp","isRequired","xlDown","xlUp","xsDown","xsUp"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport withWidth, { isWidthDown, isWidthUp } from '../withWidth';\nimport useTheme from '../styles/useTheme';\n\n/**\n * @ignore - internal component.\n */\nfunction HiddenJs(props) {\n  const { children, only, width } = props;\n  const theme = useTheme();\n\n  let visible = true;\n\n  // `only` check is faster to get out sooner if used.\n  if (only) {\n    if (Array.isArray(only)) {\n      for (let i = 0; i < only.length; i += 1) {\n        const breakpoint = only[i];\n        if (width === breakpoint) {\n          visible = false;\n          break;\n        }\n      }\n    } else if (only && width === only) {\n      visible = false;\n    }\n  }\n\n  // Allow `only` to be combined with other props. If already hidden, no need to check others.\n  if (visible) {\n    // determine visibility based on the smallest size up\n    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {\n      const breakpoint = theme.breakpoints.keys[i];\n      const breakpointUp = props[`${breakpoint}Up`];\n      const breakpointDown = props[`${breakpoint}Down`];\n      if (\n        (breakpointUp && isWidthUp(breakpoint, width)) ||\n        (breakpointDown && isWidthDown(breakpoint, width))\n      ) {\n        visible = false;\n        break;\n      }\n    }\n  }\n\n  if (!visible) {\n    return null;\n  }\n\n  return children;\n}\n\nHiddenJs.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   */\n  implementation: PropTypes.oneOf(['js', 'css']),\n  /**\n   * You can use this prop when choosing the `js` implementation with server-side rendering.\n   *\n   * As `window.innerWidth` is unavailable on the server,\n   * we default to rendering an empty component during the first mount.\n   * You might want to use a heuristic to approximate\n   * the screen width of the client browser screen width.\n   *\n   * For instance, you could be using the user-agent or the client-hints.\n   * https://caniuse.com/#search=client%20hint\n   */\n  initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  lgDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  lgUp: PropTypes.bool,\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  mdDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  mdUp: PropTypes.bool,\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only: PropTypes.oneOfType([\n    PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n    PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])),\n  ]),\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  smDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  smUp: PropTypes.bool,\n  /**\n   * @ignore\n   * width prop provided by withWidth decorator.\n   */\n  width: PropTypes.string.isRequired,\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  xlDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  xlUp: PropTypes.bool,\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  xsDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  xsUp: PropTypes.bool,\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  HiddenJs.propTypes = exactProp(HiddenJs.propTypes);\n}\n\nexport default withWidth()(HiddenJs);\n"]},"metadata":{},"sourceType":"module"}