{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport merge from \"./merge\";\n\nfunction compose() {\n  for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {\n    styles[_key] = arguments[_key];\n  }\n\n  var fn = function fn(props) {\n    return styles.reduce(function (acc, style) {\n      var output = style(props);\n\n      if (output) {\n        return merge(acc, output);\n      }\n\n      return acc;\n    }, {});\n  }; // Alternative approach that doesn't yield any performance gain.\n  // const handlers = styles.reduce((acc, style) => {\n  //   style.filterProps.forEach(prop => {\n  //     acc[prop] = style;\n  //   });\n  //   return acc;\n  // }, {});\n  // const fn = props => {\n  //   return Object.keys(props).reduce((acc, prop) => {\n  //     if (handlers[prop]) {\n  //       return merge(acc, handlers[prop](props));\n  //     }\n  //     return acc;\n  //   }, {});\n  // };\n\n\n  fn.propTypes = true ? styles.reduce(function (acc, style) {\n    return _extends(acc, style.propTypes);\n  }, {}) : {};\n  fn.filterProps = styles.reduce(function (acc, style) {\n    return acc.concat(style.filterProps);\n  }, []);\n  return fn;\n}\n\nexport default compose;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-system/src/compose.js"],"names":["merge","compose","styles","fn","props","reduce","acc","style","output","propTypes","filterProps","concat"],"mappings":";AAAA,OAAOA,KAAP;;AAEA,SAASC,OAAT,GAA4B;AAAA,oCAARC,MAAQ;AAARA,IAAAA,MAAQ;AAAA;;AAC1B,MAAMC,EAAE,GAAG,SAALA,EAAK,CAACC,KAAD;AAAA,WACTF,MAAM,CAACG,MAAP,CAAc,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC5B,UAAMC,MAAM,GAAGD,KAAK,CAACH,KAAD,CAApB;;AAEA,UAAII,MAAJ,EAAY;AACV,eAAOR,KAAK,CAACM,GAAD,EAAME,MAAN,CAAZ;AACD;;AAED,aAAOF,GAAP;AACD,KARD,EAQG,EARH,CADS;AAAA,GAAX,CAD0B,CAY1B;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEAH,EAAAA,EAAE,CAACM,SAAH,GACE,OACIP,MAAM,CAACG,MAAP,CAAc,UAACC,GAAD,EAAMC,KAAN;AAAA,WAAgB,SAAcD,GAAd,EAAmBC,KAAK,CAACE,SAAzB,CAAhB;AAAA,GAAd,EAAmE,EAAnE,CADJ,GAEI,EAHN;AAKAN,EAAAA,EAAE,CAACO,WAAH,GAAiBR,MAAM,CAACG,MAAP,CAAc,UAACC,GAAD,EAAMC,KAAN;AAAA,WAAgBD,GAAG,CAACK,MAAJ,CAAWJ,KAAK,CAACG,WAAjB,CAAhB;AAAA,GAAd,EAA6D,EAA7D,CAAjB;AAEA,SAAOP,EAAP;AACD;;AAED,eAAeF,OAAf","sourcesContent":["import merge from './merge';\n\nfunction compose(...styles) {\n  const fn = (props) =>\n    styles.reduce((acc, style) => {\n      const output = style(props);\n\n      if (output) {\n        return merge(acc, output);\n      }\n\n      return acc;\n    }, {});\n\n  // Alternative approach that doesn't yield any performance gain.\n  // const handlers = styles.reduce((acc, style) => {\n  //   style.filterProps.forEach(prop => {\n  //     acc[prop] = style;\n  //   });\n\n  //   return acc;\n  // }, {});\n\n  // const fn = props => {\n  //   return Object.keys(props).reduce((acc, prop) => {\n  //     if (handlers[prop]) {\n  //       return merge(acc, handlers[prop](props));\n  //     }\n\n  //     return acc;\n  //   }, {});\n  // };\n\n  fn.propTypes =\n    process.env.NODE_ENV !== 'production'\n      ? styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {})\n      : {};\n\n  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);\n\n  return fn;\n}\n\nexport default compose;\n"]},"metadata":{},"sourceType":"module"}