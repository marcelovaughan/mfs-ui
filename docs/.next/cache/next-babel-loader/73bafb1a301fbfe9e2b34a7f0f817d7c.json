{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/ButtonBase/Ripple.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useEventCallback from \"../utils/useEventCallback\";\nvar useEnhancedEffect = false ? React.useEffect : React.useLayoutEffect;\n/**\n * @ignore - internal component.\n */\n\nfunction Ripple(props) {\n  var classes = props.classes,\n      _props$pulsate = props.pulsate,\n      pulsate = _props$pulsate === void 0 ? false : _props$pulsate,\n      rippleX = props.rippleX,\n      rippleY = props.rippleY,\n      rippleSize = props.rippleSize,\n      inProp = props[\"in\"],\n      _props$onExited = props.onExited,\n      onExited = _props$onExited === void 0 ? function () {} : _props$onExited,\n      timeout = props.timeout;\n\n  var _React$useState = React.useState(false),\n      leaving = _React$useState[0],\n      setLeaving = _React$useState[1];\n\n  var rippleClassName = clsx(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);\n  var rippleStyles = {\n    width: rippleSize,\n    height: rippleSize,\n    top: -(rippleSize / 2) + rippleY,\n    left: -(rippleSize / 2) + rippleX\n  };\n  var childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);\n  var handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority\n\n  useEnhancedEffect(function () {\n    if (!inProp) {\n      // react-transition-group#onExit\n      setLeaving(true); // react-transition-group#onExited\n\n      var timeoutId = setTimeout(handleExited, timeout);\n      return function () {\n        clearTimeout(timeoutId);\n      };\n    }\n\n    return undefined;\n  }, [handleExited, inProp, timeout]);\n  return __jsx(\"span\", {\n    className: rippleClassName,\n    style: rippleStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    className: childClassName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n}\n\nRipple.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  \"in\": PropTypes.bool,\n\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\n   */\n  pulsate: PropTypes.bool,\n\n  /**\n   * Diameter of the ripple.\n   */\n  rippleSize: PropTypes.number,\n\n  /**\n   * Horizontal position of the ripple center.\n   */\n  rippleX: PropTypes.number,\n\n  /**\n   * Vertical position of the ripple center.\n   */\n  rippleY: PropTypes.number,\n\n  /**\n   * exit delay\n   */\n  timeout: PropTypes.number.isRequired\n};\nexport default Ripple;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/ButtonBase/Ripple.js"],"names":["React","PropTypes","clsx","useEventCallback","useEnhancedEffect","useEffect","useLayoutEffect","Ripple","props","classes","pulsate","rippleX","rippleY","rippleSize","inProp","onExited","timeout","useState","leaving","setLeaving","rippleClassName","ripple","rippleVisible","ripplePulsate","rippleStyles","width","height","top","left","childClassName","child","childLeaving","childPulsate","handleExited","timeoutId","setTimeout","clearTimeout","undefined","propTypes","object","isRequired","bool","func","number"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useEventCallback from '../utils/useEventCallback';\n\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n\n/**\n * @ignore - internal component.\n */\nfunction Ripple(props) {\n  const {\n    classes,\n    pulsate = false,\n    rippleX,\n    rippleY,\n    rippleSize,\n    in: inProp,\n    onExited = () => {},\n    timeout,\n  } = props;\n  const [leaving, setLeaving] = React.useState(false);\n\n  const rippleClassName = clsx(classes.ripple, classes.rippleVisible, {\n    [classes.ripplePulsate]: pulsate,\n  });\n\n  const rippleStyles = {\n    width: rippleSize,\n    height: rippleSize,\n    top: -(rippleSize / 2) + rippleY,\n    left: -(rippleSize / 2) + rippleX,\n  };\n\n  const childClassName = clsx(classes.child, {\n    [classes.childLeaving]: leaving,\n    [classes.childPulsate]: pulsate,\n  });\n\n  const handleExited = useEventCallback(onExited);\n  // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority\n  useEnhancedEffect(() => {\n    if (!inProp) {\n      // react-transition-group#onExit\n      setLeaving(true);\n\n      // react-transition-group#onExited\n      const timeoutId = setTimeout(handleExited, timeout);\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n    return undefined;\n  }, [handleExited, inProp, timeout]);\n\n  return (\n    <span className={rippleClassName} style={rippleStyles}>\n      <span className={childClassName} />\n    </span>\n  );\n}\n\nRipple.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  in: PropTypes.bool,\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  onExited: PropTypes.func,\n  /**\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\n   */\n  pulsate: PropTypes.bool,\n  /**\n   * Diameter of the ripple.\n   */\n  rippleSize: PropTypes.number,\n  /**\n   * Horizontal position of the ripple center.\n   */\n  rippleX: PropTypes.number,\n  /**\n   * Vertical position of the ripple center.\n   */\n  rippleY: PropTypes.number,\n  /**\n   * exit delay\n   */\n  timeout: PropTypes.number.isRequired,\n};\n\nexport default Ripple;\n"]},"metadata":{},"sourceType":"module"}