{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { chainPropTypes, getDisplayName } from \"../../../material-ui-utils/src\";\nimport useTheme from \"../useTheme\";\nexport function withThemeCreator(options = {}) {\n  const {\n    defaultTheme\n  } = options;\n\n  const withTheme = Component => {\n    if (false) {\n      if (Component === undefined) {\n        throw new Error(['You are calling withTheme(Component) with an undefined component.', 'You may have forgotten to import it.'].join('\\n'));\n      }\n    }\n\n    const WithTheme = /*#__PURE__*/React.forwardRef(function WithTheme(props, ref) {\n      const {\n        innerRef\n      } = props,\n            other = _objectWithoutProperties(props, [\"innerRef\"]);\n\n      const theme = useTheme() || defaultTheme;\n      return __jsx(Component, _extends({\n        theme: theme,\n        ref: innerRef || ref\n      }, other));\n    });\n\n    if (false) {\n      WithTheme.displayName = `WithTheme(${getDisplayName(Component)})`;\n    }\n\n    hoistNonReactStatics(WithTheme, Component);\n\n    if (false) {\n      // Exposed for test purposes.\n      WithTheme.Naked = Component;\n    }\n\n    return WithTheme;\n  };\n\n  return withTheme;\n} // Provide the theme object as a prop to the input component.\n// It's an alternative API to useTheme().\n// We encourage the usage of useTheme() where possible.\n\nconst withTheme = withThemeCreator();\nexport default withTheme;","map":null,"metadata":{},"sourceType":"module"}