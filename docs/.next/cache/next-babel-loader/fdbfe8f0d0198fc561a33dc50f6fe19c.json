{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport FormControlLabel from \"../../../../../packages/material-ui/src/FormControlLabel\";\nimport HighlightedCode from \"../../../modules/components/HighlightedCode\";\nimport Grid from \"../../../../../packages/material-ui/src/Grid\";\nimport Typography from \"../../../../../packages/material-ui/src/Typography\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport Popper from \"../../../../../packages/material-ui/src/Popper\";\nimport Paper from \"../../../../../packages/material-ui/src/Paper\";\nimport DialogActions from \"../../../../../packages/material-ui/src/DialogActions\";\nimport DialogContent from \"../../../../../packages/material-ui/src/DialogContent\";\nimport DialogContentText from \"../../../../../packages/material-ui/src/DialogContentText\";\nimport DialogTitle from \"../../../../../packages/material-ui/src/DialogTitle\";\nimport Switch from \"../../../../../packages/material-ui/src/Switch\";\nimport TextField from \"../../../../../packages/material-ui/src/TextField\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  scrollContainer: {\n    height: 400,\n    overflow: 'auto',\n    marginBottom: theme.spacing(3)\n  },\n  scroll: {\n    position: 'relative',\n    width: '230%',\n    backgroundColor: theme.palette.background.paper,\n    height: '230%'\n  },\n  legend: {\n    marginTop: theme.spacing(2),\n    maxWidth: 300\n  },\n  paper: {\n    maxWidth: 400,\n    overflow: 'auto'\n  },\n  select: {\n    width: 200\n  },\n  popper: {\n    zIndex: 1,\n    '&[x-placement*=\"bottom\"] $arrow': {\n      top: 0,\n      left: 0,\n      marginTop: '-0.9em',\n      width: '3em',\n      height: '1em',\n      '&::before': {\n        borderWidth: '0 1em 1em 1em',\n        borderColor: `transparent transparent ${theme.palette.background.paper} transparent`\n      }\n    },\n    '&[x-placement*=\"top\"] $arrow': {\n      bottom: 0,\n      left: 0,\n      marginBottom: '-0.9em',\n      width: '3em',\n      height: '1em',\n      '&::before': {\n        borderWidth: '1em 1em 0 1em',\n        borderColor: `${theme.palette.background.paper} transparent transparent transparent`\n      }\n    },\n    '&[x-placement*=\"right\"] $arrow': {\n      left: 0,\n      marginLeft: '-0.9em',\n      height: '3em',\n      width: '1em',\n      '&::before': {\n        borderWidth: '1em 1em 1em 0',\n        borderColor: `transparent ${theme.palette.background.paper} transparent transparent`\n      }\n    },\n    '&[x-placement*=\"left\"] $arrow': {\n      right: 0,\n      marginRight: '-0.9em',\n      height: '3em',\n      width: '1em',\n      '&::before': {\n        borderWidth: '1em 0 1em 1em',\n        borderColor: `transparent transparent transparent ${theme.palette.background.paper}`\n      }\n    }\n  },\n  arrow: {\n    position: 'absolute',\n    fontSize: 7,\n    width: '3em',\n    height: '3em',\n    '&::before': {\n      content: '\"\"',\n      margin: 'auto',\n      display: 'block',\n      width: 0,\n      height: 0,\n      borderStyle: 'solid'\n    }\n  }\n}));\n\nvar _ref = __jsx(DialogTitle, null, \"Use Google's location service?\");\n\nvar _ref2 = __jsx(DialogContent, null, __jsx(DialogContentText, null, \"Let Google help apps determine location.\"));\n\nvar _ref3 = __jsx(Typography, {\n  gutterBottom: true,\n  variant: \"h6\"\n}, \"Appearance\");\n\nvar _ref4 = __jsx(\"option\", {\n  value: \"top-start\"\n}, \"top-start\");\n\nvar _ref5 = __jsx(\"option\", {\n  value: \"top\"\n}, \"top\");\n\nvar _ref6 = __jsx(\"option\", {\n  value: \"top-end\"\n}, \"top-end\");\n\nvar _ref7 = __jsx(\"option\", {\n  value: \"left-start\"\n}, \"left-start\");\n\nvar _ref8 = __jsx(\"option\", {\n  value: \"left\"\n}, \"left\");\n\nvar _ref9 = __jsx(\"option\", {\n  value: \"left-end\"\n}, \"left-end\");\n\nvar _ref10 = __jsx(\"option\", {\n  value: \"right-start\"\n}, \"right-start\");\n\nvar _ref11 = __jsx(\"option\", {\n  value: \"right\"\n}, \"right\");\n\nvar _ref12 = __jsx(\"option\", {\n  value: \"right-end\"\n}, \"right-end\");\n\nvar _ref13 = __jsx(\"option\", {\n  value: \"bottom-start\"\n}, \"bottom-start\");\n\nvar _ref14 = __jsx(\"option\", {\n  value: \"bottom\"\n}, \"bottom\");\n\nvar _ref15 = __jsx(\"option\", {\n  value: \"bottom-end\"\n}, \"bottom-end\");\n\nvar _ref16 = __jsx(Typography, {\n  gutterBottom: true,\n  variant: \"h6\"\n}, \"Modifiers (options from Popper.js)\");\n\nvar _ref17 = __jsx(\"option\", {\n  value: \"disabled\"\n}, \"disabled\");\n\nvar _ref18 = __jsx(\"option\", {\n  value: \"scrollParent\"\n}, \"scrollParent\");\n\nvar _ref19 = __jsx(\"option\", {\n  value: \"viewport\"\n}, \"viewport\");\n\nvar _ref20 = __jsx(\"option\", {\n  value: \"window\"\n}, \"window\");\n\nexport default function ScrollPlayground() {\n  const anchorRef = React.useRef(null);\n  const [arrowRef, setArrowRef] = React.useState(null);\n  const [arrow, setArrow] = React.useState(false);\n  const [disablePortal, setDisablePortal] = React.useState(false);\n  const [flip, setFlip] = React.useState(true);\n  const [open, setOpen] = React.useState(false);\n  const [placement, setPlacement] = React.useState('bottom');\n  const [preventOverflow, setPreventOverflow] = React.useState('scrollParent');\n\n  const handleClickButton = () => {\n    setOpen(prevOpen => !prevOpen);\n  };\n\n  const centerScroll = element => {\n    if (!element) {\n      return;\n    }\n\n    const container = element.parentElement;\n    container.scrollTop = element.clientHeight / 4;\n    container.scrollLeft = element.clientWidth / 4;\n  };\n\n  const classes = useStyles();\n  const jsx = `\n  <Popper\n    placement=\"${placement}\"\n    disablePortal={${disablePortal}}\n    modifiers={{\n      flip: {\n        enabled: ${flip},\n      },\n      preventOverflow: {\n        enabled: ${preventOverflow !== 'disabled'},\n        boundariesElement: '${preventOverflow === 'disabled' ? 'scrollParent' : preventOverflow}',\n      },\n      arrow: {\n        enabled: ${arrow},\n        element: arrowRef,\n      },\n    }}\n  >\n  `;\n  const id = open ? 'scroll-playground' : null;\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: classes.scrollContainer\n  }, __jsx(Grid, {\n    className: classes.scroll,\n    container: true,\n    alignItems: \"center\",\n    justify: \"center\",\n    ref: centerScroll\n  }, __jsx(\"div\", null, __jsx(Button, {\n    ref: anchorRef,\n    variant: \"contained\",\n    onClick: handleClickButton,\n    \"aria-describedby\": id\n  }, \"Toggle Popper\"), __jsx(Typography, {\n    className: classes.legend\n  }, \"Scroll around this container to experiment with flip and preventOverflow modifiers.\"), __jsx(Popper, {\n    id: id,\n    open: open,\n    anchorEl: anchorRef.current,\n    placement: placement,\n    disablePortal: disablePortal,\n    className: classes.popper,\n    modifiers: {\n      flip: {\n        enabled: flip\n      },\n      arrow: {\n        enabled: arrow,\n        element: arrowRef\n      },\n      preventOverflow: {\n        enabled: preventOverflow !== 'disabled',\n        boundariesElement: preventOverflow === 'disabled' ? 'scrollParent' : preventOverflow\n      }\n    }\n  }, arrow ? __jsx(\"span\", {\n    className: classes.arrow,\n    ref: setArrowRef\n  }) : null, __jsx(Paper, {\n    className: classes.paper\n  }, _ref, _ref2, __jsx(DialogActions, null, __jsx(Button, {\n    onClick: handleClickButton,\n    color: \"primary\"\n  }, \"Disagree\"), __jsx(Button, {\n    onClick: handleClickButton,\n    color: \"primary\"\n  }, \"Agree\"))))))), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, _ref3, __jsx(\"div\", null, __jsx(TextField, {\n    margin: \"normal\",\n    className: classes.select,\n    label: \"Placement\",\n    select: true,\n    InputLabelProps: {\n      id: 'scroll-playground-placement-label'\n    },\n    SelectProps: {\n      native: true,\n      inputProps: {\n        'aria-labelledby': 'scroll-playground-placement-label'\n      }\n    },\n    value: placement,\n    onChange: event => {\n      setPlacement(event.target.value);\n    }\n  }, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15)), __jsx(FormControlLabel, {\n    control: __jsx(Switch, {\n      checked: disablePortal,\n      onChange: event => {\n        setDisablePortal(event.target.checked);\n      },\n      value: \"disablePortal\"\n    }),\n    label: \"Disable portal (the children stay within it's parent DOM hierarchy)\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, _ref16, __jsx(\"div\", null, __jsx(TextField, {\n    margin: \"normal\",\n    className: classes.select,\n    label: \"Prevent overflow\",\n    select: true,\n    InputLabelProps: {\n      id: 'scroll-playground-overflow-label'\n    },\n    SelectProps: {\n      native: true,\n      inputProps: {\n        'aria-labelledby': 'scroll-playground-overflow-label'\n      }\n    },\n    value: preventOverflow,\n    onChange: event => {\n      setPreventOverflow(event.target.value);\n    }\n  }, _ref17, _ref18, _ref19, _ref20)), __jsx(FormControlLabel, {\n    control: __jsx(Switch, {\n      checked: flip,\n      onChange: event => {\n        setFlip(event.target.checked);\n      },\n      value: \"flip\"\n    }),\n    label: ['Flip', '(flip the popperâ€™s placement when it starts to overlap its reference element)'].join(' ')\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Switch, {\n      checked: arrow,\n      onChange: event => {\n        setArrow(event.target.checked);\n      },\n      value: \"arrow\"\n    }),\n    label: \"Arrow\"\n  }))), __jsx(HighlightedCode, {\n    code: jsx,\n    language: \"jsx\"\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}