{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport Snackbar from \"../../../../../packages/material-ui/src/Snackbar\";\nimport Slide from \"../../../../../packages/material-ui/src/Slide\";\n\nfunction TransitionLeft(props) {\n  return __jsx(Slide, _extends({}, props, {\n    direction: \"left\"\n  }));\n}\n\nfunction TransitionUp(props) {\n  return __jsx(Slide, _extends({}, props, {\n    direction: \"up\"\n  }));\n}\n\nfunction TransitionRight(props) {\n  return __jsx(Slide, _extends({}, props, {\n    direction: \"right\"\n  }));\n}\n\nfunction TransitionDown(props) {\n  return __jsx(Slide, _extends({}, props, {\n    direction: \"down\"\n  }));\n}\n\nexport default function DirectionSnackbar() {\n  const [open, setOpen] = React.useState(false);\n  const [transition, setTransition] = React.useState(undefined);\n\n  const handleClick = Transition => () => {\n    setTransition(() => Transition);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return __jsx(\"div\", null, __jsx(Button, {\n    onClick: handleClick(TransitionLeft)\n  }, \"Right\"), __jsx(Button, {\n    onClick: handleClick(TransitionUp)\n  }, \"Up\"), __jsx(Button, {\n    onClick: handleClick(TransitionRight)\n  }, \"Left\"), __jsx(Button, {\n    onClick: handleClick(TransitionDown)\n  }, \"Down\"), __jsx(Snackbar, {\n    open: open,\n    onClose: handleClose,\n    TransitionComponent: transition,\n    message: \"I love snacks\",\n    key: transition ? transition.name : ''\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}