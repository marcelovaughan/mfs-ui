{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport IconButton from \"../../../../../packages/material-ui/src/IconButton\";\nimport Input from \"../../../../../packages/material-ui/src/Input\";\nimport FilledInput from \"../../../../../packages/material-ui/src/FilledInput\";\nimport OutlinedInput from \"../../../../../packages/material-ui/src/OutlinedInput\";\nimport InputLabel from \"../../../../../packages/material-ui/src/InputLabel\";\nimport InputAdornment from \"../../../../../packages/material-ui/src/InputAdornment\";\nimport FormHelperText from \"../../../../../packages/material-ui/src/FormHelperText\";\nimport FormControl from \"../../../../../packages/material-ui/src/FormControl\";\nimport TextField from \"../../../../../packages/material-ui/src/TextField\";\nimport Visibility from \"../../../../../packages/material-ui-icons/src/Visibility\";\nimport VisibilityOff from \"../../../../../packages/material-ui-icons/src/VisibilityOff\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  margin: {\n    margin: theme.spacing(1)\n  },\n  withoutLabel: {\n    marginTop: theme.spacing(3)\n  },\n  textField: {\n    width: '25ch'\n  }\n}));\n\nvar _ref = __jsx(InputAdornment, {\n  position: \"start\"\n}, \"Kg\");\n\nvar _ref2 = __jsx(InputAdornment, {\n  position: \"end\"\n}, \"Kg\");\n\nvar _ref3 = __jsx(FormHelperText, {\n  id: \"standard-weight-helper-text\"\n}, \"Weight\");\n\nvar _ref4 = __jsx(InputLabel, {\n  htmlFor: \"standard-adornment-password\"\n}, \"Password\");\n\nvar _ref5 = __jsx(Visibility, null);\n\nvar _ref6 = __jsx(VisibilityOff, null);\n\nvar _ref7 = __jsx(InputLabel, {\n  htmlFor: \"standard-adornment-amount\"\n}, \"Amount\");\n\nvar _ref8 = __jsx(InputAdornment, {\n  position: \"start\"\n}, \"$\");\n\nvar _ref9 = __jsx(InputAdornment, {\n  position: \"start\"\n}, \"Kg\");\n\nvar _ref10 = __jsx(InputAdornment, {\n  position: \"end\"\n}, \"Kg\");\n\nvar _ref11 = __jsx(FormHelperText, {\n  id: \"filled-weight-helper-text\"\n}, \"Weight\");\n\nvar _ref12 = __jsx(InputLabel, {\n  htmlFor: \"filled-adornment-password\"\n}, \"Password\");\n\nvar _ref13 = __jsx(Visibility, null);\n\nvar _ref14 = __jsx(VisibilityOff, null);\n\nvar _ref15 = __jsx(InputLabel, {\n  htmlFor: \"filled-adornment-amount\"\n}, \"Amount\");\n\nvar _ref16 = __jsx(InputAdornment, {\n  position: \"start\"\n}, \"$\");\n\nvar _ref17 = __jsx(InputAdornment, {\n  position: \"start\"\n}, \"Kg\");\n\nvar _ref18 = __jsx(InputAdornment, {\n  position: \"end\"\n}, \"Kg\");\n\nvar _ref19 = __jsx(FormHelperText, {\n  id: \"outlined-weight-helper-text\"\n}, \"Weight\");\n\nvar _ref20 = __jsx(InputLabel, {\n  htmlFor: \"outlined-adornment-password\"\n}, \"Password\");\n\nvar _ref21 = __jsx(Visibility, null);\n\nvar _ref22 = __jsx(VisibilityOff, null);\n\nvar _ref23 = __jsx(InputLabel, {\n  htmlFor: \"outlined-adornment-amount\"\n}, \"Amount\");\n\nvar _ref24 = __jsx(InputAdornment, {\n  position: \"start\"\n}, \"$\");\n\nexport default function InputAdornments() {\n  const classes = useStyles();\n  const [values, setValues] = React.useState({\n    amount: '',\n    password: '',\n    weight: '',\n    weightRange: '',\n    showPassword: false\n  });\n\n  const handleChange = prop => event => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [prop]: event.target.value\n    }));\n  };\n\n  const handleClickShowPassword = () => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      showPassword: !values.showPassword\n    }));\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", null, __jsx(TextField, {\n    label: \"With normal TextField\",\n    id: \"standard-start-adornment\",\n    className: clsx(classes.margin, classes.textField),\n    InputProps: {\n      startAdornment: _ref\n    }\n  }), __jsx(FormControl, {\n    className: clsx(classes.margin, classes.withoutLabel, classes.textField)\n  }, __jsx(Input, {\n    id: \"standard-adornment-weight\",\n    value: values.weight,\n    onChange: handleChange('weight'),\n    endAdornment: _ref2,\n    \"aria-describedby\": \"standard-weight-helper-text\",\n    inputProps: {\n      'aria-label': 'weight'\n    }\n  }), _ref3), __jsx(FormControl, {\n    className: clsx(classes.margin, classes.textField)\n  }, _ref4, __jsx(Input, {\n    id: \"standard-adornment-password\",\n    type: values.showPassword ? 'text' : 'password',\n    value: values.password,\n    onChange: handleChange('password'),\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: handleClickShowPassword,\n      onMouseDown: handleMouseDownPassword\n    }, values.showPassword ? _ref5 : _ref6))\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.margin\n  }, _ref7, __jsx(Input, {\n    id: \"standard-adornment-amount\",\n    value: values.amount,\n    onChange: handleChange('amount'),\n    startAdornment: _ref8\n  }))), __jsx(\"div\", null, __jsx(TextField, {\n    label: \"With normal TextField\",\n    id: \"filled-start-adornment\",\n    className: clsx(classes.margin, classes.textField),\n    InputProps: {\n      startAdornment: _ref9\n    },\n    variant: \"filled\"\n  }), __jsx(FormControl, {\n    className: clsx(classes.margin, classes.textField),\n    variant: \"filled\"\n  }, __jsx(FilledInput, {\n    id: \"filled-adornment-weight\",\n    value: values.weight,\n    onChange: handleChange('weight'),\n    endAdornment: _ref10,\n    \"aria-describedby\": \"filled-weight-helper-text\",\n    inputProps: {\n      'aria-label': 'weight'\n    }\n  }), _ref11), __jsx(FormControl, {\n    className: clsx(classes.margin, classes.textField),\n    variant: \"filled\"\n  }, _ref12, __jsx(FilledInput, {\n    id: \"filled-adornment-password\",\n    type: values.showPassword ? 'text' : 'password',\n    value: values.password,\n    onChange: handleChange('password'),\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: handleClickShowPassword,\n      onMouseDown: handleMouseDownPassword,\n      edge: \"end\"\n    }, values.showPassword ? _ref13 : _ref14))\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.margin,\n    variant: \"filled\"\n  }, _ref15, __jsx(FilledInput, {\n    id: \"filled-adornment-amount\",\n    value: values.amount,\n    onChange: handleChange('amount'),\n    startAdornment: _ref16\n  }))), __jsx(\"div\", null, __jsx(TextField, {\n    label: \"With normal TextField\",\n    id: \"outlined-start-adornment\",\n    className: clsx(classes.margin, classes.textField),\n    InputProps: {\n      startAdornment: _ref17\n    },\n    variant: \"outlined\"\n  }), __jsx(FormControl, {\n    className: clsx(classes.margin, classes.textField),\n    variant: \"outlined\"\n  }, __jsx(OutlinedInput, {\n    id: \"outlined-adornment-weight\",\n    value: values.weight,\n    onChange: handleChange('weight'),\n    endAdornment: _ref18,\n    \"aria-describedby\": \"outlined-weight-helper-text\",\n    inputProps: {\n      'aria-label': 'weight'\n    },\n    labelWidth: 0\n  }), _ref19), __jsx(FormControl, {\n    className: clsx(classes.margin, classes.textField),\n    variant: \"outlined\"\n  }, _ref20, __jsx(OutlinedInput, {\n    id: \"outlined-adornment-password\",\n    type: values.showPassword ? 'text' : 'password',\n    value: values.password,\n    onChange: handleChange('password'),\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: handleClickShowPassword,\n      onMouseDown: handleMouseDownPassword,\n      edge: \"end\"\n    }, values.showPassword ? _ref21 : _ref22)),\n    labelWidth: 70\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.margin,\n    variant: \"outlined\"\n  }, _ref23, __jsx(OutlinedInput, {\n    id: \"outlined-adornment-amount\",\n    value: values.amount,\n    onChange: handleChange('amount'),\n    startAdornment: _ref24,\n    labelWidth: 60\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}