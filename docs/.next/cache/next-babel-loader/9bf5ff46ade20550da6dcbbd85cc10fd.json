{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { create } from 'jss';\nimport { makeStyles, useTheme, jssPreset, StylesProvider } from \"../../../../packages/material-ui/src/styles\";\nimport rtl from 'jss-rtl';\nimport { useSelector } from 'react-redux';\nimport DemoErrorBoundary from \"./DemoErrorBoundary\";\n\nfunction FramedDemo(props) {\n  var children = props.children,\n      document = props.document;\n  var theme = useTheme();\n  React.useEffect(function () {\n    document.body.dir = theme.direction;\n  }, [document, theme.direction]);\n\n  var _React$useMemo = React.useMemo(function () {\n    return {\n      jss: create({\n        plugins: [].concat(_toConsumableArray(jssPreset().plugins), [rtl()]),\n        insertionPoint: document.head\n      }),\n      sheetsManager: new _Map()\n    };\n  }, [document]),\n      jss = _React$useMemo.jss,\n      sheetsManager = _React$useMemo.sheetsManager;\n\n  var getWindow = React.useCallback(function () {\n    return document.defaultView;\n  }, [document]);\n  return __jsx(StylesProvider, {\n    jss: jss,\n    sheetsManager: sheetsManager\n  }, /*#__PURE__*/React.cloneElement(children, {\n    window: getWindow\n  }));\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    frame: {\n      backgroundColor: theme.palette.background[\"default\"],\n      flexGrow: 1,\n      height: 400,\n      border: 'none',\n      boxShadow: theme.shadows[1]\n    }\n  };\n}, {\n  name: 'DemoFrame'\n});\n\nfunction DemoFrame(props) {\n  var _frameRef$current;\n\n  var children = props.children,\n      title = props.title,\n      other = _objectWithoutProperties(props, [\"children\", \"title\"]);\n\n  var classes = useStyles();\n  /**\n   * @type {import('react').Ref<HTMLIFrameElement>}\n   */\n\n  var frameRef = React.useRef(null); // If we portal content into the iframe before the load event then that content\n  // is dropped in firefox.\n\n  var _React$useReducer = React.useReducer(function () {\n    return true;\n  }, false),\n      iframeLoaded = _React$useReducer[0],\n      onLoad = _React$useReducer[1];\n\n  React.useEffect(function () {\n    var document = frameRef.current.contentDocument; // When we hydrate the iframe then the load event is already dispatched\n    // once the iframe markup is parsed (maybe later but the important part is\n    // that it happens before React can attach event listeners).\n    // We need to check the readyState of the document once the iframe is mounted\n    // and \"replay\" the missed load event.\n    // See https://github.com/facebook/react/pull/13862 for ongoing effort in React\n    // (though not with iframes in mind).\n\n    if (document != null && document.readyState === 'complete' && !iframeLoaded) {\n      onLoad();\n    }\n  }, [iframeLoaded]);\n  var document = (_frameRef$current = frameRef.current) === null || _frameRef$current === void 0 ? void 0 : _frameRef$current.contentDocument;\n  return __jsx(React.Fragment, null, __jsx(\"iframe\", _extends({\n    className: classes.frame,\n    onLoad: onLoad,\n    ref: frameRef,\n    title: title\n  }, other)), iframeLoaded !== false ? /*#__PURE__*/ReactDOM.createPortal(__jsx(FramedDemo, {\n    document: document\n  }, children), document.body) : null);\n}\n\n/**\n * Isolates the demo component as best as possible. Additional props are spread\n * to an `iframe` if `iframe={true}`.\n */\nfunction DemoSandboxed(props) {\n  var Component = props.component,\n      iframe = props.iframe,\n      name = props.name,\n      onResetDemoClick = props.onResetDemoClick,\n      other = _objectWithoutProperties(props, [\"component\", \"iframe\", \"name\", \"onResetDemoClick\"]);\n\n  var Sandbox = iframe ? DemoFrame : React.Fragment;\n  var sandboxProps = iframe ? _objectSpread({\n    title: \"\".concat(name, \" demo\")\n  }, other) : {};\n  var t = useSelector(function (state) {\n    return state.options.t;\n  });\n  return __jsx(DemoErrorBoundary, {\n    onResetDemoClick: onResetDemoClick,\n    t: t\n  }, __jsx(Sandbox, sandboxProps, __jsx(Component, null)));\n}\n\nexport default /*#__PURE__*/React.memo(DemoSandboxed);","map":null,"metadata":{},"sourceType":"module"}