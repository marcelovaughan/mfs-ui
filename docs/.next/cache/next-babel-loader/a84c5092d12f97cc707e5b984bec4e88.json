{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport Grid from \"../../../../../packages/material-ui/src/Grid\";\nimport List from \"../../../../../packages/material-ui/src/List\";\nimport Card from \"../../../../../packages/material-ui/src/Card\";\nimport CardHeader from \"../../../../../packages/material-ui/src/CardHeader\";\nimport ListItem from \"../../../../../packages/material-ui/src/ListItem\";\nimport ListItemText from \"../../../../../packages/material-ui/src/ListItemText\";\nimport ListItemIcon from \"../../../../../packages/material-ui/src/ListItemIcon\";\nimport Checkbox from \"../../../../../packages/material-ui/src/Checkbox\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport Divider from \"../../../../../packages/material-ui/src/Divider\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: 'auto'\n  },\n  cardHeader: {\n    padding: theme.spacing(1, 2)\n  },\n  list: {\n    width: 200,\n    height: 230,\n    backgroundColor: theme.palette.background.paper,\n    overflow: 'auto'\n  },\n  button: {\n    margin: theme.spacing(0.5, 0)\n  }\n}));\n\nfunction not(a, b) {\n  return a.filter(value => b.indexOf(value) === -1);\n}\n\nfunction intersection(a, b) {\n  return a.filter(value => b.indexOf(value) !== -1);\n}\n\nfunction union(a, b) {\n  return [...a, ...not(b, a)];\n}\n\nvar _ref = __jsx(Divider, null);\n\nvar _ref2 = __jsx(ListItem, null);\n\nexport default function TransferList() {\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([]);\n  const [left, setLeft] = React.useState([0, 1, 2, 3]);\n  const [right, setRight] = React.useState([4, 5, 6, 7]);\n  const leftChecked = intersection(checked, left);\n  const rightChecked = intersection(checked, right);\n\n  const handleToggle = value => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const numberOfChecked = items => intersection(checked, items).length;\n\n  const handleToggleAll = items => () => {\n    if (numberOfChecked(items) === items.length) {\n      setChecked(not(checked, items));\n    } else {\n      setChecked(union(checked, items));\n    }\n  };\n\n  const handleCheckedRight = () => {\n    setRight(right.concat(leftChecked));\n    setLeft(not(left, leftChecked));\n    setChecked(not(checked, leftChecked));\n  };\n\n  const handleCheckedLeft = () => {\n    setLeft(left.concat(rightChecked));\n    setRight(not(right, rightChecked));\n    setChecked(not(checked, rightChecked));\n  };\n\n  const customList = (title, items) => __jsx(Card, null, __jsx(CardHeader, {\n    className: classes.cardHeader,\n    avatar: __jsx(Checkbox, {\n      onClick: handleToggleAll(items),\n      checked: numberOfChecked(items) === items.length && items.length !== 0,\n      indeterminate: numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0,\n      disabled: items.length === 0,\n      inputProps: {\n        'aria-label': 'all items selected'\n      }\n    }),\n    title: title,\n    subheader: `${numberOfChecked(items)}/${items.length} selected`\n  }), _ref, __jsx(List, {\n    className: classes.list,\n    dense: true,\n    component: \"div\",\n    role: \"list\"\n  }, items.map(value => {\n    const labelId = `transfer-list-all-item-${value}-label`;\n    return __jsx(ListItem, {\n      key: value,\n      role: \"listitem\",\n      button: true,\n      onClick: handleToggle(value)\n    }, __jsx(ListItemIcon, null, __jsx(Checkbox, {\n      checked: checked.indexOf(value) !== -1,\n      tabIndex: -1,\n      disableRipple: true,\n      inputProps: {\n        'aria-labelledby': labelId\n      }\n    })), __jsx(ListItemText, {\n      id: labelId,\n      primary: `List item ${value + 1}`\n    }));\n  }), _ref2));\n\n  return __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    alignItems: \"center\",\n    className: classes.root\n  }, __jsx(Grid, {\n    item: true\n  }, customList('Choices', left)), __jsx(Grid, {\n    item: true\n  }, __jsx(Grid, {\n    container: true,\n    direction: \"column\",\n    alignItems: \"center\"\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    size: \"small\",\n    className: classes.button,\n    onClick: handleCheckedRight,\n    disabled: leftChecked.length === 0,\n    \"aria-label\": \"move selected right\"\n  }, \">\"), __jsx(Button, {\n    variant: \"outlined\",\n    size: \"small\",\n    className: classes.button,\n    onClick: handleCheckedLeft,\n    disabled: rightChecked.length === 0,\n    \"aria-label\": \"move selected left\"\n  }, \"<\"))), __jsx(Grid, {\n    item: true\n  }, customList('Chosen', right)));\n}","map":null,"metadata":{},"sourceType":"module"}