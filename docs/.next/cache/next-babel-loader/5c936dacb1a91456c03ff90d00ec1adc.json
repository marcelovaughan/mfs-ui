{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/ClickAwayListener/ClickAwayListener.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from \"../utils/ownerDocument\";\nimport useForkRef from \"../utils/useForkRef\";\nimport useEventCallback from \"../utils/useEventCallback\";\nimport { elementAcceptingRef, exactProp } from \"../../../material-ui-utils/src\";\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\nfunction clickedRootScrollbar(event) {\n  return document.documentElement.clientWidth < event.clientX || document.documentElement.clientHeight < event.clientY;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\n\nfunction ClickAwayListener(props) {\n  var children = props.children,\n      _props$disableReactTr = props.disableReactTree,\n      disableReactTree = _props$disableReactTr === void 0 ? false : _props$disableReactTr,\n      _props$mouseEvent = props.mouseEvent,\n      mouseEvent = _props$mouseEvent === void 0 ? 'onClick' : _props$mouseEvent,\n      onClickAway = props.onClickAway,\n      _props$touchEvent = props.touchEvent,\n      touchEvent = _props$touchEvent === void 0 ? 'onTouchEnd' : _props$touchEvent;\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(null);\n  var mountedRef = React.useRef(false);\n  var syntheticEventRef = React.useRef(false);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    nodeRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviours like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  var handleClickAway = useEventCallback(function (event) {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    var insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false; // 1. IE 11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!mountedRef.current || !nodeRef.current || clickedRootScrollbar(event)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      // TODO v6 remove dead logic https://caniuse.com/#search=composedPath.\n      var doc = ownerDocument(nodeRef.current);\n      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);\n    }\n\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  var createHandleSynthetic = function createHandleSynthetic(handlerName) {\n    return function (event) {\n      syntheticEventRef.current = true;\n      var childrenPropsHandler = children.props[handlerName];\n\n      if (childrenPropsHandler) {\n        childrenPropsHandler(event);\n      }\n    };\n  };\n\n  var childrenProps = {\n    ref: handleRef\n  };\n\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n\n  React.useEffect(function () {\n    if (touchEvent !== false) {\n      var mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      var doc = ownerDocument(nodeRef.current);\n\n      var handleTouchMove = function handleTouchMove() {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return function () {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n\n  React.useEffect(function () {\n    if (mouseEvent !== false) {\n      var mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      var doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return function () {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.cloneElement(children, childrenProps));\n}\n\nClickAwayListener.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   */\n  disableReactTree: PropTypes.bool,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n};\n\nif (true) {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/ClickAwayListener/ClickAwayListener.js"],"names":["React","ReactDOM","PropTypes","ownerDocument","useForkRef","useEventCallback","elementAcceptingRef","exactProp","mapEventPropToEvent","eventProp","substring","toLowerCase","clickedRootScrollbar","event","document","documentElement","clientWidth","clientX","clientHeight","clientY","ClickAwayListener","props","children","disableReactTree","mouseEvent","onClickAway","touchEvent","movedRef","useRef","nodeRef","mountedRef","syntheticEventRef","useEffect","current","handleOwnRef","useCallback","instance","findDOMNode","handleRef","ref","handleClickAway","insideReactTree","insideDOM","composedPath","indexOf","doc","contains","target","createHandleSynthetic","handlerName","childrenPropsHandler","childrenProps","mappedTouchEvent","handleTouchMove","addEventListener","removeEventListener","undefined","mappedMouseEvent","cloneElement","propTypes","isRequired","bool","oneOf","func"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\nfunction clickedRootScrollbar(event) {\n  return (\n    document.documentElement.clientWidth < event.clientX ||\n    document.documentElement.clientHeight < event.clientY\n  );\n}\n\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\nfunction ClickAwayListener(props) {\n  const {\n    children,\n    disableReactTree = false,\n    mouseEvent = 'onClick',\n    onClickAway,\n    touchEvent = 'onTouchEnd',\n  } = props;\n  const movedRef = React.useRef(false);\n  const nodeRef = React.useRef(null);\n  const mountedRef = React.useRef(false);\n  const syntheticEventRef = React.useRef(false);\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  // can be removed once we drop support for non ref forwarding class components\n  const handleOwnRef = React.useCallback((instance) => {\n    // #StrictMode ready\n    nodeRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  const handleRef = useForkRef(children.ref, handleOwnRef);\n\n  // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviours like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n  const handleClickAway = useEventCallback((event) => {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    const insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n\n    // 1. IE 11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n    if (!mountedRef.current || !nodeRef.current || clickedRootScrollbar(event)) {\n      return;\n    }\n\n    // Do not act if user performed touchmove\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    let insideDOM;\n\n    // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      // TODO v6 remove dead logic https://caniuse.com/#search=composedPath.\n      const doc = ownerDocument(nodeRef.current);\n      insideDOM =\n        !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);\n    }\n\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  });\n\n  // Keep track of mouse/touch events that bubbled up through the portal.\n  const createHandleSynthetic = (handlerName) => (event) => {\n    syntheticEventRef.current = true;\n\n    const childrenPropsHandler = children.props[handlerName];\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n\n  const childrenProps = { ref: handleRef };\n\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n\n  React.useEffect(() => {\n    if (touchEvent !== false) {\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      const doc = ownerDocument(nodeRef.current);\n\n      const handleTouchMove = () => {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n\n      return () => {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n\n  React.useEffect(() => {\n    if (mouseEvent !== false) {\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      const doc = ownerDocument(nodeRef.current);\n\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n\n      return () => {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n\n  return <React.Fragment>{React.cloneElement(children, childrenProps)}</React.Fragment>;\n}\n\nClickAwayListener.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   */\n  disableReactTree: PropTypes.bool,\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false]),\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;\n"]},"metadata":{},"sourceType":"module"}