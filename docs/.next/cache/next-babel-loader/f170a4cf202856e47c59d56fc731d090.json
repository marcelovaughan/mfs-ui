{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nvar __jsx = React.createElement;\nimport React from 'react'; // import of a small, pure module in a private demo\n// bundle size and module duplication is negligible\n\n/* eslint-disable-next-line no-restricted-imports */\n\nimport { convertLength } from \"../../../../../packages/material-ui/src/styles/cssUtils\";\nimport { makeStyles, createMuiTheme, responsiveFontSizes } from \"../../../../../packages/material-ui/src/styles\";\nimport { Legend, Tooltip, LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\nvar theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\nvar colors = ['#443dc2', '#2060df', '#277e91', '#378153', '#4d811d', '#63780d', '#996600'];\nvar variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1'];\nvar useStyles = makeStyles({\n  root: {\n    height: 380,\n    width: '100%',\n    color: 'black'\n  }\n});\n\nvar _ref = __jsx(XAxis, {\n  dataKey: \"viewport\",\n  type: \"number\"\n}, __jsx(Label, {\n  position: \"right\",\n  offset: 30\n}, \"viewport (px)\"));\n\nvar _ref2 = __jsx(YAxis, {\n  dataKey: \"fontSize\",\n  type: \"number\"\n}, __jsx(Label, {\n  position: \"top\",\n  offset: 20\n}, \"font-size (rem)\"));\n\nvar _ref3 = __jsx(Tooltip, null);\n\nvar _ref4 = __jsx(Legend, null);\n\nexport default function ResponsiveFontSizes() {\n  var classes = useStyles();\n  var convert = convertLength(theme.typography.htmlFontSize);\n\n  var toPx = function toPx(rem) {\n    return _parseFloat(convert(rem, 'px'));\n  };\n\n  var series = variants.map(function (variantName) {\n    var variant = theme.typography[variantName];\n    var data = [];\n    data.push({\n      viewport: 0,\n      fontSize: toPx(variant.fontSize)\n    });\n    theme.breakpoints.keys.forEach(function (key) {\n      var viewport = theme.breakpoints.values[key];\n      var value = theme.breakpoints.up(key);\n\n      if (variant[value]) {\n        data.push({\n          viewport: viewport - 1,\n          fontSize: data[data.length - 1].fontSize\n        });\n        data.push({\n          viewport: viewport,\n          fontSize: toPx(variant[value].fontSize)\n        });\n      } else if (key === 'xl') {\n        data.push({\n          viewport: viewport,\n          fontSize: data[data.length - 1].fontSize\n        });\n      }\n    });\n    return {\n      name: variantName,\n      data: data\n    };\n  });\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(ResponsiveContainer, null, __jsx(LineChart, {\n    margin: {\n      top: 50,\n      right: 140,\n      bottom: 0,\n      left: 30\n    }\n  }, _ref, _ref2, _ref3, _ref4, series.map(function (serie, index) {\n    return __jsx(Line, {\n      dataKey: \"fontSize\",\n      stroke: colors[index % colors.length],\n      data: serie.data,\n      name: serie.name,\n      key: serie.name\n    });\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}