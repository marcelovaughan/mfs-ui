{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { withStyles, useTheme } from \"../../../../../packages/material-ui/src/styles\";\nimport * as colors from \"../../../../../packages/material-ui/src/colors\";\nvar mainColors = ['Red', 'Pink', 'Purple', 'Deep Purple', 'Indigo', 'Blue', 'Light Blue', 'Cyan', 'Teal', 'Green', 'Light Green', 'Lime', 'Yellow', 'Amber', 'Orange', 'Deep Orange'];\nvar neutralColors = ['Brown', 'Grey', 'Blue Grey'];\nvar mainPalette = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\nvar altPalette = ['A100', 'A200', 'A400', 'A700'];\nexport var styles = function styles(theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    name: {\n      marginBottom: 60\n    },\n    blockSpace: {\n      height: 4\n    },\n    colorContainer: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    },\n    colorGroup: _defineProperty({\n      padding: 0,\n      margin: theme.spacing(0, 2, 2, 0),\n      flexGrow: 1\n    }, theme.breakpoints.up('sm'), {\n      flexGrow: 0,\n      width: '30%'\n    }),\n    colorValue: _objectSpread(_objectSpread({}, theme.typography.caption), {}, {\n      color: 'inherit',\n      fontWeight: 'inherit'\n    }),\n    body2: theme.typography.body2\n  };\n};\n\nfunction getColorBlock(classes, theme, colorName, colorValue, colorTitle) {\n  var bgColor = colors[colorName][colorValue];\n  var fgColor = theme.palette.getContrastText(bgColor);\n  var blockTitle;\n\n  if (colorTitle) {\n    blockTitle = __jsx(\"div\", {\n      className: classes.name\n    }, colorName);\n  }\n\n  var rowStyle = {\n    backgroundColor: bgColor,\n    color: fgColor,\n    listStyle: 'none',\n    padding: 15\n  };\n\n  if (colorValue.toString().indexOf('A1') === 0) {\n    rowStyle = _objectSpread(_objectSpread({}, rowStyle), {}, {\n      marginTop: 4\n    });\n  }\n\n  return __jsx(\"li\", {\n    style: rowStyle,\n    key: colorValue,\n    className: classes.body2\n  }, blockTitle, __jsx(\"div\", {\n    className: classes.colorContainer\n  }, __jsx(\"span\", null, colorValue), __jsx(\"span\", {\n    className: classes.colorValue\n  }, bgColor)));\n}\n\nfunction getColorGroup(options) {\n  var classes = options.classes,\n      theme = options.theme,\n      color = options.color,\n      showAltPalette = options.showAltPalette;\n  var cssColor = color.replace(' ', '').replace(color.charAt(0), color.charAt(0).toLowerCase());\n  var colorsList = [];\n  colorsList = mainPalette.map(function (mainValue) {\n    return getColorBlock(classes, theme, cssColor, mainValue);\n  });\n\n  if (showAltPalette) {\n    altPalette.forEach(function (altValue) {\n      colorsList.push(getColorBlock(classes, theme, cssColor, altValue));\n    });\n  }\n\n  return __jsx(\"ul\", {\n    className: classes.colorGroup,\n    key: cssColor\n  }, getColorBlock(classes, theme, cssColor, 500, true), __jsx(\"div\", {\n    className: classes.blockSpace\n  }), colorsList);\n}\n\nfunction Color(props) {\n  var classes = props.classes;\n  var theme = useTheme();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, mainColors.map(function (mainColor) {\n    return getColorGroup({\n      classes: classes,\n      theme: theme,\n      color: mainColor,\n      showAltPalette: true\n    });\n  }), neutralColors.map(function (neutralColor) {\n    return getColorGroup({\n      classes: classes,\n      theme: theme,\n      color: neutralColor,\n      showAltPalette: false\n    });\n  }));\n}\n\nexport default withStyles(styles)(Color);","map":null,"metadata":{},"sourceType":"module"}