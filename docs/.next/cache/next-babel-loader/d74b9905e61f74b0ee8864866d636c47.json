{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-lab/src/LoadingButton/LoadingButton.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from \"../../../material-ui-utils/src\";\nimport { capitalize } from \"../../../material-ui/src/utils\";\nimport { withStyles } from \"../../../material-ui/src/styles\";\nimport Button from \"../../../material-ui/src/Button\";\nimport CircularProgress from \"../../../material-ui/src/CircularProgress\";\nexport const styles = () => ({\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `pending={true}`. */\n  pending: {},\n\n  /* Styles applied to the pendingIndicator element. */\n  pendingIndicator: {\n    position: 'absolute',\n    visibility: 'visible',\n    display: 'flex'\n  },\n\n  /* Styles applied to the pendingIndicator element if `pendingPosition=\"center\"`. */\n  pendingIndicatorCenter: {\n    left: '50%',\n    transform: 'translate(-50%)'\n  },\n\n  /* Styles applied to the pendingIndicator element if `pendingPosition=\"start\"`. */\n  pendingIndicatorStart: {\n    left: 14\n  },\n\n  /* Styles applied to the pendingIndicator element if `pendingPosition=\"end\"`. */\n  pendingIndicatorEnd: {\n    right: 14\n  },\n\n  /* Styles applied to the endIcon element if `pending={true}` and `pendingPosition=\"end\"`. */\n  endIconPendingEnd: {\n    visibility: 'hidden'\n  },\n\n  /* Styles applied to the startIcon element if `pending={true}` and `pendingPosition=\"start\"`. */\n  startIconPendingStart: {\n    visibility: 'hidden'\n  },\n\n  /* Styles applied to the label element if `pending={true}` and `pendingPosition=\"center\"`. */\n  labelPendingCenter: {\n    visibility: 'hidden'\n  }\n});\n\nconst PendingIndicator = __jsx(CircularProgress, {\n  color: \"inherit\",\n  size: 16,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 26\n  }\n});\n\nconst LoadingButton = /*#__PURE__*/React.forwardRef(function LoadingButton(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    disabled = false,\n    pending = false,\n    pendingIndicator = PendingIndicator,\n    pendingPosition = 'center'\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disabled\", \"pending\", \"pendingIndicator\", \"pendingPosition\"]);\n\n  return __jsx(Button, _extends({\n    className: clsx(classes.root, className, pending && classes.pending),\n    disabled: disabled || pending,\n    ref: ref,\n    classes: {\n      startIcon: classes[`startIcon${pending ? 'Pending' : ''}${capitalize(pendingPosition)}`],\n      endIcon: classes[`endIcon${pending ? 'Pending' : ''}${capitalize(pendingPosition)}`],\n      label: classes[`label${pending ? 'Pending' : ''}${capitalize(pendingPosition)}`]\n    }\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }), pending && __jsx(\"div\", {\n    className: clsx(classes.pendingIndicator, classes[`pendingIndicator${capitalize(pendingPosition)}`]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, pendingIndicator), children);\n});\nLoadingButton.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the pending indicator will be shown.\n   */\n  pending: PropTypes.bool,\n\n  /**\n   * Element placed before the children if the button is in pending state.\n   */\n  pendingIndicator: PropTypes.node,\n\n  /**\n   * The pending indicator can be positioned on the start, end, or the center of the button.\n   */\n  pendingPosition: chainPropTypes(PropTypes.oneOf(['start', 'end', 'center']), props => {\n    if (props.pendingPosition === 'start' && !props.startIcon) {\n      return new Error(`Material-UI: The pendingPosition=\"start\" should be used in combination with startIcon.`);\n    }\n\n    if (props.pendingPosition === 'end' && !props.endIcon) {\n      return new Error(`Material-UI: The pendingPosition=\"end\" should be used in combination with endIcon.`);\n    }\n\n    return null;\n  })\n};\nexport default withStyles(styles, {\n  name: 'MuiLoadingButton'\n})(LoadingButton);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-lab/src/LoadingButton/LoadingButton.js"],"names":["React","PropTypes","clsx","chainPropTypes","capitalize","withStyles","Button","CircularProgress","styles","root","pending","pendingIndicator","position","visibility","display","pendingIndicatorCenter","left","transform","pendingIndicatorStart","pendingIndicatorEnd","right","endIconPendingEnd","startIconPendingStart","labelPendingCenter","PendingIndicator","LoadingButton","forwardRef","props","ref","children","classes","className","disabled","pendingPosition","other","startIcon","endIcon","label","propTypes","node","object","string","bool","oneOf","Error","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport { capitalize } from '@material-ui/core/utils';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport const styles = () => ({\n  /* Styles applied to the root element. */\n  root: {},\n  /* Styles applied to the root element if `pending={true}`. */\n  pending: {},\n  /* Styles applied to the pendingIndicator element. */\n  pendingIndicator: {\n    position: 'absolute',\n    visibility: 'visible',\n    display: 'flex',\n  },\n  /* Styles applied to the pendingIndicator element if `pendingPosition=\"center\"`. */\n  pendingIndicatorCenter: {\n    left: '50%',\n    transform: 'translate(-50%)',\n  },\n  /* Styles applied to the pendingIndicator element if `pendingPosition=\"start\"`. */\n  pendingIndicatorStart: {\n    left: 14,\n  },\n  /* Styles applied to the pendingIndicator element if `pendingPosition=\"end\"`. */\n  pendingIndicatorEnd: {\n    right: 14,\n  },\n  /* Styles applied to the endIcon element if `pending={true}` and `pendingPosition=\"end\"`. */\n  endIconPendingEnd: {\n    visibility: 'hidden',\n  },\n  /* Styles applied to the startIcon element if `pending={true}` and `pendingPosition=\"start\"`. */\n  startIconPendingStart: {\n    visibility: 'hidden',\n  },\n  /* Styles applied to the label element if `pending={true}` and `pendingPosition=\"center\"`. */\n  labelPendingCenter: {\n    visibility: 'hidden',\n  },\n});\n\nconst PendingIndicator = <CircularProgress color=\"inherit\" size={16} />;\n\nconst LoadingButton = React.forwardRef(function LoadingButton(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    disabled = false,\n    pending = false,\n    pendingIndicator = PendingIndicator,\n    pendingPosition = 'center',\n    ...other\n  } = props;\n\n  return (\n    <Button\n      className={clsx(\n        classes.root,\n        {\n          [classes.pending]: pending,\n        },\n        className,\n      )}\n      disabled={disabled || pending}\n      ref={ref}\n      classes={{\n        startIcon: classes[`startIcon${pending ? 'Pending' : ''}${capitalize(pendingPosition)}`],\n        endIcon: classes[`endIcon${pending ? 'Pending' : ''}${capitalize(pendingPosition)}`],\n        label: classes[`label${pending ? 'Pending' : ''}${capitalize(pendingPosition)}`],\n      }}\n      {...other}\n    >\n      {pending && (\n        <div\n          className={clsx(\n            classes.pendingIndicator,\n            classes[`pendingIndicator${capitalize(pendingPosition)}`],\n          )}\n        >\n          {pendingIndicator}\n        </div>\n      )}\n\n      {children}\n    </Button>\n  );\n});\n\nLoadingButton.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the pending indicator will be shown.\n   */\n  pending: PropTypes.bool,\n  /**\n   * Element placed before the children if the button is in pending state.\n   */\n  pendingIndicator: PropTypes.node,\n  /**\n   * The pending indicator can be positioned on the start, end, or the center of the button.\n   */\n  pendingPosition: chainPropTypes(PropTypes.oneOf(['start', 'end', 'center']), (props) => {\n    if (props.pendingPosition === 'start' && !props.startIcon) {\n      return new Error(\n        `Material-UI: The pendingPosition=\"start\" should be used in combination with startIcon.`,\n      );\n    }\n    if (props.pendingPosition === 'end' && !props.endIcon) {\n      return new Error(\n        `Material-UI: The pendingPosition=\"end\" should be used in combination with endIcon.`,\n      );\n    }\n    return null;\n  }),\n};\n\nexport default withStyles(styles, { name: 'MuiLoadingButton' })(LoadingButton);\n"]},"metadata":{},"sourceType":"module"}