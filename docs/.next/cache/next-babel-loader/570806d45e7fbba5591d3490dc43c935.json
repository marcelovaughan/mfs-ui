{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/FormControlLabel/FormControlLabel.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from \"../../../material-ui-utils/src\";\nimport { useFormControl } from \"../FormControl\";\nimport withStyles from \"../styles/withStyles\";\nimport Typography from \"../Typography\";\nimport capitalize from \"../utils/capitalize\";\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      alignItems: 'center',\n      cursor: 'pointer',\n      // For correct alignment with the text.\n      verticalAlign: 'middle',\n      WebkitTapHighlightColor: 'transparent',\n      marginLeft: -11,\n      marginRight: 16,\n      // used for row presentation of radio/checkbox\n      '&$disabled': {\n        cursor: 'default'\n      }\n    },\n\n    /* Styles applied to the root element if `labelPlacement=\"start\"`. */\n    labelPlacementStart: {\n      flexDirection: 'row-reverse',\n      marginLeft: 16,\n      // used for row presentation of radio/checkbox\n      marginRight: -11\n    },\n\n    /* Styles applied to the root element if `labelPlacement=\"top\"`. */\n    labelPlacementTop: {\n      flexDirection: 'column-reverse',\n      marginLeft: 16\n    },\n\n    /* Styles applied to the root element if `labelPlacement=\"bottom\"`. */\n    labelPlacementBottom: {\n      flexDirection: 'column',\n      marginLeft: 16\n    },\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the label's Typography component. */\n    label: {\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      }\n    }\n  };\n};\n/**\n * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\n\nvar FormControlLabel = /*#__PURE__*/React.forwardRef(function FormControlLabel(props, ref) {\n  var checked = props.checked,\n      classes = props.classes,\n      className = props.className,\n      control = props.control,\n      disabledProp = props.disabled,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$labelPlacement = props.labelPlacement,\n      labelPlacement = _props$labelPlacement === void 0 ? 'end' : _props$labelPlacement,\n      name = props.name,\n      onChange = props.onChange,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"checked\", \"classes\", \"className\", \"control\", \"disabled\", \"inputRef\", \"label\", \"labelPlacement\", \"name\", \"onChange\", \"value\"]);\n\n  var muiFormControl = useFormControl();\n  var disabled = disabledProp;\n\n  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {\n    disabled = control.props.disabled;\n  }\n\n  if (typeof disabled === 'undefined' && muiFormControl) {\n    disabled = muiFormControl.disabled;\n  }\n\n  var controlProps = {\n    disabled: disabled\n  };\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(function (key) {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n  return __jsx(\"label\", _extends({\n    className: clsx(classes.root, className, labelPlacement !== 'end' && classes[\"labelPlacement\".concat(capitalize(labelPlacement))], disabled && classes.disabled),\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.cloneElement(control, controlProps), __jsx(Typography, {\n    component: \"span\",\n    className: clsx(classes.label, disabled && classes.disabled),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, label));\n});\nFormControlLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: PropTypes.element.isRequired,\n\n  /**\n   * If `true`, the control will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The text to be used in an enclosing label element.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The position of the label.\n   */\n  labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),\n\n  /**\n   * @ignore\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n};\nexport default withStyles(styles, {\n  name: 'MuiFormControlLabel'\n})(FormControlLabel);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/FormControlLabel/FormControlLabel.js"],"names":["React","PropTypes","clsx","refType","useFormControl","withStyles","Typography","capitalize","styles","theme","root","display","alignItems","cursor","verticalAlign","WebkitTapHighlightColor","marginLeft","marginRight","labelPlacementStart","flexDirection","labelPlacementTop","labelPlacementBottom","disabled","label","color","palette","text","FormControlLabel","forwardRef","props","ref","checked","classes","className","control","disabledProp","inputRef","labelPlacement","name","onChange","value","other","muiFormControl","controlProps","forEach","key","cloneElement","propTypes","bool","object","string","element","isRequired","node","oneOf","func","any"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport { useFormControl } from '../FormControl';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = (theme) => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    cursor: 'pointer',\n    // For correct alignment with the text.\n    verticalAlign: 'middle',\n    WebkitTapHighlightColor: 'transparent',\n    marginLeft: -11,\n    marginRight: 16, // used for row presentation of radio/checkbox\n    '&$disabled': {\n      cursor: 'default',\n    },\n  },\n  /* Styles applied to the root element if `labelPlacement=\"start\"`. */\n  labelPlacementStart: {\n    flexDirection: 'row-reverse',\n    marginLeft: 16, // used for row presentation of radio/checkbox\n    marginRight: -11,\n  },\n  /* Styles applied to the root element if `labelPlacement=\"top\"`. */\n  labelPlacementTop: {\n    flexDirection: 'column-reverse',\n    marginLeft: 16,\n  },\n  /* Styles applied to the root element if `labelPlacement=\"bottom\"`. */\n  labelPlacementBottom: {\n    flexDirection: 'column',\n    marginLeft: 16,\n  },\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Styles applied to the label's Typography component. */\n  label: {\n    '&$disabled': {\n      color: theme.palette.text.disabled,\n    },\n  },\n});\n\n/**\n * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\nconst FormControlLabel = React.forwardRef(function FormControlLabel(props, ref) {\n  const {\n    checked,\n    classes,\n    className,\n    control,\n    disabled: disabledProp,\n    inputRef,\n    label,\n    labelPlacement = 'end',\n    name,\n    onChange,\n    value,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n\n  let disabled = disabledProp;\n  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {\n    disabled = control.props.disabled;\n  }\n  if (typeof disabled === 'undefined' && muiFormControl) {\n    disabled = muiFormControl.disabled;\n  }\n\n  const controlProps = {\n    disabled,\n  };\n\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach((key) => {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n\n  return (\n    <label\n      className={clsx(\n        classes.root,\n        {\n          [classes[`labelPlacement${capitalize(labelPlacement)}`]]: labelPlacement !== 'end',\n          [classes.disabled]: disabled,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {React.cloneElement(control, controlProps)}\n      <Typography\n        component=\"span\"\n        className={clsx(classes.label, { [classes.disabled]: disabled })}\n      >\n        {label}\n      </Typography>\n    </label>\n  );\n});\n\nFormControlLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: PropTypes.element.isRequired,\n  /**\n   * If `true`, the control will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The text to be used in an enclosing label element.\n   */\n  label: PropTypes.node,\n  /**\n   * The position of the label.\n   */\n  labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),\n  /**\n   * @ignore\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'MuiFormControlLabel' })(FormControlLabel);\n"]},"metadata":{},"sourceType":"module"}