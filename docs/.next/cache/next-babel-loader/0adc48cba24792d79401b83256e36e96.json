{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/CssBaseline/CssBaseline.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from \"../styles/withStyles\";\nimport { exactProp } from \"../../../material-ui-utils/src\";\nexport const html = {\n  WebkitFontSmoothing: 'antialiased',\n  // Antialiasing.\n  MozOsxFontSmoothing: 'grayscale',\n  // Antialiasing.\n  // Change from `box-sizing: content-box` so that `width`\n  // is not affected by `padding` or `border`.\n  boxSizing: 'border-box'\n};\nexport const body = theme => _objectSpread(_objectSpread({\n  color: theme.palette.text.primary\n}, theme.typography.body2), {}, {\n  backgroundColor: theme.palette.background.default,\n  '@media print': {\n    // Save printer ink.\n    backgroundColor: theme.palette.common.white\n  }\n});\nexport const styles = theme => ({\n  '@global': {\n    html,\n    '*, *::before, *::after': {\n      boxSizing: 'inherit'\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    body: _objectSpread(_objectSpread({\n      margin: 0\n    }, body(theme)), {}, {\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: theme.palette.background.default\n      }\n    })\n  }\n});\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\n\nfunction CssBaseline(props) {\n  /* eslint-disable no-unused-vars */\n  const {\n    children = null,\n    classes\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 10\n    }\n  }, children);\n}\n\nCssBaseline.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object\n};\n\nif (true) {\n  // eslint-disable-next-line\n  CssBaseline['propTypes' + ''] = exactProp(CssBaseline.propTypes);\n}\n\nexport default withStyles(styles, {\n  name: 'MuiCssBaseline'\n})(CssBaseline);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/CssBaseline/CssBaseline.js"],"names":["React","PropTypes","withStyles","exactProp","html","WebkitFontSmoothing","MozOsxFontSmoothing","boxSizing","body","theme","color","palette","text","primary","typography","body2","backgroundColor","background","default","common","white","styles","fontWeight","fontWeightBold","margin","CssBaseline","props","children","classes","propTypes","node","object","name"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP;AACA,SAASC,SAAT;AAEA,OAAO,MAAMC,IAAI,GAAG;AAClBC,EAAAA,mBAAmB,EAAE,aADH;AACkB;AACpCC,EAAAA,mBAAmB,EAAE,WAFH;AAEgB;AAClC;AACA;AACAC,EAAAA,SAAS,EAAE;AALO,CAAb;AAQP,OAAO,MAAMC,IAAI,GAAIC,KAAD;AAClBC,EAAAA,KAAK,EAAED,KAAK,CAACE,OAAN,CAAcC,IAAd,CAAmBC;AADR,GAEfJ,KAAK,CAACK,UAAN,CAAiBC,KAFF;AAGlBC,EAAAA,eAAe,EAAEP,KAAK,CAACE,OAAN,CAAcM,UAAd,CAAyBC,OAHxB;AAIlB,kBAAgB;AACd;AACAF,IAAAA,eAAe,EAAEP,KAAK,CAACE,OAAN,CAAcQ,MAAd,CAAqBC;AAFxB;AAJE,EAAb;AAUP,OAAO,MAAMC,MAAM,GAAIZ,KAAD,KAAY;AAChC,aAAW;AACTL,IAAAA,IADS;AAET,8BAA0B;AACxBG,MAAAA,SAAS,EAAE;AADa,KAFjB;AAKT,iBAAa;AACXe,MAAAA,UAAU,EAAEb,KAAK,CAACK,UAAN,CAAiBS;AADlB,KALJ;AAQTf,IAAAA,IAAI;AACFgB,MAAAA,MAAM,EAAE;AADN,OAEChB,IAAI,CAACC,KAAD,CAFL;AAGF;AACA;AACA,qBAAe;AACbO,QAAAA,eAAe,EAAEP,KAAK,CAACE,OAAN,CAAcM,UAAd,CAAyBC;AAD7B;AALb;AARK;AADqB,CAAZ,CAAf;AAqBP;;;;AAGA,SAASO,WAAT,CAAqBC,KAArB,EAA4B;AAC1B;AACA,QAAM;AAAEC,IAAAA,QAAQ,GAAG,IAAb;AAAmBC,IAAAA;AAAnB,MAA+BF,KAArC;AACA;;AACA,SAAO,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBC,QAAjB,CAAP;AACD;;AAEDF,WAAW,CAACI,SAAZ,GAAwB;AACtB;AACA;AACA;AACA;;AACA;;;AAGAF,EAAAA,QAAQ,EAAE1B,SAAS,CAAC6B,IARE;;AAStB;;;;AAIAF,EAAAA,OAAO,EAAE3B,SAAS,CAAC8B;AAbG,CAAxB;;AAgBA,UAA2C;AACzC;AACAN,EAAAA,WAAW,CAAC,cAAc,EAAf,CAAX,GAAgCtB,SAAS,CAACsB,WAAW,CAACI,SAAb,CAAzC;AACD;;AAED,eAAe3B,UAAU,CAACmB,MAAD,EAAS;AAAEW,EAAAA,IAAI,EAAE;AAAR,CAAT,CAAV,CAA+CP,WAA/C,CAAf","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '../styles/withStyles';\nimport { exactProp } from '@material-ui/utils';\n\nexport const html = {\n  WebkitFontSmoothing: 'antialiased', // Antialiasing.\n  MozOsxFontSmoothing: 'grayscale', // Antialiasing.\n  // Change from `box-sizing: content-box` so that `width`\n  // is not affected by `padding` or `border`.\n  boxSizing: 'border-box',\n};\n\nexport const body = (theme) => ({\n  color: theme.palette.text.primary,\n  ...theme.typography.body2,\n  backgroundColor: theme.palette.background.default,\n  '@media print': {\n    // Save printer ink.\n    backgroundColor: theme.palette.common.white,\n  },\n});\n\nexport const styles = (theme) => ({\n  '@global': {\n    html,\n    '*, *::before, *::after': {\n      boxSizing: 'inherit',\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    body: {\n      margin: 0, // Remove the margin in all browsers.\n      ...body(theme),\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: theme.palette.background.default,\n      },\n    },\n  },\n});\n\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\nfunction CssBaseline(props) {\n  /* eslint-disable no-unused-vars */\n  const { children = null, classes } = props;\n  /* eslint-enable no-unused-vars */\n  return <React.Fragment>{children}</React.Fragment>;\n}\n\nCssBaseline.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  CssBaseline['propTypes' + ''] = exactProp(CssBaseline.propTypes);\n}\n\nexport default withStyles(styles, { name: 'MuiCssBaseline' })(CssBaseline);\n"]},"metadata":{},"sourceType":"module"}