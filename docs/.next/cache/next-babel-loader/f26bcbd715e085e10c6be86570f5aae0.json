{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport url from 'url';\nimport ExpandIcon from \"../../../../../packages/material-ui-icons/src/ExpandMore\";\nimport CollapseIcon from \"../../../../../packages/material-ui-icons/src/ChevronRight\";\nimport TreeView from \"../../../../../packages/material-ui-lab/src/TreeView\";\nimport TreeItem from \"../../../../../packages/material-ui-lab/src/TreeItem\";\nimport clsx from 'clsx';\nimport { makeStyles, withStyles, createMuiTheme, lighten } from \"../../../../../packages/material-ui/src/styles\";\nimport FormControlLabel from \"../../../../../packages/material-ui/src/FormControlLabel\";\nimport Switch from \"../../../../../packages/material-ui/src/Switch\";\n/**\n * @param {unknown} value\n */\n\nfunction getType(value) {\n  if (_Array$isArray(value)) {\n    return 'array';\n  }\n\n  if (/^(#|rgb|rgba|hsl|hsla)/.test(value)) {\n    return 'color';\n  }\n\n  if (value === null) {\n    return 'null';\n  }\n\n  return typeof value;\n}\n/**\n *\n * @param {unknown} value\n * @param {ReturnType<typeof getType>} type\n */\n\n\nfunction getLabel(value, type) {\n  switch (type) {\n    case 'array':\n      return \"Array(\".concat(value.length, \")\");\n\n    case 'null':\n      return 'null';\n\n    case 'undefined':\n      return 'undefined';\n\n    case 'function':\n      return \"f \".concat(value.name, \"()\");\n\n    case 'object':\n      return 'Object';\n\n    case 'string':\n      return \"\\\"\".concat(value, \"\\\"\");\n\n    case 'symbol':\n      return \"Symbol(\".concat(String(value), \")\");\n\n    case 'bigint':\n    case 'boolean':\n    case 'number':\n    default:\n      return String(value);\n  }\n}\n\nfunction getTokenType(type) {\n  switch (type) {\n    case 'color':\n      return 'string';\n\n    case 'object':\n    case 'array':\n      return 'comment';\n\n    default:\n      return type;\n  }\n}\n\nvar useObjectEntryLabelStyles = makeStyles(function (theme) {\n  return {\n    color: {\n      backgroundColor: '#fff',\n      display: 'inline-block',\n      marginBottom: -1,\n      marginRight: theme.spacing(0.5),\n      border: '1px solid',\n      backgroundImage: 'url(\"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%202%202%22%3E%3Cpath%20d%3D%22M1%202V0h1v1H0v1z%22%20fill-opacity%3D%22.2%22%2F%3E%3C%2Fsvg%3E\")'\n    },\n    colorInner: {\n      display: 'block',\n      width: 11,\n      height: 11\n    }\n  };\n});\n\nfunction ObjectEntryLabel(props) {\n  var objectKey = props.objectKey,\n      objectValue = props.objectValue;\n  var type = getType(objectValue);\n  var label = getLabel(objectValue, type);\n  var tokenType = getTokenType(type);\n  var classes = useObjectEntryLabelStyles();\n  return __jsx(React.Fragment, null, \"\".concat(objectKey, \": \"), type === 'color' ? __jsx(\"span\", {\n    className: classes.color,\n    style: {\n      borderColor: lighten(label, 0.7)\n    }\n  }, __jsx(\"span\", {\n    className: classes.colorInner,\n    style: {\n      backgroundColor: label\n    }\n  })) : null, __jsx(\"span\", {\n    className: clsx('token', tokenType)\n  }, label));\n}\n\nvar useObjectEntryStyles = makeStyles({\n  treeItem: {\n    '&:focus > $treeItemContent': {\n      backgroundColor: lighten('#333', 0.08),\n      outline: \"2px dashed \".concat(lighten('#333', 0.3))\n    }\n  },\n  treeItemContent: {\n    '&:hover': {\n      backgroundColor: lighten('#333', 0.08)\n    }\n  }\n});\n\nfunction ObjectEntry(props) {\n  var nodeId = props.nodeId,\n      objectKey = props.objectKey,\n      objectValue = props.objectValue;\n  var keyPrefix = nodeId;\n  var children = null;\n\n  if (objectValue !== null && typeof objectValue === 'object' || typeof objectValue === 'function') {\n    children = _Object$keys(objectValue).length === 0 ? undefined : _Object$keys(objectValue).map(function (key) {\n      return __jsx(ObjectEntry, {\n        key: key,\n        nodeId: \"\".concat(keyPrefix, \".\").concat(key),\n        objectKey: key,\n        objectValue: objectValue[key]\n      });\n    });\n  }\n\n  var classes = useObjectEntryStyles();\n  return __jsx(TreeItem, {\n    classes: {\n      root: classes.treeItem,\n      content: classes.treeItemContent\n    },\n    nodeId: nodeId,\n    label: __jsx(ObjectEntryLabel, {\n      objectKey: objectKey,\n      objectValue: objectValue\n    })\n  }, children);\n}\n\nvar _ref = __jsx(ExpandIcon, null);\n\nvar _ref2 = __jsx(CollapseIcon, null);\n\nfunction Inspector(props) {\n  var data = props.data,\n      expandPaths = props.expandPaths,\n      other = _objectWithoutProperties(props, [\"data\", \"expandPaths\"]);\n\n  var keyPrefix = '$ROOT';\n  var defaultExpanded = React.useMemo(function () {\n    return _Array$isArray(expandPaths) ? expandPaths.map(function (expandPath) {\n      return \"\".concat(keyPrefix, \".\").concat(expandPath);\n    }) : [];\n  }, [keyPrefix, expandPaths]); // for default*  to take effect we need to remount\n\n  var key = React.useMemo(function () {\n    return defaultExpanded.join('');\n  }, [defaultExpanded]);\n  return __jsx(TreeView, _extends({\n    key: key,\n    defaultCollapseIcon: _ref,\n    defaultEndIcon: __jsx(\"div\", {\n      style: {\n        width: 24\n      }\n    }),\n    defaultExpanded: defaultExpanded,\n    defaultExpandIcon: _ref2\n  }, other), _Object$keys(data).map(function (objectKey) {\n    return __jsx(ObjectEntry, {\n      key: objectKey,\n      nodeId: \"\".concat(keyPrefix, \".\").concat(objectKey),\n      objectKey: objectKey,\n      objectValue: data[objectKey]\n    });\n  }));\n}\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    inspector: {\n      backgroundColor: '#333',\n      color: '#fff',\n      borderRadius: theme.shape.borderRadius,\n      padding: theme.spacing(1)\n    },\n    \"switch\": {\n      paddingBottom: theme.spacing(1)\n    }\n  };\n};\n\nfunction computeNodeIds(object, prefix) {\n  if (object !== null && typeof object === 'object' || typeof object === 'function') {\n    var ids = [];\n\n    _Object$keys(object).forEach(function (key) {\n      ids.push.apply(ids, [\"\".concat(prefix).concat(key)].concat(_toConsumableArray(computeNodeIds(object[key], \"\".concat(prefix).concat(key, \".\")))));\n    });\n\n    return ids;\n  }\n\n  return [];\n}\n\nfunction useNodeIdsLazy(object) {\n  var _React$useState = React.useState([]),\n      allNodeIds = _React$useState[0],\n      setAllNodeIds = _React$useState[1]; // technically we want to compute them lazily until we need them (expand all)\n  // yielding is good enough. technically we want to schedule the computation\n  // with low pri  and upgrade the priority later\n\n\n  React.useEffect(function () {\n    setAllNodeIds(computeNodeIds(object, ''));\n  }, [object]);\n  return allNodeIds;\n}\n\nfunction DefaultTheme(props) {\n  var classes = props.classes;\n\n  var _React$useState2 = React.useState(false),\n      checked = _React$useState2[0],\n      setChecked = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      expandPaths = _React$useState3[0],\n      setExpandPaths = _React$useState3[1];\n\n  var t = useSelector(function (state) {\n    return state.options.t;\n  });\n\n  var _React$useState4 = React.useState(false),\n      darkTheme = _React$useState4[0],\n      setDarkTheme = _React$useState4[1];\n\n  React.useEffect(function () {\n    var URL = url.parse(document.location.href, true); // 'expend-path' is for backwards compatibility of any external links with a prior typo.\n\n    var expandPath = URL.query['expand-path'] || URL.query['expend-path'];\n\n    if (!expandPath) {\n      return;\n    }\n\n    setExpandPaths(expandPath.replace('$.', '').split('.').reduce(function (acc, path) {\n      var last = acc.length > 0 ? \"\".concat(acc[acc.length - 1], \".\") : '';\n      acc.push(last + path);\n      return acc;\n    }, []));\n  }, []);\n  var data = React.useMemo(function () {\n    return createMuiTheme({\n      palette: {\n        type: darkTheme ? 'dark' : 'light'\n      }\n    });\n  }, [darkTheme]);\n  var allNodeIds = useNodeIdsLazy(data);\n  React.useDebugValue(allNodeIds);\n  React.useEffect(function () {\n    if (checked) {\n      // in case during the event handler allNodeIds wasn't computed yet\n      setExpandPaths(allNodeIds);\n    }\n  }, [checked, allNodeIds]);\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(FormControlLabel, {\n    className: classes[\"switch\"],\n    control: __jsx(Switch, {\n      checked: checked,\n      onChange: function onChange(event, newChecked) {\n        setChecked(newChecked);\n        setExpandPaths(newChecked ? allNodeIds : []);\n      }\n    }),\n    label: t('expandAll')\n  }), __jsx(FormControlLabel, {\n    className: classes[\"switch\"],\n    control: __jsx(Switch, {\n      checked: darkTheme,\n      onChange: function onChange(event, newValue) {\n        setDarkTheme(newValue);\n      }\n    }),\n    label: t('useDarkTheme')\n  }), __jsx(Inspector, {\n    className: classes.inspector,\n    data: data,\n    expandPaths: expandPaths\n  }));\n}\n\nexport default withStyles(styles)(DefaultTheme);","map":null,"metadata":{},"sourceType":"module"}