{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/withWidth/withWidth.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getDisplayName } from \"../../../material-ui-utils/src\";\nimport { getThemeProps } from \"../../../material-ui-styles/src\";\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport useTheme from \"../styles/useTheme\";\nimport { keys as breakpointKeys } from \"../styles/createBreakpoints\";\nimport useMediaQuery from \"../useMediaQuery\"; // By default, returns true if screen width is the same or greater than the given breakpoint.\n\nexport var isWidthUp = function isWidthUp(breakpoint, width) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (inclusive) {\n    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);\n  }\n\n  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);\n}; // By default, returns true if screen width is the same or less than the given breakpoint.\n\nexport var isWidthDown = function isWidthDown(breakpoint, width) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (inclusive) {\n    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);\n  }\n\n  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);\n};\nvar useEnhancedEffect = false ? React.useEffect : React.useLayoutEffect;\n\nvar withWidth = function withWidth() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (Component) {\n    var _options$withTheme = options.withTheme,\n        withThemeOption = _options$withTheme === void 0 ? false : _options$withTheme,\n        _options$noSSR = options.noSSR,\n        noSSR = _options$noSSR === void 0 ? false : _options$noSSR,\n        initialWidthOption = options.initialWidth;\n\n    function WithWidth(props) {\n      var contextTheme = useTheme();\n      var theme = props.theme || contextTheme;\n\n      var _getThemeProps = getThemeProps({\n        theme: theme,\n        name: 'MuiWithWidth',\n        props: _objectSpread({}, props)\n      }),\n          initialWidth = _getThemeProps.initialWidth,\n          width = _getThemeProps.width,\n          other = _objectWithoutProperties(_getThemeProps, [\"initialWidth\", \"width\"]);\n\n      var _React$useState = React.useState(false),\n          mountedState = _React$useState[0],\n          setMountedState = _React$useState[1];\n\n      useEnhancedEffect(function () {\n        setMountedState(true);\n      }, []);\n      /**\n       * innerWidth |xs      sm      md      lg      xl\n       *            |-------|-------|-------|-------|------>\n       * width      |  xs   |  sm   |  md   |  lg   |  xl\n       */\n\n      var keys = theme.breakpoints.keys.slice().reverse();\n      var widthComputed = keys.reduce(function (output, key) {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        var matches = useMediaQuery(theme.breakpoints.up(key));\n        return !output && matches ? key : output;\n      }, null);\n\n      var more = _objectSpread(_objectSpread({\n        width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption\n      }, withThemeOption ? {\n        theme: theme\n      } : {}), other); // When rendering the component on the server,\n      // we have no idea about the client browser screen width.\n      // In order to prevent blinks and help the reconciliation of the React tree\n      // we are not rendering the child component.\n      //\n      // An alternative is to use the `initialWidth` property.\n\n\n      if (more.width === undefined) {\n        return null;\n      }\n\n      return __jsx(Component, _extends({}, more, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 12\n        }\n      }));\n    }\n\n    WithWidth.propTypes = {\n      /**\n       * As `window.innerWidth` is unavailable on the server,\n       * we default to rendering an empty component during the first mount.\n       * You might want to use a heuristic to approximate\n       * the screen width of the client browser screen width.\n       *\n       * For instance, you could be using the user-agent or the client-hints.\n       * https://caniuse.com/#search=client%20hint\n       */\n      initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n      /**\n       * @ignore\n       */\n      theme: PropTypes.object,\n\n      /**\n       * Bypass the width calculation logic.\n       */\n      width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n    };\n\n    if (true) {\n      WithWidth.displayName = \"WithWidth(\".concat(getDisplayName(Component), \")\");\n    }\n\n    hoistNonReactStatics(WithWidth, Component);\n    return WithWidth;\n  };\n};\n\nexport default withWidth;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/withWidth/withWidth.js"],"names":["React","PropTypes","getDisplayName","getThemeProps","hoistNonReactStatics","useTheme","keys","breakpointKeys","useMediaQuery","isWidthUp","breakpoint","width","inclusive","indexOf","isWidthDown","useEnhancedEffect","useEffect","useLayoutEffect","withWidth","options","Component","withTheme","withThemeOption","noSSR","initialWidthOption","initialWidth","WithWidth","props","contextTheme","theme","name","other","useState","mountedState","setMountedState","breakpoints","slice","reverse","widthComputed","reduce","output","key","matches","up","more","undefined","propTypes","oneOf","object","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getDisplayName } from '@material-ui/utils';\nimport { getThemeProps } from '@material-ui/styles';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport useTheme from '../styles/useTheme';\nimport { keys as breakpointKeys } from '../styles/createBreakpoints';\nimport useMediaQuery from '../useMediaQuery';\n\n// By default, returns true if screen width is the same or greater than the given breakpoint.\nexport const isWidthUp = (breakpoint, width, inclusive = true) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);\n  }\n  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);\n};\n\n// By default, returns true if screen width is the same or less than the given breakpoint.\nexport const isWidthDown = (breakpoint, width, inclusive = true) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);\n  }\n  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);\n};\n\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n\nconst withWidth = (options = {}) => (Component) => {\n  const {\n    withTheme: withThemeOption = false,\n    noSSR = false,\n    initialWidth: initialWidthOption,\n  } = options;\n\n  function WithWidth(props) {\n    const contextTheme = useTheme();\n    const theme = props.theme || contextTheme;\n    const { initialWidth, width, ...other } = getThemeProps({\n      theme,\n      name: 'MuiWithWidth',\n      props: { ...props },\n    });\n\n    const [mountedState, setMountedState] = React.useState(false);\n    useEnhancedEffect(() => {\n      setMountedState(true);\n    }, []);\n\n    /**\n     * innerWidth |xs      sm      md      lg      xl\n     *            |-------|-------|-------|-------|------>\n     * width      |  xs   |  sm   |  md   |  lg   |  xl\n     */\n    const keys = theme.breakpoints.keys.slice().reverse();\n    const widthComputed = keys.reduce((output, key) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.up(key));\n      return !output && matches ? key : output;\n    }, null);\n\n    const more = {\n      width:\n        width ||\n        (mountedState || noSSR ? widthComputed : undefined) ||\n        initialWidth ||\n        initialWidthOption,\n      ...(withThemeOption ? { theme } : {}),\n      ...other,\n    };\n\n    // When rendering the component on the server,\n    // we have no idea about the client browser screen width.\n    // In order to prevent blinks and help the reconciliation of the React tree\n    // we are not rendering the child component.\n    //\n    // An alternative is to use the `initialWidth` property.\n    if (more.width === undefined) {\n      return null;\n    }\n\n    return <Component {...more} />;\n  }\n\n  WithWidth.propTypes = {\n    /**\n     * As `window.innerWidth` is unavailable on the server,\n     * we default to rendering an empty component during the first mount.\n     * You might want to use a heuristic to approximate\n     * the screen width of the client browser screen width.\n     *\n     * For instance, you could be using the user-agent or the client-hints.\n     * https://caniuse.com/#search=client%20hint\n     */\n    initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n    /**\n     * @ignore\n     */\n    theme: PropTypes.object,\n    /**\n     * Bypass the width calculation logic.\n     */\n    width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    WithWidth.displayName = `WithWidth(${getDisplayName(Component)})`;\n  }\n\n  hoistNonReactStatics(WithWidth, Component);\n\n  return WithWidth;\n};\n\nexport default withWidth;\n"]},"metadata":{},"sourceType":"module"}