{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Link/Link.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from \"../utils/capitalize\";\nimport withStyles from \"../styles/withStyles\";\nimport { elementTypeAcceptingRef } from \"../../../material-ui-utils/src\";\nimport useIsFocusVisible from \"../utils/useIsFocusVisible\";\nimport useForkRef from \"../utils/useForkRef\";\nimport Typography from \"../Typography\";\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    '&$focusVisible': {\n      outline: 'auto'\n    }\n  },\n\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {}\n};\nvar Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'a' : _props$component,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      TypographyClasses = props.TypographyClasses,\n      _props$underline = props.underline,\n      underline = _props$underline === void 0 ? 'hover' : _props$underline,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'inherit' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  var _useIsFocusVisible = useIsFocusVisible(),\n      isFocusVisible = _useIsFocusVisible.isFocusVisible,\n      onBlurVisible = _useIsFocusVisible.onBlurVisible,\n      focusVisibleRef = _useIsFocusVisible.ref;\n\n  var _React$useState = React.useState(false),\n      focusVisible = _React$useState[0],\n      setFocusVisible = _React$useState[1];\n\n  var handlerRef = useForkRef(ref, focusVisibleRef);\n\n  var handleBlur = function handleBlur(event) {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return __jsx(Typography, _extends({\n    className: clsx(classes.root, classes[\"underline\".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    variant: variant\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }));\n});\nLink.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   * Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string\n};\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Link/Link.js"],"names":["React","PropTypes","clsx","capitalize","withStyles","elementTypeAcceptingRef","useIsFocusVisible","useForkRef","Typography","styles","root","underlineNone","textDecoration","underlineHover","underlineAlways","button","position","WebkitTapHighlightColor","backgroundColor","outline","border","margin","borderRadius","padding","cursor","userSelect","verticalAlign","borderStyle","focusVisible","Link","forwardRef","props","ref","classes","className","color","component","onBlur","onFocus","TypographyClasses","underline","variant","other","isFocusVisible","onBlurVisible","focusVisibleRef","useState","setFocusVisible","handlerRef","handleBlur","event","handleFocus","propTypes","children","node","isRequired","object","string","oneOf","func","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {},\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none',\n  },\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline',\n  },\n  // Same reset as ButtonBase.root\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent', // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0, // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0, // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none', // Reset\n    '-webkit-appearance': 'none', // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none', // Remove Firefox dotted outline.\n    },\n    '&$focusVisible': {\n      outline: 'auto',\n    },\n  },\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {},\n};\n\nconst Link = React.forwardRef(function Link(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'primary',\n    component = 'a',\n    onBlur,\n    onFocus,\n    TypographyClasses,\n    underline = 'hover',\n    variant = 'inherit',\n    ...other\n  } = props;\n\n  const { isFocusVisible, onBlurVisible, ref: focusVisibleRef } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const handlerRef = useForkRef(ref, focusVisibleRef);\n  const handleBlur = (event) => {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n  const handleFocus = (event) => {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return (\n    <Typography\n      className={clsx(\n        classes.root,\n        {\n          [classes.button]: component === 'button',\n          [classes.focusVisible]: focusVisible,\n        },\n        classes[`underline${capitalize(underline)}`],\n        className,\n      )}\n      classes={TypographyClasses}\n      color={color}\n      component={component}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      ref={handlerRef}\n      variant={variant}\n      {...other}\n    />\n  );\n});\n\nLink.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf([\n    'initial',\n    'inherit',\n    'primary',\n    'secondary',\n    'textPrimary',\n    'textSecondary',\n    'error',\n  ]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n  /**\n   * Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string,\n};\n\nexport default withStyles(styles, { name: 'MuiLink' })(Link);\n"]},"metadata":{},"sourceType":"module"}