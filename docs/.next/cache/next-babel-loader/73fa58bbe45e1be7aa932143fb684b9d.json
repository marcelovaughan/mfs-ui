{"ast":null,"code":"function makeUnique(hash, unique, i = 1) {\n  const uniqueHash = i === 1 ? hash : `${hash}-${i}`;\n\n  if (!unique[uniqueHash]) {\n    unique[uniqueHash] = true;\n    return uniqueHash;\n  }\n\n  return makeUnique(hash, unique, i + 1);\n}\n/**\n * @param {string} text - HTML from e.g. parseMarkdown#render\n * @param {Record<string, boolean>} [unique] - Ensures that each output is unique in `unique`\n * @returns {string} that is safe to use in fragment links\n */\n\n\nexport default function textToHash(text, unique = {}) {\n  return makeUnique(encodeURI(text.toLowerCase().replace(/<\\/?[^>]+(>|$)/g, '') // remove HTML\n  .replace(/=&gt;|&lt;| \\/&gt;|<code>|<\\/code>|&#39;/g, '').replace(/[!@#$%^&*()=_+[\\]{}`~;:'\"|,.<>/?\\s]+/g, '-').replace(/([\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])\\uFE0F?/g, '') // remove emojis\n  .replace(/-+/g, '-').replace(/^-|-$/g, '')), unique);\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/utils/textToHash.js"],"names":["i","uniqueHash","hash","unique","makeUnique","encodeURI"],"mappings":"AAAA,SAAA,UAAA,CAAA,IAAA,EAAA,MAAA,EAAkCA,CAAC,GAAnC,CAAA,EAAyC;AACvC,QAAMC,UAAU,GAAGD,CAAC,KAADA,CAAAA,GAAAA,IAAAA,GAAkB,GAAEE,IAAK,IAAGF,CAA/C,EAAA;;AAEA,MAAI,CAACG,MAAM,CAAX,UAAW,CAAX,EAAyB;AACvBA,IAAAA,MAAM,CAANA,UAAM,CAANA,GAAAA,IAAAA;AACA,WAAA,UAAA;AACD;;AAED,SAAOC,UAAU,CAAA,IAAA,EAAA,MAAA,EAAeJ,CAAC,GAAjC,CAAiB,CAAjB;AACD;AAED;;;;;;;AAKA,eAAe,SAAA,UAAA,CAAA,IAAA,EAA0BG,MAAM,GAAhC,EAAA,EAAuC;AACpD,SAAOC,UAAU,CACfC,SAAS,CACP,IAAI,CAAJ,WAAA,GAAA,OAAA,CAAA,iBAAA,EAAA,EAAA,EAEkC;AAFlC,GAAA,OAAA,CAAA,2CAAA,EAAA,EAAA,EAAA,OAAA,CAAA,uCAAA,EAAA,GAAA,EAAA,OAAA,CAAA,6GAAA,EAAA,EAAA,EAQI;AARJ,GAAA,OAAA,CAAA,KAAA,EAAA,GAAA,EAAA,OAAA,CAAA,QAAA,EAFa,EAEb,CADO,CADM,EAAjB,MAAiB,CAAjB;AAgBD","sourcesContent":["function makeUnique(hash, unique, i = 1) {\n  const uniqueHash = i === 1 ? hash : `${hash}-${i}`;\n\n  if (!unique[uniqueHash]) {\n    unique[uniqueHash] = true;\n    return uniqueHash;\n  }\n\n  return makeUnique(hash, unique, i + 1);\n}\n\n/**\n * @param {string} text - HTML from e.g. parseMarkdown#render\n * @param {Record<string, boolean>} [unique] - Ensures that each output is unique in `unique`\n * @returns {string} that is safe to use in fragment links\n */\nexport default function textToHash(text, unique = {}) {\n  return makeUnique(\n    encodeURI(\n      text\n        .toLowerCase()\n        .replace(/<\\/?[^>]+(>|$)/g, '') // remove HTML\n        .replace(/=&gt;|&lt;| \\/&gt;|<code>|<\\/code>|&#39;/g, '')\n        .replace(/[!@#$%^&*()=_+[\\]{}`~;:'\"|,.<>/?\\s]+/g, '-')\n        .replace(\n          /([\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])\\uFE0F?/g,\n          '',\n        ) // remove emojis\n        .replace(/-+/g, '-')\n        .replace(/^-|-$/g, ''),\n    ),\n    unique,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}