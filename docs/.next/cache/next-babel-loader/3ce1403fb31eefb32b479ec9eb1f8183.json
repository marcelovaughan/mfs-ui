{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\n\n/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport TextField from \"../../../../../packages/material-ui/src/TextField\";\nimport Dialog from \"../../../../../packages/material-ui/src/Dialog\";\nimport DialogTitle from \"../../../../../packages/material-ui/src/DialogTitle\";\nimport DialogContent from \"../../../../../packages/material-ui/src/DialogContent\";\nimport DialogContentText from \"../../../../../packages/material-ui/src/DialogContentText\";\nimport DialogActions from \"../../../../../packages/material-ui/src/DialogActions\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport Autocomplete, { createFilterOptions } from \"../../../../../packages/material-ui-lab/src/Autocomplete\";\nvar filter = createFilterOptions();\n\nvar _ref = __jsx(DialogTitle, {\n  id: \"form-dialog-title\"\n}, \"Add a new film\");\n\nvar _ref2 = __jsx(DialogContentText, null, \"Did you miss any film in our list? Please, add it!\");\n\nvar _ref3 = __jsx(Button, {\n  type: \"submit\",\n  color: \"primary\"\n}, \"Add\");\n\nexport default function FreeSoloCreateOptionDialog() {\n  var _React$useState = React.useState(null),\n      value = _React$useState[0],\n      setValue = _React$useState[1];\n\n  var _React$useState2 = React.useState(false),\n      open = _React$useState2[0],\n      toggleOpen = _React$useState2[1];\n\n  var handleClose = function handleClose() {\n    setDialogValue({\n      title: '',\n      year: ''\n    });\n    toggleOpen(false);\n  };\n\n  var _React$useState3 = React.useState({\n    title: '',\n    year: ''\n  }),\n      dialogValue = _React$useState3[0],\n      setDialogValue = _React$useState3[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    setValue({\n      title: dialogValue.title,\n      year: _parseInt(dialogValue.year, 10)\n    });\n    handleClose();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Autocomplete, {\n    value: value,\n    onChange: function onChange(event, newValue) {\n      if (typeof newValue === 'string') {\n        // timeout to avoid instant validation of the dialog's form.\n        setTimeout(function () {\n          toggleOpen(true);\n          setDialogValue({\n            title: newValue,\n            year: ''\n          });\n        });\n      } else if (newValue && newValue.inputValue) {\n        toggleOpen(true);\n        setDialogValue({\n          title: newValue.inputValue,\n          year: ''\n        });\n      } else {\n        setValue(newValue);\n      }\n    },\n    filterOptions: function filterOptions(options, params) {\n      var filtered = filter(options, params);\n\n      if (params.inputValue !== '') {\n        filtered.push({\n          inputValue: params.inputValue,\n          title: \"Add \\\"\".concat(params.inputValue, \"\\\"\")\n        });\n      }\n\n      return filtered;\n    },\n    id: \"free-solo-dialog-demo\",\n    options: top100Films,\n    getOptionLabel: function getOptionLabel(option) {\n      // e.g value selected with enter, right from the input\n      if (typeof option === 'string') {\n        return option;\n      }\n\n      if (option.inputValue) {\n        return option.inputValue;\n      }\n\n      return option.title;\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    renderOption: function renderOption(option) {\n      return option.title;\n    },\n    style: {\n      width: 300\n    },\n    freeSolo: true,\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        label: \"Free solo dialog\",\n        variant: \"outlined\"\n      }));\n    }\n  }), __jsx(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, _ref, __jsx(DialogContent, null, _ref2, __jsx(TextField, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"name\",\n    value: dialogValue.title,\n    onChange: function onChange(event) {\n      return setDialogValue(_objectSpread(_objectSpread({}, dialogValue), {}, {\n        title: event.target.value\n      }));\n    },\n    label: \"title\",\n    type: \"text\"\n  }), __jsx(TextField, {\n    margin: \"dense\",\n    id: \"name\",\n    value: dialogValue.year,\n    onChange: function onChange(event) {\n      return setDialogValue(_objectSpread(_objectSpread({}, dialogValue), {}, {\n        year: event.target.value\n      }));\n    },\n    label: \"year\",\n    type: \"number\"\n  })), __jsx(DialogActions, null, __jsx(Button, {\n    onClick: handleClose,\n    color: \"primary\"\n  }, \"Cancel\"), _ref3))));\n}\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nvar top100Films = [{\n  title: 'The Shawshank Redemption',\n  year: 1994\n}, {\n  title: 'The Godfather',\n  year: 1972\n}, {\n  title: 'The Godfather: Part II',\n  year: 1974\n}, {\n  title: 'The Dark Knight',\n  year: 2008\n}, {\n  title: '12 Angry Men',\n  year: 1957\n}, {\n  title: \"Schindler's List\",\n  year: 1993\n}, {\n  title: 'Pulp Fiction',\n  year: 1994\n}, {\n  title: 'The Lord of the Rings: The Return of the King',\n  year: 2003\n}, {\n  title: 'The Good, the Bad and the Ugly',\n  year: 1966\n}, {\n  title: 'Fight Club',\n  year: 1999\n}, {\n  title: 'The Lord of the Rings: The Fellowship of the Ring',\n  year: 2001\n}, {\n  title: 'Star Wars: Episode V - The Empire Strikes Back',\n  year: 1980\n}, {\n  title: 'Forrest Gump',\n  year: 1994\n}, {\n  title: 'Inception',\n  year: 2010\n}, {\n  title: 'The Lord of the Rings: The Two Towers',\n  year: 2002\n}, {\n  title: \"One Flew Over the Cuckoo's Nest\",\n  year: 1975\n}, {\n  title: 'Goodfellas',\n  year: 1990\n}, {\n  title: 'The Matrix',\n  year: 1999\n}, {\n  title: 'Seven Samurai',\n  year: 1954\n}, {\n  title: 'Star Wars: Episode IV - A New Hope',\n  year: 1977\n}, {\n  title: 'City of God',\n  year: 2002\n}, {\n  title: 'Se7en',\n  year: 1995\n}, {\n  title: 'The Silence of the Lambs',\n  year: 1991\n}, {\n  title: \"It's a Wonderful Life\",\n  year: 1946\n}, {\n  title: 'Life Is Beautiful',\n  year: 1997\n}, {\n  title: 'The Usual Suspects',\n  year: 1995\n}, {\n  title: 'Léon: The Professional',\n  year: 1994\n}, {\n  title: 'Spirited Away',\n  year: 2001\n}, {\n  title: 'Saving Private Ryan',\n  year: 1998\n}, {\n  title: 'Once Upon a Time in the West',\n  year: 1968\n}, {\n  title: 'American History X',\n  year: 1998\n}, {\n  title: 'Interstellar',\n  year: 2014\n}, {\n  title: 'Casablanca',\n  year: 1942\n}, {\n  title: 'City Lights',\n  year: 1931\n}, {\n  title: 'Psycho',\n  year: 1960\n}, {\n  title: 'The Green Mile',\n  year: 1999\n}, {\n  title: 'The Intouchables',\n  year: 2011\n}, {\n  title: 'Modern Times',\n  year: 1936\n}, {\n  title: 'Raiders of the Lost Ark',\n  year: 1981\n}, {\n  title: 'Rear Window',\n  year: 1954\n}, {\n  title: 'The Pianist',\n  year: 2002\n}, {\n  title: 'The Departed',\n  year: 2006\n}, {\n  title: 'Terminator 2: Judgment Day',\n  year: 1991\n}, {\n  title: 'Back to the Future',\n  year: 1985\n}, {\n  title: 'Whiplash',\n  year: 2014\n}, {\n  title: 'Gladiator',\n  year: 2000\n}, {\n  title: 'Memento',\n  year: 2000\n}, {\n  title: 'The Prestige',\n  year: 2006\n}, {\n  title: 'The Lion King',\n  year: 1994\n}, {\n  title: 'Apocalypse Now',\n  year: 1979\n}, {\n  title: 'Alien',\n  year: 1979\n}, {\n  title: 'Sunset Boulevard',\n  year: 1950\n}, {\n  title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n  year: 1964\n}, {\n  title: 'The Great Dictator',\n  year: 1940\n}, {\n  title: 'Cinema Paradiso',\n  year: 1988\n}, {\n  title: 'The Lives of Others',\n  year: 2006\n}, {\n  title: 'Grave of the Fireflies',\n  year: 1988\n}, {\n  title: 'Paths of Glory',\n  year: 1957\n}, {\n  title: 'Django Unchained',\n  year: 2012\n}, {\n  title: 'The Shining',\n  year: 1980\n}, {\n  title: 'WALL·E',\n  year: 2008\n}, {\n  title: 'American Beauty',\n  year: 1999\n}, {\n  title: 'The Dark Knight Rises',\n  year: 2012\n}, {\n  title: 'Princess Mononoke',\n  year: 1997\n}, {\n  title: 'Aliens',\n  year: 1986\n}, {\n  title: 'Oldboy',\n  year: 2003\n}, {\n  title: 'Once Upon a Time in America',\n  year: 1984\n}, {\n  title: 'Witness for the Prosecution',\n  year: 1957\n}, {\n  title: 'Das Boot',\n  year: 1981\n}, {\n  title: 'Citizen Kane',\n  year: 1941\n}, {\n  title: 'North by Northwest',\n  year: 1959\n}, {\n  title: 'Vertigo',\n  year: 1958\n}, {\n  title: 'Star Wars: Episode VI - Return of the Jedi',\n  year: 1983\n}, {\n  title: 'Reservoir Dogs',\n  year: 1992\n}, {\n  title: 'Braveheart',\n  year: 1995\n}, {\n  title: 'M',\n  year: 1931\n}, {\n  title: 'Requiem for a Dream',\n  year: 2000\n}, {\n  title: 'Amélie',\n  year: 2001\n}, {\n  title: 'A Clockwork Orange',\n  year: 1971\n}, {\n  title: 'Like Stars on Earth',\n  year: 2007\n}, {\n  title: 'Taxi Driver',\n  year: 1976\n}, {\n  title: 'Lawrence of Arabia',\n  year: 1962\n}, {\n  title: 'Double Indemnity',\n  year: 1944\n}, {\n  title: 'Eternal Sunshine of the Spotless Mind',\n  year: 2004\n}, {\n  title: 'Amadeus',\n  year: 1984\n}, {\n  title: 'To Kill a Mockingbird',\n  year: 1962\n}, {\n  title: 'Toy Story 3',\n  year: 2010\n}, {\n  title: 'Logan',\n  year: 2017\n}, {\n  title: 'Full Metal Jacket',\n  year: 1987\n}, {\n  title: 'Dangal',\n  year: 2016\n}, {\n  title: 'The Sting',\n  year: 1973\n}, {\n  title: '2001: A Space Odyssey',\n  year: 1968\n}, {\n  title: \"Singin' in the Rain\",\n  year: 1952\n}, {\n  title: 'Toy Story',\n  year: 1995\n}, {\n  title: 'Bicycle Thieves',\n  year: 1948\n}, {\n  title: 'The Kid',\n  year: 1921\n}, {\n  title: 'Inglourious Basterds',\n  year: 2009\n}, {\n  title: 'Snatch',\n  year: 2000\n}, {\n  title: '3 Idiots',\n  year: 2009\n}, {\n  title: 'Monty Python and the Holy Grail',\n  year: 1975\n}];","map":null,"metadata":{},"sourceType":"module"}