{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport ButtonBase from \"../ButtonBase\";\nimport capitalize from \"../utils/capitalize\";\nimport unsupportedProp from \"../utils/unsupportedProp\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: _objectSpread(_objectSpread({}, theme.typography.button), {}, {\n    maxWidth: 264,\n    minWidth: 72,\n    position: 'relative',\n    boxSizing: 'border-box',\n    minHeight: 48,\n    flexShrink: 0,\n    padding: '6px 12px',\n    [theme.breakpoints.up('sm')]: {\n      padding: '6px 24px'\n    },\n    overflow: 'hidden',\n    whiteSpace: 'normal',\n    textAlign: 'center',\n    [theme.breakpoints.up('sm')]: {\n      minWidth: 160\n    }\n  }),\n\n  /* Styles applied to the root element if both `icon` and `label` are provided. */\n  labelIcon: {\n    minHeight: 72,\n    paddingTop: 9,\n    '& $wrapper > *:first-child': {\n      marginBottom: 6\n    }\n  },\n\n  /* Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"inherit\"`. */\n  textColorInherit: {\n    color: 'inherit',\n    opacity: 0.7,\n    '&$selected': {\n      opacity: 1\n    },\n    '&$disabled': {\n      opacity: 0.5\n    }\n  },\n\n  /* Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"primary\"`. */\n  textColorPrimary: {\n    color: theme.palette.text.secondary,\n    '&$selected': {\n      color: theme.palette.primary.main\n    },\n    '&$disabled': {\n      color: theme.palette.text.disabled\n    }\n  },\n\n  /* Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"secondary\"`. */\n  textColorSecondary: {\n    color: theme.palette.text.secondary,\n    '&$selected': {\n      color: theme.palette.secondary.main\n    },\n    '&$disabled': {\n      color: theme.palette.text.disabled\n    }\n  },\n\n  /* Pseudo-class applied to the root element if `selected={true}` (controlled by the Tabs component). */\n  selected: {},\n\n  /* Pseudo-class applied to the root element if `disabled={true}` (controlled by the Tabs component). */\n  disabled: {},\n\n  /* Styles applied to the root element if `fullWidth={true}` (controlled by the Tabs component). */\n  fullWidth: {\n    flexShrink: 1,\n    flexGrow: 1,\n    flexBasis: 0,\n    maxWidth: 'none'\n  },\n\n  /* Styles applied to the root element if `wrapped={true}`. */\n  wrapped: {\n    fontSize: theme.typography.pxToRem(12),\n    lineHeight: 1.5\n  },\n\n  /* Styles applied to the `icon` and `label`'s wrapper element. */\n  wrapper: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    flexDirection: 'column'\n  }\n});\nconst Tab = /*#__PURE__*/React.forwardRef(function Tab(props, ref) {\n  const {\n    classes,\n    className,\n    disabled = false,\n    disableFocusRipple = false,\n    fullWidth,\n    icon,\n    indicator,\n    label,\n    onChange,\n    onClick,\n    onFocus,\n    selected,\n    selectionFollowsFocus,\n    textColor = 'inherit',\n    value,\n    wrapped = false\n  } = props,\n        other = _objectWithoutProperties(props, [\"classes\", \"className\", \"disabled\", \"disableFocusRipple\", \"fullWidth\", \"icon\", \"indicator\", \"label\", \"onChange\", \"onClick\", \"onFocus\", \"selected\", \"selectionFollowsFocus\", \"textColor\", \"value\", \"wrapped\"]);\n\n  const handleClick = event => {\n    if (onChange) {\n      onChange(event, value);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  const handleFocus = event => {\n    if (selectionFollowsFocus && !selected && onChange) {\n      onChange(event, value);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return __jsx(ButtonBase, _extends({\n    focusRipple: !disableFocusRipple,\n    className: clsx(classes.root, classes[`textColor${capitalize(textColor)}`], className, disabled && classes.disabled, selected && classes.selected, label && icon && classes.labelIcon, fullWidth && classes.fullWidth, wrapped && classes.wrapped),\n    ref: ref,\n    role: \"tab\",\n    \"aria-selected\": selected,\n    disabled: disabled,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    tabIndex: selected ? 0 : -1\n  }, other), __jsx(\"span\", {\n    className: classes.wrapper\n  }, icon, label), indicator);\n});\nexport default withStyles(styles, {\n  name: 'MuiTab'\n})(Tab);","map":null,"metadata":{},"sourceType":"module"}