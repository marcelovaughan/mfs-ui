{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"../../../material-ui-utils/src\";\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from \"./cssUtils\";\nexport default function responsiveFontSizes(themeInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$breakpoints = options.breakpoints,\n      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\n      _options$disableAlign = options.disableAlign,\n      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\n      _options$factor = options.factor,\n      factor = _options$factor === void 0 ? 2 : _options$factor,\n      _options$variants = options.variants,\n      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\n\n  var theme = _objectSpread({}, themeInput);\n\n  theme.typography = _objectSpread({}, theme.typography);\n  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  var convert = convertLength(typography.htmlFontSize);\n  var breakpointValues = breakpoints.map(function (x) {\n    return theme.breakpoints.values[x];\n  });\n  variants.forEach(function (variant) {\n    var style = typography[variant];\n\n    var remFontSize = _parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    var maxFontSize = remFontSize;\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\n    var lineHeight = style.lineHeight;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(true ? \"Material-UI: Unsupported non-unitless line height with grid alignment.\\nUse unitless line heights instead.\" : _formatMuiErrorMessage(6));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = _parseFloat(convert(lineHeight, 'rem')) / _parseFloat(remFontSize);\n    }\n\n    var transform = null;\n\n    if (!disableAlign) {\n      transform = function transform(value) {\n        return alignProperty({\n          size: value,\n          grid: fontGrid({\n            pixels: 4,\n            lineHeight: lineHeight,\n            htmlFontSize: typography.htmlFontSize\n          })\n        });\n      };\n    }\n\n    typography[variant] = _objectSpread(_objectSpread({}, style), responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform: transform\n    }));\n  });\n  return theme;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/styles/responsiveFontSizes.js"],"names":["isUnitless","convertLength","responsiveProperty","alignProperty","fontGrid","responsiveFontSizes","themeInput","options","breakpoints","disableAlign","factor","variants","theme","typography","convert","htmlFontSize","breakpointValues","map","x","values","forEach","variant","style","remFontSize","fontSize","maxFontSize","minFontSize","lineHeight","transform","value","size","grid","pixels","cssProperty","min","max","unit"],"mappings":"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","sourcesContent":["import MuiError from '@material-ui/utils/macros/MuiError.macro';\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from './cssUtils';\n\nexport default function responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = ['sm', 'md', 'lg'],\n    disableAlign = false,\n    factor = 2,\n    variants = [\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'h5',\n      'h6',\n      'subtitle1',\n      'subtitle2',\n      'body1',\n      'body2',\n      'caption',\n      'button',\n      'overline',\n    ],\n  } = options;\n\n  const theme = { ...themeInput };\n  theme.typography = { ...theme.typography };\n  const typography = theme.typography;\n\n  // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n  const convert = convertLength(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map((x) => theme.breakpoints.values[x]);\n\n  variants.forEach((variant) => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n\n    let { lineHeight } = style;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new MuiError(\n        'Material-UI: Unsupported non-unitless line height with grid alignment.\\n' +\n          'Use unitless line heights instead.',\n      );\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    let transform = null;\n\n    if (!disableAlign) {\n      transform = (value) =>\n        alignProperty({\n          size: value,\n          grid: fontGrid({ pixels: 4, lineHeight, htmlFontSize: typography.htmlFontSize }),\n        });\n    }\n\n    typography[variant] = {\n      ...style,\n      ...responsiveProperty({\n        cssProperty: 'fontSize',\n        min: minFontSize,\n        max: maxFontSize,\n        unit: 'rem',\n        breakpoints: breakpointValues,\n        transform,\n      }),\n    };\n  });\n\n  return theme;\n}\n"]},"metadata":{},"sourceType":"module"}