{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Badge/Badge.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport capitalize from \"../utils/capitalize\";\nvar RADIUS_STANDARD = 10;\nvar RADIUS_DOT = 4;\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'inline-flex',\n      // For correct alignment with the text.\n      verticalAlign: 'middle',\n      flexShrink: 0\n    },\n\n    /* Styles applied to the badge `span` element. */\n    badge: {\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      alignContent: 'center',\n      alignItems: 'center',\n      position: 'absolute',\n      boxSizing: 'border-box',\n      fontFamily: theme.typography.fontFamily,\n      fontWeight: theme.typography.fontWeightMedium,\n      fontSize: theme.typography.pxToRem(12),\n      minWidth: RADIUS_STANDARD * 2,\n      lineHeight: 1,\n      padding: '0 6px',\n      height: RADIUS_STANDARD * 2,\n      borderRadius: RADIUS_STANDARD,\n      zIndex: 1,\n      // Render the badge on top of potential ripples.\n      transition: theme.transitions.create('transform', {\n        easing: theme.transitions.easing.easeInOut,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.primary.contrastText\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      backgroundColor: theme.palette.error.main,\n      color: theme.palette.error.contrastText\n    },\n\n    /* Styles applied to the root element if `variant=\"dot\"`. */\n    dot: {\n      borderRadius: RADIUS_DOT,\n      height: RADIUS_DOT * 2,\n      minWidth: RADIUS_DOT * 2,\n      padding: 0\n    },\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=\"rectangle\"`. */\n    anchorOriginTopRightRectangle: {\n      top: 0,\n      right: 0,\n      transform: 'scale(1) translate(50%, -50%)',\n      transformOrigin: '100% 0%',\n      '&$invisible': {\n        transform: 'scale(0) translate(50%, -50%)'\n      }\n    },\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"rectangle\"`. */\n    anchorOriginBottomRightRectangle: {\n      bottom: 0,\n      right: 0,\n      transform: 'scale(1) translate(50%, 50%)',\n      transformOrigin: '100% 100%',\n      '&$invisible': {\n        transform: 'scale(0) translate(50%, 50%)'\n      }\n    },\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=\"rectangle\"`. */\n    anchorOriginTopLeftRectangle: {\n      top: 0,\n      left: 0,\n      transform: 'scale(1) translate(-50%, -50%)',\n      transformOrigin: '0% 0%',\n      '&$invisible': {\n        transform: 'scale(0) translate(-50%, -50%)'\n      }\n    },\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"rectangle\"`. */\n    anchorOriginBottomLeftRectangle: {\n      bottom: 0,\n      left: 0,\n      transform: 'scale(1) translate(-50%, 50%)',\n      transformOrigin: '0% 100%',\n      '&$invisible': {\n        transform: 'scale(0) translate(-50%, 50%)'\n      }\n    },\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=\"circle\"`. */\n    anchorOriginTopRightCircle: {\n      top: '14%',\n      right: '14%',\n      transform: 'scale(1) translate(50%, -50%)',\n      transformOrigin: '100% 0%',\n      '&$invisible': {\n        transform: 'scale(0) translate(50%, -50%)'\n      }\n    },\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"circle\"`. */\n    anchorOriginBottomRightCircle: {\n      bottom: '14%',\n      right: '14%',\n      transform: 'scale(1) translate(50%, 50%)',\n      transformOrigin: '100% 100%',\n      '&$invisible': {\n        transform: 'scale(0) translate(50%, 50%)'\n      }\n    },\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=\"circle\"`. */\n    anchorOriginTopLeftCircle: {\n      top: '14%',\n      left: '14%',\n      transform: 'scale(1) translate(-50%, -50%)',\n      transformOrigin: '0% 0%',\n      '&$invisible': {\n        transform: 'scale(0) translate(-50%, -50%)'\n      }\n    },\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"circle\"`. */\n    anchorOriginBottomLeftCircle: {\n      bottom: '14%',\n      left: '14%',\n      transform: 'scale(1) translate(-50%, 50%)',\n      transformOrigin: '0% 100%',\n      '&$invisible': {\n        transform: 'scale(0) translate(-50%, 50%)'\n      }\n    },\n\n    /* Pseudo-class to the badge `span` element if `invisible={true}`. */\n    invisible: {\n      transition: theme.transitions.create('transform', {\n        easing: theme.transitions.easing.easeInOut,\n        duration: theme.transitions.duration.leavingScreen\n      })\n    }\n  };\n};\nvar Badge = /*#__PURE__*/React.forwardRef(function Badge(props, ref) {\n  var _props$anchorOrigin = props.anchorOrigin,\n      anchorOrigin = _props$anchorOrigin === void 0 ? {\n    vertical: 'top',\n    horizontal: 'right'\n  } : _props$anchorOrigin,\n      badgeContent = props.badgeContent,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      ComponentProp = _props$component === void 0 ? 'span' : _props$component,\n      invisibleProp = props.invisible,\n      _props$max = props.max,\n      max = _props$max === void 0 ? 99 : _props$max,\n      _props$overlap = props.overlap,\n      overlap = _props$overlap === void 0 ? 'rectangle' : _props$overlap,\n      _props$showZero = props.showZero,\n      showZero = _props$showZero === void 0 ? false : _props$showZero,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"anchorOrigin\", \"badgeContent\", \"children\", \"classes\", \"className\", \"color\", \"component\", \"invisible\", \"max\", \"overlap\", \"showZero\", \"variant\"]);\n\n  var invisible = invisibleProp;\n\n  if (invisibleProp == null && (badgeContent === 0 && !showZero || badgeContent == null && variant !== 'dot')) {\n    invisible = true;\n  }\n\n  var displayValue = '';\n\n  if (variant !== 'dot') {\n    displayValue = badgeContent > max ? \"\".concat(max, \"+\") : badgeContent;\n  }\n\n  return __jsx(ComponentProp, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }), children, __jsx(\"span\", {\n    className: clsx(classes.badge, classes[\"\".concat(anchorOrigin.horizontal).concat(capitalize(anchorOrigin.vertical), \"}\")], classes[\"anchorOrigin\".concat(capitalize(anchorOrigin.vertical)).concat(capitalize(anchorOrigin.horizontal)).concat(capitalize(overlap))], color !== 'default' && classes[\"color\".concat(capitalize(color))], invisible && classes.invisible, variant === 'dot' && classes.dot),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, displayValue));\n});\nBadge.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The anchor of the badge.\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'error', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the badge will be invisible.\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   */\n  max: PropTypes.number,\n\n  /**\n   * Wrapped shape the badge should overlap.\n   */\n  overlap: PropTypes.oneOf(['circle', 'rectangle']),\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['dot', 'standard'])\n};\nexport default withStyles(styles, {\n  name: 'MuiBadge'\n})(Badge);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Badge/Badge.js"],"names":["React","PropTypes","clsx","withStyles","capitalize","RADIUS_STANDARD","RADIUS_DOT","styles","theme","root","position","display","verticalAlign","flexShrink","badge","flexDirection","flexWrap","justifyContent","alignContent","alignItems","boxSizing","fontFamily","typography","fontWeight","fontWeightMedium","fontSize","pxToRem","minWidth","lineHeight","padding","height","borderRadius","zIndex","transition","transitions","create","easing","easeInOut","duration","enteringScreen","colorPrimary","backgroundColor","palette","primary","main","color","contrastText","colorSecondary","secondary","colorError","error","dot","anchorOriginTopRightRectangle","top","right","transform","transformOrigin","anchorOriginBottomRightRectangle","bottom","anchorOriginTopLeftRectangle","left","anchorOriginBottomLeftRectangle","anchorOriginTopRightCircle","anchorOriginBottomRightCircle","anchorOriginTopLeftCircle","anchorOriginBottomLeftCircle","invisible","leavingScreen","Badge","forwardRef","props","ref","anchorOrigin","vertical","horizontal","badgeContent","children","classes","className","component","ComponentProp","invisibleProp","max","overlap","showZero","variant","other","displayValue","propTypes","shape","oneOf","isRequired","node","object","string","elementType","bool","number","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\n\nconst RADIUS_STANDARD = 10;\nconst RADIUS_DOT = 4;\n\nexport const styles = (theme) => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'relative',\n    display: 'inline-flex',\n    // For correct alignment with the text.\n    verticalAlign: 'middle',\n    flexShrink: 0,\n  },\n  /* Styles applied to the badge `span` element. */\n  badge: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignContent: 'center',\n    alignItems: 'center',\n    position: 'absolute',\n    boxSizing: 'border-box',\n    fontFamily: theme.typography.fontFamily,\n    fontWeight: theme.typography.fontWeightMedium,\n    fontSize: theme.typography.pxToRem(12),\n    minWidth: RADIUS_STANDARD * 2,\n    lineHeight: 1,\n    padding: '0 6px',\n    height: RADIUS_STANDARD * 2,\n    borderRadius: RADIUS_STANDARD,\n    zIndex: 1, // Render the badge on top of potential ripples.\n    transition: theme.transitions.create('transform', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    backgroundColor: theme.palette.secondary.main,\n    color: theme.palette.secondary.contrastText,\n  },\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n  },\n  /* Styles applied to the root element if `variant=\"dot\"`. */\n  dot: {\n    borderRadius: RADIUS_DOT,\n    height: RADIUS_DOT * 2,\n    minWidth: RADIUS_DOT * 2,\n    padding: 0,\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=\"rectangle\"`. */\n  anchorOriginTopRightRectangle: {\n    top: 0,\n    right: 0,\n    transform: 'scale(1) translate(50%, -50%)',\n    transformOrigin: '100% 0%',\n    '&$invisible': {\n      transform: 'scale(0) translate(50%, -50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"rectangle\"`. */\n  anchorOriginBottomRightRectangle: {\n    bottom: 0,\n    right: 0,\n    transform: 'scale(1) translate(50%, 50%)',\n    transformOrigin: '100% 100%',\n    '&$invisible': {\n      transform: 'scale(0) translate(50%, 50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=\"rectangle\"`. */\n  anchorOriginTopLeftRectangle: {\n    top: 0,\n    left: 0,\n    transform: 'scale(1) translate(-50%, -50%)',\n    transformOrigin: '0% 0%',\n    '&$invisible': {\n      transform: 'scale(0) translate(-50%, -50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"rectangle\"`. */\n  anchorOriginBottomLeftRectangle: {\n    bottom: 0,\n    left: 0,\n    transform: 'scale(1) translate(-50%, 50%)',\n    transformOrigin: '0% 100%',\n    '&$invisible': {\n      transform: 'scale(0) translate(-50%, 50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=\"circle\"`. */\n  anchorOriginTopRightCircle: {\n    top: '14%',\n    right: '14%',\n    transform: 'scale(1) translate(50%, -50%)',\n    transformOrigin: '100% 0%',\n    '&$invisible': {\n      transform: 'scale(0) translate(50%, -50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"circle\"`. */\n  anchorOriginBottomRightCircle: {\n    bottom: '14%',\n    right: '14%',\n    transform: 'scale(1) translate(50%, 50%)',\n    transformOrigin: '100% 100%',\n    '&$invisible': {\n      transform: 'scale(0) translate(50%, 50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=\"circle\"`. */\n  anchorOriginTopLeftCircle: {\n    top: '14%',\n    left: '14%',\n    transform: 'scale(1) translate(-50%, -50%)',\n    transformOrigin: '0% 0%',\n    '&$invisible': {\n      transform: 'scale(0) translate(-50%, -50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"circle\"`. */\n  anchorOriginBottomLeftCircle: {\n    bottom: '14%',\n    left: '14%',\n    transform: 'scale(1) translate(-50%, 50%)',\n    transformOrigin: '0% 100%',\n    '&$invisible': {\n      transform: 'scale(0) translate(-50%, 50%)',\n    },\n  },\n  /* Pseudo-class to the badge `span` element if `invisible={true}`. */\n  invisible: {\n    transition: theme.transitions.create('transform', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n});\n\nconst Badge = React.forwardRef(function Badge(props, ref) {\n  const {\n    anchorOrigin = {\n      vertical: 'top',\n      horizontal: 'right',\n    },\n    badgeContent,\n    children,\n    classes,\n    className,\n    color = 'default',\n    component: ComponentProp = 'span',\n    invisible: invisibleProp,\n    max = 99,\n    overlap = 'rectangle',\n    showZero = false,\n    variant = 'standard',\n    ...other\n  } = props;\n\n  let invisible = invisibleProp;\n\n  if (\n    invisibleProp == null &&\n    ((badgeContent === 0 && !showZero) || (badgeContent == null && variant !== 'dot'))\n  ) {\n    invisible = true;\n  }\n\n  let displayValue = '';\n\n  if (variant !== 'dot') {\n    displayValue = badgeContent > max ? `${max}+` : badgeContent;\n  }\n\n  return (\n    <ComponentProp className={clsx(classes.root, className)} ref={ref} {...other}>\n      {children}\n      <span\n        className={clsx(\n          classes.badge,\n          classes[`${anchorOrigin.horizontal}${capitalize(anchorOrigin.vertical)}}`],\n          classes[\n            `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(\n              anchorOrigin.horizontal,\n            )}${capitalize(overlap)}`\n          ],\n          {\n            [classes[`color${capitalize(color)}`]]: color !== 'default',\n            [classes.invisible]: invisible,\n            [classes.dot]: variant === 'dot',\n          },\n        )}\n      >\n        {displayValue}\n      </span>\n    </ComponentProp>\n  );\n});\n\nBadge.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The anchor of the badge.\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired,\n  }),\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'error', 'primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes /* @typescript-to-proptypes-ignore */.elementType,\n  /**\n   * If `true`, the badge will be invisible.\n   */\n  invisible: PropTypes.bool,\n  /**\n   * Max count to show.\n   */\n  max: PropTypes.number,\n  /**\n   * Wrapped shape the badge should overlap.\n   */\n  overlap: PropTypes.oneOf(['circle', 'rectangle']),\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   */\n  showZero: PropTypes.bool,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['dot', 'standard']),\n};\n\nexport default withStyles(styles, { name: 'MuiBadge' })(Badge);\n"]},"metadata":{},"sourceType":"module"}