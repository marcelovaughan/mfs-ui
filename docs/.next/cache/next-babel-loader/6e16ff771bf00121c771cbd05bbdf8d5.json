{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/ButtonBase/Ripple.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useEventCallback from \"../utils/useEventCallback\";\nconst useEnhancedEffect = true ? React.useEffect : React.useLayoutEffect;\n/**\n * @ignore - internal component.\n */\n\nfunction Ripple(props) {\n  const {\n    classes,\n    pulsate = false,\n    rippleX,\n    rippleY,\n    rippleSize,\n    in: inProp,\n    onExited = () => {},\n    timeout\n  } = props;\n  const [leaving, setLeaving] = React.useState(false);\n  const rippleClassName = clsx(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);\n  const rippleStyles = {\n    width: rippleSize,\n    height: rippleSize,\n    top: -(rippleSize / 2) + rippleY,\n    left: -(rippleSize / 2) + rippleX\n  };\n  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);\n  const handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority\n\n  useEnhancedEffect(() => {\n    if (!inProp) {\n      // react-transition-group#onExit\n      setLeaving(true); // react-transition-group#onExited\n\n      const timeoutId = setTimeout(handleExited, timeout);\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n\n    return undefined;\n  }, [handleExited, inProp, timeout]);\n  return __jsx(\"span\", {\n    className: rippleClassName,\n    style: rippleStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    className: childClassName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n}\n\nRipple.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\n   */\n  pulsate: PropTypes.bool,\n\n  /**\n   * Diameter of the ripple.\n   */\n  rippleSize: PropTypes.number,\n\n  /**\n   * Horizontal position of the ripple center.\n   */\n  rippleX: PropTypes.number,\n\n  /**\n   * Vertical position of the ripple center.\n   */\n  rippleY: PropTypes.number,\n\n  /**\n   * exit delay\n   */\n  timeout: PropTypes.number.isRequired\n};\nexport default Ripple;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/ButtonBase/Ripple.js"],"names":["React","PropTypes","clsx","useEventCallback","useEnhancedEffect","useEffect","useLayoutEffect","Ripple","props","classes","pulsate","rippleX","rippleY","rippleSize","in","inProp","onExited","timeout","leaving","setLeaving","useState","rippleClassName","ripple","rippleVisible","ripplePulsate","rippleStyles","width","height","top","left","childClassName","child","childLeaving","childPulsate","handleExited","timeoutId","setTimeout","clearTimeout","undefined","propTypes","object","isRequired","bool","func","number"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,gBAAP;AAEA,MAAMC,iBAAiB,GAAG,OAAgCJ,KAAK,CAACK,SAAtC,GAAkDL,KAAK,CAACM,eAAlF;AAEA;;;;AAGA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,OAAO,GAAG,KAFN;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,EAAE,EAAEC,MANA;AAOJC,IAAAA,QAAQ,GAAG,MAAM,CAAE,CAPf;AAQJC,IAAAA;AARI,MASFT,KATJ;AAUA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBnB,KAAK,CAACoB,QAAN,CAAe,KAAf,CAA9B;AAEA,QAAMC,eAAe,GAAGnB,IAAI,CAACO,OAAO,CAACa,MAAT,EAAiBb,OAAO,CAACc,aAAzB,EACDb,OADC,IACzBD,OAAO,CAACe,aADiB,CAA5B;AAIA,QAAMC,YAAY,GAAG;AACnBC,IAAAA,KAAK,EAAEb,UADY;AAEnBc,IAAAA,MAAM,EAAEd,UAFW;AAGnBe,IAAAA,GAAG,EAAE,EAAEf,UAAU,GAAG,CAAf,IAAoBD,OAHN;AAInBiB,IAAAA,IAAI,EAAE,EAAEhB,UAAU,GAAG,CAAf,IAAoBF;AAJP,GAArB;AAOA,QAAMmB,cAAc,GAAG5B,IAAI,CAACO,OAAO,CAACsB,KAAT,EACDb,OADC,IACxBT,OAAO,CAACuB,YADgB,EAEDtB,OAFC,IAExBD,OAAO,CAACwB,YAFgB,CAA3B;AAKA,QAAMC,YAAY,GAAG/B,gBAAgB,CAACa,QAAD,CAArC,CA7BqB,CA8BrB;;AACAZ,EAAAA,iBAAiB,CAAC,MAAM;AACtB,QAAI,CAACW,MAAL,EAAa;AACX;AACAI,MAAAA,UAAU,CAAC,IAAD,CAAV,CAFW,CAIX;;AACA,YAAMgB,SAAS,GAAGC,UAAU,CAACF,YAAD,EAAejB,OAAf,CAA5B;AACA,aAAO,MAAM;AACXoB,QAAAA,YAAY,CAACF,SAAD,CAAZ;AACD,OAFD;AAGD;;AACD,WAAOG,SAAP;AACD,GAZgB,EAYd,CAACJ,YAAD,EAAenB,MAAf,EAAuBE,OAAvB,CAZc,CAAjB;AAcA,SACE;AAAM,IAAA,SAAS,EAAEI,eAAjB;AAAkC,IAAA,KAAK,EAAEI,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAEK,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAEDvB,MAAM,CAACgC,SAAP,GAAmB;AACjB;;;;AAIA9B,EAAAA,OAAO,EAAER,SAAS,CAACuC,MAAV,CAAiBC,UALT;;AAMjB;;;AAGA3B,EAAAA,EAAE,EAAEb,SAAS,CAACyC,IATG;;AAUjB;;;AAGA1B,EAAAA,QAAQ,EAAEf,SAAS,CAAC0C,IAbH;;AAcjB;;;AAGAjC,EAAAA,OAAO,EAAET,SAAS,CAACyC,IAjBF;;AAkBjB;;;AAGA7B,EAAAA,UAAU,EAAEZ,SAAS,CAAC2C,MArBL;;AAsBjB;;;AAGAjC,EAAAA,OAAO,EAAEV,SAAS,CAAC2C,MAzBF;;AA0BjB;;;AAGAhC,EAAAA,OAAO,EAAEX,SAAS,CAAC2C,MA7BF;;AA8BjB;;;AAGA3B,EAAAA,OAAO,EAAEhB,SAAS,CAAC2C,MAAV,CAAiBH;AAjCT,CAAnB;AAoCA,eAAelC,MAAf","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useEventCallback from '../utils/useEventCallback';\n\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n\n/**\n * @ignore - internal component.\n */\nfunction Ripple(props) {\n  const {\n    classes,\n    pulsate = false,\n    rippleX,\n    rippleY,\n    rippleSize,\n    in: inProp,\n    onExited = () => {},\n    timeout,\n  } = props;\n  const [leaving, setLeaving] = React.useState(false);\n\n  const rippleClassName = clsx(classes.ripple, classes.rippleVisible, {\n    [classes.ripplePulsate]: pulsate,\n  });\n\n  const rippleStyles = {\n    width: rippleSize,\n    height: rippleSize,\n    top: -(rippleSize / 2) + rippleY,\n    left: -(rippleSize / 2) + rippleX,\n  };\n\n  const childClassName = clsx(classes.child, {\n    [classes.childLeaving]: leaving,\n    [classes.childPulsate]: pulsate,\n  });\n\n  const handleExited = useEventCallback(onExited);\n  // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority\n  useEnhancedEffect(() => {\n    if (!inProp) {\n      // react-transition-group#onExit\n      setLeaving(true);\n\n      // react-transition-group#onExited\n      const timeoutId = setTimeout(handleExited, timeout);\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n    return undefined;\n  }, [handleExited, inProp, timeout]);\n\n  return (\n    <span className={rippleClassName} style={rippleStyles}>\n      <span className={childClassName} />\n    </span>\n  );\n}\n\nRipple.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  in: PropTypes.bool,\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  onExited: PropTypes.func,\n  /**\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\n   */\n  pulsate: PropTypes.bool,\n  /**\n   * Diameter of the ripple.\n   */\n  rippleSize: PropTypes.number,\n  /**\n   * Horizontal position of the ripple center.\n   */\n  rippleX: PropTypes.number,\n  /**\n   * Vertical position of the ripple center.\n   */\n  rippleY: PropTypes.number,\n  /**\n   * exit delay\n   */\n  timeout: PropTypes.number.isRequired,\n};\n\nexport default Ripple;\n"]},"metadata":{},"sourceType":"module"}