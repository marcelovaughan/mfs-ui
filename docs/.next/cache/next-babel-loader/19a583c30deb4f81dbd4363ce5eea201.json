{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"../../../material-ui-utils/src\";\n\n/* eslint-disable no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (true) {\n    if (value < min || value > max) {\n      console.error(\"Material-UI: The value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length >= 6 ? 2 : 1, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb\".concat(colors.length === 4 ? 'a' : '', \"(\").concat(colors.map(function (n, index) {\n    return index < 3 ? _parseInt(n, 16) : Math.round(_parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(_int) {\n  var hex = _int.toString(16);\n\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error(true ? \"Material-UI: Unsupported `\".concat(color, \"` color.\\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().\") : _formatMuiErrorMessage(3, color));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return _parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? _parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\nexport function getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(function (val) {\n    val /= 255; // normalized\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/styles/colorManipulator.js"],"names":["clamp","value","min","max","console","error","Math","hexToRgb","color","substr","re","RegExp","length","colors","match","map","n","index","round","join","intToHex","int","hex","toString","rgbToHex","indexOf","decomposeColor","values","hslToRgb","h","s","l","a","f","k","type","rgb","push","recomposeColor","charAt","marker","substring","split","i","getContrastRatio","foreground","background","lumA","getLuminance","lumB","val","Number","toFixed","emphasize","coefficient","darken","lighten","fade"],"mappings":"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","sourcesContent":["import MuiError from '@material-ui/utils/macros/MuiError.macro';\n/* eslint-disable no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`Material-UI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nexport function hexToRgb(color) {\n  color = color.substr(1);\n\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map((n) => n + n);\n  }\n\n  return colors\n    ? `rgb${colors.length === 4 ? 'a' : ''}(${colors\n        .map((n, index) => {\n          return index < 3 ? parseInt(n, 16) : Math.round((parseInt(n, 16) / 255) * 1000) / 1000;\n        })\n        .join(', ')})`\n    : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const { values } = decomposeColor(color);\n  return `#${values.map((n) => intToHex(n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const { values } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({ type, values: rgb });\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new MuiError(\n      'Material-UI: Unsupported `%s` color.\\n' +\n        'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().',\n      color,\n    );\n  }\n\n  let values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map((value) => parseFloat(value));\n\n  return { type, values };\n}\n\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexport function recomposeColor(color) {\n  const { type } = color;\n  let { values } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => (i < 3 ? parseInt(n, 10) : n));\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  return `${type}(${values.join(', ')})`;\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map((val) => {\n    val /= 255; // normalized\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  color.values[3] = value;\n\n  return recomposeColor(color);\n}\n\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\n\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n"]},"metadata":{},"sourceType":"module"}