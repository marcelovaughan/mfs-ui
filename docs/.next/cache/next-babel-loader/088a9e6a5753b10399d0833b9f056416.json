{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles, createStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport Stepper from \"../../../../../packages/material-ui/src/Stepper\";\nimport Step from \"../../../../../packages/material-ui/src/Step\";\nimport StepButton from \"../../../../../packages/material-ui/src/StepButton\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport Typography from \"../../../../../packages/material-ui/src/Typography\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      width: '100%'\n    },\n    button: {\n      marginRight: theme.spacing(1)\n    },\n    completed: {\n      display: 'inline-block'\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    }\n  });\n});\n\nfunction getSteps() {\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Step 1: Select campaign settings...';\n\n    case 1:\n      return 'Step 2: What is an ad group anyways?';\n\n    case 2:\n      return 'Step 3: This is the bit I really care about!';\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport default function HorizontalNonLinearStepper() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(0),\n      activeStep = _React$useState[0],\n      setActiveStep = _React$useState[1];\n\n  var _React$useState2 = React.useState({}),\n      completed = _React$useState2[0],\n      setCompleted = _React$useState2[1];\n\n  var steps = getSteps();\n\n  var totalSteps = function totalSteps() {\n    return steps.length;\n  };\n\n  var completedSteps = function completedSteps() {\n    return _Object$keys(completed).length;\n  };\n\n  var isLastStep = function isLastStep() {\n    return activeStep === totalSteps() - 1;\n  };\n\n  var allStepsCompleted = function allStepsCompleted() {\n    return completedSteps() === totalSteps();\n  };\n\n  var handleNext = function handleNext() {\n    var newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n    // find the first step that has been completed\n    steps.findIndex(function (step, i) {\n      return !(i in completed);\n    }) : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  var handleBack = function handleBack() {\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep - 1;\n    });\n  };\n\n  var handleStep = function handleStep(step) {\n    return function () {\n      setActiveStep(step);\n    };\n  };\n\n  var handleComplete = function handleComplete() {\n    var newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  };\n\n  var handleReset = function handleReset() {\n    setActiveStep(0);\n    setCompleted({});\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Stepper, {\n    nonLinear: true,\n    activeStep: activeStep\n  }, steps.map(function (label, index) {\n    return __jsx(Step, {\n      key: label\n    }, __jsx(StepButton, {\n      onClick: handleStep(index),\n      completed: completed[index]\n    }, label));\n  })), __jsx(\"div\", null, allStepsCompleted() ? __jsx(\"div\", null, __jsx(Typography, {\n    className: classes.instructions\n  }, \"All steps completed - you're finished\"), __jsx(Button, {\n    onClick: handleReset\n  }, \"Reset\")) : __jsx(\"div\", null, __jsx(Typography, {\n    className: classes.instructions\n  }, getStepContent(activeStep)), __jsx(\"div\", null, __jsx(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.button\n  }, \"Back\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext,\n    className: classes.button\n  }, \"Next\"), activeStep !== steps.length && (completed[activeStep] ? __jsx(Typography, {\n    variant: \"caption\",\n    className: classes.completed\n  }, \"Step \", activeStep + 1, \" already completed\") : __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleComplete\n  }, completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'))))));\n}","map":null,"metadata":{},"sourceType":"module"}