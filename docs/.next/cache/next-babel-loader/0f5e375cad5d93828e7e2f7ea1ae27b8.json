{"ast":null,"code":"import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"../../../material-ui-utils/src\";\n\n/* eslint-disable no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min = 0, max = 1) {\n  if (true) {\n    if (value < min || value > max) {\n      console.error(`Material-UI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  color = color.substr(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map(n => intToHex(n)).join('')}`;\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error(true ? `Material-UI: Unsupported \\`${color}\\` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().` : _formatMuiErrorMessage(3, color));\n  }\n\n  let values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  const {\n    type\n  } = color;\n  let {\n    values\n  } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  return `${type}(${values.join(', ')})`;\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    val /= 255; // normalized\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/styles/colorManipulator.js"],"names":["clamp","value","min","max","console","error","Math","hexToRgb","color","substr","re","RegExp","length","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","rgbToHex","indexOf","values","decomposeColor","hslToRgb","h","s","l","a","f","k","type","rgb","push","recomposeColor","charAt","marker","substring","split","parseFloat","i","getContrastRatio","foreground","background","lumA","getLuminance","lumB","val","Number","toFixed","emphasize","coefficient","darken","lighten","fade"],"mappings":"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","sourcesContent":["import MuiError from '@material-ui/utils/macros/MuiError.macro';\n/* eslint-disable no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`Material-UI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nexport function hexToRgb(color) {\n  color = color.substr(1);\n\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map((n) => n + n);\n  }\n\n  return colors\n    ? `rgb${colors.length === 4 ? 'a' : ''}(${colors\n        .map((n, index) => {\n          return index < 3 ? parseInt(n, 16) : Math.round((parseInt(n, 16) / 255) * 1000) / 1000;\n        })\n        .join(', ')})`\n    : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const { values } = decomposeColor(color);\n  return `#${values.map((n) => intToHex(n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const { values } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({ type, values: rgb });\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new MuiError(\n      'Material-UI: Unsupported `%s` color.\\n' +\n        'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().',\n      color,\n    );\n  }\n\n  let values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map((value) => parseFloat(value));\n\n  return { type, values };\n}\n\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexport function recomposeColor(color) {\n  const { type } = color;\n  let { values } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => (i < 3 ? parseInt(n, 10) : n));\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  return `${type}(${values.join(', ')})`;\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map((val) => {\n    val /= 255; // normalized\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  color.values[3] = value;\n\n  return recomposeColor(color);\n}\n\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\n\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n"]},"metadata":{},"sourceType":"module"}