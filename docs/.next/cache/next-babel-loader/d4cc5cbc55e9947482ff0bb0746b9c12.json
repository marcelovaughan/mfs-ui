{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ACTION_TYPES, CODE_VARIANTS } from \"../constants\";\nimport memoize from \"../../../../packages/material-ui-system/src/memoize\";\nimport mapTranslations from \"../utils/mapTranslations\";\n\nconst req = require.context(\"../../../translations\", false, /translations.*\\.json$/);\n\nconst translations = mapTranslations(req, 'json');\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);\n}\n\nconst warnOnce = {};\nconst getT = memoize(userLanguage => (key, options = {}) => {\n  const {\n    ignoreWarning = false\n  } = options;\n  const wordings = translations[userLanguage];\n\n  if (!wordings) {\n    console.error(`Missing language: ${userLanguage}.`);\n    return '…';\n  }\n\n  const translation = getPath(wordings, key);\n\n  if (!translation) {\n    const fullKey = `${userLanguage}:${key}`; // No warnings in CI env\n\n    if (!ignoreWarning && !warnOnce[fullKey] && false) {\n      console.error(`Missing translation for ${fullKey}.`);\n      warnOnce[fullKey] = true;\n    }\n\n    return getPath(translations.en, key);\n  }\n\n  return translation;\n});\nconst mapping = {\n  [ACTION_TYPES.OPTIONS_CHANGE]: (state, action) => {\n    const newState = {\n      codeVariant: action.payload.codeVariant || state.codeVariant,\n      userLanguage: action.payload.userLanguage || state.userLanguage\n    };\n    return newState;\n  }\n};\nexport default function optionsReducer(state = {}, action) {\n  let newState = _objectSpread({}, state);\n\n  if (!newState.codeVariant) {\n    newState.codeVariant = CODE_VARIANTS.JS;\n  }\n\n  if (!newState.userLanguage) {\n    newState.userLanguage = 'en';\n  }\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  newState.t = getT(newState.userLanguage);\n  return newState;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/redux/optionsReducer.js"],"names":["ACTION_TYPES","CODE_VARIANTS","memoize","mapTranslations","req","require","context","translations","getPath","obj","path","split","reduce","acc","item","warnOnce","getT","userLanguage","key","options","ignoreWarning","wordings","console","error","translation","fullKey","en","mapping","OPTIONS_CHANGE","state","action","newState","codeVariant","payload","optionsReducer","JS","type","t"],"mappings":"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","sourcesContent":["import { ACTION_TYPES, CODE_VARIANTS } from 'docs/src/modules/constants';\nimport memoize from '@material-ui/system/memoize';\nimport mapTranslations from 'docs/src/modules/utils/mapTranslations';\n\nconst req = require.context('docs/translations', false, /translations.*\\.json$/);\nconst translations = mapTranslations(req, 'json');\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce((acc, item) => (acc && acc[item] ? acc[item] : null), obj);\n}\n\nconst warnOnce = {};\n\nconst getT = memoize((userLanguage) => (key, options = {}) => {\n  const { ignoreWarning = false } = options;\n  const wordings = translations[userLanguage];\n\n  if (!wordings) {\n    console.error(`Missing language: ${userLanguage}.`);\n    return '…';\n  }\n\n  const translation = getPath(wordings, key);\n\n  if (!translation) {\n    const fullKey = `${userLanguage}:${key}`;\n    // No warnings in CI env\n    if (!ignoreWarning && !warnOnce[fullKey] && typeof window !== 'undefined') {\n      console.error(`Missing translation for ${fullKey}.`);\n      warnOnce[fullKey] = true;\n    }\n    return getPath(translations.en, key);\n  }\n\n  return translation;\n});\n\nconst mapping = {\n  [ACTION_TYPES.OPTIONS_CHANGE]: (state, action) => {\n    const newState = {\n      codeVariant: action.payload.codeVariant || state.codeVariant,\n      userLanguage: action.payload.userLanguage || state.userLanguage,\n    };\n    return newState;\n  },\n};\n\nexport default function optionsReducer(state = {}, action) {\n  let newState = { ...state };\n\n  if (!newState.codeVariant) {\n    newState.codeVariant = CODE_VARIANTS.JS;\n  }\n  if (!newState.userLanguage) {\n    newState.userLanguage = 'en';\n  }\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  newState.t = getT(newState.userLanguage);\n\n  return newState;\n}\n"]},"metadata":{},"sourceType":"module"}