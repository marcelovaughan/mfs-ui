{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from \"../../../material-ui/src/styles\";\nimport Popper from \"../../../material-ui/src/Popper\";\nimport ListSubheader from \"../../../material-ui/src/ListSubheader\";\nimport Paper from \"../../../material-ui/src/Paper\";\nimport IconButton from \"../../../material-ui/src/IconButton\";\nimport Chip from \"../../../material-ui/src/Chip\";\nimport CloseIcon from \"../internal/svg-icons/Close\";\nimport ArrowDropDownIcon from \"../internal/svg-icons/ArrowDropDown\";\nimport useAutocomplete, { createFilterOptions } from \"../useAutocomplete\";\nexport { createFilterOptions };\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    '&$focused $clearIndicatorDirty': {\n      visibility: 'visible'\n    },\n\n    /* Avoid double tap issue on iOS */\n    '@media (pointer: fine)': {\n      '&:hover $clearIndicatorDirty': {\n        visibility: 'visible'\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  },\n\n  /* Pseudo-class applied to the root element if focused. */\n  focused: {},\n\n  /* Styles applied to the tag elements, e.g. the chips. */\n  tag: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n\n  /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n  tagSizeSmall: {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  },\n\n  /* Styles applied when the popup icon is rendered. */\n  hasPopupIcon: {},\n\n  /* Styles applied when the clear icon is rendered. */\n  hasClearIcon: {},\n\n  /* Styles applied to the Input element. */\n  inputRoot: {\n    flexWrap: 'wrap',\n    '$hasPopupIcon &, $hasClearIcon &': {\n      paddingRight: 26 + 4\n    },\n    '$hasPopupIcon$hasClearIcon &': {\n      paddingRight: 52 + 4\n    },\n    '& $input': {\n      width: 0,\n      minWidth: 30\n    },\n    '&[class*=\"MuiInput-root\"]': {\n      paddingBottom: 1,\n      '& $input': {\n        padding: 4\n      },\n      '& $input:first-child': {\n        padding: '6px 0'\n      }\n    },\n    '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n      '& $input': {\n        padding: '4px 4px 5px'\n      },\n      '& $input:first-child': {\n        padding: '3px 0 6px'\n      }\n    },\n    '&[class*=\"MuiOutlinedInput-root\"]': {\n      padding: 9,\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4 + 9\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4 + 9\n      },\n      '& $input': {\n        padding: '9.5px 4px'\n      },\n      '& $input:first-child': {\n        paddingLeft: 6\n      },\n      '& $endAdornment': {\n        right: 9\n      }\n    },\n    '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n      padding: 6,\n      '& $input': {\n        padding: '4.5px 4px'\n      }\n    },\n    '&[class*=\"MuiFilledInput-root\"]': {\n      paddingTop: 19,\n      paddingLeft: 8,\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4 + 9\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4 + 9\n      },\n      '& $input': {\n        padding: '9px 4px'\n      },\n      '& $endAdornment': {\n        right: 9\n      }\n    },\n    '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n      paddingBottom: 1,\n      '& $input': {\n        padding: '4.5px 4px'\n      }\n    }\n  },\n\n  /* Styles applied to the input element. */\n  input: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n\n  /* Styles applied to the input element if tag focused. */\n  inputFocused: {\n    opacity: 1\n  },\n\n  /* Styles applied to the endAdornment element. */\n  endAdornment: {\n    // We use a position absolute to support wrapping tags.\n    position: 'absolute',\n    right: 0,\n    top: 'calc(50% - 14px)' // Center vertically\n\n  },\n\n  /* Styles applied to the clear indicator. */\n  clearIndicator: {\n    marginRight: -2,\n    padding: 4,\n    visibility: 'hidden'\n  },\n\n  /* Styles applied to the clear indicator if the input is dirty. */\n  clearIndicatorDirty: {},\n\n  /* Styles applied to the popup indicator. */\n  popupIndicator: {\n    padding: 2,\n    marginRight: -2\n  },\n\n  /* Styles applied to the popup indicator if the popup is open. */\n  popupIndicatorOpen: {\n    transform: 'rotate(180deg)'\n  },\n\n  /* Styles applied to the popper element. */\n  popper: {\n    zIndex: theme.zIndex.modal\n  },\n\n  /* Styles applied to the popper element if `disablePortal={true}`. */\n  popperDisablePortal: {\n    position: 'absolute'\n  },\n\n  /* Styles applied to the `Paper` component. */\n  paper: _objectSpread(_objectSpread({}, theme.typography.body1), {}, {\n    overflow: 'hidden',\n    margin: '4px 0'\n  }),\n\n  /* Styles applied to the `listbox` component. */\n  listbox: {\n    listStyle: 'none',\n    margin: 0,\n    padding: '8px 0',\n    maxHeight: '40vh',\n    overflow: 'auto'\n  },\n\n  /* Styles applied to the loading wrapper. */\n  loading: {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  },\n\n  /* Styles applied to the no option wrapper. */\n  noOptions: {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  },\n\n  /* Styles applied to the option elements. */\n  option: {\n    minHeight: 48,\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.palette.action.selected\n    },\n    '&[data-focus=\"true\"]': {\n      backgroundColor: theme.palette.action.hover\n    },\n    '&:active': {\n      backgroundColor: theme.palette.action.selected\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    }\n  },\n\n  /* Styles applied to the group's label elements. */\n  groupLabel: {\n    backgroundColor: theme.palette.background.paper,\n    top: -8\n  },\n\n  /* Styles applied to the group's ul elements. */\n  groupUl: {\n    padding: 0,\n    '& $option': {\n      paddingLeft: 24\n    }\n  }\n});\n\nfunction DisablePortal(props) {\n  // eslint-disable-next-line react/prop-types\n  const {\n    anchorEl,\n    open\n  } = props,\n        other = _objectWithoutProperties(props, [\"anchorEl\", \"open\"]);\n\n  return __jsx(\"div\", other);\n}\n\nvar _ref = __jsx(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = __jsx(ArrowDropDownIcon, null);\n\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable no-unused-vars */\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    classes,\n    className,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeIcon = _ref,\n    closeText = 'Close',\n    debug = false,\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterOptions,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionDisabled,\n    getOptionLabel = x => x,\n    getOptionSelected,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open,\n    openOnFocus = false,\n    openText = 'Open',\n    options,\n    PaperComponent = Paper,\n    PopperComponent: PopperComponentProp = Popper,\n    popupIcon = _ref2,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium',\n    value: valueProp\n  } = props,\n        other = _objectWithoutProperties(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"classes\", \"className\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeIcon\", \"closeText\", \"debug\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable no-unused-vars */\n\n\n  const PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_objectSpread(_objectSpread({}, props), {}, {\n    componentName: 'Autocomplete'\n  }));\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _objectSpread({\n      className: clsx(classes.tag, size === 'small' && classes.tagSizeSmall),\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map((option, index) => __jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push(__jsx(\"span\", {\n        className: classes.tag,\n        key: startAdornment.length\n      }, getLimitTagsText(more)));\n    }\n  }\n\n  const defaultRenderGroup = params => __jsx(\"li\", {\n    key: params.key\n  }, __jsx(ListSubheader, {\n    className: classes.groupLabel,\n    component: \"div\"\n  }, params.group), __jsx(\"ul\", {\n    className: classes.groupUl\n  }, params.children));\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const renderOption = renderOptionProp || getOptionLabel;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return __jsx(\"li\", _extends({}, optionProps, {\n      className: classes.option\n    }), renderOption(option, {\n      selected: optionProps['aria-selected'],\n      inputValue\n    }));\n  };\n\n  const hasClearIcon = !disableClearable && !disabled;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  return __jsx(React.Fragment, null, __jsx(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused, fullWidth && classes.fullWidth, hasClearIcon && classes.hasClearIcon, hasPopupIcon && classes.hasPopupIcon)\n  }, getRootProps(other)), renderInput({\n    id,\n    disabled,\n    fullWidth: true,\n    size: size === 'small' ? 'small' : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment,\n      endAdornment: __jsx(\"div\", {\n        className: classes.endAdornment\n      }, hasClearIcon ? __jsx(IconButton, _extends({}, getClearProps(), {\n        \"aria-label\": clearText,\n        title: clearText,\n        className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)\n      }), closeIcon) : null, hasPopupIcon ? __jsx(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), popupIcon) : null)\n    },\n    inputProps: _objectSpread({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled\n    }, getInputProps())\n  })), popupOpen && anchorEl ? __jsx(PopperComponent, {\n    className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: true\n  }, __jsx(PaperComponent, {\n    className: classes.paper\n  }, loading && groupedOptions.length === 0 ? __jsx(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? __jsx(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? __jsx(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps(), ListboxProps), groupedOptions.map((option, index) => {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        group: option.group,\n        children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);","map":null,"metadata":{},"sourceType":"module"}