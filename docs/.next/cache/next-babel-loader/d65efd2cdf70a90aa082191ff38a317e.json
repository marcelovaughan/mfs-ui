{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { chainPropTypes } from \"../../../material-ui-utils/src\";\nimport { capitalize } from \"../../../material-ui/src/utils\";\nimport { withStyles } from \"../../../material-ui/src/styles\";\nimport Button from \"../../../material-ui/src/Button\";\nimport CircularProgress from \"../../../material-ui/src/CircularProgress\";\nexport var styles = function styles() {\n  return {\n    /* Styles applied to the root element. */\n    root: {},\n\n    /* Styles applied to the root element if `pending={true}`. */\n    pending: {},\n\n    /* Styles applied to the pendingIndicator element. */\n    pendingIndicator: {\n      position: 'absolute',\n      visibility: 'visible',\n      display: 'flex'\n    },\n\n    /* Styles applied to the pendingIndicator element if `pendingPosition=\"center\"`. */\n    pendingIndicatorCenter: {\n      left: '50%',\n      transform: 'translate(-50%)'\n    },\n\n    /* Styles applied to the pendingIndicator element if `pendingPosition=\"start\"`. */\n    pendingIndicatorStart: {\n      left: 14\n    },\n\n    /* Styles applied to the pendingIndicator element if `pendingPosition=\"end\"`. */\n    pendingIndicatorEnd: {\n      right: 14\n    },\n\n    /* Styles applied to the endIcon element if `pending={true}` and `pendingPosition=\"end\"`. */\n    endIconPendingEnd: {\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the startIcon element if `pending={true}` and `pendingPosition=\"start\"`. */\n    startIconPendingStart: {\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the label element if `pending={true}` and `pendingPosition=\"center\"`. */\n    labelPendingCenter: {\n      visibility: 'hidden'\n    }\n  };\n};\n\nvar PendingIndicator = __jsx(CircularProgress, {\n  color: \"inherit\",\n  size: 16\n});\n\nvar LoadingButton = /*#__PURE__*/React.forwardRef(function LoadingButton(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$pending = props.pending,\n      pending = _props$pending === void 0 ? false : _props$pending,\n      _props$pendingIndicat = props.pendingIndicator,\n      pendingIndicator = _props$pendingIndicat === void 0 ? PendingIndicator : _props$pendingIndicat,\n      _props$pendingPositio = props.pendingPosition,\n      pendingPosition = _props$pendingPositio === void 0 ? 'center' : _props$pendingPositio,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disabled\", \"pending\", \"pendingIndicator\", \"pendingPosition\"]);\n\n  return __jsx(Button, _extends({\n    className: clsx(classes.root, className, pending && classes.pending),\n    disabled: disabled || pending,\n    ref: ref,\n    classes: {\n      startIcon: classes[\"startIcon\".concat(pending ? 'Pending' : '').concat(capitalize(pendingPosition))],\n      endIcon: classes[\"endIcon\".concat(pending ? 'Pending' : '').concat(capitalize(pendingPosition))],\n      label: classes[\"label\".concat(pending ? 'Pending' : '').concat(capitalize(pendingPosition))]\n    }\n  }, other), pending && __jsx(\"div\", {\n    className: clsx(classes.pendingIndicator, classes[\"pendingIndicator\".concat(capitalize(pendingPosition))])\n  }, pendingIndicator), children);\n});\nexport default withStyles(styles, {\n  name: 'MuiLoadingButton'\n})(LoadingButton);","map":null,"metadata":{},"sourceType":"module"}