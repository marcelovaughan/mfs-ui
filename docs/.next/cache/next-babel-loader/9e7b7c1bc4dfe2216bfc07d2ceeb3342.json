{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport MarkdownElement from \"./MarkdownElement\";\nimport prism from \"../utils/prism\";\nconst HighlightedCode = /*#__PURE__*/React.forwardRef(function HighlightedCode(props, ref) {\n  const {\n    code,\n    language\n  } = props,\n        other = _objectWithoutProperties(props, [\"code\", \"language\"]);\n\n  const renderedCode = React.useMemo(() => {\n    return prism(code.trim(), language);\n  }, [code, language]);\n  return __jsx(MarkdownElement, _extends({\n    ref: ref\n  }, other), __jsx(\"pre\", null, __jsx(\"code\", {\n    className: `language-${language}` // eslint-disable-next-line react/no-danger\n    ,\n    dangerouslySetInnerHTML: {\n      __html: renderedCode\n    }\n  })));\n});\nexport default HighlightedCode;","map":null,"metadata":{},"sourceType":"module"}