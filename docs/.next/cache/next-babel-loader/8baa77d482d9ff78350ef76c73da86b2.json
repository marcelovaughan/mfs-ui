{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport url from 'url';\nimport { useSelector } from 'react-redux';\nimport useLazyCSS from \"../utils/useLazyCSS\";\nimport useMediaQuery from \"../../../../packages/material-ui/src/useMediaQuery\";\nimport { fade, useTheme, makeStyles } from \"../../../../packages/material-ui/src/styles\";\nimport Input from \"../../../../packages/material-ui/src/Input\";\nimport SearchIcon from \"../../../../packages/material-ui-icons/src/Search\";\nimport { handleEvent } from \"./MarkdownLinks\";\nimport docsearch from 'docsearch.js';\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    '.algolia-autocomplete': {\n      '& .ds-dropdown-menu': {\n        boxShadow: theme.shadows[1],\n        borderRadius: theme.shape.borderRadius,\n        '&::before': {\n          display: 'none'\n        },\n        '& [class^=ds-dataset-]': {\n          border: 0,\n          maxHeight: 'calc(100vh - 100px)',\n          borderRadius: theme.shape.borderRadius,\n          backgroundColor: theme.palette.background.paper\n        }\n      },\n      '& .algolia-docsearch-suggestion--category-header-lvl0': {\n        color: theme.palette.text.primary\n      },\n      '& .algolia-docsearch-suggestion .algolia-docsearch-suggestion--subcategory-column': {\n        opacity: 1,\n        padding: '5.33px 10.66px',\n        textAlign: 'right',\n        width: '25%'\n      },\n      '& .algolia-docsearch-suggestion .algolia-docsearch-suggestion--content': {\n        float: 'right',\n        padding: '5.33px 0 5.33px 10.66px',\n        width: '75%'\n      },\n      '& .algolia-docsearch-suggestion--subcategory-column-text': {\n        color: theme.palette.text.secondary,\n        fontWeight: theme.typography.fontWeightRegular\n      },\n      '& .algolia-docsearch-suggestion--highlight': {\n        color: theme.palette.type === 'light' ? '#174d8c' : '#acccf1'\n      },\n      '& .algolia-docsearch-suggestion': {\n        textDecoration: 'none',\n        backgroundColor: theme.palette.background.paper\n      },\n      '& .algolia-docsearch-suggestion--title': _objectSpread(_objectSpread({}, theme.typography.h6), {}, {\n        color: theme.palette.text.primary\n      }),\n      '& .algolia-docsearch-suggestion--text': _objectSpread(_objectSpread({}, theme.typography.body2), {}, {\n        color: theme.palette.text.secondary\n      }),\n      '&& .algolia-docsearch-suggestion--no-results': {\n        width: '100%',\n        '&::before': {\n          display: 'none'\n        }\n      },\n      '& .ds-dropdown-menu .ds-suggestion.ds-cursor .algolia-docsearch-suggestion--content': {\n        backgroundColor: `${theme.palette.action.selected} !important`\n      }\n    }\n  },\n  root: {\n    fontFamily: theme.typography.fontFamily,\n    position: 'relative',\n    marginRight: theme.spacing(2),\n    marginLeft: theme.spacing(1),\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    '& $inputInput': {\n      transition: theme.transitions.create('width'),\n      width: 120,\n      '&:focus': {\n        width: 170\n      }\n    }\n  },\n  search: {\n    width: theme.spacing(9),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  inputRoot: {\n    color: 'inherit'\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 9)\n  }\n}), {\n  name: 'AppSearch'\n});\n/**\n * When using this component it is recommend to include a preload link\n * `<link rel=\"preload\" href=\"https://cdn.jsdelivr.net/docsearch.js/2/docsearch.min.css\" as=\"style\" />`\n * to potentially reduce load times\n */\n\nvar _ref = __jsx(SearchIcon, null);\n\nexport default function AppSearch() {\n  const classes = useStyles();\n  const inputRef = React.useRef(null);\n  const theme = useTheme();\n  const userLanguage = useSelector(state => state.options.userLanguage);\n  const t = useSelector(state => state.options.t);\n  useLazyCSS('https://cdn.jsdelivr.net/docsearch.js/2/docsearch.min.css', '#app-search');\n  React.useEffect(() => {\n    const handleKeyDown = event => {\n      // Use event.keyCode to support IE 11\n      if ([191, // '/'\n      83 // 's'\n      ].indexOf(event.keyCode) !== -1 && document.activeElement.nodeName === 'BODY' && document.activeElement !== inputRef.current) {\n        event.preventDefault();\n        inputRef.current.focus();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  const desktop = useMediaQuery(theme.breakpoints.up('sm'));\n  React.useEffect(() => {\n    if (desktop) {\n      // This assumes that by the time this effect runs the Input component is committed\n      // this holds true as long as the effect and the component are in the same\n      // suspense boundary. If you move effect and component apart be sure to check\n      // that this assumption still holds\n      const search = docsearch({\n        apiKey: '1d8534f83b9b0cfea8f16498d19fbcab',\n        indexName: 'material-ui',\n        inputSelector: '#docsearch-input',\n        algoliaOptions: {\n          facetFilters: ['version:master', `language:${userLanguage}`]\n        },\n        autocompleteOptions: {\n          openOnFocus: true\n        },\n        handleSelected: (input, event, suggestion) => {\n          event.button = 0;\n          const parseUrl = url.parse(suggestion.url);\n          handleEvent(event, parseUrl.pathname + parseUrl.hash);\n          input.close();\n        } // debug: true, // Set debug to true if you want to inspect the dropdown.\n\n      });\n      search.autocomplete.on('autocomplete:cursorchanged', event => {\n        const combobox = event.target;\n        const selectedOptionNode = document.getElementById(combobox.getAttribute('aria-activedescendant'));\n        const listboxNode = document.querySelector('.ds-suggestions').parentElement;\n\n        if (selectedOptionNode === null || listboxNode === null) {\n          if (false) {\n            console.warn('Cant scroll to selected option.');\n          }\n\n          return;\n        } // Scroll active descendant into view.\n        // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n        //\n        // Consider this API instead once it has a better browser support:\n        // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n\n\n        if (listboxNode.scrollHeight > listboxNode.clientHeight) {\n          const element = selectedOptionNode;\n          const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n          const elementBottom = element.offsetTop + element.offsetHeight;\n\n          if (elementBottom > scrollBottom) {\n            listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n          } else if (element.offsetTop < listboxNode.scrollTop) {\n            listboxNode.scrollTop = element.offsetTop;\n          }\n        }\n      });\n    }\n  }, [desktop, userLanguage]);\n  return __jsx(\"div\", {\n    className: classes.root,\n    style: {\n      display: desktop ? 'flex' : 'none'\n    }\n  }, __jsx(\"div\", {\n    className: classes.search\n  }, _ref), __jsx(Input, {\n    disableUnderline: true,\n    placeholder: `${t('algoliaSearch')}â€¦`,\n    inputProps: {\n      'aria-label': t('algoliaSearch')\n    },\n    type: \"search\",\n    id: \"docsearch-input\",\n    inputRef: inputRef,\n    classes: {\n      root: classes.inputRoot,\n      input: classes.inputInput\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}