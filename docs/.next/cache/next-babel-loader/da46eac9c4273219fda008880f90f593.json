{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-underscore-dangle */\nimport \"../src/modules/components/bootstrap\"; // --- Post bootstrap -----\n\nimport React from 'react';\nimport find from 'lodash/find';\nimport { Provider as ReduxProvider, useDispatch, useSelector } from 'react-redux';\nimport { loadCSS } from 'fg-loadcss/src/loadCSS';\nimport NextHead from 'next/head';\nimport acceptLanguage from 'accept-language';\nimport { create } from 'jss';\nimport rtl from 'jss-rtl';\nimport { useRouter } from 'next/router';\nimport { rewriteUrlForNextExport } from 'next/dist/next-server/lib/router/rewrite-url-for-export';\nimport { StylesProvider, jssPreset } from \"../../packages/material-ui-styles/src\";\nimport pages from \"../src/pages\";\nimport initRedux from \"../src/modules/redux/initRedux\";\nimport PageContext from \"../src/modules/components/PageContext\";\nimport GoogleAnalytics from \"../src/modules/components/GoogleAnalytics\";\nimport loadScript from \"../src/modules/utils/loadScript\";\nimport { ThemeProvider } from \"../src/modules/components/ThemeContext\";\nimport { pathnameToLanguage, getCookie } from \"../src/modules/utils/helpers\";\nimport { ACTION_TYPES, CODE_VARIANTS } from \"../src/modules/constants\"; // Configure JSS\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n  insertionPoint: false ? document.querySelector('#insertion-point-jss') : null\n});\n\nfunction useFirstRender() {\n  const firstRenderRef = React.useRef(true);\n  React.useEffect(() => {\n    firstRenderRef.current = false;\n  }, []);\n  return firstRenderRef.current;\n}\n\nacceptLanguage.languages(['en', 'zh', 'pt']);\n\nfunction loadCrowdin() {\n  window._jipt = [];\n\n  window._jipt.push(['project', 'material-ui-docs']);\n\n  loadScript('https://cdn.crowdin.com/jipt/jipt.js', document.querySelector('head'));\n}\n\nfunction LanguageNegotiation() {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const userLanguage = useSelector(state => state.options.userLanguage);\n  React.useEffect(() => {\n    if (userLanguage === 'aa') {\n      loadCrowdin();\n    }\n  }, [userLanguage]);\n  React.useEffect(() => {\n    const {\n      userLanguage: userLanguageUrl,\n      canonical\n    } = pathnameToLanguage(rewriteUrlForNextExport(router.asPath));\n    const preferedLanguage = getCookie('userLanguage') !== 'noDefault' && userLanguage === 'en' ? acceptLanguage.get(navigator.language) : userLanguage;\n\n    if (preferedLanguage !== userLanguage) {\n      window.location = preferedLanguage === 'en' ? canonical : `/${preferedLanguage}${canonical}`;\n    } else if (userLanguageUrl !== userLanguage) {\n      dispatch({\n        type: ACTION_TYPES.OPTIONS_CHANGE,\n        payload: {\n          userLanguage: userLanguageUrl\n        }\n      });\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return null;\n}\n/**\n * Priority: on first render: navigated value, persisted value; otherwise initial value, 'JS'\n *\n * @returns {string} - The persisted variant if the initial value is undefined\n */\n\n\nfunction usePersistCodeVariant() {\n  const dispatch = useDispatch();\n  const {\n    codeVariant: initialCodeVariant = CODE_VARIANTS.JS\n  } = useSelector(state => state.options);\n  const isFirstRender = useFirstRender();\n  const navigatedCodeVariant = React.useMemo(() => {\n    const navigatedCodeVariantMatch = false ? window.location.hash.match(/\\.(js|tsx)$/) : null;\n\n    if (navigatedCodeVariantMatch === null) {\n      return undefined;\n    }\n\n    return navigatedCodeVariantMatch[1] === 'tsx' ? CODE_VARIANTS.TS : CODE_VARIANTS.JS;\n  }, []);\n  const persistedCodeVariant = React.useMemo(() => {\n    if (true) {\n      return undefined;\n    }\n\n    return getCookie('codeVariant');\n  }, []);\n  /**\n   * we initialize from navigation or cookies. on subsequent renders the store is the\n   * truth\n   */\n\n  const codeVariant = isFirstRender === true ? navigatedCodeVariant || persistedCodeVariant || initialCodeVariant : initialCodeVariant;\n  React.useEffect(() => {\n    if (codeVariant !== initialCodeVariant) {\n      dispatch({\n        type: ACTION_TYPES.OPTIONS_CHANGE,\n        payload: {\n          codeVariant\n        }\n      });\n    }\n  });\n  React.useEffect(() => {\n    document.cookie = `codeVariant=${codeVariant};path=/;max-age=31536000`;\n  }, [codeVariant]);\n  return codeVariant;\n}\n/**\n * basically just a `useAnalytics` hook.\n * However, it needs the redux store which is created\n * in the same component this \"hook\" is used.\n */\n\n\nfunction Analytics() {\n  React.useEffect(() => {\n    loadScript('https://www.google-analytics.com/analytics.js', document.querySelector('head'));\n  }, []);\n  const options = useSelector(state => state.options);\n  const codeVariant = usePersistCodeVariant();\n  React.useEffect(() => {\n    window.ga('set', 'dimension1', codeVariant);\n  }, [codeVariant]);\n  React.useEffect(() => {\n    window.ga('set', 'dimension2', options.userLanguage);\n  }, [options.userLanguage]);\n  React.useEffect(() => {\n    /**\n     * @type {null | MediaQueryList}\n     */\n    let matchMedia = null;\n    /**\n     * Based on https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#Monitoring_screen_resolution_or_zoom_level_changes\n     * Adjusted to track 3 or more different ratios\n     */\n\n    function trackDevicePixelRation() {\n      window.ga('set', 'dimension3', Math.round(window.devicePixelRatio * 10) / 10);\n      matchMedia = window.matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`); // Need to setup again.\n      // Otherwise we track only changes from the initial ratio to another.\n      // It would not track 3 or more different monitors/zoom stages\n\n      matchMedia.addListener(trackDevicePixelRation);\n    }\n\n    trackDevicePixelRation();\n    return () => {\n      matchMedia = null;\n    };\n  }, []);\n  return null;\n} // Inspired by\n// https://developers.google.com/web/tools/workbox/guides/advanced-recipes#offer_a_page_reload_for_users\n\n\nfunction forcePageReload(registration) {\n  // console.log('already controlled?', Boolean(navigator.serviceWorker.controller));\n  if (!navigator.serviceWorker.controller) {\n    // The window client isn't currently controlled so it's a new service\n    // worker that will activate immediately.\n    return;\n  } // console.log('registration waiting?', Boolean(registration.waiting));\n\n\n  if (registration.waiting) {\n    // SW is waiting to activate. Can occur if multiple clients open and\n    // one of the clients is refreshed.\n    registration.waiting.postMessage('skipWaiting');\n    return;\n  }\n\n  function listenInstalledStateChange() {\n    registration.installing.addEventListener('statechange', event => {\n      // console.log('statechange', event.target.state);\n      if (event.target.state === 'installed' && registration.waiting) {\n        // A new service worker is available, inform the user\n        registration.waiting.postMessage('skipWaiting');\n      } else if (event.target.state === 'activated') {\n        // Force the control of the page by the activated service worker.\n        window.location.reload();\n      }\n    });\n  }\n\n  if (registration.installing) {\n    listenInstalledStateChange();\n    return;\n  } // We are currently controlled so a new SW may be found...\n  // Add a listener in case a new SW is found,\n\n\n  registration.addEventListener('updatefound', listenInstalledStateChange);\n}\n\nasync function registerServiceWorker() {\n  if ('serviceWorker' in navigator && true && window.location.host.indexOf('material-ui.com') <= 0) {\n    // register() automatically attempts to refresh the sw.js.\n    const registration = await navigator.serviceWorker.register('/sw.js'); // Force the page reload for users.\n\n    forcePageReload(registration);\n  }\n}\n\nlet dependenciesLoaded = false;\n\nfunction loadDependencies() {\n  if (dependenciesLoaded) {\n    return;\n  }\n\n  dependenciesLoaded = true;\n  loadCSS('https://fonts.googleapis.com/icon?family=Material+Icons', document.querySelector('#material-icon-font'));\n}\n\nif (false && true) {\n  // eslint-disable-next-line no-console\n  console.log(`%c\n\n███╗   ███╗ █████╗ ████████╗███████╗██████╗ ██╗ █████╗ ██╗      ██╗   ██╗██╗\n████╗ ████║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██║██╔══██╗██║      ██║   ██║██║\n██╔████╔██║███████║   ██║   █████╗  ██████╔╝██║███████║██║█████╗██║   ██║██║\n██║╚██╔╝██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██║██╔══██║██║╚════╝██║   ██║██║\n██║ ╚═╝ ██║██║  ██║   ██║   ███████╗██║  ██║██║██║  ██║███████╗ ╚██████╔╝██║\n╚═╝     ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚══════╝  ╚═════╝ ╚═╝\n\nTip: you can access the documentation \\`theme\\` object directly in the console.\n`, 'font-family:monospace;color:#1976d2;font-size:12px;');\n}\n\nfunction findActivePage(currentPages, pathname) {\n  const activePage = find(currentPages, page => {\n    if (page.children) {\n      if (pathname.indexOf(`${page.pathname}/`) === 0) {\n        // Check if one of the children matches (for /components)\n        return findActivePage(page.children, pathname);\n      }\n    } // Should be an exact match if no children\n\n\n    return pathname === page.pathname;\n  });\n\n  if (!activePage) {\n    return null;\n  } // We need to drill down\n\n\n  if (activePage.pathname !== pathname) {\n    return findActivePage(activePage.children, pathname);\n  }\n\n  return activePage;\n}\n\nvar _ref = __jsx(LanguageNegotiation, null);\n\nvar _ref2 = __jsx(Analytics, null);\n\nfunction AppWrapper(props) {\n  const {\n    children,\n    pageProps\n  } = props;\n  const router = useRouter();\n  const [redux] = React.useState(() => initRedux({\n    options: {\n      userLanguage: pageProps.userLanguage\n    }\n  }));\n  React.useEffect(() => {\n    loadDependencies();\n    registerServiceWorker(); // Remove the server-side injected CSS.\n\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }, []);\n  let pathname = router.pathname; // Add support for leading / in development mode.\n\n  if (pathname !== '/') {\n    // The leading / is only added to support static hosting (resolve /index.html).\n    // We remove it to normalize the pathname.\n    // See `rewriteUrlForNextExport` on Next.js side.\n    pathname = pathname.replace(/\\/$/, '');\n  }\n\n  const activePage = findActivePage(pages, pathname);\n  let fonts = ['https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap'];\n\n  if (pathname.match(/onepirate/)) {\n    fonts = ['https://fonts.googleapis.com/css?family=Roboto+Condensed:700|Work+Sans:300,400&display=swap'];\n  }\n\n  return __jsx(React.Fragment, null, __jsx(NextHead, null, fonts.map(font => __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: font,\n    key: font\n  }))), __jsx(ReduxProvider, {\n    store: redux\n  }, __jsx(PageContext.Provider, {\n    value: {\n      activePage,\n      pages,\n      versions: pageProps.versions\n    }\n  }, __jsx(StylesProvider, {\n    jss: jss\n  }, __jsx(ThemeProvider, null, children))), _ref, _ref2), __jsx(GoogleAnalytics, {\n    key: router.route\n  }));\n}\n\nexport default function MyApp(props) {\n  const {\n    Component,\n    pageProps\n  } = props;\n  return __jsx(AppWrapper, {\n    pageProps: pageProps\n  }, __jsx(Component, pageProps));\n}\n\nMyApp.getInitialProps = async ({\n  ctx,\n  Component\n}) => {\n  let pageProps = {};\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps: _objectSpread({\n      userLanguage: ctx.query.userLanguage || 'en'\n    }, pageProps)\n  };\n};","map":null,"metadata":{},"sourceType":"module"}