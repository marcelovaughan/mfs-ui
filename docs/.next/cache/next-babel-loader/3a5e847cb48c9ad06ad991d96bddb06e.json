{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport marked from 'marked/lib/marked';\nimport { LANGUAGES_IN_PROGRESS } from \"../constants\";\nimport kebabCase from 'lodash/kebabCase';\nimport { rewriteUrlForNextExport } from 'next/dist/next-server/lib/router/rewrite-url-for-export';\nimport textToHash from \"./textToHash\";\nimport prism from \"./prism\";\nconst headerRegExp = /---[\\r\\n]([\\s\\S]*)[\\r\\n]---/;\nconst titleRegExp = /# (.*)[\\r\\n]/;\nconst descriptionRegExp = /<p class=\"description\">(.*)<\\/p>[\\r\\n]/;\nconst headerKeyValueRegExp = /(.*): (.*)/g;\nconst emptyRegExp = /^\\s*$/;\nconst notEnglishMarkdownRegExp = /-([a-z]{2})\\.md$/;\n/**\n * Extract information from the top of the markdown.\n * For instance, the following input:\n *\n * ---\n * title: Backdrop React Component\n * components: Backdrop\n * ---\n *\n * # Backdrop\n *\n * should output:\n * { title: 'Backdrop React Component', components: ['Backdrop'] }\n */\n\nexport function getHeaders(markdown) {\n  let header = markdown.match(headerRegExp);\n\n  if (!header) {\n    return {\n      components: []\n    };\n  }\n\n  header = header[1];\n  let regexMatches;\n  const headers = {}; // eslint-disable-next-line no-cond-assign\n\n  while ((regexMatches = headerKeyValueRegExp.exec(header)) !== null) {\n    headers[regexMatches[1]] = regexMatches[2];\n  }\n\n  if (headers.components) {\n    headers.components = headers.components.split(',').map(x => x.trim()).sort();\n  } else {\n    headers.components = [];\n  }\n\n  return headers;\n}\nexport const demoRegexp = /^\"demo\": \"(.*)\"/;\nexport function getContents(markdown) {\n  return markdown.replace(headerRegExp, '') // Remove header information\n  .split(/^{{(\"demo\":[^}]*)}}$/gm) // Split markdown into an array, separating demos\n  .filter(content => !emptyRegExp.test(content)); // Remove empty lines\n}\nexport function getTitle(markdown) {\n  const matches = markdown.match(titleRegExp);\n\n  if (!matches || !matches[1]) {\n    throw new Error('Missing title in the page');\n  }\n\n  return matches[1];\n}\nexport function getDescription(markdown) {\n  const matches = markdown.match(descriptionRegExp);\n  return matches === null || matches === void 0 ? void 0 : matches[1];\n}\n/**\n * Render markdown used in the Material-UI docs\n *\n * @param {string} markdown\n * @param {object} [options]\n * @param {function} [options.highlight] - https://marked.js.org/#/USING_ADVANCED.md#highlight\n * @param {object} [options.rest] - properties from https://marked.js.org/#/USING_PRO.md#renderer\n */\n\nexport function render(markdown, options = {}) {\n  const {\n    highlight\n  } = options,\n        rendererOptions = _objectWithoutProperties(options, [\"highlight\"]);\n\n  const renderer = _extends(new marked.Renderer(), rendererOptions);\n\n  const markedOptions = {\n    gfm: true,\n    tables: true,\n    breaks: false,\n    pedantic: false,\n    sanitize: false,\n    smartLists: true,\n    smartypants: false,\n    highlight,\n    renderer\n  };\n  return marked(markdown, markedOptions);\n}\nconst externs = ['https://material.io/', 'https://getbootstrap.com/', 'https://www.amazon.com/', 'https://materialdesignicons.com/', 'https://www.w3.org/', 'https://devexpress.github.io/', 'https://ui-kit.co/'];\n/**\n *\n * @param {object} config\n * @param {() => string} config.requireRaw - returnvalue of require.context\n * @param {string} config.pageFilename - filename relative to nextjs pages directory\n */\n\nexport function prepareMarkdown(config) {\n  const {\n    pageFilename,\n    requireRaw\n  } = config;\n  const demos = {};\n  const docs = {};\n  const headingHashes = {}; // Process the English markdown before the other locales.\n\n  let filenames = [];\n  requireRaw.keys().forEach(filename => {\n    if (filename.match(notEnglishMarkdownRegExp)) {\n      filenames.push(filename);\n    } else {\n      filenames = [filename].concat(filenames);\n    }\n  });\n  filenames.forEach(filename => {\n    if (filename.indexOf('.md') !== -1) {\n      const matchNotEnglishMarkdown = filename.match(notEnglishMarkdownRegExp);\n      const userLanguage = matchNotEnglishMarkdown && LANGUAGES_IN_PROGRESS.indexOf(matchNotEnglishMarkdown[1]) !== -1 ? matchNotEnglishMarkdown[1] : 'en';\n      const markdown = requireRaw(filename);\n      const headers = getHeaders(markdown);\n      const title = headers.title || getTitle(markdown);\n      const description = headers.description || getDescription(markdown);\n      const contents = getContents(markdown);\n\n      if (headers.components.length > 0) {\n        contents.push(`\n## API\n\n${headers.components.map(component => `- [\\`<${component} />\\`](${rewriteUrlForNextExport(`/api/${kebabCase(component)}`)})`).join('\\n')}\n  `);\n      }\n\n      const toc = [];\n      const headingHashesFallbackTranslated = {};\n      let headingIndex = -1;\n      const rendered = contents.map(content => {\n        if (demos && demoRegexp.test(content)) {\n          try {\n            return JSON.parse(`{${content}}`);\n          } catch (err) {\n            console.error('JSON.parse fails with: ', `{${content}}`);\n            console.error(err);\n            return null;\n          }\n        }\n\n        return render(content, {\n          highlight: prism,\n          heading: (headingHtml, level) => {\n            // Small title. No need for an anchor.\n            // It's reducing the risk of duplicated id and it's fewer elements in the DOM.\n            if (level >= 4) {\n              return `<h${level}>${headingHtml}</h${level}>`;\n            }\n\n            const headingText = headingHtml.replace(/([\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])\\uFE0F?/g, '') // remove emojis\n            .replace(/<\\/?[^>]+(>|$)/g, '') // remove HTML\n            .trim(); // Standardizes the hash from the default location (en) to different locations\n            // Need english.md file parsed first\n\n            let hash;\n\n            if (userLanguage === 'en') {\n              hash = textToHash(headingText, headingHashes);\n            } else {\n              headingIndex += 1;\n              hash = Object.keys(headingHashes)[headingIndex];\n\n              if (!hash) {\n                hash = textToHash(headingText, headingHashesFallbackTranslated);\n              }\n            } // enable splitting of long words from function name + first arg name\n            // Closing parens are less interesting since this would only allow breaking one character earlier.\n            // Applying the same mechanism would also allow breaking of non-function signatures like \"Community help (free)\".\n            // To detect that we enabled breaking of open/closing parens we'd need a context-sensitive parser.\n\n\n            const displayText = headingText.replace(/([^\\s]\\()/g, '$1&#8203;'); // create a nested structure with 2 levels starting with level 2 e.g.\n            // [{...level2, children: [level3, level3, level3]}, level2]\n\n            if (level === 2) {\n              toc.push({\n                text: displayText,\n                level,\n                hash,\n                children: []\n              });\n            } else if (level === 3) {\n              if (!toc[toc.length - 1]) {\n                throw new Error(`Missing parent level for: ${headingText}`);\n              }\n\n              toc[toc.length - 1].children.push({\n                text: displayText,\n                level,\n                hash\n              });\n            }\n\n            return [`<h${level}>`, `<a class=\"anchor-link\" id=\"${hash}\"></a>`, headingHtml, `<a class=\"anchor-link-style\" aria-hidden=\"true\" aria-label=\"anchor\" href=\"#${hash}\">`, '<svg><use xlink:href=\"#anchor-link-icon\" /></svg>', '</a>', `</h${level}>`].join('');\n          },\n          link: (href, linkTitle, linkText) => {\n            let more = '';\n\n            if (externs.some(domain => href.indexOf(domain) !== -1)) {\n              more = ' target=\"_blank\" rel=\"noopener nofollow\"';\n            }\n\n            let finalHref = href;\n\n            if (userLanguage !== 'en' && finalHref.indexOf('/') === 0 && finalHref !== '/size-snapshot') {\n              finalHref = `/${userLanguage}${finalHref}`;\n            }\n\n            return `<a href=\"${finalHref}\"${more}>${linkText}</a>`;\n          }\n        });\n      }); // fragment link symbol\n\n      rendered.unshift(`<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n  <symbol id=\"anchor-link-icon\" viewBox=\"0 0 16 16\">\n    <path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\" />\n  </symbol>\n</svg>`);\n      docs[userLanguage] = {\n        description,\n        location: headers.filename || `/docs/src/pages/${pageFilename}/${filename}`,\n        rendered,\n        toc,\n        title\n      };\n    } else if (filename.indexOf('.tsx') !== -1) {\n      const demoName = `pages/${pageFilename}/${filename.replace(/\\.\\//g, '').replace(/\\.tsx/g, '.js')}`;\n      demos[demoName] = _objectSpread(_objectSpread({}, demos[demoName]), {}, {\n        moduleTS: filename,\n        rawTS: requireRaw(filename)\n      });\n    } else {\n      const demoName = `pages/${pageFilename}/${filename.replace(/\\.\\//g, '')}`;\n      demos[demoName] = _objectSpread(_objectSpread({}, demos[demoName]), {}, {\n        module: filename,\n        raw: requireRaw(filename)\n      });\n    }\n  });\n  return {\n    demos,\n    docs\n  };\n}","map":null,"metadata":{},"sourceType":"module"}