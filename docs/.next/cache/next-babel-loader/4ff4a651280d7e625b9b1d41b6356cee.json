{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/FormControl/FormControl.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { isFilled, isAdornedStart } from \"../InputBase/utils\";\nimport withStyles from \"../styles/withStyles\";\nimport capitalize from \"../utils/capitalize\";\nimport isMuiElement from \"../utils/isMuiElement\";\nimport FormControlContext from \"./FormControlContext\";\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    flexDirection: 'column',\n    position: 'relative',\n    // Reset fieldset default style.\n    minWidth: 0,\n    padding: 0,\n    margin: 0,\n    border: 0,\n    verticalAlign: 'top' // Fix alignment issue on Safari.\n\n  },\n\n  /* Styles applied to the root element if `margin=\"normal\"`. */\n  marginNormal: {\n    marginTop: 16,\n    marginBottom: 8\n  },\n\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    marginTop: 8,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  }\n};\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * You can find one composition example below and more going to [the demos](/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️Only one input can be used within a FormControl.\n */\n\nvar FormControl = /*#__PURE__*/React.forwardRef(function FormControl(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      visuallyFocused = props.focused,\n      _props$hiddenLabel = props.hiddenLabel,\n      hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel,\n      _props$margin = props.margin,\n      margin = _props$margin === void 0 ? 'none' : _props$margin,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      size = props.size,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"fullWidth\", \"focused\", \"hiddenLabel\", \"margin\", \"required\", \"size\", \"variant\"]);\n\n  var _React$useState = React.useState(function () {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    var initialAdornedStart = false;\n\n    if (children) {\n      React.Children.forEach(children, function (child) {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        var input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          initialAdornedStart = true;\n        }\n      });\n    }\n\n    return initialAdornedStart;\n  }),\n      adornedStart = _React$useState[0],\n      setAdornedStart = _React$useState[1];\n\n  var _React$useState2 = React.useState(function () {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    var initialFilled = false;\n\n    if (children) {\n      React.Children.forEach(children, function (child) {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          initialFilled = true;\n        }\n      });\n    }\n\n    return initialFilled;\n  }),\n      filled = _React$useState2[0],\n      setFilled = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _focused = _React$useState3[0],\n      setFocused = _React$useState3[1];\n\n  var focused = visuallyFocused !== undefined ? visuallyFocused : _focused;\n\n  if (disabled && focused) {\n    setFocused(false);\n  }\n\n  var registerEffect;\n\n  if (true) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var registeredInput = React.useRef(false);\n\n    registerEffect = function registerEffect() {\n      if (registeredInput.current) {\n        console.error(['Material-UI: There are multiple InputBase components inside a FormControl.', 'This is not supported. It might cause infinite rendering loops.', 'Only use one InputBase.'].join('\\n'));\n      }\n\n      registeredInput.current = true;\n      return function () {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  var onFilled = React.useCallback(function () {\n    setFilled(true);\n  }, []);\n  var onEmpty = React.useCallback(function () {\n    setFilled(false);\n  }, []);\n  var childContext = {\n    adornedStart: adornedStart,\n    setAdornedStart: setAdornedStart,\n    color: color,\n    disabled: disabled,\n    error: error,\n    filled: filled,\n    focused: focused,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    margin: (size === 'small' ? 'dense' : undefined) || margin,\n    onBlur: function onBlur() {\n      setFocused(false);\n    },\n    onEmpty: onEmpty,\n    onFilled: onFilled,\n    onFocus: function onFocus() {\n      setFocused(true);\n    },\n    registerEffect: registerEffect,\n    required: required,\n    variant: variant\n  };\n  return __jsx(FormControlContext.Provider, {\n    value: childContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }, __jsx(Component, _extends({\n    className: clsx(classes.root, className, margin !== 'none' && classes[\"margin\".concat(capitalize(margin))], fullWidth && classes.fullWidth),\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }), children));\n});\nFormControl.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The contents of the form control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be displayed in focused state.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `true`, the component will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n\n  /**\n   * If `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n};\nexport default withStyles(styles, {\n  name: 'MuiFormControl'\n})(FormControl);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/FormControl/FormControl.js"],"names":["React","PropTypes","clsx","isFilled","isAdornedStart","withStyles","capitalize","isMuiElement","FormControlContext","styles","root","display","flexDirection","position","minWidth","padding","margin","border","verticalAlign","marginNormal","marginTop","marginBottom","marginDense","fullWidth","width","FormControl","forwardRef","props","ref","children","classes","className","color","component","Component","disabled","error","visuallyFocused","focused","hiddenLabel","required","size","variant","other","useState","initialAdornedStart","Children","forEach","child","input","adornedStart","setAdornedStart","initialFilled","filled","setFilled","_focused","setFocused","undefined","registerEffect","registeredInput","useRef","current","console","join","onFilled","useCallback","onEmpty","childContext","onBlur","onFocus","propTypes","node","object","string","oneOf","elementType","bool","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { isFilled, isAdornedStart } from '../InputBase/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport isMuiElement from '../utils/isMuiElement';\nimport FormControlContext from './FormControlContext';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    flexDirection: 'column',\n    position: 'relative',\n    // Reset fieldset default style.\n    minWidth: 0,\n    padding: 0,\n    margin: 0,\n    border: 0,\n    verticalAlign: 'top', // Fix alignment issue on Safari.\n  },\n  /* Styles applied to the root element if `margin=\"normal\"`. */\n  marginNormal: {\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    marginTop: 8,\n    marginBottom: 4,\n  },\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%',\n  },\n};\n\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * You can find one composition example below and more going to [the demos](/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️Only one input can be used within a FormControl.\n */\nconst FormControl = React.forwardRef(function FormControl(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    color = 'primary',\n    component: Component = 'div',\n    disabled = false,\n    error = false,\n    fullWidth = false,\n    focused: visuallyFocused,\n    hiddenLabel = false,\n    margin = 'none',\n    required = false,\n    size,\n    variant = 'standard',\n    ...other\n  } = props;\n\n  const [adornedStart, setAdornedStart] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialAdornedStart = false;\n\n    if (children) {\n      React.Children.forEach(children, (child) => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        const input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          initialAdornedStart = true;\n        }\n      });\n    }\n    return initialAdornedStart;\n  });\n\n  const [filled, setFilled] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialFilled = false;\n\n    if (children) {\n      React.Children.forEach(children, (child) => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          initialFilled = true;\n        }\n      });\n    }\n\n    return initialFilled;\n  });\n\n  const [_focused, setFocused] = React.useState(false);\n  const focused = visuallyFocused !== undefined ? visuallyFocused : _focused;\n\n  if (disabled && focused) {\n    setFocused(false);\n  }\n\n  let registerEffect;\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const registeredInput = React.useRef(false);\n    registerEffect = () => {\n      if (registeredInput.current) {\n        console.error(\n          [\n            'Material-UI: There are multiple InputBase components inside a FormControl.',\n            'This is not supported. It might cause infinite rendering loops.',\n            'Only use one InputBase.',\n          ].join('\\n'),\n        );\n      }\n\n      registeredInput.current = true;\n      return () => {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  const onFilled = React.useCallback(() => {\n    setFilled(true);\n  }, []);\n\n  const onEmpty = React.useCallback(() => {\n    setFilled(false);\n  }, []);\n\n  const childContext = {\n    adornedStart,\n    setAdornedStart,\n    color,\n    disabled,\n    error,\n    filled,\n    focused,\n    fullWidth,\n    hiddenLabel,\n    margin: (size === 'small' ? 'dense' : undefined) || margin,\n    onBlur: () => {\n      setFocused(false);\n    },\n    onEmpty,\n    onFilled,\n    onFocus: () => {\n      setFocused(true);\n    },\n    registerEffect,\n    required,\n    variant,\n  };\n\n  return (\n    <FormControlContext.Provider value={childContext}>\n      <Component\n        className={clsx(\n          classes.root,\n          {\n            [classes[`margin${capitalize(margin)}`]]: margin !== 'none',\n            [classes.fullWidth]: fullWidth,\n          },\n          className,\n        )}\n        ref={ref}\n        {...other}\n      >\n        {children}\n      </Component>\n    </FormControlContext.Provider>\n  );\n});\n\nFormControl.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The contents of the form control.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes /* @typescript-to-proptypes-ignore */.elementType,\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n  /**\n   * If `true`, the component will be displayed in focused state.\n   */\n  focused: PropTypes.bool,\n  /**\n   * If `true`, the component will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * If `true`, the label will be hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   */\n  hiddenLabel: PropTypes.bool,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n  /**\n   * If `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard']),\n};\n\nexport default withStyles(styles, { name: 'MuiFormControl' })(FormControl);\n"]},"metadata":{},"sourceType":"module"}