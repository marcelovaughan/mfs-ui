{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/ButtonBase/ButtonBase.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport clsx from 'clsx';\nimport { elementTypeAcceptingRef, refType } from \"../../../material-ui-utils/src\";\nimport useForkRef from \"../utils/useForkRef\";\nimport useEventCallback from \"../utils/useEventCallback\";\nimport withStyles from \"../styles/withStyles\";\nimport useIsFocusVisible from \"../utils/useIsFocusVisible\";\nimport TouchRipple from \"./TouchRipple\";\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    textDecoration: 'none',\n    // So we take precedent over the style of a native <a /> element.\n    color: 'inherit',\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    '&$disabled': {\n      pointerEvents: 'none',\n      // Disable link interactions\n      cursor: 'default'\n    },\n    '@media print': {\n      colorAdjust: 'exact'\n    }\n  },\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Pseudo-class applied to the root element if keyboard focused. */\n  focusVisible: {}\n};\n/**\n * `ButtonBase` contains as few styles as possible.\n * It aims to be a simple building block for creating a button.\n * It contains a load of style reset and some focus/ripple logic.\n */\n\nconst ButtonBase = /*#__PURE__*/React.forwardRef(function ButtonBase(props, ref) {\n  const {\n    action,\n    buttonRef: buttonRefProp,\n    centerRipple = false,\n    children,\n    classes,\n    className,\n    component = 'button',\n    disabled = false,\n    disableRipple = false,\n    disableTouchRipple = false,\n    focusRipple = false,\n    focusVisibleClassName,\n    onBlur,\n    onClick,\n    onFocus,\n    onFocusVisible,\n    onKeyDown,\n    onKeyUp,\n    onMouseDown,\n    onMouseLeave,\n    onMouseUp,\n    onTouchEnd,\n    onTouchMove,\n    onTouchStart,\n    onDragLeave,\n    tabIndex = 0,\n    TouchRippleProps,\n    type = 'button'\n  } = props,\n        other = _objectWithoutProperties(props, [\"action\", \"buttonRef\", \"centerRipple\", \"children\", \"classes\", \"className\", \"component\", \"disabled\", \"disableRipple\", \"disableTouchRipple\", \"focusRipple\", \"focusVisibleClassName\", \"onBlur\", \"onClick\", \"onFocus\", \"onFocusVisible\", \"onKeyDown\", \"onKeyUp\", \"onMouseDown\", \"onMouseLeave\", \"onMouseUp\", \"onTouchEnd\", \"onTouchMove\", \"onTouchStart\", \"onDragLeave\", \"tabIndex\", \"TouchRippleProps\", \"type\"]);\n\n  const buttonRef = React.useRef(null);\n\n  function getButtonNode() {\n    // #StrictMode ready\n    return ReactDOM.findDOMNode(buttonRef.current);\n  }\n\n  const rippleRef = React.useRef(null);\n  const [focusVisible, setFocusVisible] = React.useState(false);\n\n  if (disabled && focusVisible) {\n    setFocusVisible(false);\n  }\n\n  const {\n    isFocusVisible,\n    onBlurVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  React.useImperativeHandle(action, () => ({\n    focusVisible: () => {\n      setFocusVisible(true);\n      buttonRef.current.focus();\n    }\n  }), []);\n  React.useEffect(() => {\n    if (focusVisible && focusRipple && !disableRipple) {\n      rippleRef.current.pulsate();\n    }\n  }, [disableRipple, focusRipple, focusVisible]);\n\n  function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {\n    return useEventCallback(event => {\n      if (eventCallback) {\n        eventCallback(event);\n      }\n\n      const ignore = skipRippleAction;\n\n      if (!ignore && rippleRef.current) {\n        rippleRef.current[rippleAction](event);\n      }\n\n      return true;\n    });\n  }\n\n  const handleMouseDown = useRippleHandler('start', onMouseDown);\n  const handleDragLeave = useRippleHandler('stop', onDragLeave);\n  const handleMouseUp = useRippleHandler('stop', onMouseUp);\n  const handleMouseLeave = useRippleHandler('stop', event => {\n    if (focusVisible) {\n      event.preventDefault();\n    }\n\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n  });\n  const handleTouchStart = useRippleHandler('start', onTouchStart);\n  const handleTouchEnd = useRippleHandler('stop', onTouchEnd);\n  const handleTouchMove = useRippleHandler('stop', onTouchMove);\n  const handleBlur = useRippleHandler('stop', event => {\n    if (focusVisible) {\n      onBlurVisible(event);\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  }, false);\n  const handleFocus = useEventCallback(event => {\n    // Fix for https://github.com/facebook/react/issues/7769\n    if (!buttonRef.current) {\n      buttonRef.current = event.currentTarget;\n    }\n\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n\n      if (onFocusVisible) {\n        onFocusVisible(event);\n      }\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  });\n\n  const isNonNativeButton = () => {\n    const button = getButtonNode();\n    return component && component !== 'button' && !(button.tagName === 'A' && button.href);\n  };\n  /**\n   * IE 11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat\n   */\n\n\n  const keydownRef = React.useRef(false);\n  const handleKeyDown = useEventCallback(event => {\n    // Check if key is already down to avoid repeats being counted as multiple activations\n    if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {\n      keydownRef.current = true;\n      event.persist();\n      rippleRef.current.stop(event, () => {\n        rippleRef.current.start(event);\n      });\n    }\n\n    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {\n      event.preventDefault();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    } // Keyboard accessibility for non interactive elements\n\n\n    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {\n      event.preventDefault();\n\n      if (onClick) {\n        onClick(event);\n      }\n    }\n  });\n  const handleKeyUp = useEventCallback(event => {\n    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed\n    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0\n    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {\n      keydownRef.current = false;\n      event.persist();\n      rippleRef.current.stop(event, () => {\n        rippleRef.current.pulsate(event);\n      });\n    }\n\n    if (onKeyUp) {\n      onKeyUp(event);\n    } // Keyboard accessibility for non interactive elements\n\n\n    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {\n      onClick(event);\n    }\n  });\n  let ComponentProp = component;\n\n  if (ComponentProp === 'button' && other.href) {\n    ComponentProp = 'a';\n  }\n\n  const buttonProps = {};\n\n  if (ComponentProp === 'button') {\n    buttonProps.type = type;\n    buttonProps.disabled = disabled;\n  } else {\n    if (ComponentProp !== 'a' || !other.href) {\n      buttonProps.role = 'button';\n    }\n\n    buttonProps['aria-disabled'] = disabled;\n  }\n\n  const handleUserRef = useForkRef(buttonRefProp, ref);\n  const handleOwnRef = useForkRef(focusVisibleRef, buttonRef);\n  const handleRef = useForkRef(handleUserRef, handleOwnRef);\n  const [mountedState, setMountedState] = React.useState(false);\n  React.useEffect(() => {\n    setMountedState(true);\n  }, []);\n  const enableTouchRipple = mountedState && !disableRipple && !disabled;\n\n  if (true) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (enableTouchRipple && !rippleRef.current) {\n        console.error(['Material-UI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\\n'));\n      }\n    }, [enableTouchRipple]);\n  }\n\n  return __jsx(ComponentProp, _extends({\n    className: clsx(classes.root, className, focusVisible && [classes.focusVisible, focusVisibleClassName], disabled && classes.disabled),\n    onBlur: handleBlur,\n    onClick: onClick,\n    onFocus: handleFocus,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onMouseDown: handleMouseDown,\n    onMouseLeave: handleMouseLeave,\n    onMouseUp: handleMouseUp,\n    onDragLeave: handleDragLeave,\n    onTouchEnd: handleTouchEnd,\n    onTouchMove: handleTouchMove,\n    onTouchStart: handleTouchStart,\n    ref: handleRef,\n    tabIndex: disabled ? -1 : tabIndex\n  }, buttonProps, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 5\n    }\n  }), children, enableTouchRipple ?\n  /* TouchRipple is only needed client-side, x2 boost on the server. */\n  __jsx(TouchRipple, _extends({\n    ref: rippleRef,\n    center: centerRipple\n  }, TouchRippleProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 9\n    }\n  })) : null);\n});\nButtonBase.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A ref for imperative actions.\n   * It currently only supports `focusVisible()` action.\n   */\n  action: refType,\n\n  /**\n   * @ignore\n   *\n   * Use that prop to pass a ref to the native button component.\n   * @deprecated Use `ref` instead.\n   */\n  buttonRef: refType,\n\n  /**\n   * If `true`, the ripples will be centered.\n   * They won't start at the cursor interaction position.\n   */\n  centerRipple: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n\n  /**\n   * If `true`, the base button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `focusVisibleClassName`.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the touch ripple effect will be disabled.\n   */\n  disableTouchRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the base button will have a keyboard focus ripple.\n   */\n  focusRipple: PropTypes.bool,\n\n  /**\n   * This prop can help a person know which element has the keyboard focus.\n   * The class name will be applied when the element gain the focus through a keyboard interaction.\n   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\n   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).\n   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\n   * if needed.\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  href: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onDragLeave: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback fired when the component is focused with a keyboard.\n   * We trigger a `onFocus` callback too.\n   */\n  onFocusVisible: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseUp: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onTouchEnd: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onTouchMove: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onTouchStart: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Props applied to the `TouchRipple` element.\n   */\n  TouchRippleProps: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  type: PropTypes.oneOfType([PropTypes.oneOf(['button', 'reset', 'submit']), PropTypes.string])\n};\nexport default withStyles(styles, {\n  name: 'MuiButtonBase'\n})(ButtonBase);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/ButtonBase/ButtonBase.js"],"names":["React","PropTypes","ReactDOM","clsx","elementTypeAcceptingRef","refType","useForkRef","useEventCallback","withStyles","useIsFocusVisible","TouchRipple","styles","root","display","alignItems","justifyContent","position","WebkitTapHighlightColor","backgroundColor","outline","border","margin","borderRadius","padding","cursor","userSelect","verticalAlign","textDecoration","color","borderStyle","pointerEvents","colorAdjust","disabled","focusVisible","ButtonBase","forwardRef","props","ref","action","buttonRef","buttonRefProp","centerRipple","children","classes","className","component","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type","other","useRef","getButtonNode","findDOMNode","current","rippleRef","setFocusVisible","useState","isFocusVisible","onBlurVisible","focusVisibleRef","useImperativeHandle","focus","useEffect","pulsate","useRippleHandler","rippleAction","eventCallback","skipRippleAction","event","ignore","handleMouseDown","handleDragLeave","handleMouseUp","handleMouseLeave","preventDefault","handleTouchStart","handleTouchEnd","handleTouchMove","handleBlur","handleFocus","currentTarget","isNonNativeButton","button","tagName","href","keydownRef","handleKeyDown","key","persist","stop","start","target","handleKeyUp","defaultPrevented","ComponentProp","buttonProps","role","handleUserRef","handleOwnRef","handleRef","mountedState","setMountedState","enableTouchRipple","console","error","join","propTypes","bool","node","object","string","func","oneOfType","number","oneOf","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport clsx from 'clsx';\nimport { elementTypeAcceptingRef, refType } from '@material-ui/utils';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport withStyles from '../styles/withStyles';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport TouchRipple from './TouchRipple';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent', // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0, // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0, // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none', // Reset\n    '-webkit-appearance': 'none', // Reset\n    textDecoration: 'none',\n    // So we take precedent over the style of a native <a /> element.\n    color: 'inherit',\n    '&::-moz-focus-inner': {\n      borderStyle: 'none', // Remove Firefox dotted outline.\n    },\n    '&$disabled': {\n      pointerEvents: 'none', // Disable link interactions\n      cursor: 'default',\n    },\n    '@media print': {\n      colorAdjust: 'exact',\n    },\n  },\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Pseudo-class applied to the root element if keyboard focused. */\n  focusVisible: {},\n};\n\n/**\n * `ButtonBase` contains as few styles as possible.\n * It aims to be a simple building block for creating a button.\n * It contains a load of style reset and some focus/ripple logic.\n */\nconst ButtonBase = React.forwardRef(function ButtonBase(props, ref) {\n  const {\n    action,\n    buttonRef: buttonRefProp,\n    centerRipple = false,\n    children,\n    classes,\n    className,\n    component = 'button',\n    disabled = false,\n    disableRipple = false,\n    disableTouchRipple = false,\n    focusRipple = false,\n    focusVisibleClassName,\n    onBlur,\n    onClick,\n    onFocus,\n    onFocusVisible,\n    onKeyDown,\n    onKeyUp,\n    onMouseDown,\n    onMouseLeave,\n    onMouseUp,\n    onTouchEnd,\n    onTouchMove,\n    onTouchStart,\n    onDragLeave,\n    tabIndex = 0,\n    TouchRippleProps,\n    type = 'button',\n    ...other\n  } = props;\n\n  const buttonRef = React.useRef(null);\n  function getButtonNode() {\n    // #StrictMode ready\n    return ReactDOM.findDOMNode(buttonRef.current);\n  }\n\n  const rippleRef = React.useRef(null);\n\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  if (disabled && focusVisible) {\n    setFocusVisible(false);\n  }\n  const { isFocusVisible, onBlurVisible, ref: focusVisibleRef } = useIsFocusVisible();\n\n  React.useImperativeHandle(\n    action,\n    () => ({\n      focusVisible: () => {\n        setFocusVisible(true);\n        buttonRef.current.focus();\n      },\n    }),\n    [],\n  );\n\n  React.useEffect(() => {\n    if (focusVisible && focusRipple && !disableRipple) {\n      rippleRef.current.pulsate();\n    }\n  }, [disableRipple, focusRipple, focusVisible]);\n\n  function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {\n    return useEventCallback((event) => {\n      if (eventCallback) {\n        eventCallback(event);\n      }\n\n      const ignore = skipRippleAction;\n      if (!ignore && rippleRef.current) {\n        rippleRef.current[rippleAction](event);\n      }\n\n      return true;\n    });\n  }\n\n  const handleMouseDown = useRippleHandler('start', onMouseDown);\n  const handleDragLeave = useRippleHandler('stop', onDragLeave);\n  const handleMouseUp = useRippleHandler('stop', onMouseUp);\n  const handleMouseLeave = useRippleHandler('stop', (event) => {\n    if (focusVisible) {\n      event.preventDefault();\n    }\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n  });\n  const handleTouchStart = useRippleHandler('start', onTouchStart);\n  const handleTouchEnd = useRippleHandler('stop', onTouchEnd);\n  const handleTouchMove = useRippleHandler('stop', onTouchMove);\n  const handleBlur = useRippleHandler(\n    'stop',\n    (event) => {\n      if (focusVisible) {\n        onBlurVisible(event);\n        setFocusVisible(false);\n      }\n      if (onBlur) {\n        onBlur(event);\n      }\n    },\n    false,\n  );\n\n  const handleFocus = useEventCallback((event) => {\n    // Fix for https://github.com/facebook/react/issues/7769\n    if (!buttonRef.current) {\n      buttonRef.current = event.currentTarget;\n    }\n\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n\n      if (onFocusVisible) {\n        onFocusVisible(event);\n      }\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  });\n\n  const isNonNativeButton = () => {\n    const button = getButtonNode();\n    return component && component !== 'button' && !(button.tagName === 'A' && button.href);\n  };\n\n  /**\n   * IE 11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat\n   */\n  const keydownRef = React.useRef(false);\n  const handleKeyDown = useEventCallback((event) => {\n    // Check if key is already down to avoid repeats being counted as multiple activations\n    if (\n      focusRipple &&\n      !keydownRef.current &&\n      focusVisible &&\n      rippleRef.current &&\n      event.key === ' '\n    ) {\n      keydownRef.current = true;\n      event.persist();\n      rippleRef.current.stop(event, () => {\n        rippleRef.current.start(event);\n      });\n    }\n\n    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {\n      event.preventDefault();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    // Keyboard accessibility for non interactive elements\n    if (\n      event.target === event.currentTarget &&\n      isNonNativeButton() &&\n      event.key === 'Enter' &&\n      !disabled\n    ) {\n      event.preventDefault();\n      if (onClick) {\n        onClick(event);\n      }\n    }\n  });\n\n  const handleKeyUp = useEventCallback((event) => {\n    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed\n    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0\n    if (\n      focusRipple &&\n      event.key === ' ' &&\n      rippleRef.current &&\n      focusVisible &&\n      !event.defaultPrevented\n    ) {\n      keydownRef.current = false;\n      event.persist();\n      rippleRef.current.stop(event, () => {\n        rippleRef.current.pulsate(event);\n      });\n    }\n    if (onKeyUp) {\n      onKeyUp(event);\n    }\n\n    // Keyboard accessibility for non interactive elements\n    if (\n      onClick &&\n      event.target === event.currentTarget &&\n      isNonNativeButton() &&\n      event.key === ' ' &&\n      !event.defaultPrevented\n    ) {\n      onClick(event);\n    }\n  });\n\n  let ComponentProp = component;\n\n  if (ComponentProp === 'button' && other.href) {\n    ComponentProp = 'a';\n  }\n\n  const buttonProps = {};\n  if (ComponentProp === 'button') {\n    buttonProps.type = type;\n    buttonProps.disabled = disabled;\n  } else {\n    if (ComponentProp !== 'a' || !other.href) {\n      buttonProps.role = 'button';\n    }\n    buttonProps['aria-disabled'] = disabled;\n  }\n\n  const handleUserRef = useForkRef(buttonRefProp, ref);\n  const handleOwnRef = useForkRef(focusVisibleRef, buttonRef);\n  const handleRef = useForkRef(handleUserRef, handleOwnRef);\n\n  const [mountedState, setMountedState] = React.useState(false);\n\n  React.useEffect(() => {\n    setMountedState(true);\n  }, []);\n\n  const enableTouchRipple = mountedState && !disableRipple && !disabled;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (enableTouchRipple && !rippleRef.current) {\n        console.error(\n          [\n            'Material-UI: The `component` prop provided to ButtonBase is invalid.',\n            'Please make sure the children prop is rendered in this custom component.',\n          ].join('\\n'),\n        );\n      }\n    }, [enableTouchRipple]);\n  }\n\n  return (\n    <ComponentProp\n      className={clsx(\n        classes.root,\n        {\n          [classes.disabled]: disabled,\n          [classes.focusVisible]: focusVisible,\n          [focusVisibleClassName]: focusVisible,\n        },\n        className,\n      )}\n      onBlur={handleBlur}\n      onClick={onClick}\n      onFocus={handleFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onMouseDown={handleMouseDown}\n      onMouseLeave={handleMouseLeave}\n      onMouseUp={handleMouseUp}\n      onDragLeave={handleDragLeave}\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n      onTouchStart={handleTouchStart}\n      ref={handleRef}\n      tabIndex={disabled ? -1 : tabIndex}\n      {...buttonProps}\n      {...other}\n    >\n      {children}\n      {enableTouchRipple ? (\n        /* TouchRipple is only needed client-side, x2 boost on the server. */\n        <TouchRipple ref={rippleRef} center={centerRipple} {...TouchRippleProps} />\n      ) : null}\n    </ComponentProp>\n  );\n});\n\nButtonBase.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * A ref for imperative actions.\n   * It currently only supports `focusVisible()` action.\n   */\n  action: refType,\n  /**\n   * @ignore\n   *\n   * Use that prop to pass a ref to the native button component.\n   * @deprecated Use `ref` instead.\n   */\n  buttonRef: refType,\n  /**\n   * If `true`, the ripples will be centered.\n   * They won't start at the cursor interaction position.\n   */\n  centerRipple: PropTypes.bool,\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n  /**\n   * If `true`, the base button will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect will be disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `focusVisibleClassName`.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If `true`, the touch ripple effect will be disabled.\n   */\n  disableTouchRipple: PropTypes.bool,\n  /**\n   * If `true`, the base button will have a keyboard focus ripple.\n   */\n  focusRipple: PropTypes.bool,\n  /**\n   * This prop can help a person know which element has the keyboard focus.\n   * The class name will be applied when the element gain the focus through a keyboard interaction.\n   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\n   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).\n   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\n   * if needed.\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * @ignore\n   */\n  href: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onDragLeave: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Callback fired when the component is focused with a keyboard.\n   * We trigger a `onFocus` callback too.\n   */\n  onFocusVisible: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseUp: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onTouchEnd: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onTouchMove: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onTouchStart: PropTypes.func,\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Props applied to the `TouchRipple` element.\n   */\n  TouchRippleProps: PropTypes.object,\n  /**\n   * @ignore\n   */\n  type: PropTypes.oneOfType([PropTypes.oneOf(['button', 'reset', 'submit']), PropTypes.string]),\n};\n\nexport default withStyles(styles, { name: 'MuiButtonBase' })(ButtonBase);\n"]},"metadata":{},"sourceType":"module"}