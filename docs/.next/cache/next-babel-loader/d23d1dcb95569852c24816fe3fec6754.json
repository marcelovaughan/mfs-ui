{"ast":null,"code":"import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"../../../material-ui-utils/src\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from \"./cssUtils\";\nexport default function responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = ['sm', 'md', 'lg'],\n    disableAlign = false,\n    factor = 2,\n    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']\n  } = options;\n\n  const theme = _objectSpread({}, themeInput);\n\n  theme.typography = _objectSpread({}, theme.typography);\n  const typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  const convert = convertLength(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);\n  variants.forEach(variant => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n    let {\n      lineHeight\n    } = style;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(true ? `Material-UI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.` : _formatMuiErrorMessage(6));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    let transform = null;\n\n    if (!disableAlign) {\n      transform = value => alignProperty({\n        size: value,\n        grid: fontGrid({\n          pixels: 4,\n          lineHeight,\n          htmlFontSize: typography.htmlFontSize\n        })\n      });\n    }\n\n    typography[variant] = _objectSpread(_objectSpread({}, style), responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform\n    }));\n  });\n  return theme;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/styles/responsiveFontSizes.js"],"names":["isUnitless","convertLength","responsiveProperty","alignProperty","fontGrid","responsiveFontSizes","themeInput","options","breakpoints","disableAlign","factor","variants","theme","typography","convert","htmlFontSize","breakpointValues","map","x","values","forEach","variant","style","remFontSize","parseFloat","fontSize","maxFontSize","minFontSize","lineHeight","transform","value","size","grid","pixels","cssProperty","min","max","unit"],"mappings":";;;;;;;;AACA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,kBAApC,EAAwDC,aAAxD,EAAuEC,QAAvE;AAEA,eAAe,SAASC,mBAAT,CAA6BC,UAA7B,EAAyCC,OAAO,GAAG,EAAnD,EAAuD;AACpE,QAAM;AACJC,IAAAA,WAAW,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CADV;AAEJC,IAAAA,YAAY,GAAG,KAFX;AAGJC,IAAAA,MAAM,GAAG,CAHL;AAIJC,IAAAA,QAAQ,GAAG,CACT,IADS,EAET,IAFS,EAGT,IAHS,EAIT,IAJS,EAKT,IALS,EAMT,IANS,EAOT,WAPS,EAQT,WARS,EAST,OATS,EAUT,OAVS,EAWT,SAXS,EAYT,QAZS,EAaT,UAbS;AAJP,MAmBFJ,OAnBJ;;AAqBA,QAAMK,KAAK,qBAAQN,UAAR,CAAX;;AACAM,EAAAA,KAAK,CAACC,UAAN,qBAAwBD,KAAK,CAACC,UAA9B;AACA,QAAMA,UAAU,GAAGD,KAAK,CAACC,UAAzB,CAxBoE,CA0BpE;AACA;;AACA,QAAMC,OAAO,GAAGb,aAAa,CAACY,UAAU,CAACE,YAAZ,CAA7B;AACA,QAAMC,gBAAgB,GAAGR,WAAW,CAACS,GAAZ,CAAiBC,CAAD,IAAON,KAAK,CAACJ,WAAN,CAAkBW,MAAlB,CAAyBD,CAAzB,CAAvB,CAAzB;AAEAP,EAAAA,QAAQ,CAACS,OAAT,CAAkBC,OAAD,IAAa;AAC5B,UAAMC,KAAK,GAAGT,UAAU,CAACQ,OAAD,CAAxB;AACA,UAAME,WAAW,GAAGC,UAAU,CAACV,OAAO,CAACQ,KAAK,CAACG,QAAP,EAAiB,KAAjB,CAAR,CAA9B;;AAEA,QAAIF,WAAW,IAAI,CAAnB,EAAsB;AACpB;AACD;;AAED,UAAMG,WAAW,GAAGH,WAApB;AACA,UAAMI,WAAW,GAAG,IAAI,CAACD,WAAW,GAAG,CAAf,IAAoBhB,MAA5C;AAEA,QAAI;AAAEkB,MAAAA;AAAF,QAAiBN,KAArB;;AAEA,QAAI,CAACtB,UAAU,CAAC4B,UAAD,CAAX,IAA2B,CAACnB,YAAhC,EAA8C;AAC5C;mCAAA;AAID;;AAED,QAAI,CAACT,UAAU,CAAC4B,UAAD,CAAf,EAA6B;AAC3B;AACAA,MAAAA,UAAU,GAAGJ,UAAU,CAACV,OAAO,CAACc,UAAD,EAAa,KAAb,CAAR,CAAV,GAAyCJ,UAAU,CAACD,WAAD,CAAhE;AACD;;AAED,QAAIM,SAAS,GAAG,IAAhB;;AAEA,QAAI,CAACpB,YAAL,EAAmB;AACjBoB,MAAAA,SAAS,GAAIC,KAAD,IACV3B,aAAa,CAAC;AACZ4B,QAAAA,IAAI,EAAED,KADM;AAEZE,QAAAA,IAAI,EAAE5B,QAAQ,CAAC;AAAE6B,UAAAA,MAAM,EAAE,CAAV;AAAaL,UAAAA,UAAb;AAAyBb,UAAAA,YAAY,EAAEF,UAAU,CAACE;AAAlD,SAAD;AAFF,OAAD,CADf;AAKD;;AAEDF,IAAAA,UAAU,CAACQ,OAAD,CAAV,mCACKC,KADL,GAEKpB,kBAAkB,CAAC;AACpBgC,MAAAA,WAAW,EAAE,UADO;AAEpBC,MAAAA,GAAG,EAAER,WAFe;AAGpBS,MAAAA,GAAG,EAAEV,WAHe;AAIpBW,MAAAA,IAAI,EAAE,KAJc;AAKpB7B,MAAAA,WAAW,EAAEQ,gBALO;AAMpBa,MAAAA;AANoB,KAAD,CAFvB;AAWD,GA9CD;AAgDA,SAAOjB,KAAP;AACD","sourcesContent":["import MuiError from '@material-ui/utils/macros/MuiError.macro';\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from './cssUtils';\n\nexport default function responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = ['sm', 'md', 'lg'],\n    disableAlign = false,\n    factor = 2,\n    variants = [\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'h5',\n      'h6',\n      'subtitle1',\n      'subtitle2',\n      'body1',\n      'body2',\n      'caption',\n      'button',\n      'overline',\n    ],\n  } = options;\n\n  const theme = { ...themeInput };\n  theme.typography = { ...theme.typography };\n  const typography = theme.typography;\n\n  // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n  const convert = convertLength(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map((x) => theme.breakpoints.values[x]);\n\n  variants.forEach((variant) => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n\n    let { lineHeight } = style;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new MuiError(\n        'Material-UI: Unsupported non-unitless line height with grid alignment.\\n' +\n          'Use unitless line heights instead.',\n      );\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    let transform = null;\n\n    if (!disableAlign) {\n      transform = (value) =>\n        alignProperty({\n          size: value,\n          grid: fontGrid({ pixels: 4, lineHeight, htmlFontSize: typography.htmlFontSize }),\n        });\n    }\n\n    typography[variant] = {\n      ...style,\n      ...responsiveProperty({\n        cssProperty: 'fontSize',\n        min: minFontSize,\n        max: maxFontSize,\n        unit: 'rem',\n        breakpoints: breakpointValues,\n        transform,\n      }),\n    };\n  });\n\n  return theme;\n}\n"]},"metadata":{},"sourceType":"module"}