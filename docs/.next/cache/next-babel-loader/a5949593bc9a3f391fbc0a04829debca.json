{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport requirePropFactory from \"../utils/requirePropFactory\";\nconst SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nfunction generateGrid(globalStyles, theme, breakpoint) {\n  const styles = {};\n  GRID_SIZES.forEach(size => {\n    const key = `grid-${breakpoint}-${size}`;\n\n    if (size === true) {\n      // For the auto layouting\n      styles[key] = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n      return;\n    }\n\n    if (size === 'auto') {\n      styles[key] = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        maxWidth: 'none'\n      };\n      return;\n    } // Keep 7 significant numbers.\n\n\n    const width = `${Math.round(size / 12 * 10e7) / 10e5}%`; // Close to the bootstrap implementation:\n    // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n\n    styles[key] = {\n      flexBasis: width,\n      flexGrow: 0,\n      maxWidth: width\n    };\n  }); // No need for a media query for the first size.\n\n  if (breakpoint === 'xs') {\n    _extends(globalStyles, styles);\n  } else {\n    globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n  }\n}\n\nfunction getOffset(val, div = 1) {\n  const parse = parseFloat(val);\n  return `${parse / div}${String(val).replace(String(parse), '') || 'px'}`;\n}\n\nfunction generateGutter(theme, breakpoint) {\n  const styles = {};\n  SPACINGS.forEach(spacing => {\n    const themeSpacing = theme.spacing(spacing);\n\n    if (themeSpacing === 0) {\n      return;\n    }\n\n    styles[`spacing-${breakpoint}-${spacing}`] = {\n      margin: `-${getOffset(themeSpacing, 2)}`,\n      width: `calc(100% + ${getOffset(themeSpacing)})`,\n      '& > $item': {\n        padding: getOffset(themeSpacing, 2)\n      }\n    };\n  });\n  return styles;\n} // Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\n\n\nexport const styles = theme => _objectSpread(_objectSpread({\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `container={true}`. */\n  container: {\n    boxSizing: 'border-box',\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%'\n  },\n\n  /* Styles applied to the root element if `item={true}`. */\n  item: {\n    boxSizing: 'border-box',\n    margin: '0' // For instance, it's useful when used with a `figure` element.\n\n  },\n\n  /* Styles applied to the root element if `zeroMinWidth={true}`. */\n  zeroMinWidth: {\n    minWidth: 0\n  },\n\n  /* Styles applied to the root element if `direction=\"column\"`. */\n  'direction-xs-column': {\n    flexDirection: 'column'\n  },\n\n  /* Styles applied to the root element if `direction=\"column-reverse\"`. */\n  'direction-xs-column-reverse': {\n    flexDirection: 'column-reverse'\n  },\n\n  /* Styles applied to the root element if `direction=\"row-reverse\"`. */\n  'direction-xs-row-reverse': {\n    flexDirection: 'row-reverse'\n  },\n\n  /* Styles applied to the root element if `wrap=\"nowrap\"`. */\n  'wrap-xs-nowrap': {\n    flexWrap: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `wrap=\"reverse\"`. */\n  'wrap-xs-wrap-reverse': {\n    flexWrap: 'wrap-reverse'\n  },\n\n  /* Styles applied to the root element if `alignItems=\"center\"`. */\n  'align-items-xs-center': {\n    alignItems: 'center'\n  },\n\n  /* Styles applied to the root element if `alignItems=\"flex-start\"`. */\n  'align-items-xs-flex-start': {\n    alignItems: 'flex-start'\n  },\n\n  /* Styles applied to the root element if `alignItems=\"flex-end\"`. */\n  'align-items-xs-flex-end': {\n    alignItems: 'flex-end'\n  },\n\n  /* Styles applied to the root element if `alignItems=\"baseline\"`. */\n  'align-items-xs-baseline': {\n    alignItems: 'baseline'\n  },\n\n  /* Styles applied to the root element if `alignContent=\"center\"`. */\n  'align-content-xs-center': {\n    alignContent: 'center'\n  },\n\n  /* Styles applied to the root element if `alignContent=\"flex-start\"`. */\n  'align-content-xs-flex-start': {\n    alignContent: 'flex-start'\n  },\n\n  /* Styles applied to the root element if `alignContent=\"flex-end\"`. */\n  'align-content-xs-flex-end': {\n    alignContent: 'flex-end'\n  },\n\n  /* Styles applied to the root element if `alignContent=\"space-between\"`. */\n  'align-content-xs-space-between': {\n    alignContent: 'space-between'\n  },\n\n  /* Styles applied to the root element if `alignContent=\"space-around\"`. */\n  'align-content-xs-space-around': {\n    alignContent: 'space-around'\n  },\n\n  /* Styles applied to the root element if `justify=\"center\"`. */\n  'justify-xs-center': {\n    justifyContent: 'center'\n  },\n\n  /* Styles applied to the root element if `justify=\"flex-end\"`. */\n  'justify-xs-flex-end': {\n    justifyContent: 'flex-end'\n  },\n\n  /* Styles applied to the root element if `justify=\"space-between\"`. */\n  'justify-xs-space-between': {\n    justifyContent: 'space-between'\n  },\n\n  /* Styles applied to the root element if `justify=\"space-around\"`. */\n  'justify-xs-space-around': {\n    justifyContent: 'space-around'\n  },\n\n  /* Styles applied to the root element if `justify=\"space-evenly\"`. */\n  'justify-xs-space-evenly': {\n    justifyContent: 'space-evenly'\n  }\n}, generateGutter(theme, 'xs')), theme.breakpoints.keys.reduce((accumulator, key) => {\n  // Use side effect over immutability for better performance.\n  generateGrid(accumulator, theme, key);\n  return accumulator;\n}, {}));\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(props, ref) {\n  const {\n    alignContent = 'stretch',\n    alignItems = 'stretch',\n    classes,\n    className: classNameProp,\n    component: Component = 'div',\n    container = false,\n    direction = 'row',\n    item = false,\n    justify = 'flex-start',\n    lg = false,\n    md = false,\n    sm = false,\n    spacing = 0,\n    wrap = 'wrap',\n    xl = false,\n    xs = false,\n    zeroMinWidth = false\n  } = props,\n        other = _objectWithoutProperties(props, [\"alignContent\", \"alignItems\", \"classes\", \"className\", \"component\", \"container\", \"direction\", \"item\", \"justify\", \"lg\", \"md\", \"sm\", \"spacing\", \"wrap\", \"xl\", \"xs\", \"zeroMinWidth\"]);\n\n  const className = clsx(classes.root, classNameProp, container && [classes.container, spacing !== 0 && classes[`spacing-xs-${String(spacing)}`]], item && classes.item, zeroMinWidth && classes.zeroMinWidth, direction !== 'row' && classes[`direction-xs-${String(direction)}`], wrap !== 'wrap' && classes[`wrap-xs-${String(wrap)}`], alignItems !== 'stretch' && classes[`align-items-xs-${String(alignItems)}`], alignContent !== 'stretch' && classes[`align-content-xs-${String(alignContent)}`], justify !== 'flex-start' && classes[`justify-xs-${String(justify)}`], xs !== false && classes[`grid-xs-${String(xs)}`], sm !== false && classes[`grid-sm-${String(sm)}`], md !== false && classes[`grid-md-${String(md)}`], lg !== false && classes[`grid-lg-${String(lg)}`], xl !== false && classes[`grid-xl-${String(xl)}`]);\n  return __jsx(Component, _extends({\n    className: className,\n    ref: ref\n  }, other));\n});\nconst StyledGrid = withStyles(styles, {\n  name: 'MuiGrid'\n})(Grid);\n\nif (false) {\n  const requireProp = requirePropFactory('Grid');\n  StyledGrid.propTypes = _objectSpread(_objectSpread({}, StyledGrid.propTypes), {}, {\n    alignContent: requireProp('container'),\n    alignItems: requireProp('container'),\n    direction: requireProp('container'),\n    justify: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\n\nexport default StyledGrid;","map":null,"metadata":{},"sourceType":"module"}