{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n\n/* eslint-disable no-underscore-dangle */\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport optionsReducer from \"./optionsReducer\";\nimport notificationsReducer from \"./notificationsReducer\";\nimport { createLogger } from 'redux-logger'; // Get the Redux DevTools extension and fallback to a no-op function\n\nvar devtools = function devtools(x) {\n  return x;\n};\n\nif (true && true && window.__REDUX_DEVTOOLS_EXTENSION__) {\n  devtools = window.__REDUX_DEVTOOLS_EXTENSION__();\n}\n\nexport default function create(initialState) {\n  var middleware = [];\n\n  if (true && true && !window.__REDUX_DEVTOOLS_EXTENSION__ && // redux-logger needs this feature\n  Object.hasOwnProperty('assign')) {\n    middleware = [].concat(_toConsumableArray(middleware), [createLogger()]);\n  }\n\n  return createStore(combineReducers({\n    options: optionsReducer,\n    notifications: notificationsReducer\n  }), initialState, // Hydrate the store with server-side data\n  compose(applyMiddleware.apply(void 0, _toConsumableArray(middleware)), devtools));\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/redux/initRedux.js"],"names":["createStore","combineReducers","applyMiddleware","compose","optionsReducer","notificationsReducer","createLogger","devtools","x","window","__REDUX_DEVTOOLS_EXTENSION__","create","initialState","middleware","Object","hasOwnProperty","options","notifications"],"mappings":";;AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,cAAP;AACA,OAAOC,oBAAP;AACA,SAASC,YAAT,QAA6B,cAA7B,C,CAEA;;AACA,IAAIC,QAAQ,GAAG,kBAACC,CAAD;AAAA,SAAOA,CAAP;AAAA,CAAf;;AAEA,IACE,gBAEAC,MAAM,CAACC,4BAHT,EAIE;AACAH,EAAAA,QAAQ,GAAGE,MAAM,CAACC,4BAAP,EAAX;AACD;;AAED,eAAe,SAASC,MAAT,CAAgBC,YAAhB,EAA8B;AAC3C,MAAIC,UAAU,GAAG,EAAjB;;AAEA,MACE,gBAEA,CAACJ,MAAM,CAACC,4BAFR,IAGA;AACAI,EAAAA,MAAM,CAACC,cAAP,CAAsB,QAAtB,CALF,EAME;AACAF,IAAAA,UAAU,gCAAOA,UAAP,IAAmBP,YAAY,EAA/B,EAAV;AACD;;AAED,SAAON,WAAW,CAChBC,eAAe,CAAC;AACde,IAAAA,OAAO,EAAEZ,cADK;AAEda,IAAAA,aAAa,EAAEZ;AAFD,GAAD,CADC,EAKhBO,YALgB,EAKF;AACdT,EAAAA,OAAO,CAACD,eAAe,MAAf,4BAAmBW,UAAnB,EAAD,EAAiCN,QAAjC,CANS,CAAlB;AAQD","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport optionsReducer from 'docs/src/modules/redux/optionsReducer';\nimport notificationsReducer from 'docs/src/modules/redux/notificationsReducer';\nimport { createLogger } from 'redux-logger';\n\n// Get the Redux DevTools extension and fallback to a no-op function\nlet devtools = (x) => x;\n\nif (\n  process.env.NODE_ENV !== 'production' &&\n  process.browser &&\n  window.__REDUX_DEVTOOLS_EXTENSION__\n) {\n  devtools = window.__REDUX_DEVTOOLS_EXTENSION__();\n}\n\nexport default function create(initialState) {\n  let middleware = [];\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    process.browser &&\n    !window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    // redux-logger needs this feature\n    Object.hasOwnProperty('assign')\n  ) {\n    middleware = [...middleware, createLogger()];\n  }\n\n  return createStore(\n    combineReducers({\n      options: optionsReducer,\n      notifications: notificationsReducer,\n    }),\n    initialState, // Hydrate the store with server-side data\n    compose(applyMiddleware(...middleware), devtools),\n  );\n}\n"]},"metadata":{},"sourceType":"module"}