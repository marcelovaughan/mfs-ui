{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-lab/src/LoadingButton/LoadingButton.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from \"../../../material-ui-utils/src\";\nimport { capitalize } from \"../../../material-ui/src/utils\";\nimport { withStyles } from \"../../../material-ui/src/styles\";\nimport Button from \"../../../material-ui/src/Button\";\nimport CircularProgress from \"../../../material-ui/src/CircularProgress\";\nexport var styles = function styles() {\n  return {\n    /* Styles applied to the root element. */\n    root: {},\n\n    /* Styles applied to the root element if `pending={true}`. */\n    pending: {},\n\n    /* Styles applied to the pendingIndicator element. */\n    pendingIndicator: {\n      position: 'absolute',\n      visibility: 'visible',\n      display: 'flex'\n    },\n\n    /* Styles applied to the pendingIndicator element if `pendingPosition=\"center\"`. */\n    pendingIndicatorCenter: {\n      left: '50%',\n      transform: 'translate(-50%)'\n    },\n\n    /* Styles applied to the pendingIndicator element if `pendingPosition=\"start\"`. */\n    pendingIndicatorStart: {\n      left: 14\n    },\n\n    /* Styles applied to the pendingIndicator element if `pendingPosition=\"end\"`. */\n    pendingIndicatorEnd: {\n      right: 14\n    },\n\n    /* Styles applied to the endIcon element if `pending={true}` and `pendingPosition=\"end\"`. */\n    endIconPendingEnd: {\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the startIcon element if `pending={true}` and `pendingPosition=\"start\"`. */\n    startIconPendingStart: {\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the label element if `pending={true}` and `pendingPosition=\"center\"`. */\n    labelPendingCenter: {\n      visibility: 'hidden'\n    }\n  };\n};\n\nvar PendingIndicator = __jsx(CircularProgress, {\n  color: \"inherit\",\n  size: 16,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 26\n  }\n});\n\nvar LoadingButton = /*#__PURE__*/React.forwardRef(function LoadingButton(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$pending = props.pending,\n      pending = _props$pending === void 0 ? false : _props$pending,\n      _props$pendingIndicat = props.pendingIndicator,\n      pendingIndicator = _props$pendingIndicat === void 0 ? PendingIndicator : _props$pendingIndicat,\n      _props$pendingPositio = props.pendingPosition,\n      pendingPosition = _props$pendingPositio === void 0 ? 'center' : _props$pendingPositio,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disabled\", \"pending\", \"pendingIndicator\", \"pendingPosition\"]);\n\n  return __jsx(Button, _extends({\n    className: clsx(classes.root, className, pending && classes.pending),\n    disabled: disabled || pending,\n    ref: ref,\n    classes: {\n      startIcon: classes[\"startIcon\".concat(pending ? 'Pending' : '').concat(capitalize(pendingPosition))],\n      endIcon: classes[\"endIcon\".concat(pending ? 'Pending' : '').concat(capitalize(pendingPosition))],\n      label: classes[\"label\".concat(pending ? 'Pending' : '').concat(capitalize(pendingPosition))]\n    }\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }), pending && __jsx(\"div\", {\n    className: clsx(classes.pendingIndicator, classes[\"pendingIndicator\".concat(capitalize(pendingPosition))]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, pendingIndicator), children);\n});\nLoadingButton.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the pending indicator will be shown.\n   */\n  pending: PropTypes.bool,\n\n  /**\n   * Element placed before the children if the button is in pending state.\n   */\n  pendingIndicator: PropTypes.node,\n\n  /**\n   * The pending indicator can be positioned on the start, end, or the center of the button.\n   */\n  pendingPosition: chainPropTypes(PropTypes.oneOf(['start', 'end', 'center']), function (props) {\n    if (props.pendingPosition === 'start' && !props.startIcon) {\n      return new Error(\"Material-UI: The pendingPosition=\\\"start\\\" should be used in combination with startIcon.\");\n    }\n\n    if (props.pendingPosition === 'end' && !props.endIcon) {\n      return new Error(\"Material-UI: The pendingPosition=\\\"end\\\" should be used in combination with endIcon.\");\n    }\n\n    return null;\n  })\n};\nexport default withStyles(styles, {\n  name: 'MuiLoadingButton'\n})(LoadingButton);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-lab/src/LoadingButton/LoadingButton.js"],"names":["React","PropTypes","clsx","chainPropTypes","capitalize","withStyles","Button","CircularProgress","styles","root","pending","pendingIndicator","position","visibility","display","pendingIndicatorCenter","left","transform","pendingIndicatorStart","pendingIndicatorEnd","right","endIconPendingEnd","startIconPendingStart","labelPendingCenter","PendingIndicator","LoadingButton","forwardRef","props","ref","children","classes","className","disabled","pendingPosition","other","startIcon","endIcon","label","propTypes","node","object","string","bool","oneOf","Error","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport { capitalize } from '@material-ui/core/utils';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport const styles = () => ({\n  /* Styles applied to the root element. */\n  root: {},\n  /* Styles applied to the root element if `pending={true}`. */\n  pending: {},\n  /* Styles applied to the pendingIndicator element. */\n  pendingIndicator: {\n    position: 'absolute',\n    visibility: 'visible',\n    display: 'flex',\n  },\n  /* Styles applied to the pendingIndicator element if `pendingPosition=\"center\"`. */\n  pendingIndicatorCenter: {\n    left: '50%',\n    transform: 'translate(-50%)',\n  },\n  /* Styles applied to the pendingIndicator element if `pendingPosition=\"start\"`. */\n  pendingIndicatorStart: {\n    left: 14,\n  },\n  /* Styles applied to the pendingIndicator element if `pendingPosition=\"end\"`. */\n  pendingIndicatorEnd: {\n    right: 14,\n  },\n  /* Styles applied to the endIcon element if `pending={true}` and `pendingPosition=\"end\"`. */\n  endIconPendingEnd: {\n    visibility: 'hidden',\n  },\n  /* Styles applied to the startIcon element if `pending={true}` and `pendingPosition=\"start\"`. */\n  startIconPendingStart: {\n    visibility: 'hidden',\n  },\n  /* Styles applied to the label element if `pending={true}` and `pendingPosition=\"center\"`. */\n  labelPendingCenter: {\n    visibility: 'hidden',\n  },\n});\n\nconst PendingIndicator = <CircularProgress color=\"inherit\" size={16} />;\n\nconst LoadingButton = React.forwardRef(function LoadingButton(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    disabled = false,\n    pending = false,\n    pendingIndicator = PendingIndicator,\n    pendingPosition = 'center',\n    ...other\n  } = props;\n\n  return (\n    <Button\n      className={clsx(\n        classes.root,\n        {\n          [classes.pending]: pending,\n        },\n        className,\n      )}\n      disabled={disabled || pending}\n      ref={ref}\n      classes={{\n        startIcon: classes[`startIcon${pending ? 'Pending' : ''}${capitalize(pendingPosition)}`],\n        endIcon: classes[`endIcon${pending ? 'Pending' : ''}${capitalize(pendingPosition)}`],\n        label: classes[`label${pending ? 'Pending' : ''}${capitalize(pendingPosition)}`],\n      }}\n      {...other}\n    >\n      {pending && (\n        <div\n          className={clsx(\n            classes.pendingIndicator,\n            classes[`pendingIndicator${capitalize(pendingPosition)}`],\n          )}\n        >\n          {pendingIndicator}\n        </div>\n      )}\n\n      {children}\n    </Button>\n  );\n});\n\nLoadingButton.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the pending indicator will be shown.\n   */\n  pending: PropTypes.bool,\n  /**\n   * Element placed before the children if the button is in pending state.\n   */\n  pendingIndicator: PropTypes.node,\n  /**\n   * The pending indicator can be positioned on the start, end, or the center of the button.\n   */\n  pendingPosition: chainPropTypes(PropTypes.oneOf(['start', 'end', 'center']), (props) => {\n    if (props.pendingPosition === 'start' && !props.startIcon) {\n      return new Error(\n        `Material-UI: The pendingPosition=\"start\" should be used in combination with startIcon.`,\n      );\n    }\n    if (props.pendingPosition === 'end' && !props.endIcon) {\n      return new Error(\n        `Material-UI: The pendingPosition=\"end\" should be used in combination with endIcon.`,\n      );\n    }\n    return null;\n  }),\n};\n\nexport default withStyles(styles, { name: 'MuiLoadingButton' })(LoadingButton);\n"]},"metadata":{},"sourceType":"module"}