{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from \"../../../../../../../packages/material-ui/src/styles\";\nimport MuiTextField from \"../../../../../../../packages/material-ui/src/TextField\";\nimport { capitalize } from \"../../../../../../../packages/material-ui/src/utils\";\n\nconst styles = theme => ({\n  root: {\n    padding: 0,\n    'label + &': {\n      marginTop: theme.spacing(3)\n    }\n  },\n  input: {\n    minWidth: theme.spacing(6),\n    backgroundColor: theme.palette.common.white,\n    '&$disabled': {\n      backgroundColor: theme.palette.divider\n    }\n  },\n  inputBorder: {\n    border: '1px solid #e9ddd0',\n    '&:focus': {\n      borderColor: theme.palette.secondary.main\n    }\n  },\n  disabled: {},\n  inputSizeSmall: {\n    fontSize: 14,\n    padding: theme.spacing(1),\n    width: `calc(100% - ${theme.spacing(2)}px)`\n  },\n  inputSizeMedium: {\n    fontSize: 16,\n    padding: theme.spacing(2),\n    width: `calc(100% - ${theme.spacing(4)}px)`\n  },\n  inputSizeLarge: {\n    fontSize: 18,\n    padding: 22,\n    width: `calc(100% - ${22 * 2}px)`\n  },\n  inputSizeXlarge: {\n    fontSize: 20,\n    padding: 25,\n    width: `calc(100% - ${25 * 2}px)`\n  },\n  formLabel: {\n    fontSize: 18\n  },\n  select: {\n    height: 'auto',\n    borderRadius: 0\n  },\n  selectIcon: {\n    top: '50%',\n    marginTop: -12\n  }\n});\n\nfunction TextField(props) {\n  const {\n    classes,\n    InputProps = {},\n    InputLabelProps,\n    noBorder = false,\n    size = 'medium',\n    SelectProps\n  } = props,\n        other = _objectWithoutProperties(props, [\"classes\", \"InputProps\", \"InputLabelProps\", \"noBorder\", \"size\", \"SelectProps\"]);\n\n  const {\n    classes: {\n      input: InputPropsClassesInput\n    } = {}\n  } = InputProps,\n        InputPropsClassesOther = _objectWithoutProperties(InputProps.classes, [\"input\"]),\n        InputPropsOther = _objectWithoutProperties(InputProps, [\"classes\"]);\n\n  return __jsx(MuiTextField, _extends({\n    InputProps: _objectSpread({\n      disableUnderline: true,\n      classes: _objectSpread({\n        root: classes.root,\n        input: clsx(classes.input, classes[`inputSize${capitalize(size)}`], InputPropsClassesInput, !noBorder && classes.inputBorder),\n        disabled: classes.disabled\n      }, InputPropsClassesOther)\n    }, InputPropsOther),\n    InputLabelProps: _objectSpread(_objectSpread({}, InputLabelProps), {}, {\n      shrink: true,\n      className: classes.formLabel\n    }),\n    SelectProps: _objectSpread(_objectSpread({}, SelectProps), {}, {\n      classes: {\n        select: classes.select,\n        icon: classes.selectIcon\n      }\n    })\n  }, other));\n}\n\nexport default withStyles(styles)(TextField);","map":null,"metadata":{},"sourceType":"module"}