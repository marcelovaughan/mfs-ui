{"ast":null,"code":"import nested from \"../ThemeProvider/nested\";\n/**\n * This is the list of the style rule name we use as drop in replacement for the built-in\n * pseudo classes (:checked, :disabled, :focused, etc.).\n *\n * Why do they exist in the first place?\n * These classes are used at a specificity of 2.\n * It allows them to override previously definied styles as well as\n * being untouched by simple user overrides.\n */\n\nconst pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.\n// When new generator function is created, rule counter is reset.\n// We need to reset the rule counter for SSR for each request.\n//\n// It's inspired by\n// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js\n\nexport default function createGenerateClassName(options = {}) {\n  const {\n    disableGlobal = false,\n    productionPrefix = 'jss',\n    seed = ''\n  } = options;\n  const seedPrefix = seed === '' ? '' : `${seed}-`;\n  let ruleCounter = 0;\n\n  const getNextCounterId = () => {\n    ruleCounter += 1;\n\n    if (true) {\n      if (ruleCounter >= 1e10) {\n        console.warn(['Material-UI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));\n      }\n    }\n\n    return ruleCounter;\n  };\n\n  return (rule, styleSheet) => {\n    const name = styleSheet.options.name; // Is a global static MUI style?\n\n    if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {\n      // We can use a shorthand class name, we never use the keys to style the components.\n      if (pseudoClasses.indexOf(rule.key) !== -1) {\n        return `Mui-${rule.key}`;\n      }\n\n      const prefix = `${seedPrefix}${name}-${rule.key}`;\n\n      if (!styleSheet.options.theme[nested] || seed !== '') {\n        return prefix;\n      }\n\n      return `${prefix}-${getNextCounterId()}`;\n    }\n\n    if (false) {\n      return `${seedPrefix}${productionPrefix}${getNextCounterId()}`;\n    }\n\n    const suffix = `${rule.key}-${getNextCounterId()}`; // Help with debuggability.\n\n    if (styleSheet.options.classNamePrefix) {\n      return `${seedPrefix}${styleSheet.options.classNamePrefix}-${suffix}`;\n    }\n\n    return `${seedPrefix}${suffix}`;\n  };\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-styles/src/createGenerateClassName/createGenerateClassName.js"],"names":["nested","pseudoClasses","createGenerateClassName","options","disableGlobal","productionPrefix","seed","seedPrefix","ruleCounter","getNextCounterId","console","warn","join","rule","styleSheet","name","indexOf","link","key","prefix","theme","suffix","classNamePrefix"],"mappings":"AAAA,OAAOA,MAAP;AAEA;;;;;;;;;;AASA,MAAMC,aAAa,GAAG,CACpB,SADoB,EAEpB,UAFoB,EAGpB,OAHoB,EAIpB,SAJoB,EAKpB,cALoB,EAMpB,UANoB,EAOpB,UAPoB,EAQpB,UARoB,CAAtB,C,CAWA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,uBAAT,CAAiCC,OAAO,GAAG,EAA3C,EAA+C;AAC5D,QAAM;AAAEC,IAAAA,aAAa,GAAG,KAAlB;AAAyBC,IAAAA,gBAAgB,GAAG,KAA5C;AAAmDC,IAAAA,IAAI,GAAG;AAA1D,MAAiEH,OAAvE;AACA,QAAMI,UAAU,GAAGD,IAAI,KAAK,EAAT,GAAc,EAAd,GAAoB,GAAEA,IAAK,GAA9C;AACA,MAAIE,WAAW,GAAG,CAAlB;;AAEA,QAAMC,gBAAgB,GAAG,MAAM;AAC7BD,IAAAA,WAAW,IAAI,CAAf;;AACA,cAA2C;AACzC,UAAIA,WAAW,IAAI,IAAnB,EAAyB;AACvBE,QAAAA,OAAO,CAACC,IAAR,CACE,CACE,4CADF,EAEE,oDAFF,EAGEC,IAHF,CAGO,EAHP,CADF;AAMD;AACF;;AACD,WAAOJ,WAAP;AACD,GAbD;;AAeA,SAAO,CAACK,IAAD,EAAOC,UAAP,KAAsB;AAC3B,UAAMC,IAAI,GAAGD,UAAU,CAACX,OAAX,CAAmBY,IAAhC,CAD2B,CAG3B;;AACA,QAAIA,IAAI,IAAIA,IAAI,CAACC,OAAL,CAAa,KAAb,MAAwB,CAAhC,IAAqC,CAACF,UAAU,CAACX,OAAX,CAAmBc,IAAzD,IAAiE,CAACb,aAAtE,EAAqF;AACnF;AACA,UAAIH,aAAa,CAACe,OAAd,CAAsBH,IAAI,CAACK,GAA3B,MAAoC,CAAC,CAAzC,EAA4C;AAC1C,eAAQ,OAAML,IAAI,CAACK,GAAI,EAAvB;AACD;;AAED,YAAMC,MAAM,GAAI,GAAEZ,UAAW,GAAEQ,IAAK,IAAGF,IAAI,CAACK,GAAI,EAAhD;;AAEA,UAAI,CAACJ,UAAU,CAACX,OAAX,CAAmBiB,KAAnB,CAAyBpB,MAAzB,CAAD,IAAqCM,IAAI,KAAK,EAAlD,EAAsD;AACpD,eAAOa,MAAP;AACD;;AAED,aAAQ,GAAEA,MAAO,IAAGV,gBAAgB,EAAG,EAAvC;AACD;;AAED,eAA2C;AACzC,aAAQ,GAAEF,UAAW,GAAEF,gBAAiB,GAAEI,gBAAgB,EAAG,EAA7D;AACD;;AAED,UAAMY,MAAM,GAAI,GAAER,IAAI,CAACK,GAAI,IAAGT,gBAAgB,EAAG,EAAjD,CAvB2B,CAyB3B;;AACA,QAAIK,UAAU,CAACX,OAAX,CAAmBmB,eAAvB,EAAwC;AACtC,aAAQ,GAAEf,UAAW,GAAEO,UAAU,CAACX,OAAX,CAAmBmB,eAAgB,IAAGD,MAAO,EAApE;AACD;;AAED,WAAQ,GAAEd,UAAW,GAAEc,MAAO,EAA9B;AACD,GA/BD;AAgCD","sourcesContent":["import nested from '../ThemeProvider/nested';\n\n/**\n * This is the list of the style rule name we use as drop in replacement for the built-in\n * pseudo classes (:checked, :disabled, :focused, etc.).\n *\n * Why do they exist in the first place?\n * These classes are used at a specificity of 2.\n * It allows them to override previously definied styles as well as\n * being untouched by simple user overrides.\n */\nconst pseudoClasses = [\n  'checked',\n  'disabled',\n  'error',\n  'focused',\n  'focusVisible',\n  'required',\n  'expanded',\n  'selected',\n];\n\n// Returns a function which generates unique class names based on counters.\n// When new generator function is created, rule counter is reset.\n// We need to reset the rule counter for SSR for each request.\n//\n// It's inspired by\n// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js\nexport default function createGenerateClassName(options = {}) {\n  const { disableGlobal = false, productionPrefix = 'jss', seed = '' } = options;\n  const seedPrefix = seed === '' ? '' : `${seed}-`;\n  let ruleCounter = 0;\n\n  const getNextCounterId = () => {\n    ruleCounter += 1;\n    if (process.env.NODE_ENV !== 'production') {\n      if (ruleCounter >= 1e10) {\n        console.warn(\n          [\n            'Material-UI: You might have a memory leak.',\n            'The ruleCounter is not supposed to grow that much.',\n          ].join(''),\n        );\n      }\n    }\n    return ruleCounter;\n  };\n\n  return (rule, styleSheet) => {\n    const name = styleSheet.options.name;\n\n    // Is a global static MUI style?\n    if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {\n      // We can use a shorthand class name, we never use the keys to style the components.\n      if (pseudoClasses.indexOf(rule.key) !== -1) {\n        return `Mui-${rule.key}`;\n      }\n\n      const prefix = `${seedPrefix}${name}-${rule.key}`;\n\n      if (!styleSheet.options.theme[nested] || seed !== '') {\n        return prefix;\n      }\n\n      return `${prefix}-${getNextCounterId()}`;\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return `${seedPrefix}${productionPrefix}${getNextCounterId()}`;\n    }\n\n    const suffix = `${rule.key}-${getNextCounterId()}`;\n\n    // Help with debuggability.\n    if (styleSheet.options.classNamePrefix) {\n      return `${seedPrefix}${styleSheet.options.classNamePrefix}-${suffix}`;\n    }\n\n    return `${seedPrefix}${suffix}`;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}