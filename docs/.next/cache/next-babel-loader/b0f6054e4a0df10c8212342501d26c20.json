{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport capitalize from \"../utils/capitalize\";\nexport const styles = theme => ({\n  root: {\n    position: 'absolute',\n    height: 2,\n    bottom: 0,\n    width: '100%',\n    transition: theme.transitions.create()\n  },\n  colorPrimary: {\n    backgroundColor: theme.palette.primary.main\n  },\n  colorSecondary: {\n    backgroundColor: theme.palette.secondary.main\n  },\n  vertical: {\n    height: '100%',\n    width: 2,\n    right: 0\n  }\n});\n/**\n * @ignore - internal component.\n */\n\nconst TabIndicator = /*#__PURE__*/React.forwardRef(function TabIndicator(props, ref) {\n  const {\n    classes,\n    className,\n    color,\n    orientation\n  } = props,\n        other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"orientation\"]);\n\n  return __jsx(\"span\", _extends({\n    className: clsx(classes.root, classes[`color${capitalize(color)}`], className, orientation === 'vertical' && classes.vertical),\n    ref: ref\n  }, other));\n});\nexport default withStyles(styles, {\n  name: 'PrivateTabIndicator'\n})(TabIndicator);","map":null,"metadata":{},"sourceType":"module"}