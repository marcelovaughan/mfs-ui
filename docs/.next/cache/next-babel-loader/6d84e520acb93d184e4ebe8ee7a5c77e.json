{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Icon/Icon.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport capitalize from \"../utils/capitalize\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    userSelect: 'none',\n    fontSize: theme.typography.pxToRem(24),\n    width: '1em',\n    height: '1em',\n    // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541\n    // To remove at some point.\n    overflow: 'hidden',\n    flexShrink: 0\n  },\n\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main\n  },\n\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main\n  },\n\n  /* Styles applied to the root element if `color=\"action\"`. */\n  colorAction: {\n    color: theme.palette.action.active\n  },\n\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    color: theme.palette.error.main\n  },\n\n  /* Styles applied to the root element if `color=\"disabled\"`. */\n  colorDisabled: {\n    color: theme.palette.action.disabled\n  },\n\n  /* Styles applied to the root element if `fontSize=\"inherit\"`. */\n  fontSizeInherit: {\n    fontSize: 'inherit'\n  },\n\n  /* Styles applied to the root element if `fontSize=\"small\"`. */\n  fontSizeSmall: {\n    fontSize: theme.typography.pxToRem(20)\n  },\n\n  /* Styles applied to the root element if `fontSize=\"large\"`. */\n  fontSizeLarge: {\n    fontSize: theme.typography.pxToRem(36)\n  }\n});\nconst Icon = /*#__PURE__*/React.forwardRef(function Icon(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'inherit',\n    component: Component = 'span',\n    fontSize = 'default'\n  } = props,\n        other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"fontSize\"]);\n\n  return __jsx(Component, _extends({\n    className: clsx('material-icons', classes.root, className, color !== 'inherit' && classes[`color${capitalize(color)}`], fontSize !== 'default' && classes[`fontSize${capitalize(fontSize)}`]),\n    \"aria-hidden\": true,\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }));\n});\nIcon.propTypes = {\n  /**\n   * The name of the icon font ligature.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['inherit', 'primary', 'secondary', 'action', 'error', 'disabled']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   */\n  fontSize: PropTypes.oneOf(['inherit', 'default', 'small', 'large'])\n};\nIcon.muiName = 'Icon';\nexport default withStyles(styles, {\n  name: 'MuiIcon'\n})(Icon);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Icon/Icon.js"],"names":["React","PropTypes","clsx","withStyles","capitalize","styles","theme","root","userSelect","fontSize","typography","pxToRem","width","height","overflow","flexShrink","colorPrimary","color","palette","primary","main","colorSecondary","secondary","colorAction","action","active","colorError","error","colorDisabled","disabled","fontSizeInherit","fontSizeSmall","fontSizeLarge","Icon","forwardRef","props","ref","classes","className","component","Component","other","propTypes","children","node","object","isRequired","string","oneOf","elementType","muiName","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = (theme) => ({\n  /* Styles applied to the root element. */\n  root: {\n    userSelect: 'none',\n    fontSize: theme.typography.pxToRem(24),\n    width: '1em',\n    height: '1em',\n    // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541\n    // To remove at some point.\n    overflow: 'hidden',\n    flexShrink: 0,\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main,\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main,\n  },\n  /* Styles applied to the root element if `color=\"action\"`. */\n  colorAction: {\n    color: theme.palette.action.active,\n  },\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    color: theme.palette.error.main,\n  },\n  /* Styles applied to the root element if `color=\"disabled\"`. */\n  colorDisabled: {\n    color: theme.palette.action.disabled,\n  },\n  /* Styles applied to the root element if `fontSize=\"inherit\"`. */\n  fontSizeInherit: {\n    fontSize: 'inherit',\n  },\n  /* Styles applied to the root element if `fontSize=\"small\"`. */\n  fontSizeSmall: {\n    fontSize: theme.typography.pxToRem(20),\n  },\n  /* Styles applied to the root element if `fontSize=\"large\"`. */\n  fontSizeLarge: {\n    fontSize: theme.typography.pxToRem(36),\n  },\n});\n\nconst Icon = React.forwardRef(function Icon(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'inherit',\n    component: Component = 'span',\n    fontSize = 'default',\n    ...other\n  } = props;\n\n  return (\n    <Component\n      className={clsx(\n        'material-icons',\n        classes.root,\n        {\n          [classes[`color${capitalize(color)}`]]: color !== 'inherit',\n          [classes[`fontSize${capitalize(fontSize)}`]]: fontSize !== 'default',\n        },\n        className,\n      )}\n      aria-hidden\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nIcon.propTypes = {\n  /**\n   * The name of the icon font ligature.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['inherit', 'primary', 'secondary', 'action', 'error', 'disabled']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes /* @typescript-to-proptypes-ignore */.elementType,\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   */\n  fontSize: PropTypes.oneOf(['inherit', 'default', 'small', 'large']),\n};\n\nIcon.muiName = 'Icon';\n\nexport default withStyles(styles, { name: 'MuiIcon' })(Icon);\n"]},"metadata":{},"sourceType":"module"}