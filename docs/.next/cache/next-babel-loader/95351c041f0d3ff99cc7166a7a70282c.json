{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from \"../../../../packages/material-ui/src/styles\";\nimport ListItem from \"../../../../packages/material-ui/src/ListItem\";\nimport Button from \"../../../../packages/material-ui/src/Button\";\nimport Collapse from \"../../../../packages/material-ui/src/Collapse\";\nimport Link from \"./Link\";\nconst useStyles = makeStyles(theme => ({\n  item: {\n    display: 'block',\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  itemLeaf: {\n    display: 'flex',\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  button: {\n    letterSpacing: 0,\n    justifyContent: 'flex-start',\n    textTransform: 'none',\n    width: '100%'\n  },\n  buttonLeaf: {\n    letterSpacing: 0,\n    justifyContent: 'flex-start',\n    textTransform: 'none',\n    width: '100%',\n    fontWeight: theme.typography.fontWeightRegular,\n    '&.depth-0': {\n      fontWeight: theme.typography.fontWeightMedium\n    }\n  },\n  active: {\n    color: theme.palette.primary.main,\n    fontWeight: theme.typography.fontWeightMedium\n  }\n}));\nexport default function AppDrawerNavItem(props) {\n  const {\n    children,\n    depth,\n    href,\n    onClick,\n    openImmediately = false,\n    topLevel = false,\n    title,\n    linkProps\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"depth\", \"href\", \"onClick\", \"openImmediately\", \"topLevel\", \"title\", \"linkProps\"]);\n\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(openImmediately);\n\n  const handleClick = () => {\n    setOpen(oldOpen => !oldOpen);\n  };\n\n  const style = {\n    paddingLeft: 8 * (3 + 2 * depth)\n  };\n\n  if (href) {\n    return __jsx(ListItem, _extends({\n      className: classes.itemLeaf,\n      disableGutters: true\n    }, other), __jsx(Button, _extends({\n      component: Link,\n      naked: true,\n      activeClassName: `drawer-active ${classes.active}`,\n      href: href,\n      className: clsx(classes.buttonLeaf, `depth-${depth}`),\n      disableTouchRipple: true,\n      onClick: onClick,\n      style: style\n    }, linkProps), title));\n  }\n\n  return __jsx(ListItem, _extends({\n    className: classes.item,\n    disableGutters: true\n  }, other), __jsx(Button, {\n    classes: {\n      root: classes.button,\n      label: topLevel ? 'algolia-lvl0' : ''\n    },\n    onClick: handleClick,\n    style: style\n  }, title), __jsx(Collapse, {\n    in: open,\n    timeout: \"auto\",\n    unmountOnExit: true\n  }, children));\n}","map":null,"metadata":{},"sourceType":"module"}