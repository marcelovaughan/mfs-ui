{"ast":null,"code":"import responsivePropType from \"./responsivePropType\";\nimport { handleBreakpoints } from \"./breakpoints\";\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);\n}\n\nfunction style(options) {\n  const {\n    prop,\n    cssProperty = options.prop,\n    themeKey,\n    transform\n  } = options;\n\n  const fn = props => {\n    if (props[prop] == null) {\n      return null;\n    }\n\n    const propValue = props[prop];\n    const theme = props.theme;\n    const themeMapping = getPath(theme, themeKey) || {};\n\n    const styleFromPropValue = propValueFinal => {\n      let value;\n\n      if (typeof themeMapping === 'function') {\n        value = themeMapping(propValueFinal);\n      } else if (Array.isArray(themeMapping)) {\n        value = themeMapping[propValueFinal] || propValueFinal;\n      } else {\n        value = getPath(themeMapping, propValueFinal) || propValueFinal;\n\n        if (transform) {\n          value = transform(value);\n        }\n      }\n\n      if (cssProperty === false) {\n        return value;\n      }\n\n      return {\n        [cssProperty]: value\n      };\n    };\n\n    return handleBreakpoints(props, propValue, styleFromPropValue);\n  };\n\n  fn.propTypes = true ? {\n    [prop]: responsivePropType\n  } : {};\n  fn.filterProps = [prop];\n  return fn;\n}\n\nexport default style;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-system/src/style.js"],"names":["responsivePropType","handleBreakpoints","getPath","obj","path","split","reduce","acc","item","style","options","prop","cssProperty","themeKey","transform","fn","props","propValue","theme","themeMapping","styleFromPropValue","propValueFinal","value","Array","isArray","propTypes","filterProps"],"mappings":"AAAA,OAAOA,kBAAP;AACA,SAASC,iBAAT;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,IAAtB,EAA4B;AAC1B,MAAI,CAACA,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACrC,WAAO,IAAP;AACD;;AAED,SAAOA,IAAI,CAACC,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuB,CAACC,GAAD,EAAMC,IAAN,KAAgBD,GAAG,IAAIA,GAAG,CAACC,IAAD,CAAV,GAAmBD,GAAG,CAACC,IAAD,CAAtB,GAA+B,IAAtE,EAA6EL,GAA7E,CAAP;AACD;;AAED,SAASM,KAAT,CAAeC,OAAf,EAAwB;AACtB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,WAAW,GAAGF,OAAO,CAACC,IAA9B;AAAoCE,IAAAA,QAApC;AAA8CC,IAAAA;AAA9C,MAA4DJ,OAAlE;;AAEA,QAAMK,EAAE,GAAIC,KAAD,IAAW;AACpB,QAAIA,KAAK,CAACL,IAAD,CAAL,IAAe,IAAnB,EAAyB;AACvB,aAAO,IAAP;AACD;;AAED,UAAMM,SAAS,GAAGD,KAAK,CAACL,IAAD,CAAvB;AACA,UAAMO,KAAK,GAAGF,KAAK,CAACE,KAApB;AACA,UAAMC,YAAY,GAAGjB,OAAO,CAACgB,KAAD,EAAQL,QAAR,CAAP,IAA4B,EAAjD;;AACA,UAAMO,kBAAkB,GAAIC,cAAD,IAAoB;AAC7C,UAAIC,KAAJ;;AAEA,UAAI,OAAOH,YAAP,KAAwB,UAA5B,EAAwC;AACtCG,QAAAA,KAAK,GAAGH,YAAY,CAACE,cAAD,CAApB;AACD,OAFD,MAEO,IAAIE,KAAK,CAACC,OAAN,CAAcL,YAAd,CAAJ,EAAiC;AACtCG,QAAAA,KAAK,GAAGH,YAAY,CAACE,cAAD,CAAZ,IAAgCA,cAAxC;AACD,OAFM,MAEA;AACLC,QAAAA,KAAK,GAAGpB,OAAO,CAACiB,YAAD,EAAeE,cAAf,CAAP,IAAyCA,cAAjD;;AAEA,YAAIP,SAAJ,EAAe;AACbQ,UAAAA,KAAK,GAAGR,SAAS,CAACQ,KAAD,CAAjB;AACD;AACF;;AAED,UAAIV,WAAW,KAAK,KAApB,EAA2B;AACzB,eAAOU,KAAP;AACD;;AAED,aAAO;AACL,SAACV,WAAD,GAAeU;AADV,OAAP;AAGD,KAtBD;;AAwBA,WAAOrB,iBAAiB,CAACe,KAAD,EAAQC,SAAR,EAAmBG,kBAAnB,CAAxB;AACD,GAjCD;;AAmCAL,EAAAA,EAAE,CAACU,SAAH,GACE,OACI;AACE,KAACd,IAAD,GAAQX;AADV,GADJ,GAII,EALN;AAOAe,EAAAA,EAAE,CAACW,WAAH,GAAiB,CAACf,IAAD,CAAjB;AAEA,SAAOI,EAAP;AACD;;AAED,eAAeN,KAAf","sourcesContent":["import responsivePropType from './responsivePropType';\nimport { handleBreakpoints } from './breakpoints';\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce((acc, item) => (acc && acc[item] ? acc[item] : null), obj);\n}\n\nfunction style(options) {\n  const { prop, cssProperty = options.prop, themeKey, transform } = options;\n\n  const fn = (props) => {\n    if (props[prop] == null) {\n      return null;\n    }\n\n    const propValue = props[prop];\n    const theme = props.theme;\n    const themeMapping = getPath(theme, themeKey) || {};\n    const styleFromPropValue = (propValueFinal) => {\n      let value;\n\n      if (typeof themeMapping === 'function') {\n        value = themeMapping(propValueFinal);\n      } else if (Array.isArray(themeMapping)) {\n        value = themeMapping[propValueFinal] || propValueFinal;\n      } else {\n        value = getPath(themeMapping, propValueFinal) || propValueFinal;\n\n        if (transform) {\n          value = transform(value);\n        }\n      }\n\n      if (cssProperty === false) {\n        return value;\n      }\n\n      return {\n        [cssProperty]: value,\n      };\n    };\n\n    return handleBreakpoints(props, propValue, styleFromPropValue);\n  };\n\n  fn.propTypes =\n    process.env.NODE_ENV !== 'production'\n      ? {\n          [prop]: responsivePropType,\n        }\n      : {};\n\n  fn.filterProps = [prop];\n\n  return fn;\n}\n\nexport default style;\n"]},"metadata":{},"sourceType":"module"}