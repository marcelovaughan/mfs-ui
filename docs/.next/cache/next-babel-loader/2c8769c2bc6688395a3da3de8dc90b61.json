{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Avatar/Avatar.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport Person from \"../internal/svg-icons/Person\";\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexShrink: 0,\n      width: 40,\n      height: 40,\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(20),\n      lineHeight: 1,\n      borderRadius: '50%',\n      overflow: 'hidden',\n      userSelect: 'none'\n    },\n\n    /* Styles applied to the root element if not `src` or `srcSet`. */\n    colorDefault: {\n      color: theme.palette.background[\"default\"],\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n    },\n\n    /* Styles applied to the root element if `variant=\"circle\"`. */\n    circle: {},\n\n    /* Styles applied to the root element if `variant=\"rounded\"`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"square\"`. */\n    square: {\n      borderRadius: 0\n    },\n\n    /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n    img: {\n      width: '100%',\n      height: '100%',\n      textAlign: 'center',\n      // Handle non-square image. The property isn't supported by IE 11.\n      objectFit: 'cover',\n      // Hide alt text.\n      color: 'transparent',\n      // Hide the image broken icon, only works on Chrome.\n      textIndent: 10000\n    },\n\n    /* Styles applied to the fallback icon */\n    fallback: {\n      width: '75%',\n      height: '75%'\n    }\n  };\n};\n\nfunction useLoaded(_ref) {\n  var src = _ref.src,\n      srcSet = _ref.srcSet;\n\n  var _React$useState = React.useState(false),\n      loaded = _React$useState[0],\n      setLoaded = _React$useState[1];\n\n  React.useEffect(function () {\n    if (!src && !srcSet) {\n      return undefined;\n    }\n\n    setLoaded(false);\n    var active = true;\n    var image = new Image();\n    image.src = src;\n    image.srcSet = srcSet;\n\n    image.onload = function () {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('loaded');\n    };\n\n    image.onerror = function () {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('error');\n    };\n\n    return function () {\n      active = false;\n    };\n  }, [src, srcSet]);\n  return loaded;\n}\n\nvar Avatar = /*#__PURE__*/React.forwardRef(function Avatar(props, ref) {\n  var alt = props.alt,\n      childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      imgProps = props.imgProps,\n      sizes = props.sizes,\n      src = props.src,\n      srcSet = props.srcSet,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'circle' : _props$variant,\n      other = _objectWithoutProperties(props, [\"alt\", \"children\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\", \"variant\"]);\n\n  var children = null; // Use a hook instead of onError on the img element to support server-side rendering.\n\n  var loaded = useLoaded({\n    src: src,\n    srcSet: srcSet\n  });\n  var hasImg = src || srcSet;\n  var hasImgNotFailing = hasImg && loaded !== 'error';\n\n  if (hasImgNotFailing) {\n    children = __jsx(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }));\n  } else if (childrenProp != null) {\n    children = childrenProp;\n  } else if (hasImg && alt) {\n    children = alt[0];\n  } else {\n    children = __jsx(Person, {\n      className: classes.fallback,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return __jsx(Component, _extends({\n    className: clsx(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }), children);\n});\nAvatar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Used to render icon or text elements inside the Avatar if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Attributes applied to the `img` element if the component is used to display an image.\n   * It can be used to listen for the loading error event.\n   */\n  imgProps: PropTypes.object,\n\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The `srcSet` attribute for the `img` element.\n   * Use this attribute for responsive image display.\n   */\n  srcSet: PropTypes.string,\n\n  /**\n   * The shape of the avatar.\n   */\n  variant: PropTypes.oneOf(['circle', 'rounded', 'square'])\n};\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Avatar/Avatar.js"],"names":["React","PropTypes","clsx","withStyles","Person","styles","theme","root","position","display","alignItems","justifyContent","flexShrink","width","height","fontFamily","typography","fontSize","pxToRem","lineHeight","borderRadius","overflow","userSelect","colorDefault","color","palette","background","backgroundColor","type","grey","circle","rounded","shape","square","img","textAlign","objectFit","textIndent","fallback","useLoaded","src","srcSet","useState","loaded","setLoaded","useEffect","undefined","active","image","Image","onload","onerror","Avatar","forwardRef","props","ref","alt","childrenProp","children","classes","className","component","Component","imgProps","sizes","variant","other","hasImg","hasImgNotFailing","system","propTypes","string","node","object","elementType","oneOf","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Person from '../internal/svg-icons/Person';\n\nexport const styles = (theme) => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexShrink: 0,\n    width: 40,\n    height: 40,\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(20),\n    lineHeight: 1,\n    borderRadius: '50%',\n    overflow: 'hidden',\n    userSelect: 'none',\n  },\n  /* Styles applied to the root element if not `src` or `srcSet`. */\n  colorDefault: {\n    color: theme.palette.background.default,\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600],\n  },\n  /* Styles applied to the root element if `variant=\"circle\"`. */\n  circle: {},\n  /* Styles applied to the root element if `variant=\"rounded\"`. */\n  rounded: {\n    borderRadius: theme.shape.borderRadius,\n  },\n  /* Styles applied to the root element if `variant=\"square\"`. */\n  square: {\n    borderRadius: 0,\n  },\n  /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n  img: {\n    width: '100%',\n    height: '100%',\n    textAlign: 'center',\n    // Handle non-square image. The property isn't supported by IE 11.\n    objectFit: 'cover',\n    // Hide alt text.\n    color: 'transparent',\n    // Hide the image broken icon, only works on Chrome.\n    textIndent: 10000,\n  },\n  /* Styles applied to the fallback icon */\n  fallback: {\n    width: '75%',\n    height: '75%',\n  },\n});\n\nfunction useLoaded({ src, srcSet }) {\n  const [loaded, setLoaded] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!src && !srcSet) {\n      return undefined;\n    }\n\n    setLoaded(false);\n\n    let active = true;\n    const image = new Image();\n    image.src = src;\n    image.srcSet = srcSet;\n    image.onload = () => {\n      if (!active) {\n        return;\n      }\n      setLoaded('loaded');\n    };\n    image.onerror = () => {\n      if (!active) {\n        return;\n      }\n      setLoaded('error');\n    };\n\n    return () => {\n      active = false;\n    };\n  }, [src, srcSet]);\n\n  return loaded;\n}\n\nconst Avatar = React.forwardRef(function Avatar(props, ref) {\n  const {\n    alt,\n    children: childrenProp,\n    classes,\n    className,\n    component: Component = 'div',\n    imgProps,\n    sizes,\n    src,\n    srcSet,\n    variant = 'circle',\n    ...other\n  } = props;\n\n  let children = null;\n\n  // Use a hook instead of onError on the img element to support server-side rendering.\n  const loaded = useLoaded({ src, srcSet });\n  const hasImg = src || srcSet;\n  const hasImgNotFailing = hasImg && loaded !== 'error';\n\n  if (hasImgNotFailing) {\n    children = (\n      <img\n        alt={alt}\n        src={src}\n        srcSet={srcSet}\n        sizes={sizes}\n        className={classes.img}\n        {...imgProps}\n      />\n    );\n  } else if (childrenProp != null) {\n    children = childrenProp;\n  } else if (hasImg && alt) {\n    children = alt[0];\n  } else {\n    children = <Person className={classes.fallback} />;\n  }\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        classes.system,\n        classes[variant],\n        {\n          [classes.colorDefault]: !hasImgNotFailing,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {children}\n    </Component>\n  );\n});\n\nAvatar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n  /**\n   * Used to render icon or text elements inside the Avatar if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes /* @typescript-to-proptypes-ignore */.elementType,\n  /**\n   * Attributes applied to the `img` element if the component is used to display an image.\n   * It can be used to listen for the loading error event.\n   */\n  imgProps: PropTypes.object,\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n  /**\n   * The `srcSet` attribute for the `img` element.\n   * Use this attribute for responsive image display.\n   */\n  srcSet: PropTypes.string,\n  /**\n   * The shape of the avatar.\n   */\n  variant: PropTypes.oneOf(['circle', 'rounded', 'square']),\n};\n\nexport default withStyles(styles, { name: 'MuiAvatar' })(Avatar);\n"]},"metadata":{},"sourceType":"module"}