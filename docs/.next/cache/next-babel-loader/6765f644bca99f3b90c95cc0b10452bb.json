{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from \"../../../material-ui/src/styles\";\nimport usePagination from \"./usePagination\";\nimport PaginationItem from \"../PaginationItem\";\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the ul element. */\n  ul: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  }\n};\n\nfunction defaultGetAriaLabel(type, page, selected) {\n  if (type === 'page') {\n    return `${selected ? '' : 'Go to '}page ${page}`;\n  }\n\n  return `Go to ${type} page`;\n}\n\nconst Pagination = /*#__PURE__*/React.forwardRef(function Pagination(props, ref) {\n  const {\n    boundaryCount,\n    classes,\n    className,\n    color = 'standard',\n    count,\n    defaultPage,\n    disabled,\n    getItemAriaLabel = defaultGetAriaLabel,\n    hideNextButton,\n    hidePrevButton,\n    onChange,\n    page,\n    renderItem = item => __jsx(PaginationItem, item),\n    shape = 'round',\n    showFirstButton,\n    showLastButton,\n    siblingCount,\n    size = 'medium',\n    variant = 'text'\n  } = props,\n        other = _objectWithoutProperties(props, [\"boundaryCount\", \"classes\", \"className\", \"color\", \"count\", \"defaultPage\", \"disabled\", \"getItemAriaLabel\", \"hideNextButton\", \"hidePrevButton\", \"onChange\", \"page\", \"renderItem\", \"shape\", \"showFirstButton\", \"showLastButton\", \"siblingCount\", \"size\", \"variant\"]);\n\n  const {\n    items\n  } = usePagination(_objectSpread(_objectSpread({}, props), {}, {\n    componentName: 'Pagination'\n  }));\n  return __jsx(\"nav\", _extends({\n    \"aria-label\": \"pagination navigation\",\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), __jsx(\"ul\", {\n    className: classes.ul\n  }, items.map((item, index) => __jsx(\"li\", {\n    key: index\n  }, renderItem(_objectSpread(_objectSpread({}, item), {}, {\n    color,\n    'aria-label': getItemAriaLabel(item.type, item.page, item.selected),\n    shape,\n    size,\n    variant\n  }))))));\n}); // @default tags synced with default values from usePagination\n\nexport default withStyles(styles, {\n  name: 'MuiPagination'\n})(Pagination);","map":null,"metadata":{},"sourceType":"module"}