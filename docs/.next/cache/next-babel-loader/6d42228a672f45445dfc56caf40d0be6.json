{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { capitalize } from \"../../../material-ui/src/utils\";\nimport { withStyles } from \"../../../material-ui/src/styles\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignSelf: 'baseline',\n    borderStyle: 'solid',\n    borderWidth: 2,\n    padding: 4,\n    borderRadius: '50%',\n    boxShadow: theme.shadows[1],\n    margin: '11.5px 0'\n  },\n\n  /* Styles applied to the root element if `color=\"grey\"` and `variant=\"filled\"`. */\n  filledGrey: {\n    borderColor: 'transparent',\n    color: theme.palette.grey[50],\n    backgroundColor: theme.palette.grey[400]\n  },\n\n  /* Styles applied to the root element if `color=\"grey\"` and `variant=\"outlined\"`. */\n  outlinedGrey: {\n    boxShadow: 'none',\n    color: theme.palette.grey.contrastText,\n    borderColor: theme.palette.grey[400],\n    backgroundColor: 'transparent'\n  },\n\n  /* Styles applied to the root element if `color=\"primary\"` and `variant=\"filled\"`. */\n  filledPrimary: {\n    borderColor: 'transparent',\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main\n  },\n\n  /* Styles applied to the root element if `color=\"primary\"` and `variant=\"outlined\"`. */\n  outlinedPrimary: {\n    boxShadow: 'none',\n    backgroundColor: 'transparent',\n    borderColor: theme.palette.primary.main\n  },\n\n  /* Styles applied to the root element if `color=\"secondary\"` and `variant=\"filled\"`. */\n  filledSecondary: {\n    borderColor: 'transparent',\n    color: theme.palette.secondary.contrastText,\n    backgroundColor: theme.palette.secondary.main\n  },\n\n  /* Styles applied to the root element if `color=\"secondary\"` and `variant=\"outlined\"`. */\n  outlinedSecondary: {\n    boxShadow: 'none',\n    backgroundColor: 'transparent',\n    borderColor: theme.palette.secondary.main\n  }\n});\nconst TimelineDot = /*#__PURE__*/React.forwardRef(function TimelineDot(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'grey',\n    variant = 'filled'\n  } = props,\n        other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"variant\"]);\n\n  return __jsx(\"span\", _extends({\n    className: clsx(classes.root, className, color !== 'inherit' && classes[`${variant}${capitalize(color)}`]),\n    ref: ref\n  }, other));\n});\nexport default withStyles(styles, {\n  name: 'MuiTimelineDot'\n})(TimelineDot);","map":null,"metadata":{},"sourceType":"module"}