{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles, createStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport Stepper from \"../../../../../packages/material-ui/src/Stepper\";\nimport Step from \"../../../../../packages/material-ui/src/Step\";\nimport StepLabel from \"../../../../../packages/material-ui/src/StepLabel\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport Typography from \"../../../../../packages/material-ui/src/Typography\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    width: '100%'\n  },\n  backButton: {\n    marginRight: theme.spacing(1)\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nfunction getSteps() {\n  return ['Select master blaster campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(stepIndex) {\n  switch (stepIndex) {\n    case 0:\n      return 'Select campaign settings...';\n\n    case 1:\n      return 'What is an ad group anyways?';\n\n    case 2:\n      return 'This is the bit I really care about!';\n\n    default:\n      return 'Unknown stepIndex';\n  }\n}\n\nexport default function HorizontalLabelPositionBelowStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Stepper, {\n    activeStep: activeStep,\n    alternativeLabel: true\n  }, steps.map(label => __jsx(Step, {\n    key: label\n  }, __jsx(StepLabel, null, label)))), __jsx(\"div\", null, activeStep === steps.length ? __jsx(\"div\", null, __jsx(Typography, {\n    className: classes.instructions\n  }, \"All steps completed\"), __jsx(Button, {\n    onClick: handleReset\n  }, \"Reset\")) : __jsx(\"div\", null, __jsx(Typography, {\n    className: classes.instructions\n  }, getStepContent(activeStep)), __jsx(\"div\", null, __jsx(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.backButton\n  }, \"Back\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext\n  }, activeStep === steps.length - 1 ? 'Finish' : 'Next')))));\n}","map":null,"metadata":{},"sourceType":"module"}