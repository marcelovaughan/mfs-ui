{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport TextField from \"../../../../../packages/material-ui/src/TextField\";\nimport Autocomplete from \"../../../../../packages/material-ui-lab/src/Autocomplete\";\nimport useMediaQuery from \"../../../../../packages/material-ui/src/useMediaQuery\";\nimport ListSubheader from \"../../../../../packages/material-ui/src/ListSubheader\";\nimport { useTheme, makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport { VariableSizeList } from 'react-window';\nimport { Typography } from \"../../../../../packages/material-ui/src\";\nconst LISTBOX_PADDING = 8; // px\n\nfunction renderRow(props) {\n  const {\n    data,\n    index,\n    style\n  } = props;\n  return /*#__PURE__*/React.cloneElement(data[index], {\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      top: style.top + LISTBOX_PADDING\n    })\n  });\n}\n\nconst OuterElementContext = React.createContext({});\nconst OuterElementType = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return __jsx(\"div\", _extends({\n    ref: ref\n  }, props, outerProps));\n});\n\nfunction useResetCache(data) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    if (ref.current != null) {\n      ref.current.resetAfterIndex(0, true);\n    }\n  }, [data]);\n  return ref;\n} // Adapter for react-window\n\n\nconst ListboxComponent = /*#__PURE__*/React.forwardRef(function ListboxComponent(props, ref) {\n  const {\n    children\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\"]);\n\n  const itemData = React.Children.toArray(children);\n  const theme = useTheme();\n  const smUp = useMediaQuery(theme.breakpoints.up('sm'), {\n    noSsr: true\n  });\n  const itemCount = itemData.length;\n  const itemSize = smUp ? 36 : 48;\n\n  const getChildSize = child => {\n    if ( /*#__PURE__*/React.isValidElement(child) && child.type === ListSubheader) {\n      return 48;\n    }\n\n    return itemSize;\n  };\n\n  const getHeight = () => {\n    if (itemCount > 8) {\n      return 8 * itemSize;\n    }\n\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n  };\n\n  const gridRef = useResetCache(itemCount);\n  return __jsx(\"div\", {\n    ref: ref\n  }, __jsx(OuterElementContext.Provider, {\n    value: other\n  }, __jsx(VariableSizeList, {\n    itemData: itemData,\n    height: getHeight() + 2 * LISTBOX_PADDING,\n    width: \"100%\",\n    ref: gridRef,\n    outerElementType: OuterElementType,\n    innerElementType: \"ul\",\n    itemSize: index => getChildSize(itemData[index]),\n    overscanCount: 5,\n    itemCount: itemCount\n  }, renderRow)));\n});\n\nfunction random(length) {\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n\n  for (let i = 0; i < length; i += 1) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n\n  return result;\n}\n\nconst useStyles = makeStyles({\n  listbox: {\n    boxSizing: 'border-box',\n    '& ul': {\n      padding: 0,\n      margin: 0\n    }\n  }\n});\nconst OPTIONS = Array.from(new Array(10000)).map(() => random(10 + Math.ceil(Math.random() * 20))).sort((a, b) => a.toUpperCase().localeCompare(b.toUpperCase()));\n\nconst renderGroup = params => [__jsx(ListSubheader, {\n  key: params.key,\n  component: \"div\"\n}, params.group), params.children];\n\nexport default function Virtualize() {\n  const classes = useStyles();\n  return __jsx(Autocomplete, {\n    id: \"virtualize-demo\",\n    style: {\n      width: 300\n    },\n    disableListWrap: true,\n    classes: classes,\n    ListboxComponent: ListboxComponent,\n    renderGroup: renderGroup,\n    options: OPTIONS,\n    groupBy: option => option[0].toUpperCase(),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      variant: \"outlined\",\n      label: \"10,000 options\"\n    })),\n    renderOption: option => __jsx(Typography, {\n      noWrap: true\n    }, option)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}