{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles, createStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport Grid from \"../../../../../packages/material-ui/src/Grid\";\nimport List from \"../../../../../packages/material-ui/src/List\";\nimport Card from \"../../../../../packages/material-ui/src/Card\";\nimport CardHeader from \"../../../../../packages/material-ui/src/CardHeader\";\nimport ListItem from \"../../../../../packages/material-ui/src/ListItem\";\nimport ListItemText from \"../../../../../packages/material-ui/src/ListItemText\";\nimport ListItemIcon from \"../../../../../packages/material-ui/src/ListItemIcon\";\nimport Checkbox from \"../../../../../packages/material-ui/src/Checkbox\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport Divider from \"../../../../../packages/material-ui/src/Divider\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      margin: 'auto'\n    },\n    cardHeader: {\n      padding: theme.spacing(1, 2)\n    },\n    list: {\n      width: 200,\n      height: 230,\n      backgroundColor: theme.palette.background.paper,\n      overflow: 'auto'\n    },\n    button: {\n      margin: theme.spacing(0.5, 0)\n    }\n  });\n});\n\nfunction not(a, b) {\n  return a.filter(function (value) {\n    return b.indexOf(value) === -1;\n  });\n}\n\nfunction intersection(a, b) {\n  return a.filter(function (value) {\n    return b.indexOf(value) !== -1;\n  });\n}\n\nfunction union(a, b) {\n  return [].concat(_toConsumableArray(a), _toConsumableArray(not(b, a)));\n}\n\nvar _ref = __jsx(Divider, null);\n\nvar _ref2 = __jsx(ListItem, null);\n\nexport default function TransferList() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState([]),\n      checked = _React$useState[0],\n      setChecked = _React$useState[1];\n\n  var _React$useState2 = React.useState([0, 1, 2, 3]),\n      left = _React$useState2[0],\n      setLeft = _React$useState2[1];\n\n  var _React$useState3 = React.useState([4, 5, 6, 7]),\n      right = _React$useState3[0],\n      setRight = _React$useState3[1];\n\n  var leftChecked = intersection(checked, left);\n  var rightChecked = intersection(checked, right);\n\n  var handleToggle = function handleToggle(value) {\n    return function () {\n      var currentIndex = checked.indexOf(value);\n\n      var newChecked = _toConsumableArray(checked);\n\n      if (currentIndex === -1) {\n        newChecked.push(value);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      setChecked(newChecked);\n    };\n  };\n\n  var numberOfChecked = function numberOfChecked(items) {\n    return intersection(checked, items).length;\n  };\n\n  var handleToggleAll = function handleToggleAll(items) {\n    return function () {\n      if (numberOfChecked(items) === items.length) {\n        setChecked(not(checked, items));\n      } else {\n        setChecked(union(checked, items));\n      }\n    };\n  };\n\n  var handleCheckedRight = function handleCheckedRight() {\n    setRight(right.concat(leftChecked));\n    setLeft(not(left, leftChecked));\n    setChecked(not(checked, leftChecked));\n  };\n\n  var handleCheckedLeft = function handleCheckedLeft() {\n    setLeft(left.concat(rightChecked));\n    setRight(not(right, rightChecked));\n    setChecked(not(checked, rightChecked));\n  };\n\n  var customList = function customList(title, items) {\n    return __jsx(Card, null, __jsx(CardHeader, {\n      className: classes.cardHeader,\n      avatar: __jsx(Checkbox, {\n        onClick: handleToggleAll(items),\n        checked: numberOfChecked(items) === items.length && items.length !== 0,\n        indeterminate: numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0,\n        disabled: items.length === 0,\n        inputProps: {\n          'aria-label': 'all items selected'\n        }\n      }),\n      title: title,\n      subheader: \"\".concat(numberOfChecked(items), \"/\").concat(items.length, \" selected\")\n    }), _ref, __jsx(List, {\n      className: classes.list,\n      dense: true,\n      component: \"div\",\n      role: \"list\"\n    }, items.map(function (value) {\n      var labelId = \"transfer-list-all-item-\".concat(value, \"-label\");\n      return __jsx(ListItem, {\n        key: value,\n        role: \"listitem\",\n        button: true,\n        onClick: handleToggle(value)\n      }, __jsx(ListItemIcon, null, __jsx(Checkbox, {\n        checked: checked.indexOf(value) !== -1,\n        tabIndex: -1,\n        disableRipple: true,\n        inputProps: {\n          'aria-labelledby': labelId\n        }\n      })), __jsx(ListItemText, {\n        id: labelId,\n        primary: \"List item \".concat(value + 1)\n      }));\n    }), _ref2));\n  };\n\n  return __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    alignItems: \"center\",\n    className: classes.root\n  }, __jsx(Grid, {\n    item: true\n  }, customList('Choices', left)), __jsx(Grid, {\n    item: true\n  }, __jsx(Grid, {\n    container: true,\n    direction: \"column\",\n    alignItems: \"center\"\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    size: \"small\",\n    className: classes.button,\n    onClick: handleCheckedRight,\n    disabled: leftChecked.length === 0,\n    \"aria-label\": \"move selected right\"\n  }, \">\"), __jsx(Button, {\n    variant: \"outlined\",\n    size: \"small\",\n    className: classes.button,\n    onClick: handleCheckedLeft,\n    disabled: rightChecked.length === 0,\n    \"aria-label\": \"move selected left\"\n  }, \"<\"))), __jsx(Grid, {\n    item: true\n  }, customList('Chosen', right)));\n}","map":null,"metadata":{},"sourceType":"module"}