{"ast":null,"code":"var _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/NoSsr/NoSsr.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from \"../../../material-ui-utils/src\";\nconst useEnhancedEffect = false && true ? React.useLayoutEffect : React.useEffect;\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\n\nfunction NoSsr(props) {\n  const {\n    children,\n    defer = false,\n    fallback = null\n  } = props;\n  const [mountedState, setMountedState] = React.useState(false);\n  useEnhancedEffect(() => {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(() => {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 10\n    }\n  }, mountedState ? children : fallback);\n}\n\nNoSsr.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   */\n  defer: PropTypes.bool,\n\n  /**\n   * The fallback content to display.\n   */\n  fallback: PropTypes.node\n};\n\nif (true) {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport default NoSsr;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/NoSsr/NoSsr.js"],"names":["React","PropTypes","exactProp","useEnhancedEffect","useLayoutEffect","useEffect","NoSsr","props","children","defer","fallback","mountedState","setMountedState","useState","propTypes","node","bool"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT;AAEA,MAAMC,iBAAiB,GACrB,gBACIH,KAAK,CAACI,eADV,GAEIJ,KAAK,CAACK,SAHZ;AAKA;;;;;;;;;;AASA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAK,GAAG,KAApB;AAA2BC,IAAAA,QAAQ,GAAG;AAAtC,MAA+CH,KAArD;AACA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCZ,KAAK,CAACa,QAAN,CAAe,KAAf,CAAxC;AAEAV,EAAAA,iBAAiB,CAAC,MAAM;AACtB,QAAI,CAACM,KAAL,EAAY;AACVG,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAJgB,EAId,CAACH,KAAD,CAJc,CAAjB;AAMAT,EAAAA,KAAK,CAACK,SAAN,CAAgB,MAAM;AACpB,QAAII,KAAJ,EAAW;AACTG,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAJD,EAIG,CAACH,KAAD,CAJH,EAVoB,CAgBpB;;AACA,SAAO,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBE,YAAY,GAAGH,QAAH,GAAcE,QAA3C,CAAP;AACD;;AAEDJ,KAAK,CAACQ,SAAN,GAAkB;AAChB;AACA;AACA;AACA;;AACA;;;AAGAN,EAAAA,QAAQ,EAAEP,SAAS,CAACc,IARJ;;AAShB;;;;AAIAN,EAAAA,KAAK,EAAER,SAAS,CAACe,IAbD;;AAchB;;;AAGAN,EAAAA,QAAQ,EAAET,SAAS,CAACc;AAjBJ,CAAlB;;AAoBA,UAA2C;AACzC;AACAT,EAAAA,KAAK,CAAC,cAAc,EAAf,CAAL,GAA0BJ,SAAS,CAACI,KAAK,CAACQ,SAAP,CAAnC;AACD;;AAED,eAAeR,KAAf","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\n\nconst useEnhancedEffect =\n  typeof window !== 'undefined' && process.env.NODE_ENV !== 'test'\n    ? React.useLayoutEffect\n    : React.useEffect;\n\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\nfunction NoSsr(props) {\n  const { children, defer = false, fallback = null } = props;\n  const [mountedState, setMountedState] = React.useState(false);\n\n  useEnhancedEffect(() => {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n\n  React.useEffect(() => {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n\n  // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n  return <React.Fragment>{mountedState ? children : fallback}</React.Fragment>;\n}\n\nNoSsr.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   */\n  defer: PropTypes.bool,\n  /**\n   * The fallback content to display.\n   */\n  fallback: PropTypes.node,\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport default NoSsr;\n"]},"metadata":{},"sourceType":"module"}