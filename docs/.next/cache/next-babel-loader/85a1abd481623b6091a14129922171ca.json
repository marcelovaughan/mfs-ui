{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { TransitionGroup } from 'react-transition-group';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport Ripple from \"./Ripple\";\nconst DURATION = 550;\nexport const DELAY_RIPPLE = 80;\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden',\n    pointerEvents: 'none',\n    position: 'absolute',\n    zIndex: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    borderRadius: 'inherit'\n  },\n\n  /* Styles applied to the internal `Ripple` components `ripple` class. */\n  ripple: {\n    opacity: 0,\n    position: 'absolute'\n  },\n\n  /* Styles applied to the internal `Ripple` components `rippleVisible` class. */\n  rippleVisible: {\n    opacity: 0.3,\n    transform: 'scale(1)',\n    animation: `$enter ${DURATION}ms ${theme.transitions.easing.easeInOut}`\n  },\n\n  /* Styles applied to the internal `Ripple` components `ripplePulsate` class. */\n  ripplePulsate: {\n    animationDuration: `${theme.transitions.duration.shorter}ms`\n  },\n\n  /* Styles applied to the internal `Ripple` components `child` class. */\n  child: {\n    opacity: 1,\n    display: 'block',\n    width: '100%',\n    height: '100%',\n    borderRadius: '50%',\n    backgroundColor: 'currentColor'\n  },\n\n  /* Styles applied to the internal `Ripple` components `childLeaving` class. */\n  childLeaving: {\n    opacity: 0,\n    animation: `$exit ${DURATION}ms ${theme.transitions.easing.easeInOut}`\n  },\n\n  /* Styles applied to the internal `Ripple` components `childPulsate` class. */\n  childPulsate: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    animation: `$pulsate 2500ms ${theme.transitions.easing.easeInOut} 200ms infinite`\n  },\n  '@keyframes enter': {\n    '0%': {\n      transform: 'scale(0)',\n      opacity: 0.1\n    },\n    '100%': {\n      transform: 'scale(1)',\n      opacity: 0.3\n    }\n  },\n  '@keyframes exit': {\n    '0%': {\n      opacity: 1\n    },\n    '100%': {\n      opacity: 0\n    }\n  },\n  '@keyframes pulsate': {\n    '0%': {\n      transform: 'scale(1)'\n    },\n    '50%': {\n      transform: 'scale(0.92)'\n    },\n    '100%': {\n      transform: 'scale(1)'\n    }\n  }\n});\n/**\n * @ignore - internal component.\n *\n * TODO v5: Make private\n */\n\nconst TouchRipple = /*#__PURE__*/React.forwardRef(function TouchRipple(props, ref) {\n  const {\n    center: centerProp = false,\n    classes,\n    className\n  } = props,\n        other = _objectWithoutProperties(props, [\"center\", \"classes\", \"className\"]);\n\n  const [ripples, setRipples] = React.useState([]);\n  const nextKey = React.useRef(0);\n  const rippleCallback = React.useRef(null);\n  React.useEffect(() => {\n    if (rippleCallback.current) {\n      rippleCallback.current();\n      rippleCallback.current = null;\n    }\n  }, [ripples]); // Used to filter out mouse emulated events on mobile.\n\n  const ignoringMouseDown = React.useRef(false); // We use a timer in order to only show the ripples for touch \"click\" like events.\n  // We don't want to display the ripple for touch scroll events.\n\n  const startTimer = React.useRef(null); // This is the hook called once the previous timeout is ready.\n\n  const startTimerCommit = React.useRef(null);\n  const container = React.useRef(null);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(startTimer.current);\n    };\n  }, []);\n  const startCommit = React.useCallback(params => {\n    const {\n      pulsate,\n      rippleX,\n      rippleY,\n      rippleSize,\n      cb\n    } = params;\n    setRipples(oldRipples => [...oldRipples, __jsx(Ripple, {\n      key: nextKey.current,\n      classes: classes,\n      timeout: DURATION,\n      pulsate: pulsate,\n      rippleX: rippleX,\n      rippleY: rippleY,\n      rippleSize: rippleSize\n    })]);\n    nextKey.current += 1;\n    rippleCallback.current = cb;\n  }, [classes]);\n  const start = React.useCallback((event = {}, options = {}, cb) => {\n    const {\n      pulsate = false,\n      center = centerProp || options.pulsate,\n      fakeElement = false // For test purposes\n\n    } = options;\n\n    if (event.type === 'mousedown' && ignoringMouseDown.current) {\n      ignoringMouseDown.current = false;\n      return;\n    }\n\n    if (event.type === 'touchstart') {\n      ignoringMouseDown.current = true;\n    }\n\n    const element = fakeElement ? null : container.current;\n    const rect = element ? element.getBoundingClientRect() : {\n      width: 0,\n      height: 0,\n      left: 0,\n      top: 0\n    }; // Get the size of the ripple\n\n    let rippleX;\n    let rippleY;\n    let rippleSize;\n\n    if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {\n      rippleX = Math.round(rect.width / 2);\n      rippleY = Math.round(rect.height / 2);\n    } else {\n      const {\n        clientX,\n        clientY\n      } = event.touches ? event.touches[0] : event;\n      rippleX = Math.round(clientX - rect.left);\n      rippleY = Math.round(clientY - rect.top);\n    }\n\n    if (center) {\n      rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3); // For some reason the animation is broken on Mobile Chrome if the size if even.\n\n      if (rippleSize % 2 === 0) {\n        rippleSize += 1;\n      }\n    } else {\n      const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;\n      const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;\n      rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);\n    } // Touche devices\n\n\n    if (event.touches) {\n      // check that this isn't another touchstart due to multitouch\n      // otherwise we will only clear a single timer when unmounting while two\n      // are running\n      if (startTimerCommit.current === null) {\n        // Prepare the ripple effect.\n        startTimerCommit.current = () => {\n          startCommit({\n            pulsate,\n            rippleX,\n            rippleY,\n            rippleSize,\n            cb\n          });\n        }; // Delay the execution of the ripple effect.\n\n\n        startTimer.current = setTimeout(() => {\n          if (startTimerCommit.current) {\n            startTimerCommit.current();\n            startTimerCommit.current = null;\n          }\n        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.\n      }\n    } else {\n      startCommit({\n        pulsate,\n        rippleX,\n        rippleY,\n        rippleSize,\n        cb\n      });\n    }\n  }, [centerProp, startCommit]);\n  const pulsate = React.useCallback(() => {\n    start({}, {\n      pulsate: true\n    });\n  }, [start]);\n  const stop = React.useCallback((event, cb) => {\n    clearTimeout(startTimer.current); // The touch interaction occurs too quickly.\n    // We still want to show ripple effect.\n\n    if (event.type === 'touchend' && startTimerCommit.current) {\n      event.persist();\n      startTimerCommit.current();\n      startTimerCommit.current = null;\n      startTimer.current = setTimeout(() => {\n        stop(event, cb);\n      });\n      return;\n    }\n\n    startTimerCommit.current = null;\n    setRipples(oldRipples => {\n      if (oldRipples.length > 0) {\n        return oldRipples.slice(1);\n      }\n\n      return oldRipples;\n    });\n    rippleCallback.current = cb;\n  }, []);\n  React.useImperativeHandle(ref, () => ({\n    pulsate,\n    start,\n    stop\n  }), [pulsate, start, stop]);\n  return __jsx(\"span\", _extends({\n    className: clsx(classes.root, className),\n    ref: container\n  }, other), __jsx(TransitionGroup, {\n    component: null,\n    exit: true\n  }, ripples));\n});\nexport default withStyles(styles, {\n  flip: false,\n  name: 'MuiTouchRipple'\n})( /*#__PURE__*/React.memo(TouchRipple));","map":null,"metadata":{},"sourceType":"module"}