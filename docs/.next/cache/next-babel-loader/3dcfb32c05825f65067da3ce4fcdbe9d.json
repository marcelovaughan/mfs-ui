{"ast":null,"code":"import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType } from \"../../../material-ui-utils/src\";\nimport setRef from \"../utils/setRef\";\nimport useForkRef from \"../utils/useForkRef\";\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container; // #StrictMode ready\n\n  return ReactDOM.findDOMNode(container);\n}\n\nconst useEnhancedEffect = false ? React.useLayoutEffect : React.useEffect;\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {\n  const {\n    children,\n    container,\n    disablePortal = false,\n    onRendered\n  } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  const handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return () => {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n  useEnhancedEffect(() => {\n    if (onRendered && (mountNode || disablePortal)) {\n      onRendered();\n    }\n  }, [onRendered, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      return /*#__PURE__*/React.cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;\n});\nPortal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A HTML element, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.instanceOf(React.Component), PropTypes.func]),\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func\n};\n\nif (true) {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Portal/Portal.js"],"names":["React","ReactDOM","PropTypes","exactProp","HTMLElementType","setRef","useForkRef","getContainer","container","findDOMNode","useEnhancedEffect","useLayoutEffect","useEffect","Portal","forwardRef","props","ref","children","disablePortal","onRendered","mountNode","setMountNode","useState","handleRef","isValidElement","document","body","undefined","cloneElement","createPortal","propTypes","node","oneOfType","instanceOf","Component","func","bool"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container;\n  // #StrictMode ready\n  return ReactDOM.findDOMNode(container);\n}\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\nconst Portal = React.forwardRef(function Portal(props, ref) {\n  const { children, container, disablePortal = false, onRendered } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  const handleRef = useForkRef(React.isValidElement(children) ? children.ref : null, ref);\n\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return () => {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n\n  useEnhancedEffect(() => {\n    if (onRendered && (mountNode || disablePortal)) {\n      onRendered();\n    }\n  }, [onRendered, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if (React.isValidElement(children)) {\n      return React.cloneElement(children, {\n        ref: handleRef,\n      });\n    }\n    return children;\n  }\n\n  return mountNode ? ReactDOM.createPortal(children, mountNode) : mountNode;\n});\n\nPortal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n  /**\n   * A HTML element, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([\n    HTMLElementType,\n    PropTypes.instanceOf(React.Component),\n    PropTypes.func,\n  ]),\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func,\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;\n"]},"metadata":{},"sourceType":"module"}