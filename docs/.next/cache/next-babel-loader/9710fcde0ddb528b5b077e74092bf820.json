{"ast":null,"code":"function makeUnique(hash, unique, i = 1) {\n  const uniqueHash = i === 1 ? hash : `${hash}-${i}`;\n\n  if (!unique[uniqueHash]) {\n    unique[uniqueHash] = true;\n    return uniqueHash;\n  }\n\n  return makeUnique(hash, unique, i + 1);\n}\n/**\n * @param {string} text - HTML from e.g. parseMarkdown#render\n * @param {Record<string, boolean>} [unique] - Ensures that each output is unique in `unique`\n * @returns {string} that is safe to use in fragment links\n */\n\n\nexport default function textToHash(text, unique = {}) {\n  return makeUnique(encodeURI(text.toLowerCase().replace(/<\\/?[^>]+(>|$)/g, '') // remove HTML\n  .replace(/=&gt;|&lt;| \\/&gt;|<code>|<\\/code>|&#39;/g, '').replace(/[!@#$%^&*()=_+[\\]{}`~;:'\"|,.<>/?\\s]+/g, '-').replace(/([\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])\\uFE0F?/g, '') // remove emojis\n  .replace(/-+/g, '-').replace(/^-|-$/g, '')), unique);\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/utils/textToHash.js"],"names":["makeUnique","hash","unique","i","uniqueHash","textToHash","text","encodeURI","toLowerCase","replace"],"mappings":"AAAA,SAASA,UAAT,CAAoBC,IAApB,EAA0BC,MAA1B,EAAkCC,CAAC,GAAG,CAAtC,EAAyC;AACvC,QAAMC,UAAU,GAAGD,CAAC,KAAK,CAAN,GAAUF,IAAV,GAAkB,GAAEA,IAAK,IAAGE,CAAE,EAAjD;;AAEA,MAAI,CAACD,MAAM,CAACE,UAAD,CAAX,EAAyB;AACvBF,IAAAA,MAAM,CAACE,UAAD,CAAN,GAAqB,IAArB;AACA,WAAOA,UAAP;AACD;;AAED,SAAOJ,UAAU,CAACC,IAAD,EAAOC,MAAP,EAAeC,CAAC,GAAG,CAAnB,CAAjB;AACD;AAED;;;;;;;AAKA,eAAe,SAASE,UAAT,CAAoBC,IAApB,EAA0BJ,MAAM,GAAG,EAAnC,EAAuC;AACpD,SAAOF,UAAU,CACfO,SAAS,CACPD,IAAI,CACDE,WADH,GAEGC,OAFH,CAEW,iBAFX,EAE8B,EAF9B,EAEkC;AAFlC,GAGGA,OAHH,CAGW,2CAHX,EAGwD,EAHxD,EAIGA,OAJH,CAIW,uCAJX,EAIoD,GAJpD,EAKGA,OALH,CAMI,6GANJ,EAOI,EAPJ,EAQI;AARJ,GASGA,OATH,CASW,KATX,EASkB,GATlB,EAUGA,OAVH,CAUW,QAVX,EAUqB,EAVrB,CADO,CADM,EAcfP,MAde,CAAjB;AAgBD","sourcesContent":["function makeUnique(hash, unique, i = 1) {\n  const uniqueHash = i === 1 ? hash : `${hash}-${i}`;\n\n  if (!unique[uniqueHash]) {\n    unique[uniqueHash] = true;\n    return uniqueHash;\n  }\n\n  return makeUnique(hash, unique, i + 1);\n}\n\n/**\n * @param {string} text - HTML from e.g. parseMarkdown#render\n * @param {Record<string, boolean>} [unique] - Ensures that each output is unique in `unique`\n * @returns {string} that is safe to use in fragment links\n */\nexport default function textToHash(text, unique = {}) {\n  return makeUnique(\n    encodeURI(\n      text\n        .toLowerCase()\n        .replace(/<\\/?[^>]+(>|$)/g, '') // remove HTML\n        .replace(/=&gt;|&lt;| \\/&gt;|<code>|<\\/code>|&#39;/g, '')\n        .replace(/[!@#$%^&*()=_+[\\]{}`~;:'\"|,.<>/?\\s]+/g, '-')\n        .replace(\n          /([\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])\\uFE0F?/g,\n          '',\n        ) // remove emojis\n        .replace(/-+/g, '-')\n        .replace(/^-|-$/g, ''),\n    ),\n    unique,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}