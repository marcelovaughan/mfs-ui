{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/TextareaAutosize/TextareaAutosize.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from \"../utils/debounce\";\nimport useForkRef from \"../utils/useForkRef\";\n\nfunction getStyleValue(computedStyle, property) {\n  return _parseInt(computedStyle[property], 10) || 0;\n}\n\nvar useEnhancedEffect = true ? React.useLayoutEffect : React.useEffect;\nvar styles = {\n  /* Styles applied to the shadow textarea element. */\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nvar TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {\n  var onChange = props.onChange,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$rowsMin = props.rowsMin,\n      rowsMinProp = _props$rowsMin === void 0 ? 1 : _props$rowsMin,\n      style = props.style,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"onChange\", \"rows\", \"rowsMax\", \"rowsMin\", \"style\", \"value\"]);\n\n  var rowsMin = rows || rowsMinProp;\n\n  var _React$useRef = React.useRef(value != null),\n      isControlled = _React$useRef.current;\n\n  var inputRef = React.useRef(null);\n  var handleRef = useForkRef(ref, inputRef);\n  var shadowRef = React.useRef(null);\n  var renders = React.useRef(0);\n\n  var _React$useState = React.useState({}),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var syncHeight = React.useCallback(function () {\n    var input = inputRef.current;\n    var computedStyle = window.getComputedStyle(input);\n    var inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n\n    var boxSizing = computedStyle['box-sizing'];\n    var padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    var border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content\n\n    var innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    var singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content\n\n    var outerHeight = innerHeight;\n\n    if (rowsMin) {\n      outerHeight = Math.max(Number(rowsMin) * singleRowHeight, outerHeight);\n    }\n\n    if (rowsMax) {\n      outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    var overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    setState(function (prevState) {\n      // Need a large enough difference to update the height.\n      // This prevents infinite rendering loop.\n      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n        renders.current += 1;\n        return {\n          overflow: overflow,\n          outerHeightStyle: outerHeightStyle\n        };\n      }\n\n      if (true) {\n        if (renders.current === 20) {\n          console.error(['Material-UI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n        }\n      }\n\n      return prevState;\n    });\n  }, [rowsMax, rowsMin, props.placeholder]);\n  React.useEffect(function () {\n    var handleResize = debounce(function () {\n      renders.current = 0;\n      syncHeight();\n    });\n    window.addEventListener('resize', handleResize);\n    return function () {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [syncHeight]);\n  useEnhancedEffect(function () {\n    syncHeight();\n  });\n  React.useEffect(function () {\n    renders.current = 0;\n  }, [value]);\n\n  var handleChange = function handleChange(event) {\n    renders.current = 0;\n\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, __jsx(\"textarea\", _extends({\n    value: value,\n    onChange: handleChange,\n    ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n    ,\n    rows: rowsMin,\n    style: _objectSpread({\n      height: state.outerHeightStyle,\n      // Need a large enough difference to allow scrolling.\n      // This prevents infinite rendering loop.\n      overflow: state.overflow ? 'hidden' : null\n    }, style)\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  })), __jsx(\"textarea\", {\n    \"aria-hidden\": true,\n    className: props.className,\n    readOnly: true,\n    ref: shadowRef,\n    tabIndex: -1,\n    style: _objectSpread(_objectSpread({}, styles.shadow), style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }));\n});\nTextareaAutosize.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Use `rowsMin` instead. The prop will be removed in v5.\n   *\n   * @deprecated\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Maximum number of rows to display.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display.\n   */\n  rowsMin: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n};\nexport default TextareaAutosize;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/TextareaAutosize/TextareaAutosize.js"],"names":["React","PropTypes","debounce","useForkRef","getStyleValue","computedStyle","property","useEnhancedEffect","useLayoutEffect","useEffect","styles","shadow","visibility","position","overflow","height","top","left","transform","TextareaAutosize","forwardRef","props","ref","onChange","rows","rowsMax","rowsMin","rowsMinProp","style","value","other","useRef","isControlled","current","inputRef","handleRef","shadowRef","renders","useState","state","setState","syncHeight","useCallback","input","window","getComputedStyle","inputShallow","width","placeholder","slice","boxSizing","padding","border","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","outerHeightStyle","abs","prevState","console","error","join","handleResize","addEventListener","clear","removeEventListener","handleChange","event","className","propTypes","string","func","oneOfType","number","object","arrayOf"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from '../utils/debounce';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\nconst styles = {\n  /* Styles applied to the shadow textarea element. */\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)',\n  },\n};\n\nconst TextareaAutosize = React.forwardRef(function TextareaAutosize(props, ref) {\n  const { onChange, rows, rowsMax, rowsMin: rowsMinProp = 1, style, value, ...other } = props;\n\n  const rowsMin = rows || rowsMinProp;\n\n  const { current: isControlled } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(ref, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({});\n\n  const syncHeight = React.useCallback(() => {\n    const input = inputRef.current;\n    const computedStyle = window.getComputedStyle(input);\n\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n\n    const boxSizing = computedStyle['box-sizing'];\n    const padding =\n      getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    const border =\n      getStyleValue(computedStyle, 'border-bottom-width') +\n      getStyleValue(computedStyle, 'border-top-width');\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight - padding;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight - padding;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n\n    if (rowsMin) {\n      outerHeight = Math.max(Number(rowsMin) * singleRowHeight, outerHeight);\n    }\n    if (rowsMax) {\n      outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n\n    setState((prevState) => {\n      // Need a large enough difference to update the height.\n      // This prevents infinite rendering loop.\n      if (\n        renders.current < 20 &&\n        ((outerHeightStyle > 0 &&\n          Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1) ||\n          prevState.overflow !== overflow)\n      ) {\n        renders.current += 1;\n        return {\n          overflow,\n          outerHeightStyle,\n        };\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (renders.current === 20) {\n          console.error(\n            [\n              'Material-UI: Too many re-renders. The layout is unstable.',\n              'TextareaAutosize limits the number of renders to prevent an infinite loop.',\n            ].join('\\n'),\n          );\n        }\n      }\n\n      return prevState;\n    });\n  }, [rowsMax, rowsMin, props.placeholder]);\n\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      renders.current = 0;\n      syncHeight();\n    });\n\n    window.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [syncHeight]);\n\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n\n  const handleChange = (event) => {\n    renders.current = 0;\n\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <textarea\n        value={value}\n        onChange={handleChange}\n        ref={handleRef}\n        // Apply the rows prop to get a \"correct\" first SSR paint\n        rows={rowsMin}\n        style={{\n          height: state.outerHeightStyle,\n          // Need a large enough difference to allow scrolling.\n          // This prevents infinite rendering loop.\n          overflow: state.overflow ? 'hidden' : null,\n          ...style,\n        }}\n        {...other}\n      />\n      <textarea\n        aria-hidden\n        className={props.className}\n        readOnly\n        ref={shadowRef}\n        tabIndex={-1}\n        style={{ ...styles.shadow, ...style }}\n      />\n    </React.Fragment>\n  );\n});\n\nTextareaAutosize.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Use `rowsMin` instead. The prop will be removed in v5.\n   *\n   * @deprecated\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Maximum number of rows to display.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   */\n  rowsMin: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n};\n\nexport default TextareaAutosize;\n"]},"metadata":{},"sourceType":"module"}