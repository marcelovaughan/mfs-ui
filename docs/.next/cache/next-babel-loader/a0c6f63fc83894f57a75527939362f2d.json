{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { ACTION_TYPES, CODE_VARIANTS } from \"../constants\";\nimport memoize from \"../../../../packages/material-ui-system/src/memoize\";\nimport mapTranslations from \"../utils/mapTranslations\";\n\nvar req = require.context(\"../../../translations\", false, /translations.*\\.json$/);\n\nvar translations = mapTranslations(req, 'json');\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce(function (acc, item) {\n    return acc && acc[item] ? acc[item] : null;\n  }, obj);\n}\n\nvar warnOnce = {};\nvar getT = memoize(function (userLanguage) {\n  return function (key) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$ignoreWarnin = options.ignoreWarning,\n        ignoreWarning = _options$ignoreWarnin === void 0 ? false : _options$ignoreWarnin;\n    var wordings = translations[userLanguage];\n\n    if (!wordings) {\n      console.error(\"Missing language: \".concat(userLanguage, \".\"));\n      return 'â€¦';\n    }\n\n    var translation = getPath(wordings, key);\n\n    if (!translation) {\n      var fullKey = \"\".concat(userLanguage, \":\").concat(key); // No warnings in CI env\n\n      if (!ignoreWarning && !warnOnce[fullKey] && true) {\n        console.error(\"Missing translation for \".concat(fullKey, \".\"));\n        warnOnce[fullKey] = true;\n      }\n\n      return getPath(translations.en, key);\n    }\n\n    return translation;\n  };\n});\n\nvar mapping = _defineProperty({}, ACTION_TYPES.OPTIONS_CHANGE, function (state, action) {\n  var newState = {\n    codeVariant: action.payload.codeVariant || state.codeVariant,\n    userLanguage: action.payload.userLanguage || state.userLanguage\n  };\n  return newState;\n});\n\nexport default function optionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var newState = _objectSpread({}, state);\n\n  if (!newState.codeVariant) {\n    newState.codeVariant = CODE_VARIANTS.JS;\n  }\n\n  if (!newState.userLanguage) {\n    newState.userLanguage = 'en';\n  }\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  newState.t = getT(newState.userLanguage);\n  return newState;\n}","map":null,"metadata":{},"sourceType":"module"}