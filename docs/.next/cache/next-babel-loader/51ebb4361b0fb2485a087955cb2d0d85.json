{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Typography/Typography.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport capitalize from \"../utils/capitalize\";\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nvar Typography = /*#__PURE__*/React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return __jsx(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }));\n});\nTypography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   * Overrides the behavior of the `variantMapping` prop.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'inherit']),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object\n};\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Typography/Typography.js"],"names":["React","PropTypes","clsx","withStyles","capitalize","styles","theme","root","margin","body2","typography","body1","caption","button","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","overline","alignLeft","textAlign","alignCenter","alignRight","alignJustify","noWrap","overflow","textOverflow","whiteSpace","gutterBottom","marginBottom","paragraph","colorInherit","color","colorPrimary","palette","primary","main","colorSecondary","secondary","colorTextPrimary","text","colorTextSecondary","colorError","error","displayInline","display","displayBlock","defaultVariantMapping","Typography","forwardRef","props","ref","align","classes","className","component","variant","variantMapping","other","Component","propTypes","oneOf","children","node","object","isRequired","string","elementType","bool","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = (theme) => ({\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0,\n  },\n  /* Styles applied to the root element if `variant=\"body2\"`. */\n  body2: theme.typography.body2,\n  /* Styles applied to the root element if `variant=\"body1\"`. */\n  body1: theme.typography.body1,\n  /* Styles applied to the root element if `variant=\"caption\"`. */\n  caption: theme.typography.caption,\n  /* Styles applied to the root element if `variant=\"button\"`. */\n  button: theme.typography.button,\n  /* Styles applied to the root element if `variant=\"h1\"`. */\n  h1: theme.typography.h1,\n  /* Styles applied to the root element if `variant=\"h2\"`. */\n  h2: theme.typography.h2,\n  /* Styles applied to the root element if `variant=\"h3\"`. */\n  h3: theme.typography.h3,\n  /* Styles applied to the root element if `variant=\"h4\"`. */\n  h4: theme.typography.h4,\n  /* Styles applied to the root element if `variant=\"h5\"`. */\n  h5: theme.typography.h5,\n  /* Styles applied to the root element if `variant=\"h6\"`. */\n  h6: theme.typography.h6,\n  /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n  subtitle1: theme.typography.subtitle1,\n  /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n  subtitle2: theme.typography.subtitle2,\n  /* Styles applied to the root element if `variant=\"overline\"`. */\n  overline: theme.typography.overline,\n  /* Styles applied to the root element if `align=\"left\"`. */\n  alignLeft: {\n    textAlign: 'left',\n  },\n  /* Styles applied to the root element if `align=\"center\"`. */\n  alignCenter: {\n    textAlign: 'center',\n  },\n  /* Styles applied to the root element if `align=\"right\"`. */\n  alignRight: {\n    textAlign: 'right',\n  },\n  /* Styles applied to the root element if `align=\"justify\"`. */\n  alignJustify: {\n    textAlign: 'justify',\n  },\n  /* Styles applied to the root element if `nowrap={true}`. */\n  noWrap: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  },\n  /* Styles applied to the root element if `gutterBottom={true}`. */\n  gutterBottom: {\n    marginBottom: '0.35em',\n  },\n  /* Styles applied to the root element if `paragraph={true}`. */\n  paragraph: {\n    marginBottom: 16,\n  },\n  /* Styles applied to the root element if `color=\"inherit\"`. */\n  colorInherit: {\n    color: 'inherit',\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main,\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main,\n  },\n  /* Styles applied to the root element if `color=\"textPrimary\"`. */\n  colorTextPrimary: {\n    color: theme.palette.text.primary,\n  },\n  /* Styles applied to the root element if `color=\"textSecondary\"`. */\n  colorTextSecondary: {\n    color: theme.palette.text.secondary,\n  },\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    color: theme.palette.error.main,\n  },\n  /* Styles applied to the root element if `display=\"inline\"`. */\n  displayInline: {\n    display: 'inline',\n  },\n  /* Styles applied to the root element if `display=\"block\"`. */\n  displayBlock: {\n    display: 'block',\n  },\n});\n\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n};\n\nconst Typography = React.forwardRef(function Typography(props, ref) {\n  const {\n    align = 'inherit',\n    classes,\n    className,\n    color = 'initial',\n    component,\n    display = 'initial',\n    gutterBottom = false,\n    noWrap = false,\n    paragraph = false,\n    variant = 'body1',\n    variantMapping = defaultVariantMapping,\n    ...other\n  } = props;\n\n  const Component =\n    component ||\n    (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) ||\n    'span';\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        {\n          [classes[variant]]: variant !== 'inherit',\n          [classes[`color${capitalize(color)}`]]: color !== 'initial',\n          [classes.noWrap]: noWrap,\n          [classes.gutterBottom]: gutterBottom,\n          [classes.paragraph]: paragraph,\n          [classes[`align${capitalize(align)}`]]: align !== 'inherit',\n          [classes[`display${capitalize(display)}`]]: display !== 'initial',\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nTypography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf([\n    'initial',\n    'inherit',\n    'primary',\n    'secondary',\n    'textPrimary',\n    'textSecondary',\n    'error',\n  ]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   * Overrides the behavior of the `variantMapping` prop.\n   */\n  component: PropTypes /* @typescript-to-proptypes-ignore */.elementType,\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf([\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'subtitle1',\n    'subtitle2',\n    'body1',\n    'body2',\n    'caption',\n    'button',\n    'overline',\n    'inherit',\n  ]),\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiTypography' })(Typography);\n"]},"metadata":{},"sourceType":"module"}