{"ast":null,"code":"import * as PropTypes from 'prop-types';\nimport chainPropTypes from \"./chainPropTypes\";\n\nfunction isClassComponent(elementType) {\n  // elementType.prototype?.isReactComponent\n  const {\n    prototype = {}\n  } = elementType;\n  return Boolean(prototype.isReactComponent);\n}\n\nfunction elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {\n  const propValue = props[propName];\n  const safePropName = propFullName || propName;\n\n  if (propValue == null) {\n    return null;\n  }\n\n  let warningHint;\n  /**\n   * Blacklisting instead of whitelisting\n   *\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\n   * trigger a warning in React.\n   * We can't whitelist because there is no safe way to detect React.forwardRef\n   * or class components. \"Safe\" means there's no public API.\n   *\n   */\n\n  if (typeof propValue === 'function' && !isClassComponent(propValue)) {\n    warningHint = 'Did you accidentally provide a plain function component instead?';\n  }\n\n  if (warningHint !== undefined) {\n    return new Error(`Invalid ${location} \\`${safePropName}\\` supplied to \\`${componentName}\\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');\n  }\n\n  return null;\n}\n\nexport default chainPropTypes(PropTypes.elementType, elementTypeAcceptingRef);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-utils/src/elementTypeAcceptingRef.js"],"names":["PropTypes","chainPropTypes","isClassComponent","elementType","prototype","Boolean","isReactComponent","elementTypeAcceptingRef","props","propName","componentName","location","propFullName","propValue","safePropName","warningHint","undefined","Error"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,YAA3B;AACA,OAAOC,cAAP;;AAEA,SAASC,gBAAT,CAA0BC,WAA1B,EAAuC;AACrC;AACA,QAAM;AAAEC,IAAAA,SAAS,GAAG;AAAd,MAAqBD,WAA3B;AAEA,SAAOE,OAAO,CAACD,SAAS,CAACE,gBAAX,CAAd;AACD;;AAED,SAASC,uBAAT,CAAiCC,KAAjC,EAAwCC,QAAxC,EAAkDC,aAAlD,EAAiEC,QAAjE,EAA2EC,YAA3E,EAAyF;AACvF,QAAMC,SAAS,GAAGL,KAAK,CAACC,QAAD,CAAvB;AACA,QAAMK,YAAY,GAAGF,YAAY,IAAIH,QAArC;;AAEA,MAAII,SAAS,IAAI,IAAjB,EAAuB;AACrB,WAAO,IAAP;AACD;;AAED,MAAIE,WAAJ;AAEA;;;;;;;;;;AASA,MAAI,OAAOF,SAAP,KAAqB,UAArB,IAAmC,CAACX,gBAAgB,CAACW,SAAD,CAAxD,EAAqE;AACnEE,IAAAA,WAAW,GAAG,kEAAd;AACD;;AAED,MAAIA,WAAW,KAAKC,SAApB,EAA+B;AAC7B,WAAO,IAAIC,KAAJ,CACJ,WAAUN,QAAS,MAAKG,YAAa,oBAAmBJ,aAAc,MAAvE,GACG,iDAAgDK,WAAY,GAD/D,GAEE,2EAHG,CAAP;AAKD;;AAED,SAAO,IAAP;AACD;;AAED,eAAed,cAAc,CAACD,SAAS,CAACG,WAAX,EAAwBI,uBAAxB,CAA7B","sourcesContent":["import * as PropTypes from 'prop-types';\nimport chainPropTypes from './chainPropTypes';\n\nfunction isClassComponent(elementType) {\n  // elementType.prototype?.isReactComponent\n  const { prototype = {} } = elementType;\n\n  return Boolean(prototype.isReactComponent);\n}\n\nfunction elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {\n  const propValue = props[propName];\n  const safePropName = propFullName || propName;\n\n  if (propValue == null) {\n    return null;\n  }\n\n  let warningHint;\n\n  /**\n   * Blacklisting instead of whitelisting\n   *\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\n   * trigger a warning in React.\n   * We can't whitelist because there is no safe way to detect React.forwardRef\n   * or class components. \"Safe\" means there's no public API.\n   *\n   */\n  if (typeof propValue === 'function' && !isClassComponent(propValue)) {\n    warningHint = 'Did you accidentally provide a plain function component instead?';\n  }\n\n  if (warningHint !== undefined) {\n    return new Error(\n      `Invalid ${location} \\`${safePropName}\\` supplied to \\`${componentName}\\`. ` +\n        `Expected an element type that can hold a ref. ${warningHint} ` +\n        'For more information see https://material-ui.com/r/caveat-with-refs-guide',\n    );\n  }\n\n  return null;\n}\n\nexport default chainPropTypes(PropTypes.elementType, elementTypeAcceptingRef);\n"]},"metadata":{},"sourceType":"module"}