{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { deepmerge } from \"../../../material-ui-utils/src\";\nimport createBreakpoints from \"./createBreakpoints\";\nimport createMixins from \"./createMixins\";\nimport createPalette from \"./createPalette\";\nimport createTypography from \"./createTypography\";\nimport shadows from \"./shadows\";\nimport shape from \"./shape\";\nimport createSpacing from \"./createSpacing\";\nimport transitions from \"./transitions\";\nimport zIndex from \"./zIndex\";\n\nfunction createMuiTheme(options = {}, ...args) {\n  const {\n    breakpoints: breakpointsInput = {},\n    mixins: mixinsInput = {},\n    palette: paletteInput = {},\n    spacing: spacingInput,\n    typography: typographyInput = {}\n  } = options,\n        other = _objectWithoutProperties(options, [\"breakpoints\", \"mixins\", \"palette\", \"spacing\", \"typography\"]);\n\n  const palette = createPalette(paletteInput);\n  const breakpoints = createBreakpoints(breakpointsInput);\n  const spacing = createSpacing(spacingInput);\n  let muiTheme = deepmerge({\n    breakpoints,\n    direction: 'ltr',\n    mixins: createMixins(breakpoints, spacing, mixinsInput),\n    overrides: {},\n    // Inject custom styles\n    palette,\n    props: {},\n    // Provide default props\n    shadows,\n    typography: createTypography(palette, typographyInput),\n    spacing,\n    shape,\n    transitions,\n    zIndex\n  }, other);\n  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);\n\n  if (true) {\n    const pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected'];\n\n    const traverse = (node, parentKey, depth = 1) => {\n      let key; // eslint-disable-next-line guard-for-in, no-restricted-syntax\n\n      for (key in node) {\n        const child = node[key];\n\n        if (depth === 1) {\n          if (key.indexOf('Mui') === 0 && child) {\n            traverse(child, key, depth + 1);\n          }\n        } else if (pseudoClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {\n          if (true) {\n            console.error([`Material-UI: The \\`${parentKey}\\` component increases ` + `the CSS specificity of the \\`${key}\\` internal state.`, 'You can not override it like this: ', JSON.stringify(node, null, 2), '', 'Instead, you need to use the $ruleName syntax:', JSON.stringify({\n              root: {\n                [`&$${key}`]: child\n              }\n            }, null, 2), '', 'https://material-ui.com/r/pseudo-classes-guide'].join('\\n'));\n          } // Remove the style to prevent global conflicts.\n\n\n          node[key] = {};\n        }\n      }\n    };\n\n    traverse(muiTheme.overrides);\n  }\n\n  return muiTheme;\n}\n\nexport default createMuiTheme;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/styles/createMuiTheme.js"],"names":["deepmerge","createBreakpoints","createMixins","createPalette","createTypography","shadows","shape","createSpacing","transitions","zIndex","createMuiTheme","options","args","breakpoints","breakpointsInput","mixins","mixinsInput","palette","paletteInput","spacing","spacingInput","typography","typographyInput","other","muiTheme","direction","overrides","props","reduce","acc","argument","pseudoClasses","traverse","node","parentKey","depth","key","child","indexOf","Object","keys","length","console","error","JSON","stringify","root","join"],"mappings":"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","sourcesContent":["import { deepmerge } from '@material-ui/utils';\nimport createBreakpoints from './createBreakpoints';\nimport createMixins from './createMixins';\nimport createPalette from './createPalette';\nimport createTypography from './createTypography';\nimport shadows from './shadows';\nimport shape from './shape';\nimport createSpacing from './createSpacing';\nimport transitions from './transitions';\nimport zIndex from './zIndex';\n\nfunction createMuiTheme(options = {}, ...args) {\n  const {\n    breakpoints: breakpointsInput = {},\n    mixins: mixinsInput = {},\n    palette: paletteInput = {},\n    spacing: spacingInput,\n    typography: typographyInput = {},\n    ...other\n  } = options;\n\n  const palette = createPalette(paletteInput);\n  const breakpoints = createBreakpoints(breakpointsInput);\n  const spacing = createSpacing(spacingInput);\n\n  let muiTheme = deepmerge(\n    {\n      breakpoints,\n      direction: 'ltr',\n      mixins: createMixins(breakpoints, spacing, mixinsInput),\n      overrides: {}, // Inject custom styles\n      palette,\n      props: {}, // Provide default props\n      shadows,\n      typography: createTypography(palette, typographyInput),\n      spacing,\n      shape,\n      transitions,\n      zIndex,\n    },\n    other,\n  );\n\n  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);\n\n  if (process.env.NODE_ENV !== 'production') {\n    const pseudoClasses = [\n      'checked',\n      'disabled',\n      'error',\n      'focused',\n      'focusVisible',\n      'required',\n      'expanded',\n      'selected',\n    ];\n    const traverse = (node, parentKey, depth = 1) => {\n      let key;\n\n      // eslint-disable-next-line guard-for-in, no-restricted-syntax\n      for (key in node) {\n        const child = node[key];\n        if (depth === 1) {\n          if (key.indexOf('Mui') === 0 && child) {\n            traverse(child, key, depth + 1);\n          }\n        } else if (pseudoClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              [\n                `Material-UI: The \\`${parentKey}\\` component increases ` +\n                  `the CSS specificity of the \\`${key}\\` internal state.`,\n                'You can not override it like this: ',\n                JSON.stringify(node, null, 2),\n                '',\n                'Instead, you need to use the $ruleName syntax:',\n                JSON.stringify(\n                  {\n                    root: {\n                      [`&$${key}`]: child,\n                    },\n                  },\n                  null,\n                  2,\n                ),\n                '',\n                'https://material-ui.com/r/pseudo-classes-guide',\n              ].join('\\n'),\n            );\n          }\n          // Remove the style to prevent global conflicts.\n          node[key] = {};\n        }\n      }\n    };\n\n    traverse(muiTheme.overrides);\n  }\n\n  return muiTheme;\n}\n\nexport default createMuiTheme;\n"]},"metadata":{},"sourceType":"module"}