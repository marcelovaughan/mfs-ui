{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { ACTION_TYPES } from \"../constants\";\nconst mapping = {\n  [ACTION_TYPES.NOTIFICATIONS_CHANGE]: (state, action) => {\n    const newState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    return newState;\n  }\n};\nexport default function notificationsReducer(state = {}, action) {\n  let newState = _objectSpread({}, state);\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  return newState;\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/docs/src/modules/redux/notificationsReducer.js"],"names":["mapping","ACTION_TYPES","newState","action","state"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,YAAA;AAEA,MAAMA,OAAO,GAAG;AACd,GAACC,YAAY,CAAb,oBAAA,GAAqC,CAAA,KAAA,EAAA,MAAA,KAAmB;AACtD,UAAMC,QAAQ,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAETC,MAAM,CAFX,OAAc,CAAd;;AAIA,WAAA,QAAA;AACD;AAPa,CAAhB;AAUA,eAAe,SAAA,oBAAA,CAA8BC,KAAK,GAAnC,EAAA,EAAA,MAAA,EAAkD;AAC/D,MAAIF,QAAQ,GAAA,aAAA,CAAA,EAAA,EAAZ,KAAY,CAAZ;;AAEA,MAAIF,OAAO,CAACG,MAAM,CAAlB,IAAW,CAAX,EAA0B;AACxBD,IAAAA,QAAQ,GAAGF,OAAO,CAACG,MAAM,CAAdH,IAAO,CAAPA,CAAAA,KAAAA,EAAXE,MAAWF,CAAXE;AACD;;AAED,SAAA,QAAA;AACD","sourcesContent":["import { ACTION_TYPES } from 'docs/src/modules/constants';\n\nconst mapping = {\n  [ACTION_TYPES.NOTIFICATIONS_CHANGE]: (state, action) => {\n    const newState = {\n      ...state,\n      ...action.payload,\n    };\n    return newState;\n  },\n};\n\nexport default function notificationsReducer(state = {}, action) {\n  let newState = { ...state };\n\n  if (mapping[action.type]) {\n    newState = mapping[action.type](state, action);\n  }\n\n  return newState;\n}\n"]},"metadata":{},"sourceType":"module"}