{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport LZString from 'lz-string';\nimport clsx from 'clsx';\nimport copy from 'clipboard-copy';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fade, makeStyles, useTheme } from \"../../../../packages/material-ui/src/styles\";\nimport IconButton from \"../../../../packages/material-ui/src/IconButton\";\nimport useMediaQuery from \"../../../../packages/material-ui/src/useMediaQuery\";\nimport Collapse from \"../../../../packages/material-ui/src/Collapse\";\nimport Fade from \"../../../../packages/material-ui/src/Fade\";\nimport ToggleButton from \"../../../../packages/material-ui-lab/src/ToggleButton\";\nimport ToggleButtonGroup from \"../../../../packages/material-ui-lab/src/ToggleButtonGroup\";\nimport { JavaScript as JavaScriptIcon, TypeScript as TypeScriptIcon } from \"../../../../packages/material-ui-docs/src\";\nimport NoSsr from \"../../../../packages/material-ui/src/NoSsr\";\nimport EditIcon from \"../../../../packages/material-ui-icons/src/Edit\";\nimport CodeIcon from \"../../../../packages/material-ui-icons/src/Code\";\nimport FileCopyIcon from \"../../../../packages/material-ui-icons/src/FileCopy\";\nimport Snackbar from \"../../../../packages/material-ui/src/Snackbar\";\nimport Menu from \"../../../../packages/material-ui/src/Menu\";\nimport MenuItem from \"../../../../packages/material-ui/src/MenuItem\";\nimport MoreVertIcon from \"../../../../packages/material-ui-icons/src/MoreVert\";\nimport Tooltip from \"../../../../packages/material-ui/src/Tooltip\";\nimport RefreshIcon from \"../../../../packages/material-ui-icons/src/Refresh\";\nimport ResetFocusIcon from \"../../../../packages/material-ui-icons/src/CenterFocusWeak\";\nimport HighlightedCode from \"./HighlightedCode\";\nimport DemoSandboxed from \"./DemoSandboxed\";\nimport getDemoConfig from \"../utils/getDemoConfig\";\nimport getJsxPreview from \"../utils/getJsxPreview\";\nimport { getCookie } from \"../utils/helpers\";\nimport { ACTION_TYPES, CODE_VARIANTS } from \"../constants\";\n\nfunction compress(object) {\n  return LZString.compressToBase64(JSON.stringify(object)).replace(/\\+/g, '-') // Convert '+' to '-'\n  .replace(/\\//g, '_') // Convert '/' to '_'\n  .replace(/=+$/, ''); // Remove ending '='\n}\n\nfunction addHiddenInput(form, name, value) {\n  const input = document.createElement('input');\n  input.type = 'hidden';\n  input.name = name;\n  input.value = value;\n  form.appendChild(input);\n}\n\nfunction getDemoName(location) {\n  return location.replace(/(.+?)(\\w+)\\.\\w+$$/, '$2');\n}\n\nfunction getDemoData(codeVariant, demo, githubLocation) {\n  if (codeVariant === CODE_VARIANTS.TS && demo.rawTS) {\n    return {\n      codeVariant: CODE_VARIANTS.TS,\n      githubLocation: githubLocation.replace(/\\.js$/, '.tsx'),\n      raw: demo.rawTS,\n      Component: demo.tsx,\n      sourceLanguage: 'tsx'\n    };\n  }\n\n  return {\n    codeVariant: CODE_VARIANTS.JS,\n    githubLocation,\n    raw: demo.raw,\n    Component: demo.js,\n    sourceLanguage: 'jsx'\n  };\n} // TODO: replace with React.useOpaqueReference if it is released\n\n\nfunction useUniqueId(prefix) {\n  // useOpaqueReference\n  const [id, setId] = React.useState();\n  React.useEffect(() => {\n    setId(Math.random().toString(36).slice(2));\n  }, []);\n  return id ? `${prefix}${id}` : id;\n}\n\nconst useDemoToolbarStyles = makeStyles(theme => {\n  return {\n    root: {\n      display: 'none',\n      [theme.breakpoints.up('sm')]: {\n        display: 'flex',\n        flip: false,\n        top: 0,\n        right: theme.spacing(1),\n        height: theme.spacing(6)\n      },\n      justifyContent: 'space-between'\n    },\n    toggleButtonGroup: {\n      margin: '8px 0'\n    },\n    toggleButton: {\n      padding: '4px 9px'\n    },\n    tooltip: {\n      zIndex: theme.zIndex.appBar - 1\n    }\n  };\n}, {\n  name: 'DemoToolbar'\n});\n\nconst alwaysTrue = () => true;\n/**\n *\n * @param {React.Ref<HTMLElement>[]} controlRefs\n * @param {object} [options]\n * @param {(index: number) => boolean} [options.isFocusableControl] In case certain controls become unfocusable\n * @param {number} [options.defaultActiveIndex]\n */\n\n\nfunction useToolbar(controlRefs, options = {}) {\n  const {\n    defaultActiveIndex = 0,\n    isFocusableControl = alwaysTrue\n  } = options;\n  const [activeControlIndex, setActiveControlIndex] = React.useState(defaultActiveIndex); // TODO: do we need to do this during layout practically? It's technically\n  // a bit too late since we allow user interaction between layout and passive effects\n\n  React.useEffect(() => {\n    setActiveControlIndex(currentActiveControlIndex => {\n      if (!isFocusableControl(currentActiveControlIndex)) {\n        return defaultActiveIndex;\n      }\n\n      return currentActiveControlIndex;\n    });\n  }, [defaultActiveIndex, isFocusableControl]); // controlRefs.findIndex(controlRef => controlRef.current = element)\n\n  function findControlIndex(element) {\n    let controlIndex = -1;\n    controlRefs.forEach((controlRef, index) => {\n      if (controlRef.current === element) {\n        controlIndex = index;\n      }\n    });\n    return controlIndex;\n  }\n\n  function handleControlFocus(event) {\n    const nextActiveControlIndex = findControlIndex(event.target);\n\n    if (nextActiveControlIndex !== -1) {\n      setActiveControlIndex(nextActiveControlIndex);\n    } else {\n      // make sure DCE works\n      // eslint-disable-next-line no-lonely-if\n      if (false) {\n        console.error('Material-UI: The toolbar contains a focusable element that is not controlled by the toolbar. ' + 'Make sure you have attached `getControlProps(index)` to every focusable element within this toolbar.');\n      }\n    }\n  }\n\n  let handleToolbarFocus;\n\n  if (false) {\n    handleToolbarFocus = event => {\n      if (findControlIndex(event.target) === -1) {\n        console.error('Material-UI: The toolbar contains a focusable element that is not controlled by the toolbar. ' + 'Make sure you have attached `getControlProps(index)` to every focusable element within this toolbar.');\n      }\n    };\n  }\n\n  const {\n    direction\n  } = useTheme();\n\n  function handleToolbarKeyDown(event) {\n    // We handle toolbars where controls can be hidden temporarily.\n    // When a control is hidden we can't move focus to it and have to exclude\n    // it from the order.\n    let currentFocusableControlIndex = -1;\n    const focusableControls = [];\n    controlRefs.forEach((controlRef, index) => {\n      const {\n        current: control\n      } = controlRef;\n\n      if (index === activeControlIndex) {\n        currentFocusableControlIndex = focusableControls.length;\n      }\n\n      if (control !== null && isFocusableControl(index)) {\n        focusableControls.push(control);\n      }\n    });\n    const prevControlKey = direction === 'ltr' ? 'ArrowLeft' : 'ArrowRight';\n    const nextControlKey = direction === 'ltr' ? 'ArrowRight' : 'ArrowLeft';\n    let nextFocusableIndex = -1;\n\n    switch (event.key) {\n      case prevControlKey:\n        nextFocusableIndex = (currentFocusableControlIndex - 1 + focusableControls.length) % focusableControls.length;\n        break;\n\n      case nextControlKey:\n        nextFocusableIndex = (currentFocusableControlIndex + 1) % focusableControls.length;\n        break;\n\n      case 'Home':\n        nextFocusableIndex = 0;\n        break;\n\n      case 'End':\n        nextFocusableIndex = focusableControls.length - 1;\n        break;\n\n      default:\n        break;\n    }\n\n    if (nextFocusableIndex !== -1) {\n      event.preventDefault();\n      focusableControls[nextFocusableIndex].focus();\n    }\n  }\n\n  function getControlProps(index) {\n    return {\n      onFocus: handleControlFocus,\n      ref: controlRefs[index],\n      tabIndex: index === activeControlIndex ? 0 : -1\n    };\n  }\n\n  return {\n    getControlProps,\n    toolbarProps: {\n      // TODO: good opportunity to warn on missing `aria-label`\n      onFocus: handleToolbarFocus,\n      onKeyDown: handleToolbarKeyDown,\n      role: 'toolbar'\n    }\n  };\n}\n\nvar _ref = __jsx(JavaScriptIcon, null);\n\nvar _ref2 = __jsx(TypeScriptIcon, null);\n\nvar _ref3 = __jsx(CodeIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref4 = __jsx(EditIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref5 = __jsx(FileCopyIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref6 = __jsx(ResetFocusIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref7 = __jsx(RefreshIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref8 = __jsx(MoreVertIcon, {\n  fontSize: \"small\"\n});\n\nfunction DemoToolbar(props) {\n  const {\n    codeOpen,\n    codeVariant,\n    demo,\n    demoData,\n    demoId,\n    demoHovered,\n    demoName,\n    demoOptions,\n    demoSourceId,\n    initialFocusRef,\n    onCodeOpenChange,\n    onResetDemoClick,\n    openDemoSource,\n    showPreview\n  } = props;\n  const classes = useDemoToolbarStyles();\n  const dispatch = useDispatch();\n  const t = useSelector(state => state.options.t);\n  const hasTSVariant = demo.rawTS;\n\n  const renderedCodeVariant = () => {\n    if (codeVariant === CODE_VARIANTS.TS && hasTSVariant) {\n      return CODE_VARIANTS.TS;\n    }\n\n    return CODE_VARIANTS.JS;\n  };\n\n  const handleCodeLanguageClick = (event, clickedCodeVariant) => {\n    if (codeVariant !== clickedCodeVariant) {\n      dispatch({\n        type: ACTION_TYPES.OPTIONS_CHANGE,\n        payload: {\n          codeVariant: clickedCodeVariant\n        }\n      });\n    }\n  };\n\n  const handleCodeSandboxClick = () => {\n    const demoConfig = getDemoConfig(demoData);\n    const parameters = compress({\n      files: _objectSpread({\n        'package.json': {\n          content: {\n            title: demoConfig.title,\n            description: demoConfig.description,\n            dependencies: demoConfig.dependencies,\n            devDependencies: _objectSpread({\n              'react-scripts': 'latest'\n            }, demoConfig.devDependencies),\n            main: demoConfig.main,\n            scripts: demoConfig.scripts\n          }\n        }\n      }, Object.keys(demoConfig.files).reduce((files, name) => {\n        files[name] = {\n          content: demoConfig.files[name]\n        };\n        return files;\n      }, {}))\n    });\n    const form = document.createElement('form');\n    form.method = 'POST';\n    form.target = '_blank';\n    form.action = 'https://codeSandbox.io/api/v1/sandboxes/define';\n    addHiddenInput(form, 'parameters', parameters);\n    document.body.appendChild(form);\n    form.submit();\n    document.body.removeChild(form);\n  };\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleMoreClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMoreClose = () => {\n    setAnchorEl(null);\n  };\n\n  const [snackbarOpen, setSnackbarOpen] = React.useState(false);\n  const [snackbarMessage, setSnackbarMessage] = React.useState(undefined);\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  const handleCopyClick = async () => {\n    try {\n      await copy(demoData.raw);\n      setSnackbarMessage(t('copiedSource'));\n      setSnackbarOpen(true);\n    } finally {\n      handleMoreClose();\n    }\n  };\n\n  const handleStackBlitzClick = () => {\n    const demoConfig = getDemoConfig(demoData);\n    const form = document.createElement('form');\n    form.method = 'POST';\n    form.target = '_blank';\n    form.action = 'https://stackblitz.com/run';\n    addHiddenInput(form, 'project[template]', 'javascript');\n    addHiddenInput(form, 'project[title]', demoConfig.title);\n    addHiddenInput(form, 'project[description]', demoConfig.description);\n    addHiddenInput(form, 'project[dependencies]', JSON.stringify(demoConfig.dependencies));\n    addHiddenInput(form, 'project[devDependencies]', JSON.stringify(demoConfig.devDependencies));\n    Object.keys(demoConfig.files).forEach(key => {\n      const value = demoConfig.files[key];\n      addHiddenInput(form, `project[files][${key}]`, value);\n    });\n    document.body.appendChild(form);\n    form.submit();\n    document.body.removeChild(form);\n    handleMoreClose();\n  };\n\n  const createHandleCodeSourceLink = anchor => async () => {\n    try {\n      await copy(`${window.location.href.split('#')[0]}#${anchor}`);\n      setSnackbarMessage(t('copiedSourceLink'));\n      setSnackbarOpen(true);\n    } finally {\n      handleMoreClose();\n    }\n  };\n\n  const [sourceHintSeen, setSourceHintSeen] = React.useState(false);\n  React.useEffect(() => {\n    setSourceHintSeen(getCookie('sourceHintSeen'));\n  }, []);\n\n  const handleCodeOpenClick = () => {\n    document.cookie = `sourceHintSeen=true;path=/;max-age=31536000`;\n    onCodeOpenChange();\n    setSourceHintSeen(true);\n  };\n\n  function handleResetFocusClick() {\n    initialFocusRef.current.focusVisible();\n  }\n\n  const showSourceHint = demoHovered && !sourceHintSeen;\n  let showCodeLabel;\n\n  if (codeOpen) {\n    showCodeLabel = showPreview ? t('hideFullSource') : t('hideSource');\n  } else {\n    showCodeLabel = showPreview ? t('showFullSource') : t('showSource');\n  }\n\n  const atLeastSmallViewport = useMediaQuery(theme => theme.breakpoints.up('sm'));\n  const controlRefs = [React.useRef(null), React.useRef(null), React.useRef(null), React.useRef(null), React.useRef(null), React.useRef(null), React.useRef(null), React.useRef(null)]; // if the code is not open we hide the first two language controls\n\n  const isFocusableControl = React.useCallback(index => codeOpen ? true : index >= 2, [codeOpen]);\n  const {\n    getControlProps,\n    toolbarProps\n  } = useToolbar(controlRefs, {\n    defaultActiveIndex: 2,\n    isFocusableControl\n  });\n  return __jsx(React.Fragment, null, __jsx(\"div\", _extends({\n    \"aria-label\": t('demoToolbarLabel'),\n    className: classes.root\n  }, toolbarProps), __jsx(NoSsr, {\n    defer: true\n  }, __jsx(Fade, {\n    in: codeOpen\n  }, __jsx(ToggleButtonGroup, {\n    className: classes.toggleButtonGroup,\n    exclusive: true,\n    value: renderedCodeVariant(),\n    onChange: handleCodeLanguageClick\n  }, __jsx(ToggleButton, _extends({\n    className: classes.toggleButton,\n    value: CODE_VARIANTS.JS,\n    \"aria-label\": t('showJSSource'),\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-action\": \"source-js\",\n    \"data-ga-event-label\": demoOptions.demo\n  }, getControlProps(0)), _ref), __jsx(ToggleButton, _extends({\n    className: classes.toggleButton,\n    value: CODE_VARIANTS.TS,\n    disabled: !hasTSVariant,\n    \"aria-label\": t('showTSSource'),\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-action\": \"source-ts\",\n    \"data-ga-event-label\": demoOptions.demo\n  }, getControlProps(1)), _ref2))), __jsx(\"div\", null, __jsx(Tooltip, {\n    classes: {\n      popper: classes.tooltip\n    },\n    key: showSourceHint,\n    open: showSourceHint && atLeastSmallViewport ? true : undefined,\n    PopperProps: {\n      disablePortal: true\n    },\n    title: showCodeLabel,\n    placement: \"top\"\n  }, __jsx(IconButton, _extends({\n    \"aria-controls\": openDemoSource ? demoSourceId : null,\n    \"aria-label\": showCodeLabel,\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"expand\",\n    onClick: handleCodeOpenClick,\n    color: demoHovered ? 'primary' : 'default'\n  }, getControlProps(2)), _ref3)), demoOptions.hideEditButton ? null : __jsx(Tooltip, {\n    classes: {\n      popper: classes.tooltip\n    },\n    title: t('codesandbox'),\n    placement: \"top\"\n  }, __jsx(IconButton, _extends({\n    \"aria-label\": t('codesandbox'),\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"codesandbox\",\n    onClick: handleCodeSandboxClick\n  }, getControlProps(3)), _ref4)), __jsx(Tooltip, {\n    classes: {\n      popper: classes.tooltip\n    },\n    title: t('copySource'),\n    placement: \"top\"\n  }, __jsx(IconButton, _extends({\n    \"aria-label\": t('copySource'),\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"copy\",\n    onClick: handleCopyClick\n  }, getControlProps(4)), _ref5)), __jsx(Tooltip, {\n    classes: {\n      popper: classes.tooltip\n    },\n    title: t('resetFocus'),\n    placement: \"top\"\n  }, __jsx(IconButton, _extends({\n    \"aria-label\": t('resetFocus'),\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"reset-focus\",\n    onClick: handleResetFocusClick\n  }, getControlProps(5)), _ref6)), __jsx(Tooltip, {\n    classes: {\n      popper: classes.tooltip\n    },\n    title: t('resetDemo'),\n    placement: \"top\"\n  }, __jsx(IconButton, _extends({\n    \"aria-controls\": demoId,\n    \"aria-label\": t('resetDemo'),\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"reset\",\n    onClick: onResetDemoClick\n  }, getControlProps(6)), _ref7)), __jsx(IconButton, _extends({\n    onClick: handleMoreClick,\n    \"aria-owns\": anchorEl ? 'demo-menu-more' : undefined,\n    \"aria-haspopup\": \"true\",\n    \"aria-label\": t('seeMore')\n  }, getControlProps(7)), _ref8), __jsx(Menu, {\n    id: \"demo-menu-more\",\n    anchorEl: anchorEl,\n    open: Boolean(anchorEl),\n    onClose: handleMoreClose,\n    getContentAnchorEl: null,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    }\n  }, __jsx(MenuItem, {\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"github\",\n    component: \"a\",\n    href: demoData.githubLocation,\n    target: \"_blank\",\n    rel: \"noopener nofollow\",\n    onClick: handleMoreClose\n  }, t('viewGitHub')), demoOptions.hideEditButton ? null : __jsx(MenuItem, {\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"stackblitz\",\n    onClick: handleStackBlitzClick\n  }, t('stackblitz')), __jsx(MenuItem, {\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"copy-js-source-link\",\n    onClick: createHandleCodeSourceLink(`${demoName}.js`)\n  }, t('copySourceLinkJS')), __jsx(MenuItem, {\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"copy-ts-source-link\",\n    onClick: createHandleCodeSourceLink(`${demoName}.tsx`)\n  }, t('copySourceLinkTS')))))), __jsx(Snackbar, {\n    open: snackbarOpen,\n    autoHideDuration: 3000,\n    onClose: handleSnackbarClose,\n    message: snackbarMessage\n  }));\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginBottom: 40,\n    marginLeft: -theme.spacing(2),\n    marginRight: -theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      padding: theme.spacing(0, 1),\n      marginLeft: 0,\n      marginRight: 0\n    }\n  },\n  demo: {\n    position: 'relative',\n    outline: 0,\n    margin: 'auto',\n    display: 'flex',\n    justifyContent: 'center',\n    [theme.breakpoints.up('sm')]: {\n      borderRadius: theme.shape.borderRadius\n    }\n  },\n\n  /* Isolate the demo with an outline. */\n  demoBgOutlined: {\n    padding: theme.spacing(3),\n    border: `1px solid ${fade(theme.palette.action.active, 0.12)}`,\n    borderLeftWidth: 0,\n    borderRightWidth: 0,\n    [theme.breakpoints.up('sm')]: {\n      borderLeftWidth: 1,\n      borderRightWidth: 1\n    }\n  },\n\n  /* Prepare the background to display an inner elevation. */\n  demoBgTrue: {\n    padding: theme.spacing(3),\n    backgroundColor: theme.palette.background.level2\n  },\n\n  /* Make no difference between the demo and the markdown. */\n  demoBgInline: {\n    // Maintain alignment with the markdown text\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(3)\n    }\n  },\n  demoHiddenToolbar: {\n    paddingTop: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      paddingTop: theme.spacing(3)\n    }\n  },\n  code: {\n    display: 'none',\n    padding: 0,\n    marginBottom: theme.spacing(1),\n    marginRight: 0,\n    [theme.breakpoints.up('sm')]: {\n      display: 'block'\n    },\n    '& pre': {\n      overflow: 'auto',\n      lineHeight: 1.5,\n      margin: '0 !important',\n      maxHeight: 1000\n    }\n  },\n  anchorLink: {\n    marginTop: -64,\n    // height of toolbar\n    position: 'absolute'\n  },\n  initialFocus: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    pointerEvents: 'none'\n  }\n}), {\n  name: 'Demo'\n});\n\nfunction Demo(props) {\n  const {\n    demo,\n    demoOptions,\n    githubLocation\n  } = props;\n  const classes = useStyles();\n  const t = useSelector(state => state.options.t);\n  const codeVariant = useSelector(state => state.options.codeVariant);\n  const demoData = getDemoData(codeVariant, demo, githubLocation);\n  const [demoHovered, setDemoHovered] = React.useState(false);\n\n  const handleDemoHover = event => {\n    setDemoHovered(event.type === 'mouseenter');\n  };\n\n  const DemoComponent = demoData.Component;\n  const demoName = getDemoName(demoData.githubLocation);\n  const demoSandboxedStyle = React.useMemo(() => ({\n    maxWidth: demoOptions.maxWidth,\n    height: demoOptions.height\n  }), [demoOptions.height, demoOptions.maxWidth]);\n\n  if (demoOptions.bg == null) {\n    demoOptions.bg = 'outlined';\n  }\n\n  if (demoOptions.iframe) {\n    demoOptions.bg = true;\n  }\n\n  const [codeOpen, setCodeOpen] = React.useState(demoOptions.defaultCodeOpen || false);\n  React.useEffect(() => {\n    const navigatedDemoName = getDemoName(window.location.hash);\n\n    if (demoName === navigatedDemoName) {\n      setCodeOpen(true);\n    }\n  }, [demoName]);\n  const jsx = getJsxPreview(demoData.raw || '');\n  const showPreview = !demoOptions.hideToolbar && demoOptions.defaultCodeOpen !== false && jsx !== demoData.raw && jsx.split(/\\n/).length <= 17;\n  const [demoKey, resetDemo] = React.useReducer(key => key + 1, 0);\n  const demoId = useUniqueId('demo-');\n  const demoSourceId = useUniqueId(`demoSource-`);\n  const openDemoSource = codeOpen || showPreview;\n  const initialFocusRef = React.useRef(null);\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: clsx(classes.demo, demoOptions.hideToolbar && classes.demoHiddenToolbar, demoOptions.bg === true && classes.demoBgTrue, {\n      'outlined': classes.demoBgOutlined,\n      'inline': classes.demoBgInline\n    }[demoOptions.bg]),\n    id: demoId,\n    onMouseEnter: handleDemoHover,\n    onMouseLeave: handleDemoHover\n  }, __jsx(IconButton, {\n    \"aria-label\": t('initialFocusLabel'),\n    className: classes.initialFocus,\n    action: initialFocusRef,\n    tabIndex: -1\n  }), __jsx(DemoSandboxed, {\n    key: demoKey,\n    style: demoSandboxedStyle,\n    component: DemoComponent,\n    iframe: demoOptions.iframe,\n    name: demoName,\n    onResetDemoClick: resetDemo\n  })), __jsx(\"div\", {\n    className: classes.anchorLink,\n    id: `${demoName}.js`\n  }), __jsx(\"div\", {\n    className: classes.anchorLink,\n    id: `${demoName}.tsx`\n  }), demoOptions.hideToolbar ? null : __jsx(DemoToolbar, {\n    codeOpen: codeOpen,\n    codeVariant: codeVariant,\n    demo: demo,\n    demoData: demoData,\n    demoHovered: demoHovered,\n    demoId: demoId,\n    demoName: demoName,\n    demoOptions: demoOptions,\n    demoSourceId: demoSourceId,\n    initialFocusRef: initialFocusRef,\n    onCodeOpenChange: () => setCodeOpen(open => !open),\n    onResetDemoClick: resetDemo,\n    openDemoSource: openDemoSource,\n    showPreview: showPreview\n  }), __jsx(Collapse, {\n    in: openDemoSource,\n    unmountOnExit: true\n  }, __jsx(HighlightedCode, {\n    className: classes.code,\n    id: demoSourceId,\n    code: showPreview && !codeOpen ? jsx : demoData.raw,\n    language: demoData.sourceLanguage\n  })));\n}\n\nexport default Demo;","map":null,"metadata":{},"sourceType":"module"}