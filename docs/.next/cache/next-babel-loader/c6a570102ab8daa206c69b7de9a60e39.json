{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from \"../../../../../../../packages/material-ui/src/styles\";\nimport MuiTextField from \"../../../../../../../packages/material-ui/src/TextField\";\nimport { capitalize } from \"../../../../../../../packages/material-ui/src/utils\";\n\nconst styles = theme => ({\n  root: {\n    padding: 0,\n    'label + &': {\n      marginTop: theme.spacing(3)\n    }\n  },\n  input: {\n    minWidth: theme.spacing(6),\n    backgroundColor: theme.palette.common.white,\n    '&$disabled': {\n      backgroundColor: theme.palette.divider\n    }\n  },\n  inputBorder: {\n    border: '1px solid #e9ddd0',\n    '&:focus': {\n      borderColor: theme.palette.secondary.main\n    }\n  },\n  disabled: {},\n  inputSizeSmall: {\n    fontSize: 14,\n    padding: theme.spacing(1),\n    width: `calc(100% - ${theme.spacing(2)}px)`\n  },\n  inputSizeMedium: {\n    fontSize: 16,\n    padding: theme.spacing(2),\n    width: `calc(100% - ${theme.spacing(4)}px)`\n  },\n  inputSizeLarge: {\n    fontSize: 18,\n    padding: 22,\n    width: `calc(100% - ${22 * 2}px)`\n  },\n  inputSizeXlarge: {\n    fontSize: 20,\n    padding: 25,\n    width: `calc(100% - ${25 * 2}px)`\n  },\n  formLabel: {\n    fontSize: 18\n  },\n  select: {\n    height: 'auto',\n    borderRadius: 0\n  },\n  selectIcon: {\n    top: '50%',\n    marginTop: -12\n  }\n});\n\nfunction TextField(props) {\n  const {\n    classes,\n    InputProps = {},\n    InputLabelProps,\n    noBorder = false,\n    size = 'medium',\n    SelectProps\n  } = props,\n        other = _objectWithoutProperties(props, [\"classes\", \"InputProps\", \"InputLabelProps\", \"noBorder\", \"size\", \"SelectProps\"]);\n\n  const {\n    classes: {\n      input: InputPropsClassesInput\n    } = {}\n  } = InputProps,\n        InputPropsClassesOther = _objectWithoutProperties(InputProps.classes, [\"input\"]),\n        InputPropsOther = _objectWithoutProperties(InputProps, [\"classes\"]);\n\n  return __jsx(MuiTextField, _extends({\n    InputProps: _objectSpread({\n      disableUnderline: true,\n      classes: _objectSpread({\n        root: classes.root,\n        input: clsx(classes.input, classes[`inputSize${capitalize(size)}`], InputPropsClassesInput, !noBorder && classes.inputBorder),\n        disabled: classes.disabled\n      }, InputPropsClassesOther)\n    }, InputPropsOther),\n    InputLabelProps: _objectSpread(_objectSpread({}, InputLabelProps), {}, {\n      shrink: true,\n      className: classes.formLabel\n    }),\n    SelectProps: _objectSpread(_objectSpread({}, SelectProps), {}, {\n      classes: {\n        select: classes.select,\n        icon: classes.selectIcon\n      }\n    })\n  }, other));\n}\n\nexport default withStyles(styles)(TextField);","map":null,"metadata":{},"sourceType":"module"}