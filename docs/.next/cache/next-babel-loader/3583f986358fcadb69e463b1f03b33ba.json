{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport PropTypes from 'prop-types';\nimport { exactProp } from \"../../../material-ui-utils/src\";\nimport withWidth, { isWidthDown, isWidthUp } from \"../withWidth\";\nimport useTheme from \"../styles/useTheme\";\n/**\n * @ignore - internal component.\n */\n\nfunction HiddenJs(props) {\n  var children = props.children,\n      only = props.only,\n      width = props.width;\n  var theme = useTheme();\n  var visible = true; // `only` check is faster to get out sooner if used.\n\n  if (only) {\n    if (_Array$isArray(only)) {\n      for (var i = 0; i < only.length; i += 1) {\n        var breakpoint = only[i];\n\n        if (width === breakpoint) {\n          visible = false;\n          break;\n        }\n      }\n    } else if (only && width === only) {\n      visible = false;\n    }\n  } // Allow `only` to be combined with other props. If already hidden, no need to check others.\n\n\n  if (visible) {\n    // determine visibility based on the smallest size up\n    for (var _i = 0; _i < theme.breakpoints.keys.length; _i += 1) {\n      var _breakpoint = theme.breakpoints.keys[_i];\n      var breakpointUp = props[\"\".concat(_breakpoint, \"Up\")];\n      var breakpointDown = props[\"\".concat(_breakpoint, \"Down\")];\n\n      if (breakpointUp && isWidthUp(_breakpoint, width) || breakpointDown && isWidthDown(_breakpoint, width)) {\n        visible = false;\n        break;\n      }\n    }\n  }\n\n  if (!visible) {\n    return null;\n  }\n\n  return children;\n}\n\nHiddenJs.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   */\n  implementation: PropTypes.oneOf(['js', 'css']),\n\n  /**\n   * You can use this prop when choosing the `js` implementation with server-side rendering.\n   *\n   * As `window.innerWidth` is unavailable on the server,\n   * we default to rendering an empty component during the first mount.\n   * You might want to use a heuristic to approximate\n   * the screen width of the client browser screen width.\n   *\n   * For instance, you could be using the user-agent or the client-hints.\n   * https://caniuse.com/#search=client%20hint\n   */\n  initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  lgDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  lgUp: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  mdDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  mdUp: PropTypes.bool,\n\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),\n\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  smDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  smUp: PropTypes.bool,\n\n  /**\n   * @ignore\n   * width prop provided by withWidth decorator.\n   */\n  width: PropTypes.string.isRequired,\n\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  xlDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  xlUp: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  xsDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  xsUp: PropTypes.bool\n};\n\nif (true) {\n  HiddenJs.propTypes = exactProp(HiddenJs.propTypes);\n}\n\nexport default withWidth()(HiddenJs);","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/Hidden/HiddenJs.js"],"names":["PropTypes","exactProp","withWidth","isWidthDown","isWidthUp","useTheme","HiddenJs","props","children","only","width","theme","visible","i","length","breakpoint","breakpoints","keys","breakpointUp","breakpointDown","propTypes","node","className","string","implementation","oneOf","initialWidth","lgDown","bool","lgUp","mdDown","mdUp","oneOfType","arrayOf","smDown","smUp","isRequired","xlDown","xlUp","xsDown","xsUp"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport withWidth, { isWidthDown, isWidthUp } from '../withWidth';\nimport useTheme from '../styles/useTheme';\n\n/**\n * @ignore - internal component.\n */\nfunction HiddenJs(props) {\n  const { children, only, width } = props;\n  const theme = useTheme();\n\n  let visible = true;\n\n  // `only` check is faster to get out sooner if used.\n  if (only) {\n    if (Array.isArray(only)) {\n      for (let i = 0; i < only.length; i += 1) {\n        const breakpoint = only[i];\n        if (width === breakpoint) {\n          visible = false;\n          break;\n        }\n      }\n    } else if (only && width === only) {\n      visible = false;\n    }\n  }\n\n  // Allow `only` to be combined with other props. If already hidden, no need to check others.\n  if (visible) {\n    // determine visibility based on the smallest size up\n    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {\n      const breakpoint = theme.breakpoints.keys[i];\n      const breakpointUp = props[`${breakpoint}Up`];\n      const breakpointDown = props[`${breakpoint}Down`];\n      if (\n        (breakpointUp && isWidthUp(breakpoint, width)) ||\n        (breakpointDown && isWidthDown(breakpoint, width))\n      ) {\n        visible = false;\n        break;\n      }\n    }\n  }\n\n  if (!visible) {\n    return null;\n  }\n\n  return children;\n}\n\nHiddenJs.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   */\n  implementation: PropTypes.oneOf(['js', 'css']),\n  /**\n   * You can use this prop when choosing the `js` implementation with server-side rendering.\n   *\n   * As `window.innerWidth` is unavailable on the server,\n   * we default to rendering an empty component during the first mount.\n   * You might want to use a heuristic to approximate\n   * the screen width of the client browser screen width.\n   *\n   * For instance, you could be using the user-agent or the client-hints.\n   * https://caniuse.com/#search=client%20hint\n   */\n  initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  lgDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  lgUp: PropTypes.bool,\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  mdDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  mdUp: PropTypes.bool,\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only: PropTypes.oneOfType([\n    PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n    PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])),\n  ]),\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  smDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  smUp: PropTypes.bool,\n  /**\n   * @ignore\n   * width prop provided by withWidth decorator.\n   */\n  width: PropTypes.string.isRequired,\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  xlDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  xlUp: PropTypes.bool,\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  xsDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  xsUp: PropTypes.bool,\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  HiddenJs.propTypes = exactProp(HiddenJs.propTypes);\n}\n\nexport default withWidth()(HiddenJs);\n"]},"metadata":{},"sourceType":"module"}