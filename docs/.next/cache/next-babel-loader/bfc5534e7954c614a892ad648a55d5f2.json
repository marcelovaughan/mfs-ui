{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport debounce from \"../utils/debounce\";\nimport withStyles from \"../styles/withStyles\";\nimport isMuiElement from \"../utils/isMuiElement\";\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    boxSizing: 'border-box',\n    flexShrink: 0\n  },\n\n  /* Styles applied to the `div` element that wraps the children. */\n  tile: {\n    position: 'relative',\n    display: 'block',\n    // In case it's not rendered with a div.\n    height: '100%',\n    overflow: 'hidden'\n  },\n\n  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */\n  imgFullHeight: {\n    height: '100%',\n    transform: 'translateX(-50%)',\n    position: 'relative',\n    left: '50%'\n  },\n\n  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */\n  imgFullWidth: {\n    width: '100%',\n    position: 'relative',\n    transform: 'translateY(-50%)',\n    top: '50%'\n  }\n};\n\nconst fit = (imgEl, classes) => {\n  if (!imgEl || !imgEl.complete) {\n    return;\n  }\n\n  if (imgEl.width / imgEl.height > imgEl.parentElement.offsetWidth / imgEl.parentElement.offsetHeight) {\n    imgEl.classList.remove(...classes.imgFullWidth.split(' '));\n    imgEl.classList.add(...classes.imgFullHeight.split(' '));\n  } else {\n    imgEl.classList.remove(...classes.imgFullHeight.split(' '));\n    imgEl.classList.add(...classes.imgFullWidth.split(' '));\n  }\n};\n\nfunction ensureImageCover(imgEl, classes) {\n  if (!imgEl) {\n    return;\n  }\n\n  if (imgEl.complete) {\n    fit(imgEl, classes);\n  } else {\n    imgEl.addEventListener('load', () => {\n      fit(imgEl, classes);\n    });\n  }\n}\n\nconst GridListTile = /*#__PURE__*/React.forwardRef(function GridListTile(props, ref) {\n  // cols rows default values are for docs only\n  const {\n    children,\n    classes,\n    className,\n    // eslint-disable-next-line no-unused-vars\n    cols = 1,\n    component: Component = 'li',\n    // eslint-disable-next-line no-unused-vars\n    rows = 1\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"cols\", \"component\", \"rows\"]);\n\n  const imgRef = React.useRef(null);\n  React.useEffect(() => {\n    ensureImageCover(imgRef.current, classes);\n  });\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      fit(imgRef.current, classes);\n    });\n    window.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [classes]);\n  return __jsx(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), __jsx(\"div\", {\n    className: classes.tile\n  }, React.Children.map(children, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    if (child.type === 'img' || isMuiElement(child, ['Image'])) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        ref: imgRef\n      });\n    }\n\n    return child;\n  })));\n});\nexport default withStyles(styles, {\n  name: 'MuiGridListTile'\n})(GridListTile);","map":null,"metadata":{},"sourceType":"module"}