{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n/* eslint-disable react/no-danger, react-hooks/exhaustive-deps */\n\nimport fetch from 'cross-fetch';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from \"../../../../packages/material-ui/src/styles\";\nimport NotificationsIcon from \"../../../../packages/material-ui-icons/src/Notifications\";\nimport Tooltip from \"../../../../packages/material-ui/src/Tooltip\";\nimport CircularProgress from \"../../../../packages/material-ui/src/CircularProgress\";\nimport IconButton from \"../../../../packages/material-ui/src/IconButton\";\nimport Badge from \"../../../../packages/material-ui/src/Badge\";\nimport Typography from \"../../../../packages/material-ui/src/Typography\";\nimport Popper from \"../../../../packages/material-ui/src/Popper\";\nimport Grow from \"../../../../packages/material-ui/src/Grow\";\nimport Paper from \"../../../../packages/material-ui/src/Paper\";\nimport ClickAwayListener from \"../../../../packages/material-ui/src/ClickAwayListener\";\nimport List from \"../../../../packages/material-ui/src/List\";\nimport ListItem from \"../../../../packages/material-ui/src/ListItem\";\nimport Divider from \"../../../../packages/material-ui/src/Divider\";\nimport sleep from \"../../../../modules/waterfall/sleep\";\nimport { getCookie } from \"../utils/helpers\";\nimport { ACTION_TYPES } from \"../constants\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: {\n      transformOrigin: 'top right'\n    },\n    list: {\n      width: theme.spacing(40),\n      maxHeight: theme.spacing(40),\n      overflow: 'auto'\n    },\n    listItem: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    loading: {\n      display: 'flex',\n      justifyContent: 'center',\n      margin: theme.spacing(1, 0)\n    },\n    divider: {\n      margin: theme.spacing(1, 0)\n    }\n  };\n});\n\nvar _ref2 = __jsx(NotificationsIcon, null);\n\nvar _ref4 = __jsx(CircularProgress, {\n  size: 32\n});\n\nexport default function Notifications() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(false),\n      open = _React$useState[0],\n      setOpen = _React$useState[1];\n\n  var _React$useState2 = React.useState(false),\n      tooltipOpen = _React$useState2[0],\n      setTooltipOpen = _React$useState2[1];\n\n  var anchorRef = React.useRef(null);\n  var t = useSelector(function (state) {\n    return state.options.t;\n  });\n  var dispatch = useDispatch();\n  var userLanguage = useSelector(function (state) {\n    return state.options.userLanguage;\n  });\n  var messages = useSelector(function (state) {\n    return state.notifications.messages;\n  });\n  var lastSeen = useSelector(function (state) {\n    return state.notifications.lastSeen;\n  });\n  var messageList = messages ? messages.filter(function (message) {\n    if (message.userLanguage && message.userLanguage !== userLanguage && message.userLanguage !== navigator.language.substring(0, 2)) {\n      return false;\n    }\n\n    return true;\n  }).reverse() : null;\n\n  var handleToggle = function handleToggle() {\n    setOpen(function (prevOpen) {\n      return !prevOpen;\n    });\n    setTooltipOpen(false);\n\n    if (messageList && messageList.length > 0) {\n      dispatch({\n        type: ACTION_TYPES.NOTIFICATIONS_CHANGE,\n        payload: {\n          lastSeen: messageList[0].id\n        }\n      });\n      document.cookie = \"lastSeenNotification=\".concat(messageList[0].id, \";path=/;max-age=31536000\");\n    }\n  };\n\n  React.useEffect(function () {\n    var active = true; // Prevent search engines from indexing the notification.\n\n    if (/glebot/.test(navigator.userAgent) || messages) {\n      return undefined;\n    }\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newMessages, result, seen, lastSeenNotification;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return sleep(1500);\n\n            case 2:\n              _context.prev = 2;\n              _context.next = 5;\n              return fetch('https://raw.githubusercontent.com/mui-org/material-ui/master/docs/notifications.json');\n\n            case 5:\n              result = _context.sent;\n              _context.next = 8;\n              return result.json();\n\n            case 8:\n              newMessages = _context.sent;\n              _context.next = 13;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](2);\n\n            case 13:\n              if (active) {\n                seen = getCookie('lastSeenNotification');\n                lastSeenNotification = seen === '' ? 0 : _parseInt(seen, 10);\n                dispatch({\n                  type: ACTION_TYPES.NOTIFICATIONS_CHANGE,\n                  payload: {\n                    messages: newMessages || [],\n                    lastSeen: lastSeenNotification\n                  }\n                });\n              }\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 11]]);\n    }))();\n\n    return function () {\n      active = false;\n    };\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Tooltip, {\n    open: tooltipOpen,\n    onOpen: function onOpen() {\n      setTooltipOpen(!open);\n    },\n    onClose: function onClose() {\n      setTooltipOpen(false);\n    },\n    title: t('toggleNotifications'),\n    enterDelay: 300\n  }, __jsx(IconButton, {\n    color: \"inherit\",\n    ref: anchorRef,\n    \"aria-controls\": open ? 'notifications-popup' : undefined,\n    \"aria-haspopup\": \"true\",\n    \"aria-label\": t('toggleNotifications'),\n    onClick: handleToggle,\n    \"data-ga-event-category\": \"AppBar\",\n    \"data-ga-event-action\": \"toggleNotifications\"\n  }, __jsx(Badge, {\n    color: \"secondary\",\n    badgeContent: messageList ? messageList.reduce(function (count, message) {\n      return message.id > lastSeen ? count + 1 : count;\n    }, 0) : 0\n  }, _ref2))), __jsx(Popper, {\n    id: \"notifications-popup\",\n    anchorEl: anchorRef.current,\n    open: open,\n    placement: \"bottom-end\",\n    transition: true,\n    disablePortal: true,\n    role: undefined\n  }, function (_ref3) {\n    var TransitionProps = _ref3.TransitionProps;\n    return __jsx(ClickAwayListener, {\n      onClickAway: function onClickAway() {\n        setOpen(false);\n      }\n    }, __jsx(Grow, _extends({\n      \"in\": open\n    }, TransitionProps), __jsx(Paper, {\n      className: classes.paper\n    }, __jsx(List, {\n      className: classes.list\n    }, messageList ? messageList.map(function (message, index) {\n      return __jsx(React.Fragment, {\n        key: message.id\n      }, __jsx(ListItem, {\n        alignItems: \"flex-start\",\n        className: classes.listItem\n      }, __jsx(Typography, {\n        gutterBottom: true\n      }, message.title), __jsx(Typography, {\n        gutterBottom: true,\n        variant: \"body2\"\n      }, __jsx(\"span\", {\n        id: \"notification-message\",\n        dangerouslySetInnerHTML: {\n          __html: message.text\n        }\n      })), message.date && __jsx(Typography, {\n        variant: \"caption\",\n        color: \"textSecondary\"\n      }, new Date(message.date).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      }))), index < messageList.length - 1 ? __jsx(Divider, {\n        className: classes.divider\n      }) : null);\n    }) : __jsx(\"div\", {\n      className: classes.loading\n    }, _ref4)))));\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}