{"ast":null,"code":"/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\nimport * as React from 'react';\nexport default function useControlled({\n  controlled,\n  default: defaultProp,\n  name,\n  state = 'value'\n}) {\n  const {\n    current: isControlled\n  } = React.useRef(controlled !== undefined);\n  const [valueState, setValue] = React.useState(defaultProp);\n  const value = isControlled ? controlled : valueState;\n\n  if (true) {\n    React.useEffect(() => {\n      if (isControlled !== (controlled !== undefined)) {\n        console.error([`Material-UI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', \"The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n      }\n    }, [controlled]);\n    const {\n      current: defaultValue\n    } = React.useRef(defaultProp);\n    React.useEffect(() => {\n      if (!isControlled && defaultValue !== defaultProp) {\n        console.error([`Material-UI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\\n'));\n      }\n    }, [JSON.stringify(defaultProp)]);\n  }\n\n  const setValueIfUncontrolled = React.useCallback(newValue => {\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  }, []);\n  return [value, setValueIfUncontrolled];\n}","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui/src/utils/useControlled.js"],"names":["React","useControlled","controlled","default","defaultProp","name","state","current","isControlled","useRef","undefined","valueState","setValue","useState","value","useEffect","console","error","join","defaultValue","JSON","stringify","setValueIfUncontrolled","useCallback","newValue"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,eAAe,SAASC,aAAT,CAAuB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,OAAO,EAAEC,WAAvB;AAAoCC,EAAAA,IAApC;AAA0CC,EAAAA,KAAK,GAAG;AAAlD,CAAvB,EAAoF;AACjG,QAAM;AAAEC,IAAAA,OAAO,EAAEC;AAAX,MAA4BR,KAAK,CAACS,MAAN,CAAaP,UAAU,KAAKQ,SAA5B,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBZ,KAAK,CAACa,QAAN,CAAeT,WAAf,CAA/B;AACA,QAAMU,KAAK,GAAGN,YAAY,GAAGN,UAAH,GAAgBS,UAA1C;;AAEA,YAA2C;AACzCX,IAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AACpB,UAAIP,YAAY,MAAMN,UAAU,KAAKQ,SAArB,CAAhB,EAAiD;AAC/CM,QAAAA,OAAO,CAACC,KAAR,CACE,CACG,4CACCT,YAAY,GAAG,EAAH,GAAQ,IACrB,cAAaF,KAAM,aAAYD,IAAK,UAASG,YAAY,GAAG,IAAH,GAAU,EAAG,aAHzE,EAIE,6EAJF,EAKG,qDAAoDH,IAAK,GAA1D,GACE,4CANJ,EAOE,4HAPF,EAQE,sDARF,EASEa,IATF,CASO,IATP,CADF;AAYD;AACF,KAfD,EAeG,CAAChB,UAAD,CAfH;AAiBA,UAAM;AAAEK,MAAAA,OAAO,EAAEY;AAAX,QAA4BnB,KAAK,CAACS,MAAN,CAAaL,WAAb,CAAlC;AAEAJ,IAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AACpB,UAAI,CAACP,YAAD,IAAiBW,YAAY,KAAKf,WAAtC,EAAmD;AACjDY,QAAAA,OAAO,CAACC,KAAR,CACE,CACG,oDAAmDX,KAAM,6BAA4BD,IAAK,4BAA3F,GACG,oDAAmDA,IAAK,GAF7D,EAGEa,IAHF,CAGO,IAHP,CADF;AAMD;AACF,KATD,EASG,CAACE,IAAI,CAACC,SAAL,CAAejB,WAAf,CAAD,CATH;AAUD;;AAED,QAAMkB,sBAAsB,GAAGtB,KAAK,CAACuB,WAAN,CAAmBC,QAAD,IAAc;AAC7D,QAAI,CAAChB,YAAL,EAAmB;AACjBI,MAAAA,QAAQ,CAACY,QAAD,CAAR;AACD;AACF,GAJ8B,EAI5B,EAJ4B,CAA/B;AAMA,SAAO,CAACV,KAAD,EAAQQ,sBAAR,CAAP;AACD","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\nimport * as React from 'react';\n\nexport default function useControlled({ controlled, default: defaultProp, name, state = 'value' }) {\n  const { current: isControlled } = React.useRef(controlled !== undefined);\n  const [valueState, setValue] = React.useState(defaultProp);\n  const value = isControlled ? controlled : valueState;\n\n  if (process.env.NODE_ENV !== 'production') {\n    React.useEffect(() => {\n      if (isControlled !== (controlled !== undefined)) {\n        console.error(\n          [\n            `Material-UI: A component is changing the ${\n              isControlled ? '' : 'un'\n            }controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`,\n            'Elements should not switch from uncontrolled to controlled (or vice versa).',\n            `Decide between using a controlled or uncontrolled ${name} ` +\n              'element for the lifetime of the component.',\n            \"The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.\",\n            'More info: https://fb.me/react-controlled-components',\n          ].join('\\n'),\n        );\n      }\n    }, [controlled]);\n\n    const { current: defaultValue } = React.useRef(defaultProp);\n\n    React.useEffect(() => {\n      if (!isControlled && defaultValue !== defaultProp) {\n        console.error(\n          [\n            `Material-UI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` +\n              `To suppress this warning opt to use a controlled ${name}.`,\n          ].join('\\n'),\n        );\n      }\n    }, [JSON.stringify(defaultProp)]);\n  }\n\n  const setValueIfUncontrolled = React.useCallback((newValue) => {\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  }, []);\n\n  return [value, setValueIfUncontrolled];\n}\n"]},"metadata":{},"sourceType":"module"}