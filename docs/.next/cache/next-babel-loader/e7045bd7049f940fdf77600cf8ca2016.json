{"ast":null,"code":"export const azAZ = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Yolu göstər'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Birinci səhifəyə keç';\n        }\n\n        if (type === 'last') {\n          return 'Sonuncu səhifəyə keç';\n        }\n\n        if (type === 'next') {\n          return 'Növbəti səhifəyə keç';\n        } // if (type === 'previous') {\n\n\n        return 'Əvvəlki səhifəyə keç';\n      },\n      labelRowsPerPage: 'Səhifəyə düşən sətrlər:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} dən ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => {\n        let pluralForm = 'Ulduz';\n        const lastDigit = value % 10;\n\n        if (lastDigit > 1 && lastDigit < 5) {\n          pluralForm = 'Ulduzlar';\n        }\n\n        return `${value} ${pluralForm}`;\n      },\n      emptyLabelText: 'Boş'\n    },\n    MuiAutocomplete: {\n      clearText: 'Silmək',\n      closeText: 'Bağlamaq',\n      loadingText: 'Yüklənir…',\n      noOptionsText: 'Seçimlər mövcud deyil',\n      openText: 'Открыть'\n    },\n    MuiAlert: {\n      closeText: 'Bağlamaq'\n    },\n    MuiPagination: {\n      'aria-label': 'Səhifənin naviqasiyası',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${page} ${selected ? 'səhifə' : 'səhifəyə keç'}`;\n        }\n\n        if (type === 'first') {\n          return 'Birinci səhifəyə keç';\n        }\n\n        if (type === 'last') {\n          return 'Sonuncu səhifəyə keç';\n        }\n\n        if (type === 'next') {\n          return 'Növbəti səhifəyə keç';\n        } // if (type === 'previous') {\n\n\n        return 'Əvvəlki səhifəyə keç';\n      }\n    }\n  }\n};\nexport const bgBG = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Показване на пътя'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Отиди на първата страница';\n        }\n\n        if (type === 'last') {\n          return 'Отиди на последната страница';\n        }\n\n        if (type === 'next') {\n          return 'Отиди на следващата страница';\n        } // if (type === 'previous') {\n\n\n        return 'Отиди на предишната страница';\n      },\n      labelRowsPerPage: 'Редове на страница:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} от ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Звезд${value !== 1 ? 'и' : 'а'}`,\n      emptyLabelText: 'Изчисти'\n    },\n    MuiAutocomplete: {\n      clearText: 'Изчисти',\n      closeText: 'Затвори',\n      loadingText: 'Зареждане…',\n      noOptionsText: 'Няма налични опции',\n      openText: 'Отвори'\n    },\n    MuiAlert: {\n      closeText: 'Затвори'\n    },\n    MuiPagination: {\n      'aria-label': 'Пагинация',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'Към '}страница ${page}`;\n        }\n\n        if (type === 'first') {\n          return 'Отиди на първата страница';\n        }\n\n        if (type === 'last') {\n          return 'Отиди на последната страница';\n        }\n\n        if (type === 'next') {\n          return 'Отиди на следващата страница';\n        } // if (type === 'previous') {\n\n\n        return 'Отиди на предишната страница';\n      }\n    }\n  }\n};\nexport const caES = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiTablePagination: {\n      // getItemAriaLabel: (type) => {\n      //   if (type === 'first') {\n      //     return 'Go to first page';\n      //   }\n      //   if (type === 'last') {\n      //     return 'Go to last page';\n      //   }\n      //   if (type === 'next') {\n      //     return 'Go to next page';\n      //   }\n      //   // if (type === 'previous') {\n      //   return 'Go to previous page';\n      // },\n      labelRowsPerPage: 'Files per pàgina:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} de ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} ${value !== 1 ? 'Estrelles' : 'Estrella'}`,\n      emptyLabelText: 'Buit'\n    },\n    MuiAutocomplete: {\n      clearText: 'Netejar',\n      closeText: 'Tancar',\n      loadingText: 'Carregant…',\n      noOptionsText: 'Sense opcions',\n      openText: 'Obert'\n    },\n    MuiAlert: {\n      closeText: 'Tancat'\n    } // MuiPagination: {\n    //   'aria-label': 'Pagination navigation',\n    //   getItemAriaLabel: (type, page, selected) => {\n    //     if (type === 'page') {\n    //       return `${selected ? '' : 'Go to '}page ${page}`;\n    //     }\n    //     if (type === 'first') {\n    //       return 'Go to first page';\n    //     }\n    //     if (type === 'last') {\n    //       return 'Go to last page';\n    //     }\n    //     if (type === 'next') {\n    //       return 'Go to next page';\n    //     }\n    //     // if (type === 'previous') {\n    //     return 'Go to previous page';\n    //   },\n    // },\n\n  }\n};\nexport const csCZ = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Ukázat cestu'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Jít na první stránku';\n        }\n\n        if (type === 'last') {\n          return 'Jít na poslední stránku';\n        }\n\n        if (type === 'next') {\n          return 'Jít na další stránku';\n        } // if (type === 'previous') {\n\n\n        return 'Jít na předchozí stránku';\n      },\n      labelRowsPerPage: 'Řádků na stránce:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} z ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => {\n        if (value === 1) {\n          return `${value} hvězdička`;\n        }\n\n        if (value >= 2 && value <= 4) {\n          return `${value} hvězdičky`;\n        }\n\n        return `${value} hvězdiček`;\n      },\n      emptyLabelText: 'Prázdné'\n    },\n    MuiAutocomplete: {\n      clearText: 'Vymazat',\n      closeText: 'Zavřít',\n      loadingText: 'Načítání…',\n      noOptionsText: 'Žádné možnosti',\n      openText: 'Otevřít'\n    },\n    MuiAlert: {\n      closeText: 'Zavřít'\n    },\n    MuiPagination: {\n      'aria-label': 'Navigace stránkováním',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'Jít na '}${page} stránku`;\n        }\n\n        if (type === 'first') {\n          return 'Jít na první stránku';\n        }\n\n        if (type === 'last') {\n          return 'Jít na poslední stránku';\n        }\n\n        if (type === 'next') {\n          return 'Jít na další stránku';\n        } // if (type === 'previous') {\n\n\n        return 'Jít na předchozí stránku';\n      }\n    }\n  }\n};\nexport const deDE = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Pfad anzeigen'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Zur ersten Seite';\n        }\n\n        if (type === 'last') {\n          return 'Zur letzten Seite';\n        }\n\n        if (type === 'next') {\n          return 'Zur nächsten Seite';\n        } // if (type === 'previous') {\n\n\n        return 'Zur vorherigen Seite';\n      },\n      labelRowsPerPage: 'Zeilen pro Seite:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} von ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} ${value !== 1 ? 'Sterne' : 'Stern'}`,\n      emptyLabelText: 'Keine Wertung'\n    },\n    MuiAutocomplete: {\n      clearText: 'Leeren',\n      closeText: 'Schließen',\n      loadingText: 'Wird geladen…',\n      noOptionsText: 'Keine Optionen',\n      openText: 'Öffnen'\n    },\n    MuiAlert: {\n      closeText: 'Schließen'\n    },\n    MuiPagination: {\n      'aria-label': 'Navigation via Seitennummerierung',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'Gehe zu '}Seite ${page}`;\n        }\n\n        if (type === 'first') {\n          return 'Zur ersten Seite';\n        }\n\n        if (type === 'last') {\n          return 'Zur letzten Seite';\n        }\n\n        if (type === 'next') {\n          return 'Zur nächsten Seite';\n        } // if (type === 'previous') {\n\n\n        return 'Zur vorherigen Seite';\n      }\n    }\n  }\n}; // default\n\nexport const enUS = {\n  /*\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Show path',\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: (type) => {\n        if (type === 'first') {\n          return 'Go to first page';\n        }\n        if (type === 'last') {\n          return 'Go to last page';\n        }\n        if (type === 'next') {\n          return 'Go to next page';\n        }\n        // if (type === 'previous') {\n        return 'Go to previous page';\n      },\n      labelRowsPerPage: 'Rows per page:',\n      labelDisplayedRows: ({ from, to, count }) =>\n  `${from}-${to} of ${count !== -1 ? count : `more than ${to}`}`,\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Star${value !== 1 ? 's' : ''}`,\n      emptyLabelText: 'Empty',\n    },\n    MuiAutocomplete: {\n      clearText: 'Clear',\n      closeText: 'Close',\n      loadingText: 'Loading…',\n      noOptionsText: 'No options',\n      openText: 'Open',\n    },\n    MuiAlert: {\n      closeText: 'Close',\n    },\n    MuiPagination: {\n      'aria-label': 'Pagination navigation',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'Go to '}page ${page}`;\n        }\n        if (type === 'first') {\n          return 'Go to first page';\n        }\n        if (type === 'last') {\n          return 'Go to last page';\n        }\n        if (type === 'next') {\n          return 'Go to next page';\n        }\n        // if (type === 'previous') {\n        return 'Go to previous page';\n      },\n    },\n  },\n  */\n};\nexport const esES = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Mostrar ruta'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Ir a la primera página';\n        }\n\n        if (type === 'last') {\n          return 'Ir a la última página';\n        }\n\n        if (type === 'next') {\n          return 'Ir a la página siguiente';\n        } // if (type === 'previous') {\n\n\n        return 'Ir a la página anterior';\n      },\n      labelRowsPerPage: 'Filas por página:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} de ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Estrella${value !== 1 ? 's' : ''}`,\n      emptyLabelText: 'Vacío'\n    },\n    MuiAutocomplete: {\n      clearText: 'Limpiar',\n      closeText: 'Cerrar',\n      loadingText: 'Cargando…',\n      noOptionsText: 'Sin opciones',\n      openText: 'Abierto'\n    },\n    MuiAlert: {\n      closeText: 'Cerrar'\n    },\n    MuiPagination: {\n      'aria-label': 'Paginador',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'Ir a la '}página ${page}`;\n        }\n\n        if (type === 'first') {\n          return 'Ir a la primera página';\n        }\n\n        if (type === 'last') {\n          return 'Ir a la última página';\n        }\n\n        if (type === 'next') {\n          return 'Ir a la página siguiente';\n        } // if (type === 'previous') {\n\n\n        return 'Ir a la página anterior';\n      }\n    }\n  }\n};\nexport const etEE = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Näita teed'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Vali esimene lehekülg';\n        }\n\n        if (type === 'last') {\n          return 'Vali viimane lehekülg';\n        }\n\n        if (type === 'next') {\n          return 'Vali järgmine lehekülg';\n        } // if (type === 'previous') {\n\n\n        return 'Vali eelmine lehekülg';\n      },\n      labelRowsPerPage: 'Ridu leheküljel:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} / ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Tärn${value !== 1 ? 'i' : ''}`,\n      emptyLabelText: 'Tühi'\n    },\n    MuiAutocomplete: {\n      clearText: 'Tühjenda',\n      closeText: 'Sulge',\n      loadingText: 'Laen…',\n      noOptionsText: 'Valikuid ei ole',\n      openText: 'Ava'\n    },\n    MuiAlert: {\n      closeText: 'Sulge'\n    },\n    MuiPagination: {\n      'aria-label': 'Lehekülgede valik',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'Vali '}lehekülg ${page}`;\n        }\n\n        if (type === 'first') {\n          return 'Vali esimene lehekülg';\n        }\n\n        if (type === 'last') {\n          return 'Vali viimane lehekülg';\n        }\n\n        if (type === 'next') {\n          return 'Vali järgmine lehekülg';\n        } // if (type === 'previous') {\n\n\n        return 'Vali eelmine lehekülg';\n      }\n    }\n  }\n};\nexport const faIR = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiBreadcrumbs: {\n      expandText: 'نمایش مسیر'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'رفتن به اولین صفحه';\n        }\n\n        if (type === 'last') {\n          return 'رفتن به آخرین صفحه';\n        }\n\n        if (type === 'next') {\n          return 'رفتن به صفحه‌ی بعدی';\n        } // if (type === 'previous') {\n\n\n        return 'رفتن به صفحه‌ی قبلی';\n      },\n      labelRowsPerPage: 'تعداد سطرهای هر صفحه:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} از ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} ستاره`,\n      emptyLabelText: 'خالی'\n    },\n    MuiAutocomplete: {\n      clearText: 'پاک‌کردن',\n      closeText: 'بستن',\n      loadingText: 'در حال بارگذاری…',\n      noOptionsText: 'بی‌نتیجه',\n      openText: 'بازکردن'\n    },\n    MuiAlert: {\n      closeText: 'بستن'\n    },\n    MuiPagination: {\n      'aria-label': 'ناوبری صفحه',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'رفتن به '}صفحهٔ ${page}`;\n        }\n\n        if (type === 'first') {\n          return 'رفتن به اولین صفحه';\n        }\n\n        if (type === 'last') {\n          return 'رفتن به آخرین صفحه';\n        }\n\n        if (type === 'next') {\n          return 'رفتن به صفحه‌ی بعدی';\n        } // if (type === 'previous') {\n\n\n        return 'رفتن به صفحه‌ی قبلی';\n      }\n    }\n  }\n};\nexport const fiFI = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Näytä reitti'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Mene ensimmäiselle sivulle';\n        }\n\n        if (type === 'last') {\n          return 'Mene viimeiselle sivulle';\n        }\n\n        if (type === 'next') {\n          return 'Mene seuraavalle sivulle';\n        } // if (type === 'previous') {\n\n\n        return 'Mene edelliselle sivulle';\n      },\n      labelRowsPerPage: 'Rivejä per sivu:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} / ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Täht${value !== 1 ? 'eä' : 'i'}`,\n      emptyLabelText: 'Tyhjä'\n    },\n    MuiAutocomplete: {\n      clearText: 'Tyhjennä',\n      closeText: 'Sulje',\n      loadingText: 'Ladataan…',\n      noOptionsText: 'Ei valintoja',\n      openText: 'Avaa'\n    },\n    MuiAlert: {\n      closeText: 'Sulje'\n    },\n    MuiPagination: {\n      'aria-label': 'Sivutus navigaatio',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? 'sivu' : 'Mene sivulle'} ${page}`;\n        }\n\n        if (type === 'first') {\n          return 'Mene ensimmäiselle sivulle';\n        }\n\n        if (type === 'last') {\n          return 'Mene viimeiselle sivulle';\n        }\n\n        if (type === 'next') {\n          return 'Mene seuraavalle sivulle';\n        } // if (type === 'previous') {\n\n\n        return 'Mene edelliselle sivulle';\n      }\n    }\n  }\n};\nexport const frFR = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Montrer le chemin'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Aller à la première page';\n        }\n\n        if (type === 'last') {\n          return 'Aller à la dernière page';\n        }\n\n        if (type === 'next') {\n          return 'Aller à la page suivante';\n        } // if (type === 'previous') {\n\n\n        return 'Aller à la page précédente';\n      },\n      labelRowsPerPage: 'Lignes par page :',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} sur ${count !== -1 ? count : `plus que ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Etoile${value !== 1 ? 's' : ''}`,\n      emptyLabelText: 'Vide'\n    },\n    MuiAutocomplete: {\n      clearText: 'Vider',\n      closeText: 'Fermer',\n      loadingText: 'Chargement…',\n      noOptionsText: 'Pas de résultats',\n      openText: 'Ouvrir'\n    },\n    MuiAlert: {\n      closeText: 'Fermer'\n    },\n    MuiPagination: {\n      'aria-label': 'navigation de pagination',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'Aller à la '}page ${page}`;\n        }\n\n        if (type === 'first') {\n          return 'Aller à la première page';\n        }\n\n        if (type === 'last') {\n          return 'Aller à la dernière page';\n        }\n\n        if (type === 'next') {\n          return 'Aller à la page suivante';\n        } // if (type === 'previous') {\n\n\n        return 'Aller à la page précédente';\n      }\n    }\n  }\n};\nexport const heIL = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiTablePagination: {\n      // getItemAriaLabel: (type) => {\n      //   if (type === 'first') {\n      //     return 'Go to first page';\n      //   }\n      //   if (type === 'last') {\n      //     return 'Go to last page';\n      //   }\n      //   if (type === 'next') {\n      //     return 'Go to next page';\n      //   }\n      //   // if (type === 'previous') {\n      //   return 'Go to previous page';\n      // },\n      labelRowsPerPage: 'שורות בעמוד:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} מתוך ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} כוכב${value !== 1 ? 'ים' : ''}`,\n      emptyLabelText: 'ריק'\n    },\n    MuiAutocomplete: {\n      clearText: 'נקה',\n      closeText: 'סגור',\n      loadingText: 'טוען…',\n      noOptionsText: 'אין אופציות',\n      openText: 'פתח'\n    },\n    MuiAlert: {\n      closeText: 'סגור'\n    } // MuiPagination: {\n    //   'aria-label': 'Pagination navigation',\n    //   getItemAriaLabel: (type, page, selected) => {\n    //     if (type === 'page') {\n    //       return `${selected ? '' : 'Go to '}page ${page}`;\n    //     }\n    //     if (type === 'first') {\n    //       return 'Go to first page';\n    //     }\n    //     if (type === 'last') {\n    //       return 'Go to last page';\n    //     }\n    //     if (type === 'next') {\n    //       return 'Go to next page';\n    //     }\n    //     // if (type === 'previous') {\n    //     return 'Go to previous page';\n    //   },\n    // },\n\n  }\n};\nexport const hiIN = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'रास्ता दिखायें'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'पहले पृष्ठ पर जाएँ';\n        }\n\n        if (type === 'last') {\n          return 'अंतिम पृष्ठ पर जाएँ';\n        }\n\n        if (type === 'next') {\n          return 'अगले पृष्ठ पर जाएँ';\n        } // if (type === 'previous') {\n\n\n        return 'पिछले पृष्ठ पर जाएँ';\n      },\n      labelRowsPerPage: 'पंक्तियाँ प्रति पृष्ठ:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to === -1 ? count : to} कुल ${count} में`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} तार${value !== 1 ? 'े' : 'ा'}`,\n      emptyLabelText: 'रिक्त'\n    },\n    MuiAutocomplete: {\n      clearText: 'हटायें',\n      closeText: 'बंद करें',\n      loadingText: 'लोड हो रहा है…',\n      noOptionsText: 'कोई विकल्प नहीं',\n      openText: 'खोलें'\n    },\n    MuiAlert: {\n      closeText: 'बंद करें'\n    },\n    MuiPagination: {\n      'aria-label': 'पृस्ठानुसार संचालन',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `पृष्ठ ${page} ${selected ? '' : ' पर जाएँ'}`;\n        }\n\n        if (type === 'first') {\n          return 'पहले पृष्ठ पर जाएँ';\n        }\n\n        if (type === 'last') {\n          return 'अंतिम पृष्ठ पर जाएँ';\n        }\n\n        if (type === 'next') {\n          return 'अगले पृष्ठ पर जाएँ';\n        } // if (type === 'previous') {\n\n\n        return 'पिछले पृष्ठ पर जाएँ';\n      }\n    }\n  }\n};\nexport const huHU = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Útvonal'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Első oldalra';\n        }\n\n        if (type === 'last') {\n          return 'Utolsó oldalra';\n        }\n\n        if (type === 'next') {\n          return 'Következő oldalra';\n        } // if (type === 'previous') {\n\n\n        return 'Előző oldalra';\n      },\n      labelRowsPerPage: 'Sorok száma:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} / ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Csillag`,\n      emptyLabelText: 'Üres'\n    },\n    MuiAutocomplete: {\n      clearText: 'Törlés',\n      closeText: 'Bezárás',\n      loadingText: 'Töltés…',\n      noOptionsText: 'Nincs találat',\n      openText: 'Megnyitás'\n    },\n    MuiAlert: {\n      closeText: 'Bezárás'\n    },\n    MuiPagination: {\n      'aria-label': 'Lapozás',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${page}. oldal${selected ? '' : 'ra'}`;\n        }\n\n        if (type === 'first') {\n          return 'Első oldalra';\n        }\n\n        if (type === 'last') {\n          return 'Utolsó oldalra';\n        }\n\n        if (type === 'next') {\n          return 'Következő oldalra';\n        } // if (type === 'previous') {\n\n\n        return 'Előző oldalra';\n      }\n    }\n  }\n};\nexport const hyAM = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiTablePagination: {\n      // getItemAriaLabel: (type) => {\n      //   if (type === 'first') {\n      //     return 'Go to first page';\n      //   }\n      //   if (type === 'last') {\n      //     return 'Go to last page';\n      //   }\n      //   if (type === 'next') {\n      //     return 'Go to next page';\n      //   }\n      //   // if (type === 'previous') {\n      //   return 'Go to previous page';\n      // },\n      labelRowsPerPage: 'Տողեր մեկ էջում`',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} / ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Աստղ`,\n      emptyLabelText: 'Դատարկ'\n    },\n    MuiAutocomplete: {\n      clearText: 'Մաքրել',\n      closeText: 'Փակել',\n      loadingText: 'Բեռնում…',\n      noOptionsText: 'Տարբերակներ չկան',\n      openText: 'Բացել'\n    },\n    MuiAlert: {\n      closeText: 'Փակել'\n    } // MuiPagination: {\n    //   'aria-label': 'Pagination navigation',\n    //   getItemAriaLabel: (type, page, selected) => {\n    //     if (type === 'page') {\n    //       return `${selected ? '' : 'Go to '}page ${page}`;\n    //     }\n    //     if (type === 'first') {\n    //       return 'Go to first page';\n    //     }\n    //     if (type === 'last') {\n    //       return 'Go to last page';\n    //     }\n    //     if (type === 'next') {\n    //       return 'Go to next page';\n    //     }\n    //     // if (type === 'previous') {\n    //     return 'Go to previous page';\n    //   },\n    // },\n\n  }\n};\nexport const idID = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiTablePagination: {\n      // getItemAriaLabel: (type) => {\n      //   if (type === 'first') {\n      //     return 'Go to first page';\n      //   }\n      //   if (type === 'last') {\n      //     return 'Go to last page';\n      //   }\n      //   if (type === 'next') {\n      //     return 'Go to next page';\n      //   }\n      //   // if (type === 'previous') {\n      //   return 'Go to previous page';\n      // },\n      labelRowsPerPage: 'Baris per halaman:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} dari ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Bintang` // emptyLabelText: 'Empty',\n\n    },\n    MuiAutocomplete: {\n      clearText: 'Hapus',\n      closeText: 'Tutup',\n      loadingText: 'Memuat…',\n      noOptionsText: 'Tidak ada opsi',\n      openText: 'Buka'\n    },\n    MuiAlert: {\n      closeText: 'Tutup'\n    } // MuiPagination: {\n    //   'aria-label': 'Pagination navigation',\n    //   getItemAriaLabel: (type, page, selected) => {\n    //     if (type === 'page') {\n    //       return `${selected ? '' : 'Go to '}page ${page}`;\n    //     }\n    //     if (type === 'first') {\n    //       return 'Go to first page';\n    //     }\n    //     if (type === 'last') {\n    //       return 'Go to last page';\n    //     }\n    //     if (type === 'next') {\n    //       return 'Go to next page';\n    //     }\n    //     // if (type === 'previous') {\n    //     return 'Go to previous page';\n    //   },\n    // },\n\n  }\n};\nexport const isIS = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiTablePagination: {\n      // getItemAriaLabel: (type) => {\n      //   if (type === 'first') {\n      //     return 'Go to first page';\n      //   }\n      //   if (type === 'last') {\n      //     return 'Go to last page';\n      //   }\n      //   if (type === 'next') {\n      //     return 'Go to next page';\n      //   }\n      //   // if (type === 'previous') {\n      //   return 'Go to previous page';\n      // },\n      labelRowsPerPage: 'Raðir á síðu:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} af ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} ${value === 1 ? 'Stjarna' : 'Stjörnur'}`,\n      emptyLabelText: 'Tómt'\n    },\n    MuiAutocomplete: {\n      clearText: 'Hreinsa',\n      closeText: 'Loka',\n      loadingText: 'Hlaða…',\n      noOptionsText: 'Engar niðurstöður',\n      openText: 'Opna'\n    },\n    MuiAlert: {\n      closeText: 'Loka'\n    } // MuiPagination: {\n    //   'aria-label': 'Pagination navigation',\n    //   getItemAriaLabel: (type, page, selected) => {\n    //     if (type === 'page') {\n    //       return `${selected ? '' : 'Go to '}page ${page}`;\n    //     }\n    //     if (type === 'first') {\n    //       return 'Go to first page';\n    //     }\n    //     if (type === 'last') {\n    //       return 'Go to last page';\n    //     }\n    //     if (type === 'next') {\n    //       return 'Go to next page';\n    //     }\n    //     // if (type === 'previous') {\n    //     return 'Go to previous page';\n    //   },\n    // },\n\n  }\n};\nexport const itIT = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Visualizza percorso'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Vai alla prima pagina';\n        }\n\n        if (type === 'last') {\n          return \"Vai all'ultima pagina\";\n        }\n\n        if (type === 'next') {\n          return 'Vai alla pagina successiva';\n        } // if (type === 'previous') {\n\n\n        return 'Vai alla pagina precedente';\n      },\n      labelRowsPerPage: 'Righe per pagina:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} di ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Stell${value !== 1 ? 'e' : 'a'}`,\n      emptyLabelText: 'Vuoto'\n    },\n    MuiAutocomplete: {\n      clearText: 'Svuota',\n      closeText: 'Chiudi',\n      loadingText: 'Caricamento in corso…',\n      noOptionsText: 'Nessuna opzione',\n      openText: 'Apri'\n    },\n    MuiAlert: {\n      closeText: 'Chiudi'\n    },\n    MuiPagination: {\n      'aria-label': 'Navigazione impaginata',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'Vai alla '}pagina ${page}`;\n        }\n\n        if (type === 'first') {\n          return 'Vai alla prima pagina';\n        }\n\n        if (type === 'last') {\n          return \"Vai all'ultima pagina\";\n        }\n\n        if (type === 'next') {\n          return 'Vai alla pagina successiva';\n        } // if (type === 'previous') {\n\n\n        return 'Vai alla pagina precedente';\n      }\n    }\n  }\n};\nexport const jaJP = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiTablePagination: {\n      // getItemAriaLabel: (type) => {\n      //   if (type === 'first') {\n      //     return 'Go to first page';\n      //   }\n      //   if (type === 'last') {\n      //     return 'Go to last page';\n      //   }\n      //   if (type === 'next') {\n      //     return 'Go to next page';\n      //   }\n      //   // if (type === 'previous') {\n      //   return 'Go to previous page';\n      // },\n      labelRowsPerPage: 'ページごとの行:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} of ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} ${value !== 1 ? '出演者' : '星'}` // emptyLabelText: 'Empty',\n\n    },\n    MuiAutocomplete: {\n      clearText: 'クリア',\n      closeText: '閉じる',\n      loadingText: '積み込み…',\n      noOptionsText: '結果がありません',\n      openText: '開いた'\n    },\n    MuiAlert: {\n      closeText: '閉じる'\n    } // MuiPagination: {\n    //   'aria-label': 'Pagination navigation',\n    //   getItemAriaLabel: (type, page, selected) => {\n    //     if (type === 'page') {\n    //       return `${selected ? '' : 'Go to '}page ${page}`;\n    //     }\n    //     if (type === 'first') {\n    //       return 'Go to first page';\n    //     }\n    //     if (type === 'last') {\n    //       return 'Go to last page';\n    //     }\n    //     if (type === 'next') {\n    //       return 'Go to next page';\n    //     }\n    //     // if (type === 'previous') {\n    //     return 'Go to previous page';\n    //   },\n    // },\n\n  }\n};\nexport const koKR = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiTablePagination: {\n      // getItemAriaLabel: (type) => {\n      //   if (type === 'first') {\n      //     return 'Go to first page';\n      //   }\n      //   if (type === 'last') {\n      //     return 'Go to last page';\n      //   }\n      //   if (type === 'next') {\n      //     return 'Go to next page';\n      //   }\n      //   // if (type === 'previous') {\n      //   return 'Go to previous page';\n      // },\n      labelRowsPerPage: '페이지 당 행:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} / ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} 점` // emptyLabelText: 'Empty',\n\n    },\n    MuiAutocomplete: {\n      clearText: '지우기',\n      closeText: '닫기',\n      loadingText: '불러오는 중…',\n      noOptionsText: '옵션 없음',\n      openText: '열기'\n    } // MuiAlert: {\n    //   closeText: 'Close',\n    // },\n    // MuiPagination: {\n    //   'aria-label': 'Pagination navigation',\n    //   getItemAriaLabel: (type, page, selected) => {\n    //     if (type === 'page') {\n    //       return `${selected ? '' : 'Go to '}page ${page}`;\n    //     }\n    //     if (type === 'first') {\n    //       return 'Go to first page';\n    //     }\n    //     if (type === 'last') {\n    //       return 'Go to last page';\n    //     }\n    //     if (type === 'next') {\n    //       return 'Go to next page';\n    //     }\n    //     // if (type === 'previous') {\n    //     return 'Go to previous page';\n    //   },\n    // },\n\n  }\n};\nexport const nlNL = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiTablePagination: {\n      // getItemAriaLabel: (type) => {\n      //   if (type === 'first') {\n      //     return 'Go to first page';\n      //   }\n      //   if (type === 'last') {\n      //     return 'Go to last page';\n      //   }\n      //   if (type === 'next') {\n      //     return 'Go to next page';\n      //   }\n      //   // if (type === 'previous') {\n      //   return 'Go to previous page';\n      // },\n      labelRowsPerPage: 'Regels per pagina :',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} van ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Ster${value !== 1 ? 'ren' : ''}` // emptyLabelText: 'Empty',\n\n    },\n    MuiAutocomplete: {\n      clearText: 'Wissen',\n      closeText: 'Sluiten',\n      loadingText: 'Laden…',\n      noOptionsText: 'Geen opties',\n      openText: 'Openen'\n    },\n    MuiAlert: {\n      closeText: 'Sluiten'\n    } // MuiPagination: {\n    //   'aria-label': 'Pagination navigation',\n    //   getItemAriaLabel: (type, page, selected) => {\n    //     if (type === 'page') {\n    //       return `${selected ? '' : 'Go to '}page ${page}`;\n    //     }\n    //     if (type === 'first') {\n    //       return 'Go to first page';\n    //     }\n    //     if (type === 'last') {\n    //       return 'Go to last page';\n    //     }\n    //     if (type === 'next') {\n    //       return 'Go to next page';\n    //     }\n    //     // if (type === 'previous') {\n    //     return 'Go to previous page';\n    //   },\n    // },\n\n  }\n};\nexport const plPL = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Pokaż ścieżkę'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Przejdź do pierwszej strony';\n        }\n\n        if (type === 'last') {\n          return 'Przejdź do ostatniej strony';\n        }\n\n        if (type === 'next') {\n          return 'Przejdź do następnej strony';\n        } // if (type === 'previous') {\n\n\n        return 'Przejdź do poprzedniej strony';\n      },\n      labelRowsPerPage: 'Wierszy na stronę:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} z ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => {\n        let pluralForm = 'gwiazdek';\n        const lastDigit = value % 10;\n\n        if ((value < 10 || value > 20) && lastDigit > 1 && lastDigit < 5) {\n          pluralForm = 'gwiazdki';\n        } else if (value === 1) {\n          pluralForm = 'gwiazdka';\n        }\n\n        return `${value} ${pluralForm}`;\n      },\n      emptyLabelText: 'Brak gwiazdek'\n    },\n    MuiAutocomplete: {\n      clearText: 'Wyczyść',\n      closeText: 'Zamknij',\n      loadingText: 'Ładowanie…',\n      noOptionsText: 'Brak opcji',\n      openText: 'Otwórz'\n    },\n    MuiAlert: {\n      closeText: 'Zamknij'\n    },\n    MuiPagination: {\n      'aria-label': 'Nawigacja podziału na strony',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return selected ? `${page}. strona` : `Przejdź do ${page}. strony`;\n        }\n\n        if (type === 'first') {\n          return 'Przejdź do pierwszej strony';\n        }\n\n        if (type === 'last') {\n          return 'Przejdź do ostatniej strony';\n        }\n\n        if (type === 'next') {\n          return 'Przejdź do następnej strony';\n        } // if (type === 'previous') {\n\n\n        return 'Przejdź do poprzedniej strony';\n      }\n    }\n  }\n};\nexport const ptBR = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Mostrar caminho'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Ir para a primeira página';\n        }\n\n        if (type === 'last') {\n          return 'Ir para a última página';\n        }\n\n        if (type === 'next') {\n          return 'Ir para a próxima página';\n        } // if (type === 'previous') {\n\n\n        return 'Ir para a página anterior';\n      },\n      labelRowsPerPage: 'Linhas por página:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} de ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Estrela${value !== 1 ? 's' : ''}`,\n      emptyLabelText: 'Vazio'\n    },\n    MuiAutocomplete: {\n      clearText: 'Limpar',\n      closeText: 'Fechar',\n      loadingText: 'Carregando…',\n      noOptionsText: 'Sem opções',\n      openText: 'Abrir'\n    },\n    MuiAlert: {\n      closeText: 'Fechar'\n    },\n    MuiPagination: {\n      'aria-label': 'Navegar pela paginação',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'Ir para a '}página ${page}`;\n        }\n\n        if (type === 'first') {\n          return 'Ir para a primeira página';\n        }\n\n        if (type === 'last') {\n          return 'Ir para a última página';\n        }\n\n        if (type === 'next') {\n          return 'Ir para a próxima página';\n        } // if (type === 'previous') {\n\n\n        return 'Ir para a página anterior';\n      }\n    }\n  }\n};\nexport const ptPT = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Mostrar caminho'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Primeira página';\n        }\n\n        if (type === 'last') {\n          return 'Última página';\n        }\n\n        if (type === 'next') {\n          return 'Próxima página';\n        } // if (type === 'previous') {\n\n\n        return 'Página anterior';\n      },\n      labelRowsPerPage: 'Linhas por página:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} de ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Estrela${value !== 1 ? 's' : ''}`,\n      emptyLabelText: 'Vazio'\n    },\n    MuiAutocomplete: {\n      clearText: 'Limpar',\n      closeText: 'Fechar',\n      loadingText: 'A carregar…',\n      noOptionsText: 'Sem opções',\n      openText: 'Abrir'\n    },\n    MuiAlert: {\n      closeText: 'Fechar'\n    },\n    MuiPagination: {\n      'aria-label': 'Navegar por páginas',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'Ir para a '}página ${page}`;\n        }\n\n        if (type === 'first') {\n          return 'Primeira página';\n        }\n\n        if (type === 'last') {\n          return 'Última página';\n        }\n\n        if (type === 'next') {\n          return 'Próxima página';\n        } // if (type === 'previous') {\n\n\n        return 'Página anterior';\n      }\n    }\n  }\n};\nexport const roRO = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Arată calea'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Mergi la prima pagină';\n        }\n\n        if (type === 'last') {\n          return 'Mergi la ultima pagină';\n        }\n\n        if (type === 'next') {\n          return 'Mergi la pagina următoare';\n        } // if (type === 'previous') {\n\n\n        return 'Mergi la pagina precedentă';\n      },\n      labelRowsPerPage: 'Rânduri pe pagină:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} din ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} St${value !== 1 ? 'ele' : 'ea'}`,\n      emptyLabelText: 'Gol'\n    },\n    MuiAutocomplete: {\n      clearText: 'Șterge',\n      closeText: 'Închide',\n      loadingText: 'Se încarcă…',\n      noOptionsText: 'Nicio opțiune',\n      openText: 'Deschide'\n    },\n    MuiAlert: {\n      closeText: 'Închide'\n    },\n    MuiPagination: {\n      'aria-label': 'Navigare prin paginare',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'Mergi la '}pagina ${page}`;\n        }\n\n        if (type === 'first') {\n          return 'Mergi la prima pagină';\n        }\n\n        if (type === 'last') {\n          return 'Mergi la ultima pagină';\n        }\n\n        if (type === 'next') {\n          return 'Mergi la pagina următoare';\n        } // if (type === 'previous') {\n\n\n        return 'Mergi la pagina precedentă';\n      }\n    }\n  }\n};\nexport const ruRU = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Показать полный путь'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Перейти на первую страницу';\n        }\n\n        if (type === 'last') {\n          return 'Перейти на последнюю страницу';\n        }\n\n        if (type === 'next') {\n          return 'Перейти на следующую страницу';\n        } // if (type === 'previous') {\n\n\n        return 'Перейти на предыдущую страницу';\n      },\n      labelRowsPerPage: 'Строк на странице:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} из ${count !== -1 ? count : `более чем ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => {\n        let pluralForm = 'Звёзд';\n        const lastDigit = value % 10;\n\n        if (lastDigit > 1 && lastDigit < 5) {\n          pluralForm = 'Звезды';\n        } else if (lastDigit === 1) {\n          pluralForm = 'Звезда';\n        }\n\n        return `${value} ${pluralForm}`;\n      },\n      emptyLabelText: 'Рейтинг отсутствует'\n    },\n    MuiAutocomplete: {\n      clearText: 'Очистить',\n      closeText: 'Закрыть',\n      loadingText: 'Загрузка…',\n      noOptionsText: 'Нет доступных вариантов',\n      openText: 'Открыть'\n    },\n    MuiAlert: {\n      closeText: 'Закрыть'\n    },\n    MuiPagination: {\n      'aria-label': 'Навигация по страницам',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          if (selected) return `${page} страница`;\n          return `Перейти на ${page} страницу`;\n        }\n\n        if (type === 'first') {\n          return 'Перейти на первую страницу';\n        }\n\n        if (type === 'last') {\n          return 'Перейти на последнюю страницу';\n        }\n\n        if (type === 'next') {\n          return 'Перейти на следующую страницу';\n        } // if (type === 'previous') {\n\n\n        return 'Перейти на предыдущую страницу';\n      }\n    }\n  }\n};\nexport const skSK = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiTablePagination: {\n      // getItemAriaLabel: (type) => {\n      //   if (type === 'first') {\n      //     return 'Go to first page';\n      //   }\n      //   if (type === 'last') {\n      //     return 'Go to last page';\n      //   }\n      //   if (type === 'next') {\n      //     return 'Go to next page';\n      //   }\n      //   // if (type === 'previous') {\n      //   return 'Go to previous page';\n      // },\n      labelRowsPerPage: 'Riadkov na stránke:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} z ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => {\n        if (value === 1) {\n          return `${value} hviezdička`;\n        }\n\n        if (value >= 2 && value <= 4) {\n          return `${value} hviezdičky`;\n        }\n\n        return `${value} hviezdičiek`;\n      } // emptyLabelText: 'Empty',\n\n    },\n    MuiAutocomplete: {\n      clearText: 'Vymazať',\n      closeText: 'Zavrieť',\n      loadingText: 'Načítanie…',\n      noOptionsText: 'Žiadne možnosti',\n      openText: 'Otvoriť'\n    },\n    MuiAlert: {\n      closeText: 'Zavrieť'\n    } // MuiPagination: {\n    //   'aria-label': 'Pagination navigation',\n    //   getItemAriaLabel: (type, page, selected) => {\n    //     if (type === 'page') {\n    //       return `${selected ? '' : 'Go to '}page ${page}`;\n    //     }\n    //     if (type === 'first') {\n    //       return 'Go to first page';\n    //     }\n    //     if (type === 'last') {\n    //       return 'Go to last page';\n    //     }\n    //     if (type === 'next') {\n    //       return 'Go to next page';\n    //     }\n    //     // if (type === 'previous') {\n    //     return 'Go to previous page';\n    //   },\n    // },\n\n  }\n};\nexport const svSE = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiTablePagination: {\n      // getItemAriaLabel: (type) => {\n      //   if (type === 'first') {\n      //     return 'Go to first page';\n      //   }\n      //   if (type === 'last') {\n      //     return 'Go to last page';\n      //   }\n      //   if (type === 'next') {\n      //     return 'Go to next page';\n      //   }\n      //   // if (type === 'previous') {\n      //   return 'Go to previous page';\n      // },\n      labelRowsPerPage: 'Rader per sida:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} av ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} ${value !== 1 ? 'Stjärnor' : 'Stjärna'}` // emptyLabelText: 'Empty',\n\n    },\n    MuiAutocomplete: {\n      clearText: 'Rensa',\n      closeText: 'Stäng',\n      loadingText: 'Laddar…',\n      noOptionsText: 'Inga alternativ',\n      openText: 'Öppen'\n    },\n    MuiAlert: {\n      closeText: 'Stäng'\n    } // MuiPagination: {\n    //   'aria-label': 'Pagination navigation',\n    //   getItemAriaLabel: (type, page, selected) => {\n    //     if (type === 'page') {\n    //       return `${selected ? '' : 'Go to '}page ${page}`;\n    //     }\n    //     if (type === 'first') {\n    //       return 'Go to first page';\n    //     }\n    //     if (type === 'last') {\n    //       return 'Go to last page';\n    //     }\n    //     if (type === 'next') {\n    //       return 'Go to next page';\n    //     }\n    //     // if (type === 'previous') {\n    //     return 'Go to previous page';\n    //   },\n    // },\n\n  }\n};\nexport const trTR = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Yolu göster'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'İlk sayfaya git';\n        }\n\n        if (type === 'last') {\n          return 'Son sayfaya git';\n        }\n\n        if (type === 'next') {\n          return 'Sonraki sayfaya git';\n        } // if (type === 'previous') {\n\n\n        return 'Önceki sayfaya git';\n      },\n      labelRowsPerPage: 'Sayfa başına satır:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} tanesinden ${count !== -1 ? count : `more than ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} Yıldız`,\n      emptyLabelText: 'Boş'\n    },\n    MuiAutocomplete: {\n      clearText: 'Temizle',\n      closeText: 'Kapat',\n      loadingText: 'Yükleniyor…',\n      noOptionsText: 'Seçenek yok',\n      openText: 'Aç'\n    },\n    MuiAlert: {\n      closeText: 'Kapat'\n    },\n    MuiPagination: {\n      'aria-label': 'Sayfa navigasyonu',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${page}. ${selected ? 'sayfa' : 'sayfaya git'}`;\n        }\n\n        if (type === 'first') {\n          return 'İlk sayfaya git';\n        }\n\n        if (type === 'last') {\n          return 'Son sayfaya git';\n        }\n\n        if (type === 'next') {\n          return 'Sonraki sayfaya git';\n        } // if (type === 'previous') {\n\n\n        return 'Önceki sayfaya git';\n      }\n    }\n  }\n};\nexport const ukUA = {\n  props: {\n    MuiBreadcrumbs: {\n      expandText: 'Показати шлях сторінок'\n    },\n    MuiTablePagination: {\n      getItemAriaLabel: type => {\n        if (type === 'first') {\n          return 'Перейти на першу сторінку';\n        }\n\n        if (type === 'last') {\n          return 'Перейти на останню сторінку';\n        }\n\n        if (type === 'next') {\n          return 'Перейти на наступну сторінку';\n        } // if (type === 'previous') {\n\n\n        return 'Перейти на попередню сторінку';\n      },\n      labelRowsPerPage: 'Рядків на сторінці:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} з ${count !== -1 ? count : `понад ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => {\n        let pluralForm = 'Зірок';\n        const lastDigit = value % 10;\n\n        if (lastDigit > 1 && lastDigit < 5) {\n          pluralForm = 'Зірки';\n        } else if (lastDigit === 1) {\n          pluralForm = 'Зірка';\n        }\n\n        return `${value} ${pluralForm}`;\n      },\n      emptyLabelText: 'Рейтинг відсутній'\n    },\n    MuiAutocomplete: {\n      clearText: 'Очистити',\n      closeText: 'Згорнути',\n      loadingText: 'Завантаження…',\n      noOptionsText: 'Немає варіантів',\n      openText: 'Розгорнути'\n    },\n    MuiAlert: {\n      closeText: 'Згорнути'\n    },\n    MuiPagination: {\n      'aria-label': 'Навігація сторінками',\n      getItemAriaLabel: (type, page, selected) => {\n        if (type === 'page') {\n          return `${selected ? '' : 'Перейти на '}сторінку ${page}`;\n        }\n\n        if (type === 'first') {\n          return 'Перейти на першу сторінку';\n        }\n\n        if (type === 'last') {\n          return 'Перейти на останню сторінку';\n        }\n\n        if (type === 'next') {\n          return 'Перейти на наступну сторінку';\n        } // if (type === 'previous') {\n\n\n        return 'Перейти на попередню сторінку';\n      }\n    }\n  }\n};\nexport const viVN = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiTablePagination: {\n      // getItemAriaLabel: (type) => {\n      //   if (type === 'first') {\n      //     return 'Go to first page';\n      //   }\n      //   if (type === 'last') {\n      //     return 'Go to last page';\n      //   }\n      //   if (type === 'next') {\n      //     return 'Go to next page';\n      //   }\n      //   // if (type === 'previous') {\n      //   return 'Go to previous page';\n      // },\n      labelRowsPerPage: 'Số hàng mỗi trang:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} trong ${count !== -1 ? count : `nhiều hơn ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} sao`,\n      emptyLabelText: 'Trống'\n    },\n    MuiAutocomplete: {\n      clearText: 'Xóa',\n      closeText: 'Đóng',\n      loadingText: 'Đang tải…',\n      noOptionsText: 'Không có lựa chọn',\n      openText: 'Mở'\n    },\n    MuiAlert: {\n      closeText: 'Đóng'\n    } // MuiPagination: {\n    //   'aria-label': 'Pagination navigation',\n    //   getItemAriaLabel: (type, page, selected) => {\n    //     if (type === 'page') {\n    //       return `${selected ? '' : 'Go to '}page ${page}`;\n    //     }\n    //     if (type === 'first') {\n    //       return 'Go to first page';\n    //     }\n    //     if (type === 'last') {\n    //       return 'Go to last page';\n    //     }\n    //     if (type === 'next') {\n    //       return 'Go to next page';\n    //     }\n    //     // if (type === 'previous') {\n    //     return 'Go to previous page';\n    //   },\n    // },\n\n  }\n};\nexport const zhCN = {\n  props: {\n    // MuiBreadcrumbs: {\n    //   expandText: 'Show path',\n    // },\n    MuiTablePagination: {\n      // getItemAriaLabel: (type) => {\n      //   if (type === 'first') {\n      //     return 'Go to first page';\n      //   }\n      //   if (type === 'last') {\n      //     return 'Go to last page';\n      //   }\n      //   if (type === 'next') {\n      //     return 'Go to next page';\n      //   }\n      //   // if (type === 'previous') {\n      //   return 'Go to previous page';\n      // },\n      labelRowsPerPage: '每页行数:',\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => `${from}-${to} 的 ${count !== -1 ? count : `超过 ${to}`}`\n    },\n    MuiRating: {\n      getLabelText: value => `${value} 星${value !== 1 ? '星' : ''}` // emptyLabelText: 'Empty',\n\n    },\n    MuiAutocomplete: {\n      clearText: '明确',\n      closeText: '关',\n      loadingText: '载入中…',\n      noOptionsText: '没有选择',\n      openText: '打开'\n    },\n    MuiAlert: {\n      closeText: '关'\n    } // MuiPagination: {\n    //   'aria-label': 'Pagination navigation',\n    //   getItemAriaLabel: (type, page, selected) => {\n    //     if (type === 'page') {\n    //       return `${selected ? '' : 'Go to '}page ${page}`;\n    //     }\n    //     if (type === 'first') {\n    //       return 'Go to first page';\n    //     }\n    //     if (type === 'last') {\n    //       return 'Go to last page';\n    //     }\n    //     if (type === 'next') {\n    //       return 'Go to next page';\n    //     }\n    //     // if (type === 'previous') {\n    //     return 'Go to previous page';\n    //   },\n    // },\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}