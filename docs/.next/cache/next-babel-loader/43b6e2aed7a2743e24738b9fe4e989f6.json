{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement; // *https://www.registers.service.gov.uk/registers/country/use-the-api*\n\nimport fetch from 'cross-fetch';\nimport React from 'react';\nimport TextField from \"../../../../../packages/material-ui/src/TextField\";\nimport Autocomplete from \"../../../../../packages/material-ui-lab/src/Autocomplete\";\nimport CircularProgress from \"../../../../../packages/material-ui/src/CircularProgress\";\n\nfunction sleep() {\n  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return new _Promise(function (resolve) {\n    setTimeout(resolve, delay);\n  });\n}\n\nvar _ref2 = __jsx(CircularProgress, {\n  color: \"inherit\",\n  size: 20\n});\n\nexport default function Asynchronous() {\n  var _React$useState = React.useState(false),\n      open = _React$useState[0],\n      setOpen = _React$useState[1];\n\n  var _React$useState2 = React.useState([]),\n      options = _React$useState2[0],\n      setOptions = _React$useState2[1];\n\n  var loading = open && options.length === 0;\n  React.useEffect(function () {\n    var active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, countries;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('https://country.register.gov.uk/records.json?page-size=5000');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return sleep(1e3);\n\n            case 5:\n              _context.next = 7;\n              return response.json();\n\n            case 7:\n              countries = _context.sent;\n\n              if (active) {\n                setOptions(_Object$keys(countries).map(function (key) {\n                  return countries[key].item[0];\n                }));\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n\n    return function () {\n      active = false;\n    };\n  }, [loading]);\n  React.useEffect(function () {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n  return __jsx(Autocomplete, {\n    id: \"asynchronous-demo\",\n    style: {\n      width: 300\n    },\n    open: open,\n    onOpen: function onOpen() {\n      setOpen(true);\n    },\n    onClose: function onClose() {\n      setOpen(false);\n    },\n    getOptionSelected: function getOptionSelected(option, value) {\n      return option.name === value.name;\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return option.name;\n    },\n    options: options,\n    loading: loading,\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        label: \"Asynchronous\",\n        variant: \"outlined\",\n        InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n          endAdornment: __jsx(React.Fragment, null, loading ? _ref2 : null, params.InputProps.endAdornment)\n        })\n      }));\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}