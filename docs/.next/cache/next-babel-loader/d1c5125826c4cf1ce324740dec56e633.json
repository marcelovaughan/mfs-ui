{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport capitalize from \"../utils/capitalize\";\nimport withStyles from \"../styles/withStyles\";\nimport useTheme from \"../styles/useTheme\";\n\nconst styles = theme => {\n  const hidden = {\n    display: 'none'\n  };\n  return theme.breakpoints.keys.reduce((acc, key) => {\n    acc[`only${capitalize(key)}`] = {\n      [theme.breakpoints.only(key)]: hidden\n    };\n    acc[`${key}Up`] = {\n      [theme.breakpoints.up(key)]: hidden\n    };\n    acc[`${key}Down`] = {\n      [theme.breakpoints.down(key)]: hidden\n    };\n    return acc;\n  }, {});\n};\n/**\n * @ignore - internal component.\n */\n\n\nfunction HiddenCss(props) {\n  const {\n    children,\n    classes,\n    className,\n    only\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"only\"]);\n\n  const theme = useTheme();\n\n  if (false) {\n    const unknownProps = Object.keys(other).filter(propName => {\n      const isUndeclaredBreakpoint = !theme.breakpoints.keys.some(breakpoint => {\n        return `${breakpoint}Up` === propName || `${breakpoint}Down` === propName;\n      });\n      return isUndeclaredBreakpoint;\n    });\n\n    if (unknownProps.length > 0) {\n      console.error(`Material-UI: Unsupported props received by \\`<Hidden implementation=\"css\" />\\`: ${unknownProps.join(', ')}. Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?`);\n    }\n  }\n\n  const clsx = [];\n\n  if (className) {\n    clsx.push(className);\n  }\n\n  for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {\n    const breakpoint = theme.breakpoints.keys[i];\n    const breakpointUp = props[`${breakpoint}Up`];\n    const breakpointDown = props[`${breakpoint}Down`];\n\n    if (breakpointUp) {\n      clsx.push(classes[`${breakpoint}Up`]);\n    }\n\n    if (breakpointDown) {\n      clsx.push(classes[`${breakpoint}Down`]);\n    }\n  }\n\n  if (only) {\n    const onlyBreakpoints = Array.isArray(only) ? only : [only];\n    onlyBreakpoints.forEach(breakpoint => {\n      clsx.push(classes[`only${capitalize(breakpoint)}`]);\n    });\n  }\n\n  return __jsx(\"div\", {\n    className: clsx.join(' ')\n  }, children);\n}\n\nexport default withStyles(styles, {\n  name: 'PrivateHiddenCss'\n})(HiddenCss);","map":null,"metadata":{},"sourceType":"module"}