{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-styles/src/ThemeProvider/ThemeProvider.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from \"../../../material-ui-utils/src\";\nimport ThemeContext from \"../useTheme/ThemeContext\";\nimport useTheme from \"../useTheme\";\nimport nested from \"./nested\"; // To support composition of theme.\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    var mergedTheme = localTheme(outerTheme);\n\n    if (true) {\n      if (!mergedTheme) {\n        console.error(['Material-UI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return _objectSpread(_objectSpread({}, outerTheme), localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme;\n  var outerTheme = useTheme();\n\n  if (true) {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['Material-UI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  var theme = React.useMemo(function () {\n    var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return __jsx(ThemeContext.Provider, {\n    value: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 10\n    }\n  }, children);\n}\n\nThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n};\n\nif (true) {\n  ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes);\n}\n\nexport default ThemeProvider;","map":{"version":3,"sources":["/home/marcelo.faria/Documentos/b2w/msf-ui/packages/material-ui-styles/src/ThemeProvider/ThemeProvider.js"],"names":["React","PropTypes","exactProp","ThemeContext","useTheme","nested","mergeOuterLocalTheme","outerTheme","localTheme","mergedTheme","console","error","join","ThemeProvider","props","children","theme","useMemo","output","propTypes","node","isRequired","oneOfType","object","func"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT;AACA,OAAOC,YAAP;AACA,OAAOC,QAAP;AACA,OAAOC,MAAP,iB,CAEA;;AACA,SAASC,oBAAT,CAA8BC,UAA9B,EAA0CC,UAA1C,EAAsD;AACpD,MAAI,OAAOA,UAAP,KAAsB,UAA1B,EAAsC;AACpC,QAAMC,WAAW,GAAGD,UAAU,CAACD,UAAD,CAA9B;;AAEA,cAA2C;AACzC,UAAI,CAACE,WAAL,EAAkB;AAChBC,QAAAA,OAAO,CAACC,KAAR,CACE,CACE,yEADF,EAEE,sCAFF,EAGEC,IAHF,CAGO,IAHP,CADF;AAMD;AACF;;AAED,WAAOH,WAAP;AACD;;AAED,yCAAYF,UAAZ,GAA2BC,UAA3B;AACD;AAED;;;;;;;AAKA,SAASK,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,MACpBC,QADoB,GACYD,KADZ,CACpBC,QADoB;AAAA,MACHP,UADG,GACYM,KADZ,CACVE,KADU;AAE5B,MAAMT,UAAU,GAAGH,QAAQ,EAA3B;;AAEA,YAA2C;AACzC,QAAIG,UAAU,KAAK,IAAf,IAAuB,OAAOC,UAAP,KAAsB,UAAjD,EAA6D;AAC3DE,MAAAA,OAAO,CAACC,KAAR,CACE,CACE,sFADF,EAEE,oDAFF,EAGE,EAHF,EAIE,qCAJF,EAKE,oEACE,4BANJ,EAOEC,IAPF,CAOO,IAPP,CADF;AAUD;AACF;;AAED,MAAMI,KAAK,GAAGhB,KAAK,CAACiB,OAAN,CAAc,YAAM;AAChC,QAAMC,MAAM,GAAGX,UAAU,KAAK,IAAf,GAAsBC,UAAtB,GAAmCF,oBAAoB,CAACC,UAAD,EAAaC,UAAb,CAAtE;;AAEA,QAAIU,MAAM,IAAI,IAAd,EAAoB;AAClBA,MAAAA,MAAM,CAACb,MAAD,CAAN,GAAiBE,UAAU,KAAK,IAAhC;AACD;;AAED,WAAOW,MAAP;AACD,GARa,EAQX,CAACV,UAAD,EAAaD,UAAb,CARW,CAAd;AAUA,SAAO,MAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAES,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCD,QAAtC,CAAP;AACD;;AAEDF,aAAa,CAACM,SAAd,GAA0B;AACxB;;;AAGAJ,EAAAA,QAAQ,EAAEd,SAAS,CAACmB,IAAV,CAAeC,UAJD;;AAKxB;;;AAGAL,EAAAA,KAAK,EAAEf,SAAS,CAACqB,SAAV,CAAoB,CAACrB,SAAS,CAACsB,MAAX,EAAmBtB,SAAS,CAACuB,IAA7B,CAApB,EAAwDH;AARvC,CAA1B;;AAWA,UAA2C;AACzCR,EAAAA,aAAa,CAACM,SAAd,GAA0BjB,SAAS,CAACW,aAAa,CAACM,SAAf,CAAnC;AACD;;AAED,eAAeN,aAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested';\n\n// To support composition of theme.\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    const mergedTheme = localTheme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(\n          [\n            'Material-UI: You should return an object from your theme function, i.e.',\n            '<ThemeProvider theme={() => ({})} />',\n          ].join('\\n'),\n        );\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return { ...outerTheme, ...localTheme };\n}\n\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\nfunction ThemeProvider(props) {\n  const { children, theme: localTheme } = props;\n  const outerTheme = useTheme();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(\n        [\n          'Material-UI: You are providing a theme function prop to the ThemeProvider component:',\n          '<ThemeProvider theme={outerTheme => outerTheme} />',\n          '',\n          'However, no outer theme is present.',\n          'Make sure a theme is already injected higher in the React tree ' +\n            'or provide a theme object.',\n        ].join('\\n'),\n      );\n    }\n  }\n\n  const theme = React.useMemo(() => {\n    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n\n  return <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>;\n}\n\nThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired,\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes);\n}\n\nexport default ThemeProvider;\n"]},"metadata":{},"sourceType":"module"}